import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-e2b03a9b.js";const e={},t=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>面向对象的力量</p></div><h2 id="面向对象的思想" tabindex="-1"><a class="header-anchor" href="#面向对象的思想" aria-hidden="true">#</a> 面向对象的思想</h2><p>把现实中的事物全部看成一个个的对象来解决问题，就使得代码看起来很像人的语言。</p><p><strong>Java中需要先定义类，才能创建对象。</strong></p><p><strong>类是相同事物共同特征的描述，对象是具体存在的实例</strong></p><h2 id="定义类的注意事项" tabindex="-1"><a class="header-anchor" href="#定义类的注意事项" aria-hidden="true">#</a> 定义类的注意事项</h2><p>类名注意首字母大写，满足驼峰命名法。例如（Student ；Person；Book；Movie）</p><p>一个Java文件中可以定义多个类，但是只能有一个类是用public修饰符，而且public的修饰符的类也必须是Java文件名相同</p><p><strong>规范：建议一个Java文件只定义一个类</strong></p><h4 id="类中成分" tabindex="-1"><a class="header-anchor" href="#类中成分" aria-hidden="true">#</a> 类中成分</h4><p>类中可以定义的5大成分：<strong>成员变量</strong>，<strong>构造器（无参，有参）</strong>，<strong>成员方法（getter，setter，toString...）</strong>，代码块，内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、成员变量</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">//2、构造器 分为有参和无参构造器，如果不写构造器，在类内会默认存在一个无参构造器，如果需要写有参构造器，无参构造器会被重载，最好再把无参构造器写出来，否则可能出现new一个无参对象报错。</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3、成员方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字" aria-hidden="true">#</a> this关键字</h4><p>作用：出现在成员方法，构造器中代表当前对象的地址，用于指定访问当前对象的成员变量，成员方法。</p><p>this出现在构造器或者方法中，哪个对象调用它，this就代表哪个对象。</p><h2 id="面向对象-内存机制" tabindex="-1"><a class="header-anchor" href="#面向对象-内存机制" aria-hidden="true">#</a> 面向对象:内存机制</h2><p>首先准备一个汽车类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">day02</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token comment">//    成员变量(属性)</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">double</span> price<span class="token punctuation">;</span>

    <span class="token comment">//    方法(行为)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;启动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;价格是&quot;</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">&quot;的&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;跑的贼快！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学生类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">day02</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
    <span class="token class-name">String</span> hobby<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;名称:&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;性别:&quot;</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token string">&quot;爱好:&quot;</span> <span class="token operator">+</span> hobby <span class="token operator">+</span> <span class="token string">&quot;的学生开始学习了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两个对象内存分析" tabindex="-1"><a class="header-anchor" href="#两个对象内存分析" aria-hidden="true">#</a> 两个对象内存分析</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">day02</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">day02<span class="token punctuation">.</span>d1OOPArrayList<span class="token punctuation">.</span></span><span class="token class-name">Car</span></span><span class="token punctuation">;</span>

<span class="token comment">//两个对象内存分析</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Car</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;宝马&quot;</span><span class="token punctuation">;</span>
        car1<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">50.88</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        car1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;奔驰&quot;</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car2<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181714159.png" alt="image-20220807093237996" tabindex="0" loading="lazy"><figcaption>image-20220807093237996</figcaption></figure><ol><li>首先方法区加载Test.class文件以及执行main方法</li><li>发现main方法中需要创建Car对象于是方法区中加载Car.class文件(成员变量、成员方法)</li><li>在堆内存中开辟一块内存用于存储new Car()产生的对象(包含成员变量以及成员方法的引用地址)，再把对象的地址交给c1实例存储</li><li>......</li></ol><h4 id="两个变量指向同一个对象内存图" tabindex="-1"><a class="header-anchor" href="#两个变量指向同一个对象内存图" aria-hidden="true">#</a> 两个变量指向同一个对象内存图</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">day02</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">day02<span class="token punctuation">.</span>d1OOPArrayList<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token char">&#39;男&#39;</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&quot;打篮球&quot;</span><span class="token punctuation">;</span>
        s1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Student</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&quot;爱提问&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s2<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181714020.png" alt="image-20220807094538111" tabindex="0" loading="lazy"><figcaption>image-20220807094538111</figcaption></figure><h4 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h4><ul><li>注意：当我们堆内存中的对象，没有被任何变量引用(指向)时，就会被判定为内存中的&quot;垃圾&quot;。</li><li>Java存在自动垃圾回收器，会定期自动清理 堆内存中没人引用的对象</li></ul><h2 id="面向对象的三大特征" tabindex="-1"><a class="header-anchor" href="#面向对象的三大特征" aria-hidden="true">#</a> 面向对象的三大特征</h2><h4 id="面向对象的三大特征-封装、继承、多态。" tabindex="-1"><a class="header-anchor" href="#面向对象的三大特征-封装、继承、多态。" aria-hidden="true">#</a> 面向对象的三大特征：封装、继承、多态。</h4><h4 id="封装-标准javabean" tabindex="-1"><a class="header-anchor" href="#封装-标准javabean" aria-hidden="true">#</a> 封装 标准JavaBean</h4><p>封装的基本思想：合理隐藏（隐藏细节），合理暴露（提供访问入口）</p><p>封装步骤：通常将成员变量私有、提供方法进行暴露。</p><p>封装作用：提高业务功能的设计的安全性，提高组件化。</p><h4 id="特征的含义" tabindex="-1"><a class="header-anchor" href="#特征的含义" aria-hidden="true">#</a> 特征的含义：</h4><h5 id="所谓特征就是已经成为java设计代码的特点-即使毫无意义-通常也需要满足这样的设计要求来编写代码。" tabindex="-1"><a class="header-anchor" href="#所谓特征就是已经成为java设计代码的特点-即使毫无意义-通常也需要满足这样的设计要求来编写代码。" aria-hidden="true">#</a> 所谓特征就是已经成为Java设计代码的特点，即使毫无意义，通常也需要满足这样的设计要求来编写代码。</h5><h4 id="javabean" tabindex="-1"><a class="header-anchor" href="#javabean" aria-hidden="true">#</a> JavaBean</h4><h5 id="也可以理解为实体类-其对象可以用于在程序中封装数据。" tabindex="-1"><a class="header-anchor" href="#也可以理解为实体类-其对象可以用于在程序中封装数据。" aria-hidden="true">#</a> 也可以理解为实体类，其对象可以用于在程序中封装数据。</h5><p>成员变量使用private修饰，提供每一个成员变量的setter/getter方法，必须提供一个无参构造器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> mail<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> hobbies<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbies</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> mail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mail <span class="token operator">=</span> mail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
                <span class="token string">&quot;, hobbies=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobbies<span class="token punctuation">)</span> <span class="token operator">+</span>
                <span class="token string">&quot;, mail=&#39;&quot;</span> <span class="token operator">+</span> mail <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="面向对象进阶" tabindex="-1"><a class="header-anchor" href="#面向对象进阶" aria-hidden="true">#</a> 面向对象进阶</h2><h3 id="static关键字" tabindex="-1"><a class="header-anchor" href="#static关键字" aria-hidden="true">#</a> static关键字</h3><h4 id="static关键字的作用-和修饰成员变量的用法" tabindex="-1"><a class="header-anchor" href="#static关键字的作用-和修饰成员变量的用法" aria-hidden="true">#</a> static关键字的作用，和修饰成员变量的用法</h4><p><strong>static是静态的意思，可以修饰成员变量，表示该成员变量只在内存中存储一份，可以被共享访问、修改。</strong>（例如在线人数）</p><p>静态成员变量（有static修饰，属于类，堆内存中加载一次）</p><p>实例成员变量（无static修饰，存在于每个对象中）</p><h4 id="static修饰成员变量的内存原理" tabindex="-1"><a class="header-anchor" href="#static修饰成员变量的内存原理" aria-hidden="true">#</a> static修饰成员变量的内存原理</h4><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181714498.png" alt="image-20220807155545218" tabindex="0" loading="lazy"><figcaption>image-20220807155545218</figcaption></figure><ol><li>首先user.class文件加载到方法区，加载类的同时会加载静态成员变量，因为静态成员变量属于类（加载一次，被共享访问，而且在堆内存中）。</li><li>在栈内存中加载执行main方法</li></ol><h4 id="成员方法的分类" tabindex="-1"><a class="header-anchor" href="#成员方法的分类" aria-hidden="true">#</a> 成员方法的分类</h4><p>静态成员方法：有static关键字修饰，属于类，推荐使用类名访问，也可以使用对象访问</p><p>实例成员方法：无static关键字修饰，属于对象，只能用于对象触发访问。</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181714739.png" alt="image-20220807160857697" tabindex="0" loading="lazy"><figcaption>image-20220807160857697</figcaption></figure><h4 id="static的应用-工具类-工具类的案例" tabindex="-1"><a class="header-anchor" href="#static的应用-工具类-工具类的案例" aria-hidden="true">#</a> static的应用：工具类，工具类的案例</h4><p>验证码工具静态类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyTool</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 静态方法
     * <span class="token keyword">@param</span> <span class="token parameter">n</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1、使用String开发一个验证码</span>
        <span class="token class-name">String</span> chars <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//2、定义一个变量用于存储验证码</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//3、循环</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            code <span class="token operator">+=</span> chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//直接调用静态方法，提高代码的复用，减少代码的重复</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">VerifyTool</span><span class="token punctuation">.</span><span class="token function">createCode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="工具类原理和延伸" tabindex="-1"><a class="header-anchor" href="#工具类原理和延伸" aria-hidden="true">#</a> 工具类原理和延伸</h5><p>一次编写处处可用；</p><p>建议将工具类的构造器私有，不让工具类对外产生对象（节约内存）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerifyTool</span> <span class="token punctuation">{</span>


    <span class="token doc-comment comment">/**
     * 私有构造器！！！！！！！！！！！！！！（建议）因为可以节约内存，详细原因见下面的思考
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">VerifyTool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 静态方法
     * <span class="token keyword">@param</span> <span class="token parameter">n</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//1、使用String开发一个验证码</span>
        <span class="token class-name">String</span> chars <span class="token operator">=</span> <span class="token string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//2、定义一个变量用于存储验证码</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//3、循环</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            code <span class="token operator">+=</span> chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思考：为什么工具类中的方法不用实例方法去做？</p><p>答：实例方法需要创建对象调用，此时我们用对象仅仅只是要调用方法，这样只会浪费内存！</p><h3 id="static注意事项-面试常考" tabindex="-1"><a class="header-anchor" href="#static注意事项-面试常考" aria-hidden="true">#</a> static注意事项（面试常考）</h3><p>静态方法（static）只能访问静态成员，不可以直接访问实例的成员</p><p>实例方法可以访问静态的成员，也可以访问实例的成员</p><p>静态方法中是不可以出现static关键字的</p><h4 id="static应用知识-代码块" tabindex="-1"><a class="header-anchor" href="#static应用知识-代码块" aria-hidden="true">#</a> static应用知识（代码块）</h4><h5 id="代码块分为" tabindex="-1"><a class="header-anchor" href="#代码块分为" aria-hidden="true">#</a> 代码块分为：</h5><p>静态代码块：</p><p>格式：static</p><p>特点：需要使用static关键字修饰，<strong>随着类的加载而加载，并且自动触发，只执行一次</strong></p><p>使用场景：在类的加载的时候，做一些静态数据的初始化的操作，以便后续使用。</p><p>构造代码块（了解，用的少）：</p><p>格式</p><p>特点：每次创建对象，调用构造器时执行，都会执行该代码块中的代码，并且在构造器执行前执行。</p><p>使用场景：初始化实例资源。</p><h3 id="设计模式-面试" tabindex="-1"><a class="header-anchor" href="#设计模式-面试" aria-hidden="true">#</a> 设计模式（面试）</h3><h5 id="设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式" tabindex="-1"><a class="header-anchor" href="#设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式" aria-hidden="true">#</a> 设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式</h5><p>单例模式：可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。</p><p>应用场景：例如任务管理器，我们只需要一个就可以解决问题了，可以节约内存空间。</p><h5 id="饿汉单例" tabindex="-1"><a class="header-anchor" href="#饿汉单例" aria-hidden="true">#</a> 饿汉单例：</h5><p>在类获取对象的时候，对象已经提前为你创建好了。</p><h6 id="设计步骤" tabindex="-1"><a class="header-anchor" href="#设计步骤" aria-hidden="true">#</a> 设计步骤：</h6><p>定义一个类，把构造器私有</p><p>定义一个静态变量存储这个类的一个对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1、定义一个单例类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleInstance</span> <span class="token punctuation">{</span>

    <span class="token comment">//3、定义一个静态变量，存储一个对象即可：属于类，与类一起加载一次</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleInstance</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//2、单例必须私有构造器</span>
    <span class="token keyword">private</span> <span class="token class-name">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建了一个对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="懒汉单例" tabindex="-1"><a class="header-anchor" href="#懒汉单例" aria-hidden="true">#</a> 懒汉单例</h5><p>真正需要该对象的时候，才去创建一个对象。（延迟加载对象）</p><h6 id="设计步骤-1" tabindex="-1"><a class="header-anchor" href="#设计步骤-1" aria-hidden="true">#</a> 设计步骤</h6><p>定义一个类，把构造器私有。</p><p>定义一个静态变量，存储一个对象。</p><p>提供一个返回单例的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 1、懒汉单例模式
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleInstance2</span> <span class="token punctuation">{</span>

    <span class="token comment">//3、定义一个静态变量,属于类，与类一起加载一次,(不能初始化对象，因为它懒）</span>
<span class="token comment">//    public static SingleInstance2 instance;</span>
    <span class="token comment">//把静态成员变量设为私有，防止别人调用这个啥都没有的静态变量，会坑到人的</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleInstance2</span> instance<span class="token punctuation">;</span>

    <span class="token comment">//2、私有构造器</span>
    <span class="token keyword">private</span> <span class="token class-name">SingleInstance2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建了一个对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3、定义一个方法，让其他地方可以调用获取一个对象</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleInstance2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//首先判断是不是已经创建了一个对象，如果没有创建（第一次）就创建一个对象给静态变量，后续就有对象了，就不会再次创建对象了，保障多次创建的是同一个对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInstance2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承-面向对象三大特征之一" tabindex="-1"><a class="header-anchor" href="#继承-面向对象三大特征之一" aria-hidden="true">#</a> 继承（面向对象三大特征之一）</h3><h5 id="继承的基本介绍" tabindex="-1"><a class="header-anchor" href="#继承的基本介绍" aria-hidden="true">#</a> 继承的基本介绍</h5><p>什么是继承？</p><p>继承就是类与类之间的关系。</p><p>多个类可以单独继承某个类（就是一个类可以被多个类继承）</p><p>多个类称为子类（派生类），单独的类称为父类（或者基类，超类）</p><p>注意：Java不存在多继承（通俗的讲就是：一个类只能有一个父类）</p><p>为什么用继承？</p><p>继承的好处：提高代码的复用性，减少代码的重复性。</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181715713.png" alt="image-20220807183350757" tabindex="0" loading="lazy"><figcaption>image-20220807183350757</figcaption></figure><h5 id="继承设计规范" tabindex="-1"><a class="header-anchor" href="#继承设计规范" aria-hidden="true">#</a> 继承设计规范</h5><p>子类的共同特征放到父类中定义（比如学生和老师都可以继承人类，人类中有学生和老师共有的特征：姓名，年龄，身高，体重...），子类独有的方法要放在子类中单独定义（比如老师有工资，而大部分学生没有工资）</p><p>这时候可能会有人想：如果我们把子类所有的方法和属性都定义到人类里面，那子类里面是不是就可以什么都不定义了？</p><p>如果我们把子类所有的属性方法定义到父类，那么继承自父类的其他子类都会有这些属性方法，比如老师的工资定义到父类中，而学生继承父类，那么学生也就有工资了，这不符合逻辑！</p><h4 id="继承的内存运行原理" tabindex="-1"><a class="header-anchor" href="#继承的内存运行原理" aria-hidden="true">#</a> 继承的内存运行原理</h4><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181715405.png" alt="image-20220808075119129" tabindex="0" loading="lazy"><figcaption>image-20220808075119129</figcaption></figure><h4 id="继承的特点" tabindex="-1"><a class="header-anchor" href="#继承的特点" aria-hidden="true">#</a> 继承的特点</h4><ol><li>子类可以继承父类的属性和行为，但是子类不能继承父类的构造器</li><li>Java是单继承模式：一个类只能继承一个直接父类</li><li>Java不支持多继承（这点和C++不一样），但是支持多层继承。</li><li>Java中所有的类都是Object类的子类。（Object是祖宗）</li></ol><h5 id="子类是否可以继承父类的私有成员" tabindex="-1"><a class="header-anchor" href="#子类是否可以继承父类的私有成员" aria-hidden="true">#</a> 子类是否可以继承父类的私有成员?</h5><p>注意:是可以继承父类的私有成员的，只是不能直接访问</p><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181715017.png" alt="image-20220808075839612" style="zoom:50%;"><p>当我们new了一个子类构造器，在堆内存中会产生一个对象，而这个对象中是包含了父类成员空间(super)以及子类成员空间(this)，只是父类成员空间中的私有方法不能直接访问(从内存的角度来看是子类可以继承父类的所有属性和方法，只是能不能直接访问，后面我们可以通过反射暴力获取到子类对象的父类的私有方法)</p><h5 id="子类是否可以继承父类静态成员" tabindex="-1"><a class="header-anchor" href="#子类是否可以继承父类静态成员" aria-hidden="true">#</a> 子类是否可以继承父类静态成员?</h5><p>不能 ---&gt; 虽然子类可以直接使用父类的静态成员(这是共享的)，共享并非继承关系，在内存中只有一份</p><h5 id="在子类方法中访问成员-成员变量、成员方法-满足-就近原则" tabindex="-1"><a class="header-anchor" href="#在子类方法中访问成员-成员变量、成员方法-满足-就近原则" aria-hidden="true">#</a> 在子类方法中访问成员（成员变量、成员方法）满足：就近原则</h5><p>先在子类局部范围找</p><p>然后子类成员范围找</p><p>然后父类成员范围找，如果父类范围还没有找到就会报错</p><h5 id="重写" tabindex="-1"><a class="header-anchor" href="#重写" aria-hidden="true">#</a> 重写</h5><p>如果父类中的方法不能够满足子类的方法，在子类中可以对父类中的方法进行重写</p><h5 id="override重写注解" tabindex="-1"><a class="header-anchor" href="#override重写注解" aria-hidden="true">#</a> @Override重写注解</h5><p>@override是放在重写后的方法上的，作为重写是否正确的校验注解。</p><p>加上该注解后如果重写错误，编译阶段会出现错误提示</p><p>建议重写方法都加上@override注解，代码安全，优雅！</p><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项：</h5><p>重写方法的名称、形参列表必须与被重写的方法名称和参数列表一致。</p><p>私有方法不能被重写。</p><p>子类重写父类方法时，访问权限必须大于或者等于父类</p><p>子类也不能重写父类的静态方法。</p><h4 id="子类继承父类后构造器的特点" tabindex="-1"><a class="header-anchor" href="#子类继承父类后构造器的特点" aria-hidden="true">#</a> 子类继承父类后构造器的特点：</h4><p>子类中的构造器会默认先访问父类中的无参构造器，然后再执行自己</p><p>子类构造器的第一行语句默认都是：super()，不写也存在。</p><h2 id="包、权限修饰符" tabindex="-1"><a class="header-anchor" href="#包、权限修饰符" aria-hidden="true">#</a> 包、权限修饰符</h2><p>包是用来分门别类管理各种不同的文件的，类似于文件夹，建包有利于项目管理和维护。</p><p>package 公司域名（com）.技术名称(springboot).javabean</p><p>包名建议全部小写，且具备意义</p><p>建包语句一般在第一行，IDEA工具会自动生成创建。</p><p>导包格式：包名.类名</p><h3 id="权限修饰符" tabindex="-1"><a class="header-anchor" href="#权限修饰符" aria-hidden="true">#</a> 权限修饰符</h3><p>控制一个对象能够被访问的范围</p><p>由小到大：private ---&gt;缺省 ---&gt;protect ---&gt;public</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181715674.png" alt="image-20220808090917489" tabindex="0" loading="lazy"><figcaption>image-20220808090917489</figcaption></figure><h3 id="final修饰符" tabindex="-1"><a class="header-anchor" href="#final修饰符" aria-hidden="true">#</a> final修饰符</h3><p>含有final修饰的类不能被继承，final修饰方法，不能被重写，</p><p>final修饰变量，变量有且只能被赋值一次(基本类型 数据值不能改变，引用类型 地址值不能改变 但是内容可以改变)</p><p>变量有几种：</p><p>局部变量；</p><p>成员变量：</p><p>--静态成员变量</p><p>--实例成员变量</p><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><p>常量是使用了<strong>public static final</strong> 修饰的成员变量，必须有初始化值，而且初始化之后不能被改变。</p><p>常量的作用和好处：可以用于做系统的配置信息，方便系统维护，同时也提高可读性。</p><p><strong>常量命名规范：英文单词全部大写，多个单词下划线连接起来</strong></p><p>这种方法在编译阶段会把常量名改为字面意思，在运行时提高一些性能。而且便于维护，改一个就可以修改全部</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCHOOL_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;安徽大学&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOGIN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">FinalTest</span><span class="token punctuation">.</span><span class="token constant">SCHOOL_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">LOGIN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><h3 id="枚举的概述" tabindex="-1"><a class="header-anchor" href="#枚举的概述" aria-hidden="true">#</a> 枚举的概述</h3><p>枚举是Java中的一种特殊类型</p><p>枚举的作用：<strong>做信息的标志和信息的分类</strong></p><h3 id="枚举的格式" tabindex="-1"><a class="header-anchor" href="#枚举的格式" aria-hidden="true">#</a> 枚举的格式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 枚举类 enum
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>
    <span class="token comment">//枚举第一列必须罗列枚举类的 对象 名称，建议全部大写</span>
    <span class="token constant">SPRING</span><span class="token punctuation">,</span><span class="token constant">SUMMER</span><span class="token punctuation">,</span><span class="token constant">AUTUMN</span><span class="token punctuation">,</span><span class="token constant">WINTER</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
反编译后的class文件

 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token constant">SPRING</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token constant">SUMMER</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token constant">AUTUMN</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token constant">WINTER</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">day02<span class="token punctuation">.</span>d2OOP<span class="token punctuation">.</span>d5_enum<span class="token punctuation">.</span></span>Season</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举的特征" tabindex="-1"><a class="header-anchor" href="#枚举的特征" aria-hidden="true">#</a> 枚举的特征：</h3><p>枚举类都是继承了java.lang.Enum类</p><p>枚举类都是最终类，不能被继承</p><p>枚举类的构造器时私有的，不能对外创建对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span></span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token static">SUMMER</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Test02</span> test02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test02<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">SUMMER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Season</span> season<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token constant">SPRING</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;万物复苏&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">SUMMER</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;夏日炎炎&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">AUTUMN</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;落霞与孤鹜齐飞，秋水共长天一色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token constant">WINTER</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;冬天到了，春天的脚步近了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h2><p>某个父类知道其所有的子类要完成某个功能，但是每个子类完成的情况不一样，父类就只定义该功能的基本要求，具体实现由子类完成，这个类就可以是一个抽象类，<strong>抽象类其实是一种不完全的设计图</strong></p><p><strong>抽象类必须使用abstract修饰：</strong></p><p>修饰符 <strong>abstract</strong> class 类名(){}</p><p>抽象方法：就是抽象类中定义的子类中必须完成的功能的具体要求。</p><p>修饰符 abstract 返回值类型 方法名称（形参列表）；</p><p>没有方法体，只有方法签名，必须用abstract修饰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>abstractDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>abstractDemo</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喵呜喵呜&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>abstractDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象类特征" tabindex="-1"><a class="header-anchor" href="#抽象类特征" aria-hidden="true">#</a> 抽象类特征：</h3><p>**有得有失：**得到了抽象方法，失去了创建对象的能力。</p><p><strong>抽象类为什么不能创建对象？<strong>因为抽象类如果能创建对象，那么我们用这个对象调用抽象类中的抽象方法，抽象方法</strong>没有方法体</strong>！所以抽象类不能创建对象！抽象类存在构造器而且还是公有的！因为子类继承抽象类就要首先调用抽象类的构造器，并**<br> 不是**因为抽象类的构造器私有化而导致抽象类不能创建对象的。</p><p>类有的成员（成员变量，方法，构造器），抽象类都具备。</p><p>抽象类中不一定有抽象方法，但是有抽象方法的一定是抽象类。</p><p>一个类继承了这个抽象类，那么这个类必须重写完抽象类中的所有方法，否则这个类也应该定义成为抽象类！</p><p>不能用abstract修饰变量、代码块、构造器。</p><h4 id="final和abstract是什么关系" tabindex="-1"><a class="header-anchor" href="#final和abstract是什么关系" aria-hidden="true">#</a> final和abstract是什么关系？</h4><h5 id="互斥关系" tabindex="-1"><a class="header-anchor" href="#互斥关系" aria-hidden="true">#</a> 互斥关系</h5><h2 id="接口interface" tabindex="-1"><a class="header-anchor" href="#接口interface" aria-hidden="true">#</a> 接口Interface</h2><p>什么是接口？</p><p>接口就是体现规范的，期中用抽象方法定义的一组行为规范，接口是更加彻底的抽象。</p><p>接口的定义和特点：</p><p>public interface 接口名{</p><p>//常量</p><p>//抽象方法</p><p>}</p><h3 id="接口的定义" tabindex="-1"><a class="header-anchor" href="#接口的定义" aria-hidden="true">#</a> 接口的定义：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>interfaceTest</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 定义一个电脑接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ComputerInterface</span> <span class="token punctuation">{</span>

    <span class="token comment">//JDK1.8之前接口中的成员只有 常量 和 抽象方法</span>
<span class="token comment">//    public static final String COMPUTER_NAME = &quot;MacBook&quot;;</span>
    <span class="token comment">//在接口中定义的默认就是静态常量</span>
    <span class="token class-name">String</span> <span class="token constant">COMPUTER_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;MacBook&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//    public abstract 可以省略不写</span>
    <span class="token keyword">void</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//USB接口</span>
    <span class="token keyword">void</span> <span class="token function">HDMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//高清接口</span>
    <span class="token keyword">void</span> <span class="token function">DP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数字式视频接口</span>
    <span class="token keyword">void</span> <span class="token function">type_c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//type-c接口</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口的实现" tabindex="-1"><a class="header-anchor" href="#接口的实现" aria-hidden="true">#</a> 接口的实现：</h3><p>接口是用来被实现的（implements）的，实现接口的类成为实现类，实现类可以理解为所谓的子类。</p><p>修饰符 class 实现类 implements 接口1,接口2,接口3...{</p><p>}</p><p>实现的关键字implements</p><p>接口可以被类单实现，也可以被类多实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>interfaceTest</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 外设
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Peripherals</span> <span class="token keyword">implements</span> <span class="token class-name">ComputerInterface</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没有USB接口 -_-!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">HDMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;也没有&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;还是没有&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type_c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;嘿嘿，有两个，一个电源线接口，另一个空着~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ComputerInterface</span><span class="token punctuation">.</span><span class="token constant">COMPUTER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Peripherals</span> peripherals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peripherals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        peripherals<span class="token punctuation">.</span><span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        peripherals<span class="token punctuation">.</span><span class="token function">HDMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        peripherals<span class="token punctuation">.</span><span class="token function">DP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        peripherals<span class="token punctuation">.</span><span class="token function">type_c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口可以多继承" tabindex="-1"><a class="header-anchor" href="#接口可以多继承" aria-hidden="true">#</a> 接口可以多继承</h3><ul><li>规范整合，整合多个接口为同一个接口，便于子类实现</li></ul><h3 id="接口新增方法、注意事项-了解" tabindex="-1"><a class="header-anchor" href="#接口新增方法、注意事项-了解" aria-hidden="true">#</a> 接口新增方法、注意事项（了解）</h3><p>注意：</p><ul><li><strong>接口不能创建对象</strong>！</li><li><strong>一个类可以实现多个接口，多个接口中有同样的静态方法不冲突(原因接口的静态方法只能接口自己调用)</strong></li><li><strong>一个类继承了父类，同时又实现接口，父类中和接口中有同名的方法，默认使用父类的</strong></li><li><strong>一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可</strong></li><li><strong>一个接口继承了多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承</strong></li></ul><h5 id="jdk8开始接口新增了一些方法" tabindex="-1"><a class="header-anchor" href="#jdk8开始接口新增了一些方法" aria-hidden="true">#</a> JDK8开始接口新增了一些方法：</h5><h5 id="默认方法" tabindex="-1"><a class="header-anchor" href="#默认方法" aria-hidden="true">#</a> 默认方法</h5><ul><li>类似之前写的普通实例方法:必须使用default修饰</li><li>默认会public修饰。需要使用接口的实现类的对象来调用</li></ul><h5 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h5><ul><li>默认会public修饰，必须用static修饰</li><li><strong>接口的静态方法必须使用本身接口名来调用</strong></li></ul><h5 id="私有方法" tabindex="-1"><a class="header-anchor" href="#私有方法" aria-hidden="true">#</a> 私有方法</h5><ul><li>就是私有的实例方法；必须使用private修饰，从<strong>JDK1.9才开始有的</strong></li><li>只能在本类中其他的默认方法或者私有方法访问</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>interfaceTest</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 定义一个电脑接口
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ComputerInterface01</span> <span class="token punctuation">{</span>

    <span class="token comment">//JDK1.8之前接口中的成员只有 常量 和 抽象方法</span>
<span class="token comment">//    public static final String COMPUTER_NAME = &quot;MacBook&quot;;</span>
    <span class="token comment">//在接口中定义的默认就是静态常量</span>
    <span class="token comment">//String COMPUTER_NAME = &quot;MacBook&quot;;</span>
<span class="token comment">//    public abstract 可以省略不写</span>
<span class="token comment">//    void USB();//USB接口</span>
<span class="token comment">//    void HDMI();//高清接口</span>
<span class="token comment">//    void DP();//数字式视频接口</span>
<span class="token comment">//    void type_c();//type-c接口</span>

    <span class="token comment">//---------JDK1.8新增方法----------</span>
    <span class="token comment">//1、实例方法</span>
    <span class="token comment">// 接口不能创建对象，必须通过实现类来创建对象调用方法</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;在接口中新增一个接口的时候，会牵一发而动全身，所以用default修饰可以在接口中进行添加方法体&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2、静态方法</span>
    <span class="token comment">//必须使用static修饰，默认使用public</span>
    <span class="token comment">//接口的静态方法只能用接口名自己调用</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Java源码自己会用到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3、私有方法 JDK1.9才支持的(了解即可)切换JDK模块版本：在项目结构中切换，这个语法JDK8不支持</span>
    <span class="token comment">//必须在接口内部才能被访问</span>
<span class="token comment">//    private void go(){</span>
<span class="token comment">//</span>
<span class="token comment">//    }</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">implements</span> <span class="token class-name">ComputerInterface01</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> test<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Add</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ComputerInterface01</span><span class="token punctuation">.</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多态-面向对象三大特征之一-重点" tabindex="-1"><a class="header-anchor" href="#多态-面向对象三大特征之一-重点" aria-hidden="true">#</a> 多态（面向对象三大特征之一，重点）</h2><h3 id="概述、形式" tabindex="-1"><a class="header-anchor" href="#概述、形式" aria-hidden="true">#</a> 概述、形式</h3><h5 id="多态是同类型的对象-执行不同的行为-表现出不同的行为特征。" tabindex="-1"><a class="header-anchor" href="#多态是同类型的对象-执行不同的行为-表现出不同的行为特征。" aria-hidden="true">#</a> 多态是同类型的对象，执行不同的行为，表现出不同的行为特征。</h5><p>多态的常见形式：</p><p><strong>父类类型 对象名称 = new 子类构造器</strong></p><p><strong>接口 对象名称 = new 实现类构造器</strong>（接口也是一种父类，可以理解为干爹）</p><h4 id="多态中成员访问的特点" tabindex="-1"><a class="header-anchor" href="#多态中成员访问的特点" aria-hidden="true">#</a> 多态中成员访问的特点</h4><p><strong>方法调用：编译看左边，运行看右边</strong></p><p><strong>变量调用：编译看左边，运行也看左边</strong>（多态侧重行为多态）</p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势：</h4><p>在多态的形势下右边的对象可以实现解耦合，便于扩展和维护。</p><p>比如说： Animal a = new Cat(); 如果我们有一天不想用这个猫对象，我们就可以把猫换成狗对象： Animal a = new Dog(); 。然后后续的业务行为随对象而改变，后续的代码无需修改，例如（ a.cry(); )<br> 。解耦合在框架中非常常见，解耦合就是降低两个类之间的联系的紧密程度。</p><p>定义方法的时候，使用父类类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展与便利。</p><p>public void game（Animal animal）;这样就可以让所有的动物都被game方法接收。</p><h5 id="多态产生的一个问题" tabindex="-1"><a class="header-anchor" href="#多态产生的一个问题" aria-hidden="true">#</a> 多态产生的一个问题：</h5><p>多态情况下不能使用子类独有的功能，不过我们可以通过引用类型的转换来调用子类独有的功能。（把大类（动物类）转成小类（猫类），大转小就需要强制类型转换）</p><h3 id="引用类型的转换" tabindex="-1"><a class="header-anchor" href="#引用类型的转换" aria-hidden="true">#</a> 引用类型的转换</h3><h5 id="自动类型转换-从子类到父类-子类对象赋值给父类类型的变量指向。" tabindex="-1"><a class="header-anchor" href="#自动类型转换-从子类到父类-子类对象赋值给父类类型的变量指向。" aria-hidden="true">#</a> 自动类型转换：从子类到父类，子类对象赋值给父类类型的变量指向。</h5><h5 id="强制类型转换-从父类到子类-子类-对象变量-子类-父类类型的变量" tabindex="-1"><a class="header-anchor" href="#强制类型转换-从父类到子类-子类-对象变量-子类-父类类型的变量" aria-hidden="true">#</a> 强制类型转换：从父类到子类，子类 对象变量 = （子类）父类类型的变量</h5><p>作用：可以解决多态下的劣势，实现调用子类独有的功能。</p><p>例如：Animal a = new Dog(); 因为a此时的类型是Animal，所以我们不知道 a 到底是哪一类具体的动物，如果我们想调用Dog中独有的吃骨头方法（eat），我们就需要对 a 对象进行强制类型转换：Dog d = (<br> Dog) a; 然后再 d.eat();才能调用子类中独有的方法</p><h6 id="至于为什么多态的父类不能调用子类的独有方法-例如-animal-a-new-dog-此时-a对象-的-引用类型-是-animal动物-但是吃骨头是狗独有的行为方法-而animal都不会吃骨头-如果用没有强转的a对象能调用到狗的吃骨头-这是不符合逻辑的。所以只能狗吃骨头-我们就得把a对象的animal类型强转成dog类型-dog-d-dog-a-这个时候原来的动物对象就被确认确确实实是狗-我们才可以让-d-调用吃骨头。注意强转的时候一定要复合逻辑-不能把猫转换成狗-java在强制类型转换的时候有一个建议-如下" tabindex="-1"><a class="header-anchor" href="#至于为什么多态的父类不能调用子类的独有方法-例如-animal-a-new-dog-此时-a对象-的-引用类型-是-animal动物-但是吃骨头是狗独有的行为方法-而animal都不会吃骨头-如果用没有强转的a对象能调用到狗的吃骨头-这是不符合逻辑的。所以只能狗吃骨头-我们就得把a对象的animal类型强转成dog类型-dog-d-dog-a-这个时候原来的动物对象就被确认确确实实是狗-我们才可以让-d-调用吃骨头。注意强转的时候一定要复合逻辑-不能把猫转换成狗-java在强制类型转换的时候有一个建议-如下" aria-hidden="true">#</a> 至于为什么多态的父类不能调用子类的独有方法？例如：Animal a = new Dog(); 此时 a对象 的 引用类型 是 Animal动物，但是吃骨头是狗独有的行为方法，而Animal都不会吃骨头，如果用没有强转的a对象能调用到狗的吃骨头，这是不符合逻辑的。所以只能狗吃骨头，我们就得把a对象的Animal类型强转成Dog类型（Dog d = (Dog) a;)，这个时候原来的动物对象就被确认确确实实是狗，我们才可以让 d 调用吃骨头。注意强转的时候一定要复合逻辑！不能把猫转换成狗！！！Java在强制类型转换的时候有一个建议：如下</h6><h5 id="建议" tabindex="-1"><a class="header-anchor" href="#建议" aria-hidden="true">#</a> 建议</h5><p>Java建议强转转换前使用 instanceof 判断当前对象的<strong>真实类型</strong>，再进行强制类型转换</p><p>变量名 <strong>instanceof</strong> 真实类型</p><p>判断关键字（instanceof）左边的变量<strong>指向的对象的真实类型</strong>，是否是右边的类型或者是其子类型，是就返回true，反之false；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>instanceofDemo</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 定义一个抽象类的动物
 * 定义一个&#39;叫&#39;的方法体
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>instanceofDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;喵喵喵&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//猫独有的方法抓老鼠</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;猫在抓老鼠&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>instanceofDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;狗在吃骨头&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>instanceofDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们以后只需要把Cat修改为Dog，就可以把猫换成狗，而且下面的什么都不用动</span>
        animal<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们不强转成子类类型就只能调用父类中的通用方法</span>
        <span class="token function">test</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们调用下面的test方法对animal进行类型的判断然后调用独有的方法</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//这时候我们不能知道传进来的到底是猫是狗，所以我们需要对Animal进行判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>
            dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>
            cat<span class="token punctuation">.</span><span class="token function">catchMice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h2><h3 id="内部类" tabindex="-1"><a class="header-anchor" href="#内部类" aria-hidden="true">#</a> 内部类</h3><p>内部类就是一个定义在一个类里面的类，里面的类可以理解成寄生，外部类可以理解成宿主。（与现实世界进行对接）</p><h3 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类" aria-hidden="true">#</a> 匿名内部类</h3><p>本质上是一个没有名字的局部内部类，定义在方法中，代码块中，等。</p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用：</h4><p>方便创建子类对象，最终的目的为了简化代码编写。</p><h4 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式：</h4><p>Animal animal1 = new Animal() { @Override public void run() { System.out.println(&quot;老虎跑的快&quot;); } };</p><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点：</h4><p>匿名内部类是一个<strong>没有名字的内部类</strong></p><p>匿名内部类写出来就会产生一个匿名内部类的对象</p><p>相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的</p><p>我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>anonymous</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//普通写法（抽象类不能被创建对象）</span>
        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//匿名内部类：</span>
        <span class="token comment">//匿名内部类是一个没有名字的内部类</span>
        <span class="token comment">//匿名内部类写出来就会产生一个匿名内部类的对象</span>
        <span class="token comment">//相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的</span>
        <span class="token comment">//我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法</span>
        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;老虎跑的快&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        animal1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;老虎跑的快&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用形式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>meng<span class="token punctuation">.</span>anonymous</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//匿名内部类：创建一个接口的子类学生对象，</span>
        <span class="token comment">// 以后用到Lambda表达式就一行代码就ok了</span>
        <span class="token class-name">Swimming</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学生在游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">go</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Swimming</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;老师在游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">go</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//我们还可以直接把匿名内部类直接作为方法的入参传送给方法</span>
        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我在游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Lambda表达式就一行代码就ok了,这个以后讲述</span>
        <span class="token class-name">Swimming</span> s3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lambda在游泳&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">go</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lambda在游泳!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token class-name">Swimming</span> swimming<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        swimming<span class="token punctuation">.</span><span class="token function">swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 定义一个接口：游泳
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Swimming</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">swimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开发中不是我们主动定义匿名内部类，而是别人需要我们写或者我们可以写的时候才会使用。</p><p>匿名内部类的代码可以实现代码的进一步简化！</p>`,271),c=[t];function o(i,l){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","java-basic-land-02.html.vue"]]);export{k as default};
