import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,e as a}from"./app-78a3320b.js";const s={},o=a(`<h2 id="目录结构介绍" tabindex="-1"><a class="header-anchor" href="#目录结构介绍" aria-hidden="true">#</a> <strong>目录结构介绍</strong></h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> <strong>基本介绍</strong></h3><ol><li>linux的文件系统是采用层级式的树状目录结构，在此结构中的最上层是根目录<code>/</code> ，然后在此目录下再创建其他的目录</li><li>有一个经典的话：<strong>在Linux世界里，一切皆文件</strong></li></ol><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010845708.png" alt="image-20230319111526819" tabindex="0" loading="lazy"><figcaption>image-20230319111526819</figcaption></figure><h3 id="具体的目录结构" tabindex="-1"><a class="header-anchor" href="#具体的目录结构" aria-hidden="true">#</a> <strong>具体的目录结构</strong></h3><ul><li><p><code>/bin</code> [常用] (<code>usr/bin</code>、<code>/usr/local/bin</code>)</p><p>是Binary的缩写，这个目录存放最经常使用的命令</p></li><li><p><code>/sbin</code>(<code>/usr/sbin</code>,<code>/usr/local/sbin</code>)</p><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</p></li><li><p><code>/home</code>[常用]</p><p>存放普通用户的主目录，在Linux中每一个用户都有一个自己的目录，一般该目录的名就是用户的账号名称</p></li><li><p><code>/root</code> [常用]</p><p>该目录为系统管理员，也称作超级权限者的用户主目录</p></li><li><p><code>/lib</code> 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</p></li><li><p><code>/lost+found</code> 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p></li><li><p><code>/etc</code> [常用]</p><p>所有的系统管理所需要的配置文件和子目录，比如安装MySQL数据库则会在该目录下产生MySQL的配置文件 my.conf</p></li><li><p><code>/usr</code> [常用]</p><p>这是一个非常重要的目录，用户的很多用于程序和文件都放在这个目录下，类似于Windows下的program files目录</p></li><li><p><code>/boot</code> [常用]</p><p>存放的是启动Linux时需要的一些核心文件，包括一些连接文件以及镜像文件</p></li><li><p><code>/proc</code> [不能动]</p><p>这个目录是一个虚拟目录，它是系统内存的映射，访问这个目录来获取系统信息</p></li><li><p><code>/srv</code> [不能动]</p><p>service 缩写，该目录存放一些服务器启动之后所需要提取的数据</p></li><li><p><code>/sys</code> [不能动]</p><p>这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统 sysfs</p></li><li><p><code>/tmp</code> 这个目录用来存放一些临时文件的</p></li><li><p><code>/dev</code></p><p>类似于Windows的设备管理器，把所有的硬件用文件的形式存储</p></li><li><p><code>/media</code> [常用]</p><p>Linux系统会自动识别一些文件，例如U盘，光驱，等等。当识别后，Linux会把识别的设备挂载到这个目录下</p></li><li><p><code>/mnt</code>[常用]</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在<code>/mnt/</code> 上，然后进入该目录就可以查看里的内容了。</p></li><li><p><code>/opt</code></p><p>这是给主机额外安装软件所摆放的目录，如安装ORACLE数据库就可以放到该目录下，默认为空</p></li><li><p><code>/usr/local</code>[常用]</p><p>这是另一个给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序</p></li><li><p><code>/var</code> [常用]</p><p>这个目录中存放着不断扩充的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p></li><li><p><code>/selinux</code>[security-enhanced linux]</p><p>SELinux是一个安全子系统，它能控制程序只能访问特定位件，有三种工作模式，可以自行设置</p></li></ul><h2 id="vi和vim快速入门" tabindex="-1"><a class="header-anchor" href="#vi和vim快速入门" aria-hidden="true">#</a> vi和vim快速入门</h2><h3 id="快捷键映射图" tabindex="-1"><a class="header-anchor" href="#快捷键映射图" aria-hidden="true">#</a> <strong>快捷键映射图</strong></h3><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010845802.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="vi-vim-的使用" tabindex="-1"><a class="header-anchor" href="#vi-vim-的使用" aria-hidden="true">#</a> <strong>vi/vim 的使用</strong></h3><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）<strong>和</strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h4 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式" aria-hidden="true">#</a> <strong>命令模式：</strong></h4><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h4 id="输入模式" tabindex="-1"><a class="header-anchor" href="#输入模式" aria-hidden="true">#</a> <strong>输入模式</strong></h4><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h4 id="底线命令模式" tabindex="-1"><a class="header-anchor" href="#底线命令模式" aria-hidden="true">#</a> <strong>底线命令模式</strong></h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><h3 id="vi-vim-按键说明" tabindex="-1"><a class="header-anchor" href="#vi-vim-按键说明" aria-hidden="true">#</a> <strong>vi/vim 按键说明</strong></h3><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><table><thead><tr><th><strong>移动光标的方法</strong></th><th></th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 &quot;30j&quot; 或 &quot;30↓&quot; 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td>n</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td></td><td></td></tr><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) <strong>如果需要取消高亮在底线命令模式输入noh</strong></td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td>使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。</td></tr><tr><td>ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分-一般模式切换到编辑模式的可用的按钮说明" tabindex="-1"><a class="header-anchor" href="#第二部分-一般模式切换到编辑模式的可用的按钮说明" aria-hidden="true">#</a> <strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></h3><table><thead><tr><th><strong>进入输入或取代的编辑模式</strong></th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分-一般模式切换到指令行模式的可用的按钮说明" tabindex="-1"><a class="header-anchor" href="#第三部分-一般模式切换到指令行模式的可用的按钮说明" aria-hidden="true">#</a> <strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></h3><table><thead><tr><th><strong>指令行的储存、离开等指令</strong></th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td>ZQ</td><td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可</p><h2 id="linux命令基础" tabindex="-1"><a class="header-anchor" href="#linux命令基础" aria-hidden="true">#</a> Linux命令基础</h2><h3 id="命令基础格式" tabindex="-1"><a class="header-anchor" href="#命令基础格式" aria-hidden="true">#</a> 命令基础格式</h3><p><strong>无论什么命令，用于什么用途，在Linux中，命令有其通用的格式：</strong></p><p><code>command [-options] [parameter]</code></p><ul><li>command: 命令本身</li><li>-options：可选，可以通过选项控制命令的行为细节</li><li>parameter：可选，多数用于命令的指向目标</li></ul><h3 id="ls" tabindex="-1"><a class="header-anchor" href="#ls" aria-hidden="true">#</a> ls</h3><blockquote><p>ls命令的作用是列出目录下的内容，语法细节如下：</p></blockquote><p><code>ls [-a -l -h] [linux路径]</code></p><ul><li>-a -l -h 是可选的选项</li><li>Linux路径是此命令可选的参数</li></ul><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010853360.png" alt="image-20230401085329304" tabindex="0" loading="lazy"><figcaption>image-20230401085329304</figcaption></figure><ul><li><p><code>-a</code>选项表示：<code>all</code> 的意思，即列出所有的文件，包括隐藏的文件(以<code>.</code>开头的文件和文件夹会被隐藏)</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010857175.png" alt="image-20230401085711129" tabindex="0" loading="lazy"><figcaption>image-20230401085711129</figcaption></figure></li><li><p><code>-l</code> 选项表示：以列表的形式展现内容，并展示文件的信息</p><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010901235.png" alt="image-20230401090122194" style="zoom:50%;"><p>可以组合使用：</p><p><code>ls -a -l</code>并且等价于<code>ls -al </code></p></li><li><p><code>-h</code>选项表示：以容易阅读的方式展现文件的大小例如(K,M,G)</p><ul><li><code>-h</code>选项必须搭配<code>-l</code>一起使用</li></ul></li><li><p>组合使用：</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010906711.png" alt="image-20230401090644646" tabindex="0" loading="lazy"><figcaption>image-20230401090644646</figcaption></figure></li></ul><h4 id="drwxr-xr-x意思" tabindex="-1"><a class="header-anchor" href="#drwxr-xr-x意思" aria-hidden="true">#</a> drwxr-xr-x意思</h4><blockquote><p>drwxr-xr-x意思如下：</p><p>第一位表示文件类型。d是目录文件，l是链接文件，-是普通文件，p是管道。</p><p>后面的分三个三个来看，即 rwx 、r-x 、r-x。</p><p>第一个： <strong>所属用户权限</strong>；r 是可读，w 是可写，x 是可执行，rwx 意思是<strong>可读可写可执行</strong>。</p><p>第二个： **用户组权限：<strong>r-x 是可读可执行不可写</strong>。</p><p>第三个： <strong>其他用户权限</strong>，<strong>r-x 是可读可执行不可写</strong>。</p></blockquote><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304021442881.png" alt="image-20230402144240712" tabindex="0" loading="lazy"><figcaption>image-20230402144240712</figcaption></figure><h3 id="cd" tabindex="-1"><a class="header-anchor" href="#cd" aria-hidden="true">#</a> cd</h3><blockquote><p>我们可以通过<code>cd</code>命令更改当前的工作目录</p></blockquote><p>语法：</p><p><code>cd [linux路径]</code></p><blockquote><p>注意：</p><ul><li>cd命令无需跟选项，只有参数，表示要切换到哪个路径</li><li>cd直接执行，不跟参数则会回到home路径</li></ul></blockquote><h3 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd" aria-hidden="true">#</a> pwd</h3><blockquote><p>查看当前所在的工作目录</p><p>pwd： <strong>P</strong>rint <strong>W</strong>ork <strong>D</strong>irectory</p><ul><li>无选项，无参数，直接使用即可打印出当前工作目录</li></ul></blockquote><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010912323.png" alt="image-20230401091236232" tabindex="0" loading="lazy"><figcaption>image-20230401091236232</figcaption></figure><h3 id="特殊路径符" tabindex="-1"><a class="header-anchor" href="#特殊路径符" aria-hidden="true">#</a> 特殊路径符</h3><ul><li><code>.</code>：表示当前路径</li><li><code>..</code>： 表示上一级目录</li><li><code>~</code>：表示HOME路径</li></ul><h3 id="mkdir" tabindex="-1"><a class="header-anchor" href="#mkdir" aria-hidden="true">#</a> mkdir</h3><blockquote><p>通过mkdir命令创建文件夹</p></blockquote><p>mkdir来自英文：<strong>m</strong>a<strong>k</strong>e <strong>dir</strong>ectory</p><p>语法：<code>mkdir [-p] Linux路径</code></p><ul><li>参数必填，表示Linux路径，即要创建的文件夹的路径</li><li>-p选项可选，表示自动创建不存在的父目录，适用于连续创建多级目录</li></ul><h3 id="touch" tabindex="-1"><a class="header-anchor" href="#touch" aria-hidden="true">#</a> touch</h3><blockquote><p>可以通过<code>touch</code>命令创建文件</p></blockquote><p>语法：<code>touch 文件名</code></p><h3 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> cat</h3><blockquote><p>查看文件内容</p></blockquote><p>语法：<code>cat 文件名称</code></p><h3 id="more" tabindex="-1"><a class="header-anchor" href="#more" aria-hidden="true">#</a> more</h3><blockquote><p>翻页查看文件内容</p></blockquote><p>语法：<code>more 文件名称</code></p><ul><li>使用空格翻页</li><li>使用q退出查看</li></ul><h3 id="cp" tabindex="-1"><a class="header-anchor" href="#cp" aria-hidden="true">#</a> cp</h3><blockquote><p>用于复制文件/文件夹的命令</p></blockquote><p>语法：<code>cp [-r] 参数一 参数二</code></p><ul><li><code>-r</code> 选项，可选，<strong>用于复制文件夹使用，表示递归</strong></li><li>参数一：Linux路径，表示<strong>被复制</strong>的文件或文件夹(原文件/文件夹)</li><li>参数二：Linux路径，表示<strong>要复制</strong>到的地方(目标)</li></ul><h3 id="mv" tabindex="-1"><a class="header-anchor" href="#mv" aria-hidden="true">#</a> mv</h3><blockquote><p>移动文件/文件夹</p></blockquote><p>语法：<code>mv 参数一 参数二</code></p><ul><li>参数一：表示被移动的文件或文件夹</li><li>参数二：表示要移动到的地方，如果目标不存在则进行改名，确保目标存在</li></ul><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm</h3><blockquote><p>用于删除文件或文件夹</p></blockquote><p>语法：<code>rm [-r -f] 参数一 参数二 ...</code></p><ul><li>-r<strong>用于删除文件夹，递归(和cp命令的-r一样)</strong></li><li>-f表示force，强制删除(不会弹出提示确认信息)</li><li>参数x：表示要删除的文件或文件夹</li></ul><blockquote><p>rm命令支持通配符*，用来模糊匹配</p><ul><li>符号*表示通配符，即匹配任意内容(包括空) <ul><li>test*，匹配任何以test开头的内容</li><li>*test，匹配任何以test结尾的内容</li><li><code>*test*</code>，表示匹配任何包括test的内容</li></ul></li></ul></blockquote><h3 id="which" tabindex="-1"><a class="header-anchor" href="#which" aria-hidden="true">#</a> which</h3><blockquote><p>查看所使用的一系列命令的程序文件存放在哪里</p></blockquote><p>语法：<code>which要查找的命令</code></p><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304010956187.png" alt="image-20230401095618110" style="zoom:50%;"><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><blockquote><p>通过find命令搜索指定文件</p></blockquote><p>语法：<code>find 起始路径 -name “被查找的文件名”</code></p><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304011115328.png" alt="image-20230401111520211" style="zoom:50%;"><blockquote><p>被查找的文件名支持通配符*的写法</p></blockquote><hr><blockquote><p>按照文件大小查找文件</p></blockquote><p>语法：<code>find 起始路径 -size +|-n[kMG]</code></p><ul><li>+、-表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k(小写)表示kb</li></ul><p>例如：</p><p><code>find / -size +1G</code> 查找大于1G的文件</p><h3 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h3><blockquote><p>从文件中<strong>通过关键字过滤文件</strong></p></blockquote><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号</li><li>关键字：表示过滤的关键字(带有空格或者其他特殊符号建议使用“ ”将关键字包裹起来)</li><li>文件路径：表示要过滤内容的文件路径，<strong>可作为内容的输入端口</strong></li></ul><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304011142375.png" alt="image-20230401114217215" style="zoom:50%;"><h3 id="wc" tabindex="-1"><a class="header-anchor" href="#wc" aria-hidden="true">#</a> wc</h3><blockquote><p>统计文件的行数、单词数量等</p></blockquote><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>-c统计<strong>字节</strong>数量</li><li>-m统计<strong>字符</strong>数量</li><li>-l统计<strong>行</strong>数</li><li>-w统计<strong>单词</strong>数量</li><li>文件路径：被统计的文件，<strong>可作为内容输入的端口</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wc</span> test.txt
<span class="token number">2</span>  <span class="token number">5</span> <span class="token number">26</span> test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认输出：行数 单词数 字节数 文件名称</p><h3 id="管道符" tabindex="-1"><a class="header-anchor" href="#管道符" aria-hidden="true">#</a> 管道符 <code>|</code></h3><blockquote><p>将左边命令的结果作为右边命令的输入</p></blockquote><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@VM-0-5-centos ~]# cat test.txt
你好林纳斯
[root@VM-0-5-centos ~]# cat test.txt | grep 你好
你好林纳斯
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 查看linux中关于nginx的进程信息
[root@VM-0-5-centos ~]# ps -ef | grep nginx
root     24991 21597  0 11:52 pts/0    00:00:00 grep --color=auto nginx
root     25946     1  0 3月20 ?       00:00:00 nginx: master process nginx
nginx    25947 25946  0 3月20 ?       00:00:08 nginx: worker process
nginx    25948 25946  0 3月20 ?       00:00:08 nginx: worker process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h3><blockquote><p>可以使用echo命令在命令行输出指定内容</p></blockquote><p>语法：<code>echo 输出的内容</code></p><h3 id="反引号" tabindex="-1"><a class="header-anchor" href="#反引号" aria-hidden="true">#</a> 反引号\`</h3><blockquote><p>如果我们想通过echo输出pwd的内容,<code>echo pwd</code>则会直接输出pwd,我们就可以使用反引号包裹pwd则会被当做命令执行而不是普通的文字</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo pwd</span>
<span class="token builtin class-name">pwd</span>
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo \`pwd\`</span>
/root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重定向符-和" tabindex="-1"><a class="header-anchor" href="#重定向符-和" aria-hidden="true">#</a> 重定向符<code>&gt;</code>和<code>&gt;&gt;</code></h3><ul><li><code>&gt;</code>将左边命令的结果，<strong>覆盖</strong>写入到符号右边的指定文件中</li><li><code>&gt;&gt;</code>将左边命令的结果，<strong>追加</strong>写入到符号右边的指定文件中</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># cat test.txt</span>
你好林纳斯
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo \`pwd\` &gt; test.txt</span>
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># cat test.txt</span>
/root
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo \`pwd\` &gt;&gt; test.txt</span>
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># cat test.txt</span>
/root
/root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tail" tabindex="-1"><a class="header-anchor" href="#tail" aria-hidden="true">#</a> tail</h3><blockquote><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改</p></blockquote><p>语法：<code>tail [-f -num] Linux路径</code></p><ul><li>参数：Linux路径，表示被跟踪的文件路径</li><li>选项：-f，表示<strong>持续跟踪</strong></li><li>选项：-num，表示查看<strong>尾部多少行</strong>，不写默认是10行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># tail test.txt</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">51</span> <span class="token number">3</span>月  <span class="token number">18</span> <span class="token number">21</span>:51 .gitconfig
drwxr-xr-x   <span class="token number">9</span> root root <span class="token number">4</span>.0K <span class="token number">3</span>月  <span class="token number">27</span> <span class="token number">18</span>:51 halo
drwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:48 .orca_term
drwxr-xr-x   <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">7</span>月  <span class="token number">25</span> <span class="token number">2022</span> .pip
drwxr-----   <span class="token number">3</span> root root <span class="token number">4</span>.0K <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:47 .pki
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">73</span> <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:21 .pydistutils.cfg
drwx------   <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:21 .ssh
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">129</span> <span class="token number">12</span>月 <span class="token number">29</span> <span class="token number">2013</span> .tcshrc
-rw-r--r--   <span class="token number">1</span> root root    <span class="token number">0</span> <span class="token number">4</span>月   <span class="token number">2</span> <span class="token number">11</span>:18 test.txt
-rw-------   <span class="token number">1</span> root root <span class="token number">5</span>.5K <span class="token number">4</span>月   <span class="token number">1</span> <span class="token number">11</span>:47 .viminfo
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># tail -5 test.txt</span>
-rw-r--r--   <span class="token number">1</span> root root   <span class="token number">73</span> <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:21 .pydistutils.cfg
drwx------   <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">3</span>月  <span class="token number">17</span> <span class="token number">16</span>:21 .ssh
-rw-r--r--.  <span class="token number">1</span> root root  <span class="token number">129</span> <span class="token number">12</span>月 <span class="token number">29</span> <span class="token number">2013</span> .tcshrc
-rw-r--r--   <span class="token number">1</span> root root    <span class="token number">0</span> <span class="token number">4</span>月   <span class="token number">2</span> <span class="token number">11</span>:18 test.txt
-rw-------   <span class="token number">1</span> root root <span class="token number">5</span>.5K <span class="token number">4</span>月   <span class="token number">1</span> <span class="token number">11</span>:47 .viminfo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="su和exit命令" tabindex="-1"><a class="header-anchor" href="#su和exit命令" aria-hidden="true">#</a> su和exit命令</h3><blockquote><p>su命令是用于切换用户的系统命令，来源英语单词switch user</p></blockquote><p>语法：<code>su - [用户名]</code></p><ul><li><code>-</code>符号是可选的，表示是否在切换用户后加载环境变量</li><li>参数：用户名，表示需要切换的用户，也可以省略，省略默认表示切换到root</li><li><strong>切换用户后，可以通过exit命令退回上一个用户</strong></li></ul><blockquote><p>使用普通用户切换到root用户需要输入密码；</p><p>使用root用户切换到普通用户不需要输入密码</p></blockquote><h3 id="sudo命令" tabindex="-1"><a class="header-anchor" href="#sudo命令" aria-hidden="true">#</a> sudo命令</h3><blockquote><p>当我们知道root密码的时候，可以通过su切换到root用户得到最大的权限</p><p>但是不建议长期使用root用户，避免对系统造成损坏</p><p>因此我们可以使用<code>sudo</code>命令，为普通用户授权，临时使用root身份执行</p></blockquote><p>语法：<code>sudo 其他命令</code></p><ul><li>注意并不是所有的用户都可以使用sudo，我们<strong>需要为普通用户配置sudo认证</strong></li></ul><blockquote><p>为普通用户配置sudo认证</p><ul><li><p>切换到root用户，执行<code>visudo</code>命令会自动通过vi编辑器打开:<code>/etc/sudoers</code></p></li><li><p>在文件的最后一行添加：</p><p><code>用户名 ALL=(ALL) NOPASSWORD: ALL</code></p><ul><li>最后的NOPASSWORD表示使用sudo命令无需密码</li></ul></li><li><p>最后保存即可</p></li></ul></blockquote><h3 id="groupadd和groupdel" tabindex="-1"><a class="header-anchor" href="#groupadd和groupdel" aria-hidden="true">#</a> groupadd和groupdel</h3><blockquote><p>用户组管理命令，用户组：多个用户可以组成一个组，方便进行权限的统一管理</p></blockquote><ul><li><p>创建用户组</p><p><code>groupadd 用户组名称</code></p></li><li><p>删除用户组</p><p><code>groupdel 用户组名称</code></p></li></ul><h3 id="useradd和userdel-usermod-id-getent-passwd和getent-group" tabindex="-1"><a class="header-anchor" href="#useradd和userdel-usermod-id-getent-passwd和getent-group" aria-hidden="true">#</a> useradd和userdel；usermod；id；getent passwd和getent group</h3><ul><li>useradd添加用户、userdel删除用户</li><li>usermod修改用户组、id命令查看用户信息</li><li>getent passwd查看系统全部用户信息</li><li>getent group查看系统全部组信息</li></ul><h3 id="chmod" tabindex="-1"><a class="header-anchor" href="#chmod" aria-hidden="true">#</a> chmod</h3><blockquote><p>我们可以使用chmod命令，修改文件、文件夹的权限信息</p><p><strong>注意只有文件、文件夹所属的用户或root用户可以修改</strong></p></blockquote><p>语法：<code>chmod [-R] 权限 文件或文件夹</code></p><ul><li>选项-R，对文件夹内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li><code>chmod u=rwx,g=rwx,o=r hello.txt</code>,将会把hello.txt文件的权限修改为rwxrwxr-- <ul><li>其中u表示user所属用户权限，g表示group用户组的权限，o表示其他用户权限</li></ul></li><li><code>chmod u=rwx,g=rwx,o=r -R test</code>对test文件夹以及文件夹内部的全部内容的权限修改为rwxrwxr--</li></ul><blockquote><p>补充：权限数字序号</p><ul><li>r代表4；w代表2；x代表1</li><li>7代表rwx；5代表r_x；1代表__x</li><li><code>chmod 751 hello.txt</code>，将会把hello.txt文件的权限修改为rwxr_x__x</li></ul></blockquote><h3 id="chown" tabindex="-1"><a class="header-anchor" href="#chown" aria-hidden="true">#</a> chown</h3><blockquote><p>chown命令可以修改文件或文件夹所属的用户和用户组</p></blockquote><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><ul><li>选项：-R和chmod的-R一样</li><li>选项用户，用于修改文件或文件夹的所属用户</li><li>选项用户组，用于修改文件或文件夹的所属用户组</li><li>选项<code>:</code>：用于分隔用户和用户组</li></ul><p>示例：</p><ul><li><code>chown root hello.txt</code></li><li><code>chown root:root hello.txt</code></li><li><code>chown -R zs:test test</code>将test文件夹以及文件夹中所有的文件和文件夹的所属用户修改为zs，用户组修改为test</li></ul><h2 id="小技巧快捷键" tabindex="-1"><a class="header-anchor" href="#小技巧快捷键" aria-hidden="true">#</a> 小技巧快捷键</h2><h3 id="ctrl-c强制停止" tabindex="-1"><a class="header-anchor" href="#ctrl-c强制停止" aria-hidden="true">#</a> ctrl+C强制停止</h3><ul><li>可以强制停止某些程序的运行</li><li>命令输入错误可以退出当前命令不执行</li></ul><h3 id="ctrl-d退出或登出" tabindex="-1"><a class="header-anchor" href="#ctrl-d退出或登出" aria-hidden="true">#</a> ctrl+D退出或登出</h3><ul><li>可以退出用户的登陆</li><li>或者退出某些程序的专属页面例如Python</li></ul><h3 id="history查看历史命令" tabindex="-1"><a class="header-anchor" href="#history查看历史命令" aria-hidden="true">#</a> history查看历史命令</h3><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304021544241.png" alt="image-20230402154446076" tabindex="0" loading="lazy"><figcaption>image-20230402154446076</figcaption></figure><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear</h3><blockquote><p>清屏</p></blockquote><h2 id="软件安装" tabindex="-1"><a class="header-anchor" href="#软件安装" aria-hidden="true">#</a> 软件安装</h2><h3 id="yum命令" tabindex="-1"><a class="header-anchor" href="#yum命令" aria-hidden="true">#</a> yum命令</h3><blockquote><p>yum：RPM包软件管理器，同于自动化安装配置Linux软件，并可以自动解决依赖问题</p></blockquote><p>语法：<code>yum [-y] [install | remove | search] 软件名称</code></p><ul><li>-y自动确认</li><li>install：安装</li><li>remove：删除</li><li>search：搜索</li></ul><blockquote><p>yum需要有root权限，可以使用su切换到root或者sudo提权</p></blockquote><h2 id="systemctl" tabindex="-1"><a class="header-anchor" href="#systemctl" aria-hidden="true">#</a> systemctl</h2><blockquote><p>Linux系统很多软件(内置和第三方)均支持使用systemctl命令控制：启动、停止、开机自启动</p><p>能被systemctl管理的软件，一般也称之为服务</p></blockquote><p>语法：<code>systemctl start | stop | status | enable |disable 服务名</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable nginx</span>
Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="软连接" tabindex="-1"><a class="header-anchor" href="#软连接" aria-hidden="true">#</a> 软连接</h2><blockquote><p>在系统中创建软连接，可以将文件、文件夹链接到其他位置</p><p>类似于Windows系统的快捷方式</p></blockquote><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>-s选项，创建软连接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：需要链接去的目的地</li></ul><p>示例：</p><ul><li><code>ln -s /etc/yum.conf ~/yum.conf</code></li><li><code>ln -s /etc/yum ~/yum</code></li></ul><blockquote><p><strong>注意软连接必须使用绝对路径</strong></p></blockquote><h2 id="date命令" tabindex="-1"><a class="header-anchor" href="#date命令" aria-hidden="true">#</a> date命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos /<span class="token punctuation">]</span><span class="token comment"># date +%s</span>
<span class="token number">1680423588</span>
<span class="token punctuation">[</span>root@VM-0-5-centos /<span class="token punctuation">]</span><span class="token comment"># date +%Y-%m-%d</span>
<span class="token number">2023</span>-04-02
<span class="token punctuation">[</span>root@VM-0-5-centos /<span class="token punctuation">]</span><span class="token comment"># date +%Y-%m-%d %H:%M:%S</span>
date: 额外的操作数 <span class="token string">&quot;%H:%M:%S&quot;</span>
Try <span class="token string">&#39;date --help&#39;</span> <span class="token keyword">for</span> <span class="token function">more</span> information.
<span class="token punctuation">[</span>root@VM-0-5-centos /<span class="token punctuation">]</span><span class="token comment"># date &quot;+%Y-%m-%d %H:%M:%S&quot;</span>
<span class="token number">2023</span>-04-02 <span class="token number">16</span>:21:19
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理" aria-hidden="true">#</a> 进程管理</h2><h3 id="查看进程" tabindex="-1"><a class="header-anchor" href="#查看进程" aria-hidden="true">#</a> 查看进程</h3><blockquote><p>可以通过ps命令查看Linux系统中的进程信息</p></blockquote><p>语法：<code>ps [-e -f]</code></p><ul><li>-e，显示全部进程</li><li>-f，以完全格式化的形式展现信息</li></ul><p>常用的是<code>ps -ef</code>列出所有进程信息并且配合管道符和过滤命令使用</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304021643409.png" alt="image-20230402164304255" tabindex="0" loading="lazy"><figcaption>image-20230402164304255</figcaption></figure><p>从左到右依次是：</p><ul><li>UID：进程所属的用户ID</li><li>PID：进程的进程号ID</li><li>PPID：进程的父ID(启动该进程的其他进程)</li><li>C：此进程CPU占用率(百分比)</li><li>STIME：进程启动的时间</li><li>TTY：启动此进程的终端序号，如果显示？表示非终端启动</li><li>TIME：进程占用CPU的时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ul><h3 id="关闭进程" tabindex="-1"><a class="header-anchor" href="#关闭进程" aria-hidden="true">#</a> 关闭进程</h3><p>语法：<code>kill [-9] 进程ID</code></p><blockquote><p>-9代表强制关闭</p></blockquote><h2 id="主机状态" tabindex="-1"><a class="header-anchor" href="#主机状态" aria-hidden="true">#</a> 主机状态</h2><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h3><blockquote><p>查看系统资源占用</p></blockquote><ul><li>可以通过top命令查看CPU、内存的使用情况，类似于Windows中的任务管理器；默认每5秒刷新一次，语法：直接输入<code>top</code>即可，按q或者ctrl+c退出</li></ul><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304022047990.png" alt="image-20230402204701848" tabindex="0" loading="lazy"><figcaption>image-20230402204701848</figcaption></figure><blockquote><p>top显示的信息详解：</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> - <span class="token number">20</span>:50:23 up <span class="token number">15</span> days,  <span class="token number">8</span>:13,  <span class="token number">1</span> user,  load average: <span class="token number">0.18</span>, <span class="token number">0.16</span>, <span class="token number">0.16</span>
Tasks:  <span class="token number">99</span> total,   <span class="token number">1</span> running,  <span class="token number">98</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">2.7</span> us,  <span class="token number">1.5</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">95.0</span> id,  <span class="token number">0.8</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span>  <span class="token number">2046508</span> total,    <span class="token number">79848</span> free,  <span class="token number">1271736</span> used,   <span class="token number">694924</span> buff/cache
KiB Swap:        <span class="token number">0</span> total,        <span class="token number">0</span> free,        <span class="token number">0</span> used.   <span class="token number">599556</span> avail Mem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>第一行：<code>top - 20:50:23 up 15 days, 8:13, 1 user, load average: 0.18, 0.16, 0.16</code></p><p>top命令名称；20:50:23当前系统时间；up 15 days：启动了15天；1 user：一个用户；load average：平均负载</p></li><li><p>第二行：<code>Tasks: 99 total, 1 running, 98 sleeping, 0 stopped, 0 zombie</code></p><p>Tasks：99 total：99个进程；1 running：1个正在运行；98 sleeping：98个睡眠，0个停止，0个僵尸进程</p></li><li><p>第三行：<code>%Cpu(s): 2.7 us, 1.5 sy, 0.0 ni, 95.0 id, 0.8 wa, 0.0 hi, 0.0 si, 0.0 st</code></p><p>%Cpu(s)：CPU使用率；us：用户CPU使用率，sy：系统CPU使用率···</p></li><li><p>第四行和第五行：</p><p>Kib Mem：物理内存，total：总量，free：空闲；used：使用；buff/cache：buff和cache占用</p><p>KibSwap：虚拟内存(交换空间)</p></li></ul><p>内容重点关注的：</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304022105739.png" alt="image-20230402210539669" tabindex="0" loading="lazy"><figcaption>image-20230402210539669</figcaption></figure><ul><li>PID：进程ID</li><li>RES：进程使用的物理内存，单位KB</li><li>%CPU：进程CPU占用率</li><li>%MEM：进程内存占用率</li></ul><blockquote><p>top交互式选项可以通过键盘按键控制内容(下面列出几个常用的)</p></blockquote><ul><li>M：根据内存(RES)大小排序</li><li>P：根据CPU使用百分比大小排序</li><li>T：根据运行的时间排序</li><li>E：切换顶部的内存显示的单位</li><li>e：切换进程内存显示单位</li><li>t：显示CPU状态信息</li><li>m：显示内存信息</li></ul><h3 id="df" tabindex="-1"><a class="header-anchor" href="#df" aria-hidden="true">#</a> df</h3><blockquote><p>使用df命令查看磁盘的使用情况</p></blockquote><p>语法：<code>df [-h]</code></p><ul><li>-h可以使显示的单位更易读</li></ul><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304022118043.png" alt="image-20230402211833945" tabindex="0" loading="lazy"><figcaption>image-20230402211833945</figcaption></figure><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> PATH</h3><blockquote><p>无论工作目录是什么，我们都可以执行cd(等一系列)命令，这就是借助了环境变量中的PATH这个项目值来做的</p></blockquote><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202304031240811.png" alt="image-20230403124053645" tabindex="0" loading="lazy"><figcaption>image-20230403124053645</figcaption></figure><blockquote><p>当执行命令的时候会根据上面PATH的信息依次去对应的路径下查找该命令并执行</p></blockquote><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号" aria-hidden="true">#</a> $符号</h3><blockquote><p>在Linux中$符号通常用于获取环境变量</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo $PWD</span>
/root
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment"># echo \${PWD}/bin</span>
/root/bin
<span class="token punctuation">[</span>root@VM-0-5-centos ~<span class="token punctuation">]</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量" aria-hidden="true">#</a> 设置环境变量</h3><blockquote><p>Linux中的环境变量可以自己设置，不过有等级区分</p></blockquote><ul><li>临时设置，语法：<code>export 变量名称=变量值</code></li><li>永久生效： <ul><li>针对当前用户：配置当前用户的<code>~/.bashrc</code>文件</li><li>针对所有用户生效：配置系统的<code>/etc/profile</code>文件</li><li><strong>并通过语法<code>source 配置文件</code>，进行立即生效</strong></li></ul></li></ul><p>案例：</p><blockquote><p>在~下创建一个文件夹，文件夹中创建文件，文件中简单输出一个内容。把该文件设置为全局可执行命令</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span>
<span class="token function">touch</span> mktest
<span class="token builtin class-name">echo</span> <span class="token string">&quot;echo test&quot;</span> <span class="token operator">&gt;&gt;</span> mktest
<span class="token function">chmod</span> <span class="token number">755</span> mktest
<span class="token builtin class-name">echo</span> <span class="token string">&quot;export PATH=<span class="token environment constant">$PATH</span>:/root/test&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/profile
<span class="token builtin class-name">source</span> /etc/profile
mktest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件的上传和下载" tabindex="-1"><a class="header-anchor" href="#文件的上传和下载" aria-hidden="true">#</a> 文件的上传和下载</h2><h3 id="通过命令行上传和下载" tabindex="-1"><a class="header-anchor" href="#通过命令行上传和下载" aria-hidden="true">#</a> 通过命令行上传和下载</h3><blockquote><p>通过可视化工具进行拖拽很容易进行文件的上传和下载，那么我们怎么通过命令行进行呢？</p></blockquote><p>使用<code>rz</code>和<code>sz</code>进行上传和下载</p><ul><li>首先需要安装：<code>yum install lrzsz -y</code></li><li>直接输入rz进行上传</li><li>输入<code>sz 要下载的文件</code> 进行下载</li></ul><h2 id="压缩和解压" tabindex="-1"><a class="header-anchor" href="#压缩和解压" aria-hidden="true">#</a> 压缩和解压</h2><h3 id="tar" tabindex="-1"><a class="header-anchor" href="#tar" aria-hidden="true">#</a> tar</h3><blockquote><p>Linux和Mac有两种常用的压缩格式，后缀名分别为：</p><ul><li><code>.tar</code></li><li><code>.gz</code></li></ul></blockquote><p>针对以上的两种格式均可以使用<code>tar</code>命令进行<strong>压缩和解压</strong>操作</p><p>语法：<code>tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数n</code></p><ul><li><strong>-c：创建压缩文件，用于压缩模式</strong></li><li>-v：显示压缩、解压的过程，用于查看进度</li><li><strong>-x：解压模式</strong></li><li>-f：要创建的文件、要压缩的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z：gzip模式，不使用-z就是普通的tarball格式</li><li>-C：选择解压的目的地，用于解压模式</li></ul><blockquote><p><strong>tar压缩常用的组合为：</strong></p><ul><li><p><code>tar -cvf test.tar 1.txt 2.txt 3.txt</code></p><p>将1.txt 2.txt 3.txt压缩到test.tar文件中</p></li><li><p><code>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</code></p><p>将1.txt 2.txt 3.txt压缩到test.tar.gz文件中，使用gzip模式</p></li></ul><p><strong>注意：</strong></p><ul><li>-z选项如果需要使用一般处于第一个</li><li>-f选项，必须在选项的最后一个(这样后面的名称就是这个选项需要的)</li></ul><p><strong>tar解压常用的组合为：</strong></p><ul><li><p><code>tar -xvf test.tar</code></p><p>解压test.tar到当前目录</p></li><li><p><code>tar -xvf test.tar -C /root </code></p><p>解压test.tar到指定的/root目录</p></li><li><p><code>tar -zxvf test.tar.gz -C /root</code></p><p>使用gzip模式解压test.tar.gz到指定/root目录</p></li></ul><p><strong>注意：</strong></p><ul><li>-f选项，必须在选项的最后一位</li><li>-z选项建议在开头</li><li><strong>-C选项单独使用，和加压其他参数分开</strong></li></ul></blockquote><h3 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip</h3><blockquote><p>zip命令可以将文件压缩为zip压缩包</p></blockquote><p>语法：<code>zip [-r] 参数1 参数2 ... 参数n</code></p><ul><li>-r用于压缩文件夹</li></ul><p>示例：</p><ul><li><p><code>zip test.zip a.txt b.txt c.txt</code></p><p>将a.txt b.txt c.txt压缩到test.zip中</p></li><li><p><code>zip -r test.zip test dev application.yml</code></p><p>将test、dev两个文件夹和application.yml文件压缩到test.zip中</p></li></ul><h3 id="unzip" tabindex="-1"><a class="header-anchor" href="#unzip" aria-hidden="true">#</a> unzip</h3><blockquote><p>用于解压zip压缩包</p></blockquote><p>语法：<code>unzip [-d] 参数</code></p><ul><li>-d指定要解压到的位置</li></ul><p>示例：</p><ul><li><p><code>unzip test.zip</code></p><p>将test.zip解压到当前目录</p></li><li><p><code>unzip test.zip -d /root</code></p><p>将test.zip解压到/root目录</p></li></ul>`,259),i=[o];function d(r,l){return e(),n("div",null,i)}const u=t(s,[["render",d],["__file","one-week-learning-linux.html.vue"]]);export{u as default};
