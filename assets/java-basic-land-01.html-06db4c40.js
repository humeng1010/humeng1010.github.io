import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as p,f as t,e as n}from"./app-7ec69092.js";const e={},c=n('<div class="hint-container tip"><p class="hint-container-title">第一幕</p><p>语法之谜</p></div><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><blockquote><p>Java中的所有组成部分都需要名字，类名，变量名，方法名都被称为标识符</p></blockquote><ol><li><p>Java中的关键字不能作为标识符（就是关键字不能作为名字）</p><figure><img src="https://blog-images-1309758663.cos.ap-nanjing.myqcloud.com/202303181713950.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ol>',4),o=n(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="java是强类型语言" tabindex="-1"><a class="header-anchor" href="#java是强类型语言" aria-hidden="true">#</a> Java是强类型语言</h3><p>要求变量的使用严格符合类型规定，所有的变量必须先定义后才能使用</p><h3 id="数据类型-1" tabindex="-1"><a class="header-anchor" href="#数据类型-1" aria-hidden="true">#</a> 数据类型</h3><p>Java的数据类型分为两大类：基本类型和引用类型</p><p>Java语言类型：</p><p>基本类型：</p><p>数值类型：整数型，浮点型</p><p>boolean类型：占一位其值只有ture和false两个</p><p>引用数据类型：<strong>类，接口，数组</strong>（注意：字符串类型也是一个类，也属于引用数据类型）</p><h3 id="整型拓展" tabindex="-1"><a class="header-anchor" href="#整型拓展" aria-hidden="true">#</a> 整型拓展</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>十进制整数，如：<span class="token number">99</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">0</span>。
        八进制整数，要求以 <span class="token number">0</span>开头，如：<span class="token number">015</span>。
        十六进制数，要求 <span class="token number">0</span>x或 <span class="token number">0</span>X开头，如：<span class="token number">0x15</span> 。

        <span class="token comment">//整型 </span>
        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i2<span class="token operator">=</span><span class="token number">010</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i3<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10 System.out.println(i2); //8 System.out.println(i3); //16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符型拓展" tabindex="-1"><a class="header-anchor" href="#字符型拓展" aria-hidden="true">#</a> 字符型拓展</h3><p>单引号用来表示字符常量。例如&#39;A&#39;是一个字符，他与&quot;A&quot;是不同的，&quot;A&quot;表示的是一个字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//代码1 </span>
<span class="token class-name">String</span> sa<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sa<span class="token operator">==</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false,因为sa与sb是通过String对象new出来的,创建了两个对象，而且sa和sb的地址也不一样，所以返回false</span>
<span class="token comment">//代码2 </span>
        <span class="token class-name">String</span> sc<span class="token operator">=</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sd<span class="token operator">=</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token operator">==</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，因为创建的都是同一个对象，地址一样，内容也一样，所以返回true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔类型拓展" tabindex="-1"><a class="header-anchor" href="#布尔类型拓展" aria-hidden="true">#</a> 布尔类型拓展</h3><p>boolean类型：一位，不是一个字节，就是0或1</p><p>boolean类型有两个值，true和false，不可以用0或1代替true或false，这点和c语言不同</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>if(is==true&amp;&amp;un==false){

        }
        if(is&amp;&amp;!un){
        //是一样的，熟练的人应该使用下面的方式，代码要精简易读！
        }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>因为Java是强类型的语言，所以有时候进行运算的时候，需要类型转换。</p><blockquote><p>低 ------------------------------------&gt; 高</p><p>byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</p></blockquote><p>类型转换满足的规则：</p><ul><li>不能对boolean类型进行类型转换</li><li>不能把对象类型转换成不相关类的对象</li><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li><li>转换过程中可能导致溢出或损失精度</li><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</li></ul><h3 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换" aria-hidden="true">#</a> 自动类型转换</h3><p>自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型</p><p>byte,short,char是直接转换成int类型进行运算的</p><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> nx<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span> <span class="token comment">//值为3 </span>
        <span class="token keyword">char</span> c<span class="token operator">=</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> d<span class="token operator">=</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//98 </span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//b </span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java的switch参数与case匹配规则的本质" tabindex="-1"><a class="header-anchor" href="#java的switch参数与case匹配规则的本质" aria-hidden="true">#</a> java的switch参数与case匹配规则的本质</h3><p>switch语句中的执行过程是，表达式里面的值可以直接匹配到case里面的值，因为编译器有一套算法，这也是switch语句执行起来高效的原因。</p><p>编译器对switch语句有两套算法，</p><p>第一种情况，如果case里面的值都是比较接近的。</p><p>例如是这样的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">switch</span>（num）<span class="token punctuation">{</span>

        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>

        执行语句；

        <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>

        执行语句；

        <span class="token keyword">break</span>；

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会把case值装到一个类似数组的容器里，然后通过索引直接找到具体的值。数组遍历是不用挨个遍历的，通过索引可以锁定具体的值。</p><p>第二种情况，case里面的值间距比较大，比如第一个case里面的值是1，第二个case里面的值是2，第三个case里面的值是1000，这会儿编译器的算法是通过二分查找法，来找到具体case值。</p><h2 id="方法参数传递机制-值传递" tabindex="-1"><a class="header-anchor" href="#方法参数传递机制-值传递" aria-hidden="true">#</a> 方法参数传递机制：值传递</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>基本类型的参数传输存储的：数据值
引用类型的参数传输存储的：地址值
主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">day01</span><span class="token punctuation">;</span>

<span class="token comment">//方法参数传递机制：值传递</span>
<span class="token comment">//基本类型的参数传输存储的：数据值</span>
<span class="token comment">//引用类型的参数传输存储的：地址值</span>
<span class="token comment">//主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D11_method</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        基本类型</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
        <span class="token function">changeNum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递的是num的值：22</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        引用类型</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;地址为&quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递的是地址值：[I@75b84c92</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//222</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;地址为&quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;地址为&quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//22</span>
        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//222</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;地址为&quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function l(i,u){return a(),p("div",null,[c,t(" more "),o])}const k=s(e,[["render",l],["__file","java-basic-land-01.html.vue"]]);export{k as default};
