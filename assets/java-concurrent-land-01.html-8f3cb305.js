const e=JSON.parse('{"key":"v-08374725","path":"/java/concurrent/java-concurrent-land-01.html","title":"多线程","lang":"zh-CN","frontmatter":{"title":"多线程","description":"多线程 image-20220811094813259 多线程是什么？ 多线程是指从硬件上实现多条执行流程的技术; 多线程用在哪？有什么好处 购票系统; 百度网盘的下载和上传; 消息通信(收发消息)，淘宝，京东...; 多线程的创建 方式一：继承Thread类 1. 定义一个子类MyThread继承线程类java.lang.Thread，重写run()...","head":[["meta",{"property":"og:url","content":"https://www.javaworld.top/java/concurrent/java-concurrent-land-01.html"}],["meta",{"property":"og:site_name","content":"JavaWorld"}],["meta",{"property":"og:title","content":"多线程"}],["meta",{"property":"og:description","content":"多线程 image-20220811094813259 多线程是什么？ 多线程是指从硬件上实现多条执行流程的技术; 多线程用在哪？有什么好处 购票系统; 百度网盘的下载和上传; 消息通信(收发消息)，淘宝，京东...; 多线程的创建 方式一：继承Thread类 1. 定义一个子类MyThread继承线程类java.lang.Thread，重写run()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-18T15:54:17.000Z"}],["meta",{"property":"article:author","content":"Hu Meng"}],["meta",{"property":"article:modified_time","content":"2023-09-18T15:54:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-18T15:54:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hu Meng\\",\\"url\\":\\"https://github.com/humeng1010\\"}]}"]]},"headers":[{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[]},{"level":2,"title":"多线程的创建","slug":"多线程的创建","link":"#多线程的创建","children":[{"level":3,"title":"方式一：继承Thread类","slug":"方式一-继承thread类","link":"#方式一-继承thread类","children":[]},{"level":3,"title":"方式二：实现Runnable接口","slug":"方式二-实现runnable接口","link":"#方式二-实现runnable接口","children":[]},{"level":3,"title":"方式三：JDK5.0新增：实现Callable接口","slug":"方式三-jdk5-0新增-实现callable接口","link":"#方式三-jdk5-0新增-实现callable接口","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"Thread的常用方法","slug":"thread的常用方法","link":"#thread的常用方法","children":[]},{"level":2,"title":"Thread类的线程休眠方法","slug":"thread类的线程休眠方法","link":"#thread类的线程休眠方法","children":[{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"线程安全","slug":"线程安全","link":"#线程安全","children":[{"level":3,"title":"线程安全是什么、方式的原因","slug":"线程安全是什么、方式的原因","link":"#线程安全是什么、方式的原因","children":[]}]},{"level":2,"title":"线程同步","slug":"线程同步","link":"#线程同步","children":[{"level":3,"title":"线程同步核心思想","slug":"线程同步核心思想","link":"#线程同步核心思想","children":[]},{"level":3,"title":"方式一：同步代码块","slug":"方式一-同步代码块","link":"#方式一-同步代码块","children":[]},{"level":3,"title":"锁对象要求","slug":"锁对象要求","link":"#锁对象要求","children":[]},{"level":3,"title":"方式二：同步方法","slug":"方式二-同步方法","link":"#方式二-同步方法","children":[]},{"level":3,"title":"Lock锁","slug":"lock锁","link":"#lock锁","children":[]}]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"线程池实现的API、参数说明","slug":"线程池实现的api、参数说明","link":"#线程池实现的api、参数说明","children":[{"level":3,"title":"谁代表线程池？","slug":"谁代表线程池","link":"#谁代表线程池","children":[]},{"level":3,"title":"如何得到线程对象？","slug":"如何得到线程对象","link":"#如何得到线程对象","children":[]},{"level":3,"title":"ThreadPoolExecutor构造器的参数说明","slug":"threadpoolexecutor构造器的参数说明","link":"#threadpoolexecutor构造器的参数说明","children":[]}]},{"level":2,"title":"线程池常见面试题","slug":"线程池常见面试题","link":"#线程池常见面试题","children":[{"level":3,"title":"临时线程什么时候创建？","slug":"临时线程什么时候创建","link":"#临时线程什么时候创建","children":[]},{"level":3,"title":"什么时候会开始拒绝任务？","slug":"什么时候会开始拒绝任务","link":"#什么时候会开始拒绝任务","children":[]}]},{"level":2,"title":"线程池处理Runnable任务","slug":"线程池处理runnable任务","link":"#线程池处理runnable任务","children":[]},{"level":2,"title":"线程处理Callable任务","slug":"线程处理callable任务","link":"#线程处理callable任务","children":[]},{"level":2,"title":"Executors工具类实现线程池","slug":"executors工具类实现线程池","link":"#executors工具类实现线程池","children":[{"level":3,"title":"Executors得到线程对象的常用方法","slug":"executors得到线程对象的常用方法","link":"#executors得到线程对象的常用方法","children":[]},{"level":3,"title":"Executors使用可能存在的陷阱","slug":"executors使用可能存在的陷阱","link":"#executors使用可能存在的陷阱","children":[]}]},{"level":2,"title":"定时器的实现方式","slug":"定时器的实现方式","link":"#定时器的实现方式","children":[{"level":3,"title":"Timer定时器(不推荐使用)","slug":"timer定时器-不推荐使用","link":"#timer定时器-不推荐使用","children":[]},{"level":3,"title":"ScheduledExecutorService定时器","slug":"scheduledexecutorservice定时器","link":"#scheduledexecutorservice定时器","children":[]}]},{"level":2,"title":"线程的并发与并行","slug":"线程的并发与并行","link":"#线程的并发与并行","children":[{"level":3,"title":"并发与并行","slug":"并发与并行","link":"#并发与并行","children":[]},{"level":3,"title":"并发的理解","slug":"并发的理解","link":"#并发的理解","children":[]},{"level":3,"title":"并行的理解","slug":"并行的理解","link":"#并行的理解","children":[]}]},{"level":2,"title":"线程的生命周期","slug":"线程的生命周期","link":"#线程的生命周期","children":[{"level":3,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":3,"title":"Java线程的状态","slug":"java线程的状态","link":"#java线程的状态","children":[]}]}],"git":{"createdTime":1695052457000,"updatedTime":1695052457000,"contributors":[{"name":"humeng","email":"humeng_mail@163.com","commits":1}]},"readingTime":{"minutes":22.78,"words":6835},"filePathRelative":"java/concurrent/java-concurrent-land-01.md","localizedDate":"2023年9月18日","autoDesc":true,"excerpt":""}');export{e as data};
