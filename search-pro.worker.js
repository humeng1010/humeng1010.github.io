const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}W(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f==null||f.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1500,\"nextId\":1500,\"documentIds\":{\"0\":\"v-79fdd481\",\"1\":\"v-79fdd481#发现新的世界\",\"2\":\"v-79fdd481#探险的第一步\",\"3\":\"v-79fdd481#挑战的开始\",\"4\":\"v-79fdd481#巨大的收获\",\"5\":\"v-79fdd481#探险的精髓\",\"6\":\"v-79fdd481#击败终极boss\",\"7\":\"v-79fdd481#重获大陆\",\"8\":\"v-79fdd481#夺回大陆的意义\",\"9\":\"v-79fdd481#迷失的起点\",\"10\":\"v-79fdd481#迷茫的选择\",\"11\":\"v-79fdd481#探索的艰辛\",\"12\":\"v-79fdd481#知识的指引\",\"13\":\"v-79fdd481#技能的提升\",\"14\":\"v-79fdd481#重重挑战\",\"15\":\"v-79fdd481#最终试炼\",\"16\":\"v-79fdd481#迎接挑战\",\"17\":\"v-79fdd481#寻找大陆归宿\",\"18\":\"v-79fdd481#结束与新的开始\",\"19\":\"v-79fdd481#奇妙的大陆\",\"20\":\"v-79fdd481#探寻真相\",\"21\":\"v-79fdd481#遇到挑战\",\"22\":\"v-79fdd481#收获知识\",\"23\":\"v-79fdd481#突破技能\",\"24\":\"v-79fdd481#运用技巧\",\"25\":\"v-79fdd481#绝地反击\",\"26\":\"v-79fdd481#终极试炼\",\"27\":\"v-79fdd481#夺回大陆\",\"28\":\"v-79fdd481#蔑视的眼神\",\"29\":\"v-79fdd481#师徒相助的契机\",\"30\":\"v-79fdd481#挑战一-语法之迷\",\"31\":\"v-79fdd481#解谜之道\",\"32\":\"v-79fdd481#挑战二-面向对象的力量\",\"33\":\"v-79fdd481#面向对象的秘密\",\"34\":\"v-79fdd481#挑战三-数据结构的奥秘\",\"35\":\"v-79fdd481#巧妙运用数据结构\",\"36\":\"v-79fdd481#挑战四-异常的破解\",\"37\":\"v-79fdd481#异常处理的智慧\",\"38\":\"v-79fdd481#挑战五-图形界面的绚丽\",\"39\":\"v-79fdd481#创意与技术的结合\",\"40\":\"v-79fdd481#迎接新挑战\",\"41\":\"v-79fdd481#解锁知识的密码\",\"42\":\"v-79fdd481#掌握对象的奥秘\",\"43\":\"v-79fdd481#探索继承的力量\",\"44\":\"v-79fdd481#迎接多态的挑战\",\"45\":\"v-79fdd481#征服异常的迷雾\",\"46\":\"v-79fdd481#星光大陆的获得与新挑战\",\"47\":\"v-79fdd481#知识的升华\",\"48\":\"v-79fdd481#新的挑战与成长\",\"49\":\"v-79fdd481#探索未知的世界\",\"50\":\"v-79fdd481#掌握基础技巧\",\"51\":\"v-79fdd481#面向对象编程\",\"52\":\"v-79fdd481#异常处理\",\"53\":\"v-79fdd481#输入输出流\",\"54\":\"v-79fdd481#拓展技巧领域\",\"55\":\"v-79fdd481#多线程编程\",\"56\":\"v-79fdd481#数据库连接\",\"57\":\"v-79fdd481#图形界面开发\",\"58\":\"v-79fdd481#全新挑战之路\",\"59\":\"v-79fdd481#面对前方的困境\",\"60\":\"v-79fdd481#与伙伴们的交流\",\"61\":\"v-79fdd481#集思广益的大会\",\"62\":\"v-79fdd481#演练与实践\",\"63\":\"v-79fdd481#探索新的领域\",\"64\":\"v-79fdd481#收获与成长\",\"65\":\"v-79fdd481#决战终极试炼\",\"66\":\"v-79fdd481#重获大陆的希望\",\"67\":\"v-79fdd481#新的征程\",\"68\":\"v-79fdd481#结语\",\"69\":\"v-79fdd481#迫于困境\",\"70\":\"v-79fdd481#再次学习\",\"71\":\"v-79fdd481#巧妙运用技巧\",\"72\":\"v-79fdd481#真正的绝地试炼\",\"73\":\"v-79fdd481#胜利的果实\",\"74\":\"v-79fdd481#新的起点\",\"75\":\"v-79fdd481#探险的终点\",\"76\":\"v-79fdd481#极限挑战的到来\",\"77\":\"v-79fdd481#无尽的迷宫\",\"78\":\"v-79fdd481#知识的呼唤\",\"79\":\"v-79fdd481#难度逐渐攀升\",\"80\":\"v-79fdd481#团结的力量\",\"81\":\"v-79fdd481#能力的进化\",\"82\":\"v-79fdd481#最终的试炼\",\"83\":\"v-79fdd481#出口的启示\",\"84\":\"v-79fdd481#面临威胁\",\"85\":\"v-79fdd481#激烈战斗\",\"86\":\"v-79fdd481#夺回知识宝藏\",\"87\":\"v-79fdd481#技能的进阶\",\"88\":\"v-79fdd481#终极试炼-2\",\"89\":\"v-79fdd481#胜利与重生\",\"90\":\"v-79fdd481#真正的终点\",\"91\":\"v-5c75fd06\",\"92\":\"v-5c75fd06#专业技能\",\"93\":\"v-5c75fd06#简历模板\",\"94\":\"v-5c75fd06#项目经历\",\"95\":\"v-5c75fd06#胖达-api-开放平台\",\"96\":\"v-5c75fd06#你的项目中使用了哪些技术栈-请分别介绍一下-spring-boot、dubbo、gateway-在项目中的作用。\",\"97\":\"v-5c75fd06#你将后端项目划分为了多个子项目-请分别介绍这几个子项目的作用、以及它们之间是如何协作和交互的\",\"98\":\"v-5c75fd06#请简要介绍-maven-的基本概念、作用以及如何使用-maven-进行多模块依赖管理和打包\",\"99\":\"v-5c75fd06#请介绍一下你是如何使用-mybatis-plus-框架的-querywrapper-实现了对-mysql-的灵活查询\",\"100\":\"v-5c75fd06#你在项目中使用了-swagger-knife4j-自动生成接口文档-请谈谈-swagger-和-knife4j-的作用和它们对项目开发的影响。\",\"101\":\"v-5c75fd06#什么是-api-签名认证算法-它有什么作用-你又是如何实现它的\",\"102\":\"v-5c75fd06#你在项目中使用了-spring-cloud-gateway-作为-api-网关-请解释一下-api-网关的应用场景-以及它在项目中的实际应用\",\"103\":\"v-5c75fd06#你是如何基于-spring-boot-starter-开发了客户端-sdk-的-讲述一下实现过程\",\"104\":\"v-5c75fd06#用户如何使用你开发的客户端-sdk-讲述一下流程。\",\"105\":\"v-5c75fd06#有哪些客户端-sdk-的设计技巧\",\"106\":\"v-5c75fd06#什么是-rpc-为什么要使用-dubbo-rpc-框架-它有什么优势\",\"107\":\"v-5c75fd06#你在项目中是如何使用-dubbo-rpc-框架的-讲述一下使用流程\",\"108\":\"v-5c75fd06#你通过-api-网关实现了流量染色技术-请介绍一下流量染色的概念、以及它的作用\",\"109\":\"v-5c75fd06#篝火-伙伴匹配系统\",\"110\":\"v-5c75fd06#请介绍一下你在项目中使用的-redis-它有哪些优势-为什么选择使用-redis-实现分布式-session\",\"111\":\"v-5c75fd06#你在用户登录功能中提到使用-hash-代替-string-存储用户信息-这样的做法有什么好处-在实际应用中-hash-与-string-存储方式有哪些区别\",\"112\":\"v-5c75fd06#你是如何自定义线程池的-如何合理设置线程池的参数\",\"113\":\"v-5c75fd06#你在使用-redis-缓存高频访问用户信息时提到了自定义序列化器-为什么需要自定义序列化器-以及自定义序列化器的实现方式\",\"114\":\"v-5c75fd06#你在项目中是如何实现-redis-缓存的-选用了哪种-redis-数据结构\",\"115\":\"v-5c75fd06#使用-redis-缓存时-有哪些可能出现的常见问题-你又是如何解决的\",\"116\":\"v-5c75fd06#在解决首页加载过慢的问题中-你使用了-spring-scheduler-定时任务和分布式锁-请解释一下定时任务的执行原理和此处分布式锁的作用。\",\"117\":\"v-5c75fd06#你在项目中使用-redisson-分布式锁解决了接口幂等性的问题-请简要介绍一下-redisson-分布式锁的使用场景和实现原理。\",\"118\":\"v-5c75fd06#编辑距离算法是什么-它在你实现的用户匹配功能中起到了什么作用-请解释一下编辑距离算法的实现原理。\",\"119\":\"v-5c75fd06#在项目中-你自主编写了-dockerfile-来实现自动化镜像构建及容器部署-请介绍一下用-docker-的优势\",\"120\":\"v-5c75fd06#你在项目中使用-knife4j-和-swagger-自动生成后端接口文档-请解释一下-swagger-的作用-以及在项目中使用-swagger-的好处。\",\"121\":\"v-5c75fd06#个人介绍\",\"122\":\"v-5c75fd06#redis篇\",\"123\":\"v-5c75fd06#在你的项目中是怎么使用redis的\",\"124\":\"v-5c75fd06#介绍一下缓存穿透-以及如何解决\",\"125\":\"v-5c75fd06#什么是缓存击穿-如何解决\",\"126\":\"v-5c75fd06#什么是缓存雪崩-如何解决\",\"127\":\"v-5c75fd06#redis作为缓存-mysql的数据如何与redis数据保持一致性-双写一致性\",\"128\":\"v-5c75fd06#redis作为缓存-数据的持久化是怎么做的\",\"129\":\"v-5c75fd06#redis数据过期策略\",\"130\":\"v-5c75fd06#redis数据淘汰策略\",\"131\":\"v-5c75fd06#redis分布式锁\",\"132\":\"v-5c75fd06#redis分布式锁如何合理的控制锁的有效时间\",\"133\":\"v-5c75fd06#redisson的锁可以重入吗\",\"134\":\"v-5c75fd06#redisson锁可以解决主从数据的一致问题吗\",\"135\":\"v-5c75fd06#介绍redis的主从同步\",\"136\":\"v-5c75fd06#介绍一下redis中哨兵的作用\",\"137\":\"v-5c75fd06#redis集群脑裂-该如何解决\",\"138\":\"v-5c75fd06#分片集群解决海量数据的存储和高并发的写操作\",\"139\":\"v-5c75fd06#redis是单线程的-但是为什么还那么快\",\"140\":\"v-5c75fd06#mysql篇\",\"141\":\"v-5c75fd06#如何定位慢查询\",\"142\":\"v-5c75fd06#如何分析慢查询\",\"143\":\"v-5c75fd06#了解过索引吗-什么是索引\",\"144\":\"v-5c75fd06#索引的底层数据结构是什么样的\",\"145\":\"v-5c75fd06#什么是聚簇索引-聚集索引-什么是非聚簇索引-非聚集索引、二级索引\",\"146\":\"v-5c75fd06#什么是回表查询\",\"147\":\"v-5c75fd06#什么是覆盖索引\",\"148\":\"v-5c75fd06#mysql超大分页处理\",\"149\":\"v-5c75fd06#创建索引的原则有哪些\",\"150\":\"v-5c75fd06#什么情况下索引会失效\",\"151\":\"v-5c75fd06#事务的特性是什么\",\"152\":\"v-5c75fd06#并发事务带来哪些问题-怎么解决-mysql默认的隔离级别是什么\",\"153\":\"v-5c75fd06#undo-log和redo-log的区别\",\"154\":\"v-5c75fd06#事务中的隔离性是如何保证的呢-解释一下mvcc\",\"155\":\"v-5c75fd06#mysql主从同步原理\",\"156\":\"v-5c75fd06#mysql的分库分表\",\"157\":\"v-5c75fd06#框架篇\",\"158\":\"v-5c75fd06#spring中的bean是线程安全的吗\",\"159\":\"v-5c75fd06#bean的作用域有哪些\",\"160\":\"v-5c75fd06#什么是aop-你的项目中有没有使用到aop\",\"161\":\"v-5c75fd06#spring中的事务是如何实现的\",\"162\":\"v-5c75fd06#spring中事务失效的场景有哪些\",\"163\":\"v-5c75fd06#spring的bean的生命周期\",\"164\":\"v-5c75fd06#spring中的循环引用\",\"165\":\"v-5c75fd06#构造方法出现了循环依赖怎么解决\",\"166\":\"v-5c75fd06#springmvc的执行流程\",\"167\":\"v-5c75fd06#spring-mvc-的核心组件有哪些\",\"168\":\"v-5c75fd06#springboot的自动配置原理\",\"169\":\"v-5c75fd06#spring-spring-mvc-springboot-常用注解有哪些\",\"170\":\"v-5c75fd06#mybatis\",\"171\":\"v-5c75fd06#项目中使用的spring-cloud组件有哪些\",\"172\":\"v-5c75fd06#服务注册和发现是什么意思-spring-cloud如何实现服务注册发现\",\"173\":\"v-5c75fd06#nacos和eureka的区别\",\"174\":\"v-5c75fd06#什么是cap理论\",\"175\":\"v-5c75fd06#消息队列\",\"176\":\"v-5c75fd06#消息队列可以用来干什么-在你的项目中有使用到吗\",\"177\":\"v-5c75fd06#rocketmq如何保证消息的顺序性\",\"178\":\"v-5c75fd06#如何避免消息的重复消费\",\"179\":\"v-5c75fd06#如何解决消息大量堆积的问题\",\"180\":\"v-5c75fd06#常见集合篇\",\"181\":\"v-5c75fd06#数组\",\"182\":\"v-5c75fd06#为什么java的数组下标从0开始而不是从1开始\",\"183\":\"v-5c75fd06#arraylist底层的实现原理是什么\",\"184\":\"v-5c75fd06#如何实现数组和list之间的转换\",\"185\":\"v-5c75fd06#数组调用arrays-tolist-转换list之后修改数组会影响list吗\",\"186\":\"v-5c75fd06#list用toarray转数组后-如果修改了list内容-数组受影响吗\",\"187\":\"v-5c75fd06#arraylist与linkedlist的区别\",\"188\":\"v-5c75fd06#说一下hashmap的实现原理\",\"189\":\"v-5c75fd06#hashmap的jdk1-7和jdk1-8有什么区别\",\"190\":\"v-5c75fd06#hashmap的put方法的具体流程\",\"191\":\"v-5c75fd06#hashmap的扩容机制\",\"192\":\"v-5c75fd06#hashmap的寻址算法\",\"193\":\"v-5c75fd06#为何hashmap的数组长度一定是2的次幂\",\"194\":\"v-5c75fd06#hashset与hashmap的区别\",\"195\":\"v-5c75fd06#并发编程篇\",\"196\":\"v-5c75fd06#线程的基础知识\",\"197\":\"v-5c75fd06#什么是线程和进程\",\"198\":\"v-5c75fd06#并发与并行的区别\",\"199\":\"v-5c75fd06#创建线程的方式有哪些\",\"200\":\"v-5c75fd06#runnable-和-callable-有什么区别\",\"201\":\"v-5c75fd06#线程的-run-和-start-有什么区别\",\"202\":\"v-5c75fd06#可以直接调用-thread-类的-run-方法吗\",\"203\":\"v-5c75fd06#说说线程包含哪些状态\",\"204\":\"v-5c75fd06#线程状态之间是如何变化的\",\"205\":\"v-5c75fd06#如何保证线程的顺序执行\",\"206\":\"v-5c75fd06#notify和notifyall有什么区别\",\"207\":\"v-5c75fd06#sleep-方法和-wait-方法对比\",\"208\":\"v-5c75fd06#如何停止一个正在运行的线程\",\"209\":\"v-5c75fd06#线程中并发安全的问题\",\"210\":\"v-5c75fd06#讲一下synchronized关键字的底层原理\",\"211\":\"v-5c75fd06#什么是cas\",\"212\":\"v-5c75fd06#谈谈你对volatile关键字的理解\",\"213\":\"v-5c75fd06#什么是aqs\",\"214\":\"v-5c75fd06#reentrantlock的实现原理\",\"215\":\"v-5c75fd06#synchronized和lock有什么区别\",\"216\":\"v-5c75fd06#死锁产生的条件是什么\",\"217\":\"v-5c75fd06#聊一下concurrenthashmap\",\"218\":\"v-5c75fd06#线程池的内容\",\"219\":\"v-5c75fd06#说一下线程池的核心参数-线程池的执行原理知道吗\",\"220\":\"v-5c75fd06#如何确定核心线程数\",\"221\":\"v-5c75fd06#threadlocal-有什么用\",\"222\":\"v-5c75fd06#threadlocal-内存泄露问题是怎么导致的\",\"223\":\"v-71b3ae87\",\"224\":\"v-ce181fde\",\"225\":\"v-ce181fde#jdbc简介\",\"226\":\"v-ce181fde#jdbc快速入门\",\"227\":\"v-ce181fde#jdbc-api详解\",\"228\":\"v-ce181fde#drivermanager工具类\",\"229\":\"v-ce181fde#connection\",\"230\":\"v-ce181fde#statement\",\"231\":\"v-ce181fde#resultset\",\"232\":\"v-ce181fde#preparedstatement\",\"233\":\"v-ce181fde#作用\",\"234\":\"v-ce181fde#原理\",\"235\":\"v-ce181fde#数据库连接池\",\"236\":\"v-ce181fde#简介\",\"237\":\"v-ce181fde#数据库连接池的实现\",\"238\":\"v-ce181fde#druid数据库连接池\",\"239\":\"v-ce181fde#使用步骤\",\"240\":\"v-ce181fde#druid配置详解\",\"241\":\"v-ce181fde#练习-完成商品品牌数据的增删改查操作\",\"242\":\"v-ce181fde#准备环境\",\"243\":\"v-ce181fde#sql\",\"244\":\"v-ce181fde#实体类\",\"245\":\"v-ce181fde#测试用例\",\"246\":\"v-ce181fde@0\",\"247\":\"v-ce181fde@1\",\"248\":\"v-8f11214a\",\"249\":\"v-8f11214a#maven简介\",\"250\":\"v-8f11214a#maven仓库\",\"251\":\"v-8f11214a#maven环境配置\",\"252\":\"v-8f11214a#maven的基本使用\",\"253\":\"v-8f11214a#maven的常用命令\",\"254\":\"v-8f11214a#maven生命周期\",\"255\":\"v-8f11214a#idea配置maven\",\"256\":\"v-8f11214a#maven坐标\",\"257\":\"v-8f11214a#依赖管理\",\"258\":\"v-8f11214a#使用坐标导入jar包\",\"259\":\"v-8f11214a#依赖范围\",\"260\":\"v-2d0c8cf3\",\"261\":\"v-2d0c8cf3#什么是mybatis\",\"262\":\"v-2d0c8cf3#持久层\",\"263\":\"v-2d0c8cf3#mybatis快速入门\",\"264\":\"v-2d0c8cf3#查询user表中的所有数据\",\"265\":\"v-2d0c8cf3#mapper代理开发\",\"266\":\"v-2d0c8cf3#步骤\",\"267\":\"v-2d0c8cf3#mybatis核心配置文件\",\"268\":\"v-2d0c8cf3#别名typealiases属性\",\"269\":\"v-2d0c8cf3#结果映射\",\"270\":\"v-2d0c8cf3#resultmap标签\",\"271\":\"v-2d0c8cf3#参数占位符\",\"272\":\"v-2d0c8cf3#条件查询\",\"273\":\"v-2d0c8cf3#动态条件查询\",\"274\":\"v-2d0c8cf3#单条件的动态查询\",\"275\":\"v-2d0c8cf3#添加-mybatis事务默认开启的-需要手动提交\",\"276\":\"v-2d0c8cf3#返回添加数据的主键\",\"277\":\"v-2d0c8cf3#修改-动态字段\",\"278\":\"v-2d0c8cf3#删除\",\"279\":\"v-2d0c8cf3#根据id删除\",\"280\":\"v-2d0c8cf3#批量删除\",\"281\":\"v-2d0c8cf3#参数传递\",\"282\":\"v-2d0c8cf3#建议\",\"283\":\"v-2d0c8cf3#注解完成增删改查\",\"284\":\"v-2d0c8cf3#提示\",\"285\":\"v-2639a3f0\",\"286\":\"v-2639a3f0#http\",\"287\":\"v-2639a3f0#http-请求数据格式\",\"288\":\"v-2639a3f0#http响应数据格式\",\"289\":\"v-2639a3f0#apache-tmocat\",\"290\":\"v-2639a3f0#概述\",\"291\":\"v-2639a3f0#总结\",\"292\":\"v-2639a3f0#idea中创建maven-web项目\",\"293\":\"v-2639a3f0#idea中使用tomcat\",\"294\":\"v-2639a3f0#servlet\",\"295\":\"v-2639a3f0#快速入门\",\"296\":\"v-2639a3f0#servlet执行流程\",\"297\":\"v-2639a3f0#servlet生命周期\",\"298\":\"v-2639a3f0#servlet方法介绍\",\"299\":\"v-2639a3f0#servlet体系结构\",\"300\":\"v-2639a3f0#思考\",\"301\":\"v-2639a3f0#总结-1\",\"302\":\"v-2639a3f0#servlet-urlpattern配置\",\"303\":\"v-2639a3f0#使用xml配置servlet\",\"304\":\"v-2639a3f0#request-response\",\"305\":\"v-2639a3f0#request\",\"306\":\"v-2639a3f0#request继承体系\",\"307\":\"v-2639a3f0#request获取请求数据\",\"308\":\"v-2639a3f0#request使用通用方式获取参数\",\"309\":\"v-2639a3f0#请求参数中文乱码处理\",\"310\":\"v-2639a3f0#request请求转发\",\"311\":\"v-2639a3f0#response\",\"312\":\"v-2639a3f0#response设置响应数据功能介绍\",\"313\":\"v-2639a3f0#response完成重定向\",\"314\":\"v-2639a3f0#response响应字符数据\",\"315\":\"v-2639a3f0#response响应字节数据\",\"316\":\"v-2639a3f0#sqlsessionfatory工具类抽取\",\"317\":\"v-2639a3f0#jsp\",\"318\":\"v-2639a3f0#jsp快速入门\",\"319\":\"v-2639a3f0#jsp原理\",\"320\":\"v-2639a3f0#jsp脚本\",\"321\":\"v-2639a3f0#jsp缺点\",\"322\":\"v-2639a3f0#el表达式\",\"323\":\"v-2639a3f0#jstl标签\",\"324\":\"v-2639a3f0#mvc模式和三层架构\",\"325\":\"v-2639a3f0#mvc\",\"326\":\"v-2639a3f0#三层架构\",\"327\":\"v-2639a3f0#会话跟踪技术\",\"328\":\"v-2639a3f0#cookie\",\"329\":\"v-2639a3f0#基本使用\",\"330\":\"v-2639a3f0#cookie原理\",\"331\":\"v-2639a3f0#cookie的使用细节\",\"332\":\"v-2639a3f0#session\",\"333\":\"v-2639a3f0#基本使用-1\",\"334\":\"v-2639a3f0#session原理\",\"335\":\"v-2639a3f0#session的使用细节\",\"336\":\"v-2639a3f0#小结\",\"337\":\"v-2639a3f0#filter\",\"338\":\"v-2639a3f0#filter快速入门\",\"339\":\"v-2639a3f0#filter执行流程\",\"340\":\"v-2639a3f0#filter使用细节\",\"341\":\"v-2639a3f0#listener\",\"342\":\"v-3649300a\",\"343\":\"v-3649300a#注意\",\"344\":\"v-3649300a#简介\",\"345\":\"v-3649300a#mysql5-7版本在centos系统安装\",\"346\":\"v-3649300a#安装\",\"347\":\"v-3649300a#配置\",\"348\":\"v-3649300a#mysql8-0版本在centos系统安装\",\"349\":\"v-3649300a#安装-1\",\"350\":\"v-3649300a#配置-1\",\"351\":\"v-3649300a#简介-1\",\"352\":\"v-3649300a#安装-2\",\"353\":\"v-3649300a#安装jdk环境\",\"354\":\"v-3649300a#解压并部署tomcat\",\"355\":\"v-3649300a#简介-2\",\"356\":\"v-3649300a#安装-3\",\"357\":\"v-3649300a#简介-3\",\"358\":\"v-3649300a#安装-4\",\"359\":\"v-3649300a#简介-4\",\"360\":\"v-3649300a#安装-5\",\"361\":\"v-3649300a#简介-5\",\"362\":\"v-3649300a#安装-6\",\"363\":\"v-3649300a#介绍\",\"364\":\"v-3649300a#部署\",\"365\":\"v-3649300a#配置多台linux虚拟机\",\"366\":\"v-3649300a#准备主机名映射\",\"367\":\"v-3649300a#配置ssh免密登录\",\"368\":\"v-3649300a#简介-6\",\"369\":\"v-3649300a#ssh免密配置\",\"370\":\"v-3649300a#配置jdk环境\",\"371\":\"v-3649300a#关闭防火墙和selinux\",\"372\":\"v-3649300a#添加快照\",\"373\":\"v-3649300a#补充命令-scp\",\"374\":\"v-3649300a#简介-7\",\"375\":\"v-3649300a#安装-7\",\"376\":\"v-3649300a#简介-8\",\"377\":\"v-3649300a#安装-8\",\"378\":\"v-3649300a#测试kafka能否正常使用\",\"379\":\"v-3649300a#简介-9\",\"380\":\"v-3649300a#前置要求\",\"381\":\"v-3649300a#hadoop集群角色\",\"382\":\"v-3649300a#角色和节点分配\",\"383\":\"v-3649300a#安装-9\",\"384\":\"v-3649300a#调整虚拟机内存\",\"385\":\"v-3649300a#zookeeper集群部署\",\"386\":\"v-3649300a#hadoop集群部署\",\"387\":\"v-3649300a#验证hadoop集群运行情况\",\"388\":\"v-3649300a#简介-10\",\"389\":\"v-3649300a#安装-10\",\"390\":\"v-3649300a#注意-1\",\"391\":\"v-3649300a#简介-11\",\"392\":\"v-3649300a#安装-11\",\"393\":\"v-3649300a#注意-2\",\"394\":\"v-3649300a#简介-12\",\"395\":\"v-3649300a#安装-12\",\"396\":\"v-3649300a#简介-13\",\"397\":\"v-3649300a#安装-13\",\"398\":\"v-3649300a#安装前准备-mysql\",\"399\":\"v-3649300a#安装zabbix-server-和-zabbix-agent\",\"400\":\"v-3649300a#a-安装zabbix-yum库\",\"401\":\"v-3649300a#b-安装zabbix-server、前端、agent\",\"402\":\"v-3649300a#c-初始化mysql数据库\",\"403\":\"v-3649300a#d-为zabbix-server配置数据库\",\"404\":\"v-3649300a#e-配置zabbix的php前端\",\"405\":\"v-3649300a#配置zabbix-前端-web-ui\",\"406\":\"v-3649300a#简介-14\",\"407\":\"v-3649300a#安装-14\",\"408\":\"v-3649300a#部署形式\",\"409\":\"v-3649300a#安装-15\",\"410\":\"v-3649300a#配置说明\",\"411\":\"v-3649300a#配置文件注释\",\"412\":\"v-3649300a#配置文件路径\",\"413\":\"v-3649300a#使用环境变量\",\"414\":\"v-3649300a#开始配置\",\"415\":\"v-3649300a#启动\",\"416\":\"v-1fdf3f1c\",\"417\":\"v-1fdf3f1c#目录切换\",\"418\":\"v-1fdf3f1c#目录的操作命令\",\"419\":\"v-1fdf3f1c#文件操作\",\"420\":\"v-1fdf3f1c#压缩文件\",\"421\":\"v-4c0abd92\",\"422\":\"v-4c0abd92#nohup的作用\",\"423\":\"v-4c0abd92#的作用\",\"424\":\"v-4c0abd92#nohup-和-的区别\",\"425\":\"v-e5fed6d4\",\"426\":\"v-e5fed6d4#目录结构介绍\",\"427\":\"v-e5fed6d4#基本介绍\",\"428\":\"v-e5fed6d4#具体的目录结构\",\"429\":\"v-e5fed6d4#vi和vim快速入门\",\"430\":\"v-e5fed6d4#快捷键映射图\",\"431\":\"v-e5fed6d4#vi-vim-的使用\",\"432\":\"v-e5fed6d4#命令模式\",\"433\":\"v-e5fed6d4#输入模式\",\"434\":\"v-e5fed6d4#底线命令模式\",\"435\":\"v-e5fed6d4#vi-vim-按键说明\",\"436\":\"v-e5fed6d4#第二部分-一般模式切换到编辑模式的可用的按钮说明\",\"437\":\"v-e5fed6d4#第三部分-一般模式切换到指令行模式的可用的按钮说明\",\"438\":\"v-e5fed6d4#linux命令基础\",\"439\":\"v-e5fed6d4#命令基础格式\",\"440\":\"v-e5fed6d4#ls\",\"441\":\"v-e5fed6d4#drwxr-xr-x意思\",\"442\":\"v-e5fed6d4#cd\",\"443\":\"v-e5fed6d4#pwd\",\"444\":\"v-e5fed6d4#特殊路径符\",\"445\":\"v-e5fed6d4#mkdir\",\"446\":\"v-e5fed6d4#touch\",\"447\":\"v-e5fed6d4#cat\",\"448\":\"v-e5fed6d4#more\",\"449\":\"v-e5fed6d4#cp\",\"450\":\"v-e5fed6d4#mv\",\"451\":\"v-e5fed6d4#rm\",\"452\":\"v-e5fed6d4#which\",\"453\":\"v-e5fed6d4#find\",\"454\":\"v-e5fed6d4#grep\",\"455\":\"v-e5fed6d4#wc\",\"456\":\"v-e5fed6d4#管道符\",\"457\":\"v-e5fed6d4#echo\",\"458\":\"v-e5fed6d4#反引号\",\"459\":\"v-e5fed6d4#重定向符-和\",\"460\":\"v-e5fed6d4#tail\",\"461\":\"v-e5fed6d4#su和exit命令\",\"462\":\"v-e5fed6d4#sudo命令\",\"463\":\"v-e5fed6d4#groupadd和groupdel\",\"464\":\"v-e5fed6d4#useradd和userdel-usermod-id-getent-passwd和getent-group\",\"465\":\"v-e5fed6d4#chmod\",\"466\":\"v-e5fed6d4#chown\",\"467\":\"v-e5fed6d4#小技巧快捷键\",\"468\":\"v-e5fed6d4#ctrl-c强制停止\",\"469\":\"v-e5fed6d4#ctrl-d退出或登出\",\"470\":\"v-e5fed6d4#history查看历史命令\",\"471\":\"v-e5fed6d4#clear\",\"472\":\"v-e5fed6d4#软件安装\",\"473\":\"v-e5fed6d4#yum命令\",\"474\":\"v-e5fed6d4#systemctl\",\"475\":\"v-e5fed6d4#软连接\",\"476\":\"v-e5fed6d4#date命令\",\"477\":\"v-e5fed6d4#进程管理\",\"478\":\"v-e5fed6d4#查看进程\",\"479\":\"v-e5fed6d4#关闭进程\",\"480\":\"v-e5fed6d4#主机状态\",\"481\":\"v-e5fed6d4#top\",\"482\":\"v-e5fed6d4#df\",\"483\":\"v-e5fed6d4#环境变量\",\"484\":\"v-e5fed6d4#path\",\"485\":\"v-e5fed6d4#符号\",\"486\":\"v-e5fed6d4#设置环境变量\",\"487\":\"v-e5fed6d4#文件的上传和下载\",\"488\":\"v-e5fed6d4#通过命令行上传和下载\",\"489\":\"v-e5fed6d4#压缩和解压\",\"490\":\"v-e5fed6d4#tar\",\"491\":\"v-e5fed6d4#zip\",\"492\":\"v-e5fed6d4#unzip\",\"493\":\"v-93237050\",\"494\":\"v-93237050#使用docker-compose部署后端\",\"495\":\"v-93237050#在docker上使用nginx部署前端\",\"496\":\"v-93237050#服务器的历史命令\",\"497\":\"v-7bac516c\",\"498\":\"v-7bac516c#数据库相关概念\",\"499\":\"v-7bac516c#常见的关系型数据库管理系统\",\"500\":\"v-7bac516c#mysql下载官网\",\"501\":\"v-7bac516c#mysql登陆参数\",\"502\":\"v-7bac516c#mysql数据模型\",\"503\":\"v-7bac516c#关系型数据库\",\"504\":\"v-7bac516c#sql\",\"505\":\"v-7bac516c#sql分类\",\"506\":\"v-7bac516c#ddl\",\"507\":\"v-7bac516c#ddl-操作数据库\",\"508\":\"v-7bac516c#ddl-操作表\",\"509\":\"v-7bac516c#查询表\",\"510\":\"v-7bac516c#创建表\",\"511\":\"v-7bac516c#数据类型\",\"512\":\"v-7bac516c#修改\",\"513\":\"v-7bac516c#删除\",\"514\":\"v-7bac516c#dml\",\"515\":\"v-7bac516c#dql\",\"516\":\"v-7bac516c#查询语法\",\"517\":\"v-7bac516c#补充\",\"518\":\"v-7bac516c#条件查询\",\"519\":\"v-7bac516c#排序查询\",\"520\":\"v-7bac516c#分组查询\",\"521\":\"v-7bac516c#聚合函数\",\"522\":\"v-7bac516c#分组查询-1\",\"523\":\"v-7bac516c#分页查询\",\"524\":\"v-7bac516c#约束\",\"525\":\"v-7bac516c#概念\",\"526\":\"v-7bac516c#外键约束\",\"527\":\"v-7bac516c#数据库设计\",\"528\":\"v-7bac516c#数据库设计步骤\",\"529\":\"v-7bac516c#表的关系\",\"530\":\"v-7bac516c#多表查询\",\"531\":\"v-7bac516c#内连接-显示-inner-join-表名-on-条件\",\"532\":\"v-7bac516c#外连接-左-右-外连接-表1-left-right-join-表2-on-条件\",\"533\":\"v-7bac516c#子查询\",\"534\":\"v-7bac516c#事务\",\"535\":\"v-7bac516c#简介\",\"536\":\"v-7bac516c#事务的四大特征\",\"537\":\"v-6f751f6f\",\"538\":\"v-9bf21640\",\"539\":\"v-20b05fd8\",\"540\":\"v-20b05fd8#依赖的传递性\",\"541\":\"v-20b05fd8#聚合\",\"542\":\"v-20b05fd8#继承\",\"543\":\"v-20b05fd8#版本管理\",\"544\":\"v-68c3c9ac\",\"545\":\"v-68c3c9ac#条件查询null判断\",\"546\":\"v-68c3c9ac#查询投影\",\"547\":\"v-68c3c9ac#条件查询\",\"548\":\"v-68c3c9ac#字段映射与表名映射\",\"549\":\"v-68c3c9ac#id生成策略控制\",\"550\":\"v-68c3c9ac#表名前缀-id生成策略全局配置\",\"551\":\"v-68c3c9ac#多数据操作\",\"552\":\"v-68c3c9ac#逻辑删除\",\"553\":\"v-68c3c9ac#乐观锁-处理并发问题-version\",\"554\":\"v-8fb9fd38\",\"555\":\"v-8fb9fd38#springmvc简介\",\"556\":\"v-8fb9fd38#springmvc概述\",\"557\":\"v-8fb9fd38#springmvc入门案例\",\"558\":\"v-8fb9fd38#流程分析\",\"559\":\"v-8fb9fd38#bean加载控制\",\"560\":\"v-8fb9fd38#请求与响应\",\"561\":\"v-8fb9fd38#请求映射路径\",\"562\":\"v-8fb9fd38#请求参数\",\"563\":\"v-8fb9fd38#_5种类型参数传参\",\"564\":\"v-8fb9fd38#json数据传递参数\",\"565\":\"v-8fb9fd38#日期类型参数传递\",\"566\":\"v-8fb9fd38#响应json数据\",\"567\":\"v-8fb9fd38#rest风格\",\"568\":\"v-8fb9fd38#最后注意\",\"569\":\"v-8fb9fd38#ssm整合\",\"570\":\"v-8fb9fd38#代码区\",\"571\":\"v-8fb9fd38#表现层数据封装\",\"572\":\"v-8fb9fd38#异常处理器\",\"573\":\"v-8fb9fd38#项目异常处理方案\",\"574\":\"v-8fb9fd38#拦截器\",\"575\":\"v-8fb9fd38#入门案例\",\"576\":\"v-8fb9fd38#执行流程\",\"577\":\"v-8fb9fd38#拦截器参数\",\"578\":\"v-8fb9fd38#多拦截器执行顺序\",\"579\":\"v-8fb9fd38#代码\",\"580\":\"v-75e989d1\",\"581\":\"v-75e989d1#spring-framework-系统架构图\",\"582\":\"v-75e989d1#ioc-inversion-of-control-控制反转\",\"583\":\"v-75e989d1#di-dependency-injection-依赖注入\",\"584\":\"v-75e989d1#bean基础配置\",\"585\":\"v-75e989d1#bean别名配置-name属性\",\"586\":\"v-75e989d1#bean作用范围-scope属性\",\"587\":\"v-75e989d1#bean的实例化\",\"588\":\"v-75e989d1#构造方法-无参构造\",\"589\":\"v-75e989d1#静态工厂-factory-method\",\"590\":\"v-75e989d1#实例工厂-factory-method-factory-bean\",\"591\":\"v-75e989d1#实用-implements-factorybean\",\"592\":\"v-75e989d1#bean的生命周期\",\"593\":\"v-75e989d1#bean的生命周期控制\",\"594\":\"v-75e989d1#_1-属性-init-method-destory-method\",\"595\":\"v-75e989d1#_2-实现接口\",\"596\":\"v-75e989d1#bean的生命周期-1\",\"597\":\"v-75e989d1#依赖注入\",\"598\":\"v-75e989d1#普通方法\",\"599\":\"v-75e989d1#构造方法\",\"600\":\"v-75e989d1#自动装配\",\"601\":\"v-75e989d1#注入集合\",\"602\":\"v-75e989d1#加载properties文件\",\"603\":\"v-75e989d1#容器总结\",\"604\":\"v-75e989d1#注解开发\",\"605\":\"v-75e989d1#注解开发定义bean\",\"606\":\"v-75e989d1#纯注解开发\",\"607\":\"v-75e989d1#bean作用范围与生命周期管理\",\"608\":\"v-75e989d1#依赖注入-1\",\"609\":\"v-75e989d1#第三方bean管理\",\"610\":\"v-75e989d1#第三方bean依赖注入\",\"611\":\"v-75e989d1#注解开发总结\",\"612\":\"v-75e989d1#spring整合mybatis\",\"613\":\"v-75e989d1#补充\",\"614\":\"v-75e989d1#spring整合junit\",\"615\":\"v-75e989d1#aop\",\"616\":\"v-75e989d1#spring事务\",\"617\":\"v-3671cbc2\",\"618\":\"v-3671cbc2#起步依赖-starter\",\"619\":\"v-3671cbc2#yaml格式\",\"620\":\"v-3671cbc2#yaml版\",\"621\":\"v-3671cbc2#properties版-了解\",\"622\":\"v-3671cbc2#多环境开发启动命令\",\"623\":\"v-3671cbc2#常见问题-坑\",\"624\":\"v-3671cbc2#maven与springboot多环境兼容\",\"625\":\"v-3671cbc2#整合junit\",\"626\":\"v-3671cbc2#整合mybatis-主要\",\"627\":\"v-3671cbc2#注意\",\"628\":\"v-088a7956\",\"629\":\"v-6b0b3d8c\",\"630\":\"v-d22babaa\",\"631\":\"v-d22babaa#什么是异常\",\"632\":\"v-d22babaa#异常体系\",\"633\":\"v-d22babaa#编译时异常的处理形式\",\"634\":\"v-d22babaa#处理方式1-throws\",\"635\":\"v-d22babaa#处理方式2-try-catch\",\"636\":\"v-d22babaa#处理方式3-前两者结合\",\"637\":\"v-d22babaa#运行时异常处理形式\",\"638\":\"v-d22babaa#自定义异常\",\"639\":\"v-d22babaa@0\",\"640\":\"v-d22babaa@1\",\"641\":\"v-03106ead\",\"642\":\"v-52a06182\",\"643\":\"v-52a06182#标识符\",\"644\":\"v-52a06182#数据类型\",\"645\":\"v-52a06182#java是强类型语言\",\"646\":\"v-52a06182#数据类型-1\",\"647\":\"v-52a06182#整型拓展\",\"648\":\"v-52a06182#字符型拓展\",\"649\":\"v-52a06182#布尔类型拓展\",\"650\":\"v-52a06182#类型转换\",\"651\":\"v-52a06182#自动类型转换\",\"652\":\"v-52a06182#强制类型转换\",\"653\":\"v-52a06182#java的switch参数与case匹配规则的本质\",\"654\":\"v-52a06182#方法参数传递机制-值传递\",\"655\":\"v-52a06182@0\",\"656\":\"v-52a06182@1\",\"657\":\"v-4f36b044\",\"658\":\"v-4f36b044#面向对象的思想\",\"659\":\"v-4f36b044#定义类的注意事项\",\"660\":\"v-4f36b044#类中成分\",\"661\":\"v-4f36b044#this关键字\",\"662\":\"v-4f36b044#面向对象-内存机制\",\"663\":\"v-4f36b044#两个对象内存分析\",\"664\":\"v-4f36b044#两个变量指向同一个对象内存图\",\"665\":\"v-4f36b044#垃圾回收\",\"666\":\"v-4f36b044#面向对象的三大特征\",\"667\":\"v-4f36b044#面向对象的三大特征-封装、继承、多态。\",\"668\":\"v-4f36b044#封装-标准javabean\",\"669\":\"v-4f36b044#特征的含义\",\"670\":\"v-4f36b044#所谓特征就是已经成为java设计代码的特点-即使毫无意义-通常也需要满足这样的设计要求来编写代码。\",\"671\":\"v-4f36b044#javabean\",\"672\":\"v-4f36b044#也可以理解为实体类-其对象可以用于在程序中封装数据。\",\"673\":\"v-4f36b044#面向对象进阶\",\"674\":\"v-4f36b044#static关键字\",\"675\":\"v-4f36b044#static关键字的作用-和修饰成员变量的用法\",\"676\":\"v-4f36b044#static修饰成员变量的内存原理\",\"677\":\"v-4f36b044#成员方法的分类\",\"678\":\"v-4f36b044#static的应用-工具类-工具类的案例\",\"679\":\"v-4f36b044#工具类原理和延伸\",\"680\":\"v-4f36b044#static注意事项-面试常考\",\"681\":\"v-4f36b044#static应用知识-代码块\",\"682\":\"v-4f36b044#代码块分为\",\"683\":\"v-4f36b044#设计模式-面试\",\"684\":\"v-4f36b044#设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式\",\"685\":\"v-4f36b044#饿汉单例\",\"686\":\"v-4f36b044#设计步骤\",\"687\":\"v-4f36b044#懒汉单例\",\"688\":\"v-4f36b044#设计步骤-1\",\"689\":\"v-4f36b044#继承-面向对象三大特征之一\",\"690\":\"v-4f36b044#继承的基本介绍\",\"691\":\"v-4f36b044#继承设计规范\",\"692\":\"v-4f36b044#继承的内存运行原理\",\"693\":\"v-4f36b044#继承的特点\",\"694\":\"v-4f36b044#子类是否可以继承父类的私有成员\",\"695\":\"v-4f36b044#子类是否可以继承父类静态成员\",\"696\":\"v-4f36b044#在子类方法中访问成员-成员变量、成员方法-满足-就近原则\",\"697\":\"v-4f36b044#重写\",\"698\":\"v-4f36b044#override重写注解\",\"699\":\"v-4f36b044#注意事项\",\"700\":\"v-4f36b044#子类继承父类后构造器的特点\",\"701\":\"v-4f36b044#包、权限修饰符\",\"702\":\"v-4f36b044#权限修饰符\",\"703\":\"v-4f36b044#final修饰符\",\"704\":\"v-4f36b044#常量\",\"705\":\"v-4f36b044#枚举\",\"706\":\"v-4f36b044#枚举的概述\",\"707\":\"v-4f36b044#枚举的格式\",\"708\":\"v-4f36b044#枚举的特征\",\"709\":\"v-4f36b044#抽象类\",\"710\":\"v-4f36b044#抽象类特征\",\"711\":\"v-4f36b044#final和abstract是什么关系\",\"712\":\"v-4f36b044#互斥关系\",\"713\":\"v-4f36b044#接口interface\",\"714\":\"v-4f36b044#接口的定义\",\"715\":\"v-4f36b044#接口的实现\",\"716\":\"v-4f36b044#接口可以多继承\",\"717\":\"v-4f36b044#接口新增方法、注意事项-了解\",\"718\":\"v-4f36b044#jdk8开始接口新增了一些方法\",\"719\":\"v-4f36b044#默认方法\",\"720\":\"v-4f36b044#静态方法\",\"721\":\"v-4f36b044#私有方法\",\"722\":\"v-4f36b044#多态-面向对象三大特征之一-重点\",\"723\":\"v-4f36b044#概述、形式\",\"724\":\"v-4f36b044#多态是同类型的对象-执行不同的行为-表现出不同的行为特征。\",\"725\":\"v-4f36b044#多态中成员访问的特点\",\"726\":\"v-4f36b044#优势\",\"727\":\"v-4f36b044#多态产生的一个问题\",\"728\":\"v-4f36b044#引用类型的转换\",\"729\":\"v-4f36b044#自动类型转换-从子类到父类-子类对象赋值给父类类型的变量指向。\",\"730\":\"v-4f36b044#强制类型转换-从父类到子类-子类-对象变量-子类-父类类型的变量\",\"731\":\"v-4f36b044#至于为什么多态的父类不能调用子类的独有方法-例如-animal-a-new-dog-此时-a对象-的-引用类型-是-animal动物-但是吃骨头是狗独有的行为方法-而animal都不会吃骨头-如果用没有强转的a对象能调用到狗的吃骨头-这是不符合逻辑的。所以只能狗吃骨头-我们就得把a对象的animal类型强转成dog类型-dog-d-dog-a-这个时候原来的动物对象就被确认确确实实是狗-我们才可以让-d-调用吃骨头。注意强转的时候一定要复合逻辑-不能把猫转换成狗-java在强制类型转换的时候有一个建议-如下\",\"732\":\"v-4f36b044#建议\",\"733\":\"v-4f36b044#补充知识\",\"734\":\"v-4f36b044#内部类\",\"735\":\"v-4f36b044#匿名内部类\",\"736\":\"v-4f36b044#作用\",\"737\":\"v-4f36b044#格式\",\"738\":\"v-4f36b044#特点\",\"739\":\"v-4f36b044@0\",\"740\":\"v-4f36b044@1\",\"741\":\"v-4bccff06\",\"742\":\"v-4bccff06#string类\",\"743\":\"v-4bccff06#不同方式定义字符串的内存原理\",\"744\":\"v-4bccff06#arraylist\",\"745\":\"v-4bccff06#快速入门\",\"746\":\"v-4bccff06#对象集合获取\",\"747\":\"v-4bccff06#添加数据\",\"748\":\"v-4bccff06#arraylist对于泛型的支持\",\"749\":\"v-4bccff06#泛型概述\",\"750\":\"v-4bccff06#arraylist常用api\",\"751\":\"v-4bccff06#案例\",\"752\":\"v-4bccff06#object、objects类\",\"753\":\"v-4bccff06#object类的作用\",\"754\":\"v-4bccff06#object类中的常用方法\",\"755\":\"v-4bccff06#tostring\",\"756\":\"v-4bccff06#equals\",\"757\":\"v-4bccff06#objects\",\"758\":\"v-4bccff06#equals-1\",\"759\":\"v-4bccff06#isnull\",\"760\":\"v-4bccff06#注意点\",\"761\":\"v-4bccff06#stringbuilder\",\"762\":\"v-4bccff06#stringbuilder构造器\",\"763\":\"v-4bccff06#stringbuilder常用方法\",\"764\":\"v-4bccff06#stringbuilder性能好的原因\",\"765\":\"v-4bccff06#math\",\"766\":\"v-4bccff06#概述\",\"767\":\"v-4bccff06#math中的常用方法\",\"768\":\"v-4bccff06#system\",\"769\":\"v-4bccff06#system中常用方法\",\"770\":\"v-4bccff06#bigdecimal\",\"771\":\"v-4bccff06#bigdecimal作用\",\"772\":\"v-4bccff06#使用步骤\",\"773\":\"v-4bccff06#java开发手册中-嵩山版\",\"774\":\"v-4bccff06#bigdecimal常用api\",\"775\":\"v-4bccff06#总结\",\"776\":\"v-4bccff06#date\",\"777\":\"v-4bccff06#总结-1\",\"778\":\"v-4bccff06#simpledateformat-简单日期格式化类\",\"779\":\"v-4bccff06#simpledateformat类的作用\",\"780\":\"v-4bccff06#simpledateformat的构造器\",\"781\":\"v-4bccff06#simpledateformat的格式化方法\",\"782\":\"v-4bccff06#总结-2\",\"783\":\"v-4bccff06#calendar\",\"784\":\"v-4bccff06#calendar概述\",\"785\":\"v-4bccff06#jdk8新增的日期api\",\"786\":\"v-4bccff06#localdate、localtime、localdatetime\",\"787\":\"v-4bccff06#包装类\",\"788\":\"v-4bccff06#概述-1\",\"789\":\"v-4bccff06#包装类的特有的功能\",\"790\":\"v-4bccff06#可以把字符串类型转换成真实的数据类型-非常有用\",\"791\":\"v-4bccff06#arrays类\",\"792\":\"v-4bccff06#arrays类概述\",\"793\":\"v-4bccff06#arrays类常用的api\",\"794\":\"v-4bccff06#选择排序和二分查找\",\"795\":\"v-4bccff06@0\",\"796\":\"v-4bccff06@1\",\"797\":\"v-04495f6d\",\"798\":\"v-04495f6d#反射概述\",\"799\":\"v-04495f6d#反射的关键\",\"800\":\"v-04495f6d#总结\",\"801\":\"v-04495f6d#反射获取类对象\",\"802\":\"v-04495f6d#反射第一步-获取class文件对象\",\"803\":\"v-04495f6d#总结-1\",\"804\":\"v-04495f6d#反射获取构造器对象\",\"805\":\"v-04495f6d#使用反射技术获取构造器对象并使用\",\"806\":\"v-04495f6d#constructor类中用于创建对象的方法\",\"807\":\"v-04495f6d#总结-2\",\"808\":\"v-04495f6d#反射获取成员变量对象\",\"809\":\"v-04495f6d#总结-3\",\"810\":\"v-04495f6d#反射获取方法对象\",\"811\":\"v-04495f6d#使用反射技术获取方法对象并使用\",\"812\":\"v-04495f6d#method类中用于触发执行的方法\",\"813\":\"v-04495f6d#总结-4\",\"814\":\"v-04495f6d#反射的作用-绕过编译阶段为集合添加数据\",\"815\":\"v-04495f6d#总结-5\",\"816\":\"v-04495f6d#反射的作用-通用框架的底层原理\",\"817\":\"v-04495f6d#总结-6\",\"818\":\"v-6c86cdef\",\"819\":\"v-6c86cdef#正则表达式结构摘要\",\"820\":\"v-5eca90b8\",\"821\":\"v-5eca90b8#概述\",\"822\":\"v-5eca90b8#stream流的获取\",\"823\":\"v-5eca90b8#stream常用api\",\"824\":\"v-5eca90b8#stream流的收集操作\",\"825\":\"v-5eca90b8@0\",\"826\":\"v-5eca90b8@1\",\"827\":\"v-01f1ea14\",\"828\":\"v-01f1ea14#xml的概述\",\"829\":\"v-01f1ea14#xml的创建、语法规则\",\"830\":\"v-ad391c8e\",\"831\":\"v-ad391c8e#arraylist扩容原理\",\"832\":\"v-0e7dbe7a\",\"833\":\"v-0e7dbe7a#集合概述\",\"834\":\"v-0e7dbe7a#collection集合的体系特点\",\"835\":\"v-0e7dbe7a#集合类体系结构\",\"836\":\"v-0e7dbe7a#collection集合体系\",\"837\":\"v-0e7dbe7a#collection集合的特点\",\"838\":\"v-0e7dbe7a#list系列集合-添加元素是有序的、可重复的、有索引。\",\"839\":\"v-0e7dbe7a#set系列集合-添加元素是无序的、不重复、无索引。\",\"840\":\"v-0e7dbe7a#集合对泛型的支持\",\"841\":\"v-0e7dbe7a#conllection-api\",\"842\":\"v-0e7dbe7a#collection-api\",\"843\":\"v-0e7dbe7a#collection集合常用的遍历\",\"844\":\"v-0e7dbe7a#迭代器遍历概述\",\"845\":\"v-0e7dbe7a#foreach-增强for循环\",\"846\":\"v-0e7dbe7a#lambda-表达式\",\"847\":\"v-0e7dbe7a#collection集合存储自定义类型的对象\",\"848\":\"v-0e7dbe7a#常见数据结构\",\"849\":\"v-0e7dbe7a#数据结构概述\",\"850\":\"v-0e7dbe7a#栈\",\"851\":\"v-0e7dbe7a#队列\",\"852\":\"v-0e7dbe7a#数组\",\"853\":\"v-0e7dbe7a#链表\",\"854\":\"v-0e7dbe7a#二叉树-二叉查找树\",\"855\":\"v-0e7dbe7a#平衡二叉树\",\"856\":\"v-0e7dbe7a#红黑树\",\"857\":\"v-0e7dbe7a#红黑树概述\",\"858\":\"v-0e7dbe7a#红黑规则\",\"859\":\"v-0e7dbe7a#list系列集合\",\"860\":\"v-0e7dbe7a#list集合特点\",\"861\":\"v-0e7dbe7a#list集合特有的方法\",\"862\":\"v-0e7dbe7a#list集合的遍历方式\",\"863\":\"v-0e7dbe7a#arraylist集合底层原理-面试热点\",\"864\":\"v-0e7dbe7a#linkedlist集合底层原理\",\"865\":\"v-0e7dbe7a#linkedlist集合特有的功能\",\"866\":\"v-0e7dbe7a#集合的并发修改异常问题\",\"867\":\"v-0e7dbe7a#泛型深入\",\"868\":\"v-0e7dbe7a#泛型概述和优势\",\"869\":\"v-0e7dbe7a#泛型的好处\",\"870\":\"v-0e7dbe7a#自定义泛型类\",\"871\":\"v-0e7dbe7a#案例\",\"872\":\"v-0e7dbe7a#自定义泛型方法\",\"873\":\"v-0e7dbe7a#案例-1\",\"874\":\"v-0e7dbe7a#自定义泛型接口\",\"875\":\"v-0e7dbe7a#案例-2\",\"876\":\"v-0e7dbe7a#泛型接口的作用\",\"877\":\"v-0e7dbe7a#泛型通配符、上下限\",\"878\":\"v-0e7dbe7a#案例-3\",\"879\":\"v-0e7dbe7a#set集合体系\",\"880\":\"v-0e7dbe7a#set集合的特点\",\"881\":\"v-0e7dbe7a#set集合实现类的特点\",\"882\":\"v-0e7dbe7a#hashset元素无序的底层原理-哈希表\",\"883\":\"v-0e7dbe7a#hashset底层原理\",\"884\":\"v-0e7dbe7a#哈希表的组成\",\"885\":\"v-0e7dbe7a#哈希值\",\"886\":\"v-0e7dbe7a#object类的api\",\"887\":\"v-0e7dbe7a#对象的哈希值特点\",\"888\":\"v-0e7dbe7a#哈希表原理\",\"889\":\"v-0e7dbe7a#linkedhashset集合\",\"890\":\"v-0e7dbe7a#treeset集合\",\"891\":\"v-0e7dbe7a#treeset集合默认的排序规则\",\"892\":\"v-0e7dbe7a#总结\",\"893\":\"v-0e7dbe7a#可变参数\",\"894\":\"v-0e7dbe7a#集合工具类\",\"895\":\"v-0e7dbe7a#collections常用的api\",\"896\":\"v-0e7dbe7a#collections常用的排序的api\",\"897\":\"v-0e7dbe7a#案例-斗地主游戏\",\"898\":\"v-0e7dbe7a#map集合\",\"899\":\"v-0e7dbe7a#map集合概述和使用\",\"900\":\"v-0e7dbe7a#map集合整体格式\",\"901\":\"v-0e7dbe7a#map集合体系\",\"902\":\"v-0e7dbe7a#map集合的特点\",\"903\":\"v-0e7dbe7a#map集合实现类的特点\",\"904\":\"v-0e7dbe7a#map集合常用api\",\"905\":\"v-0e7dbe7a#map集合的遍历\",\"906\":\"v-0e7dbe7a#键找值\",\"907\":\"v-0e7dbe7a#键值对\",\"908\":\"v-0e7dbe7a#lambda表达式\",\"909\":\"v-0e7dbe7a#不可变集合\",\"910\":\"v-0e7dbe7a#总结-1\",\"911\":\"v-aaabc976\",\"912\":\"v-aaabc976#多线程\",\"913\":\"v-aaabc976#多线程的创建\",\"914\":\"v-aaabc976#方式一-继承thread类\",\"915\":\"v-aaabc976#优缺点\",\"916\":\"v-aaabc976#疑问\",\"917\":\"v-aaabc976#注意点\",\"918\":\"v-aaabc976#方式二-实现runnable接口\",\"919\":\"v-aaabc976#优缺点-1\",\"920\":\"v-aaabc976#实现runnable接口-匿名内部类形式\",\"921\":\"v-aaabc976#方式三-jdk5-0新增-实现callable接口\",\"922\":\"v-aaabc976#优缺点-2\",\"923\":\"v-aaabc976#总结\",\"924\":\"v-aaabc976#thread的常用方法\",\"925\":\"v-aaabc976#thread类的线程休眠方法\",\"926\":\"v-aaabc976#总结-1\",\"927\":\"v-aaabc976#线程安全\",\"928\":\"v-aaabc976#线程安全是什么、方式的原因\",\"929\":\"v-aaabc976#取钱模型\",\"930\":\"v-aaabc976#模拟线程安全问题\",\"931\":\"v-aaabc976#线程同步\",\"932\":\"v-aaabc976#线程同步核心思想\",\"933\":\"v-aaabc976#方式一-同步代码块\",\"934\":\"v-aaabc976#锁对象要求\",\"935\":\"v-aaabc976#锁对象用任意唯一的对象好不好呢\",\"936\":\"v-aaabc976#锁对象的规范要求\",\"937\":\"v-aaabc976#方式二-同步方法\",\"938\":\"v-aaabc976#同步方法底层原理\",\"939\":\"v-aaabc976#lock锁\",\"940\":\"v-aaabc976#概述\",\"941\":\"v-aaabc976#线程池实现的api、参数说明\",\"942\":\"v-aaabc976#谁代表线程池\",\"943\":\"v-aaabc976#如何得到线程对象\",\"944\":\"v-aaabc976#threadpoolexecutor构造器的参数说明\",\"945\":\"v-aaabc976#线程池常见面试题\",\"946\":\"v-aaabc976#临时线程什么时候创建\",\"947\":\"v-aaabc976#什么时候会开始拒绝任务\",\"948\":\"v-aaabc976#线程池处理runnable任务\",\"949\":\"v-aaabc976#线程处理callable任务\",\"950\":\"v-aaabc976#executors工具类实现线程池\",\"951\":\"v-aaabc976#executors得到线程对象的常用方法\",\"952\":\"v-aaabc976#executors使用可能存在的陷阱\",\"953\":\"v-aaabc976#定时器的实现方式\",\"954\":\"v-aaabc976#timer定时器-不推荐使用\",\"955\":\"v-aaabc976#scheduledexecutorservice定时器\",\"956\":\"v-aaabc976#scheduledexecutorservice的优点\",\"957\":\"v-aaabc976#线程的并发与并行\",\"958\":\"v-aaabc976#并发与并行\",\"959\":\"v-aaabc976#并发的理解\",\"960\":\"v-aaabc976#并行的理解\",\"961\":\"v-aaabc976#线程的生命周期\",\"962\":\"v-aaabc976#状态\",\"963\":\"v-aaabc976#java线程的状态\",\"964\":\"v-6559c80d\",\"965\":\"v-6559c80d#学习思路\",\"966\":\"v-6559c80d#判断文件类型、获取文件信息\",\"967\":\"v-6559c80d#创建文件、删除文件功能\",\"968\":\"v-6559c80d#file创建文件的功能\",\"969\":\"v-6559c80d#file类删除文件夹的功能\",\"970\":\"v-6559c80d#遍历文件夹\",\"971\":\"v-6559c80d#注意事项\",\"972\":\"v-6559c80d#递归的形式和特点\",\"973\":\"v-6559c80d#递归的形式\",\"974\":\"v-6559c80d#方法递归存在的问题\",\"975\":\"v-6559c80d#递归的算法流程、核心要素\",\"976\":\"v-6559c80d#案例-计算1-n的阶乘\",\"977\":\"v-6559c80d#递归算法三要素大体可以总结为\",\"978\":\"v-6559c80d#案例-计算1-n的和\",\"979\":\"v-6559c80d#案例-猴子吃桃问题-经典问题\",\"980\":\"v-6559c80d#非规律化递归案例-文件搜索\",\"981\":\"v-6559c80d#案例-文件搜索\",\"982\":\"v-6559c80d#常见字符集\",\"983\":\"v-6559c80d#字符集基础知识\",\"984\":\"v-6559c80d#ascii字符集\",\"985\":\"v-6559c80d#gbk\",\"986\":\"v-6559c80d#unicode码表\",\"987\":\"v-6559c80d#总结\",\"988\":\"v-6559c80d#字符集的编码、解码\",\"989\":\"v-6559c80d#io流概述\",\"990\":\"v-6559c80d#io流的分类\",\"991\":\"v-6559c80d#总结流的四大类\",\"992\":\"v-6559c80d#字节流的使用\",\"993\":\"v-6559c80d#文件字节输入流\",\"994\":\"v-6559c80d#每次读取一个字节\",\"995\":\"v-6559c80d#每次读取一个字节数组\",\"996\":\"v-6559c80d#一次读取完全部字节-避免乱码\",\"997\":\"v-6559c80d#文件字节输出流\",\"998\":\"v-6559c80d#文件拷贝\",\"999\":\"v-6559c80d#资源释放的方式\",\"1000\":\"v-6559c80d#try-catch-finally\",\"1001\":\"v-6559c80d#try-with-resource\",\"1002\":\"v-6559c80d#一次读取一个字符\",\"1003\":\"v-6559c80d#一次读取一个字符数组\",\"1004\":\"v-6559c80d#文件字符输入流\",\"1005\":\"v-6559c80d#缓冲流\",\"1006\":\"v-6559c80d#缓冲流概述\",\"1007\":\"v-6559c80d#字节缓冲流\",\"1008\":\"v-6559c80d#字符缓冲流\",\"1009\":\"v-6559c80d#对象序列化和反序列化\",\"1010\":\"v-6559c80d#打印流\",\"1011\":\"v-6559c80d#printstream、printwriter\",\"1012\":\"v-6559c80d#properties\",\"1013\":\"v-6559c80d#commons-io\",\"1014\":\"v-6559c80d#fileutils主要方法如下\",\"1015\":\"v-6559c80d@0\",\"1016\":\"v-6559c80d@1\",\"1017\":\"v-31ba8f15\",\"1018\":\"v-31ba8f15#lambda概述\",\"1019\":\"v-31ba8f15#总结\",\"1020\":\"v-31ba8f15#stream流\",\"1021\":\"v-31ba8f15#stream流的获取\",\"1022\":\"v-31ba8f15#stream常用api\",\"1023\":\"v-31ba8f15#stream流的收集操作\",\"1024\":\"v-31ba8f15#函数式接口定义\",\"1025\":\"v-31ba8f15#jdk1-8-新增的函数式接口\",\"1026\":\"v-31ba8f15#supplier-供给型函数式接口\",\"1027\":\"v-31ba8f15#consumer-消费型函数式接口\",\"1028\":\"v-31ba8f15#predicate-断言型函数式接口\",\"1029\":\"v-31ba8f15#function-函数型函数式接口\",\"1030\":\"v-31ba8f15#总结-1\",\"1031\":\"v-31ba8f15@0\",\"1032\":\"v-31ba8f15@1\",\"1033\":\"v-1bd9ab75\",\"1034\":\"v-6e72e51a\",\"1035\":\"v-a700c3ea\",\"1036\":\"v-a700c3ea#什么是异常\",\"1037\":\"v-a700c3ea#异常体系\",\"1038\":\"v-a700c3ea#编译时异常的处理形式\",\"1039\":\"v-a700c3ea#处理方式1-throws\",\"1040\":\"v-a700c3ea#处理方式2-try-catch\",\"1041\":\"v-a700c3ea#处理方式3-前两者结合\",\"1042\":\"v-a700c3ea#运行时异常处理形式\",\"1043\":\"v-a700c3ea#自定义异常\",\"1044\":\"v-a700c3ea@0\",\"1045\":\"v-a700c3ea@1\",\"1046\":\"v-ea110ae6\",\"1047\":\"v-12629142\",\"1048\":\"v-12629142#标识符\",\"1049\":\"v-12629142#数据类型\",\"1050\":\"v-12629142#java是强类型语言\",\"1051\":\"v-12629142#数据类型-1\",\"1052\":\"v-12629142#整型拓展\",\"1053\":\"v-12629142#字符型拓展\",\"1054\":\"v-12629142#布尔类型拓展\",\"1055\":\"v-12629142#类型转换\",\"1056\":\"v-12629142#自动类型转换\",\"1057\":\"v-12629142#强制类型转换\",\"1058\":\"v-12629142#java的switch参数与case匹配规则的本质\",\"1059\":\"v-12629142#方法参数传递机制-值传递\",\"1060\":\"v-12629142@0\",\"1061\":\"v-12629142@1\",\"1062\":\"v-0ef8e004\",\"1063\":\"v-0ef8e004#面向对象的思想\",\"1064\":\"v-0ef8e004#定义类的注意事项\",\"1065\":\"v-0ef8e004#类中成分\",\"1066\":\"v-0ef8e004#this关键字\",\"1067\":\"v-0ef8e004#面向对象-内存机制\",\"1068\":\"v-0ef8e004#两个对象内存分析\",\"1069\":\"v-0ef8e004#两个变量指向同一个对象内存图\",\"1070\":\"v-0ef8e004#垃圾回收\",\"1071\":\"v-0ef8e004#面向对象的三大特征\",\"1072\":\"v-0ef8e004#面向对象的三大特征-封装、继承、多态。\",\"1073\":\"v-0ef8e004#封装-标准javabean\",\"1074\":\"v-0ef8e004#特征的含义\",\"1075\":\"v-0ef8e004#所谓特征就是已经成为java设计代码的特点-即使毫无意义-通常也需要满足这样的设计要求来编写代码。\",\"1076\":\"v-0ef8e004#javabean\",\"1077\":\"v-0ef8e004#也可以理解为实体类-其对象可以用于在程序中封装数据。\",\"1078\":\"v-0ef8e004#面向对象进阶\",\"1079\":\"v-0ef8e004#static关键字\",\"1080\":\"v-0ef8e004#static关键字的作用-和修饰成员变量的用法\",\"1081\":\"v-0ef8e004#static修饰成员变量的内存原理\",\"1082\":\"v-0ef8e004#成员方法的分类\",\"1083\":\"v-0ef8e004#static的应用-工具类-工具类的案例\",\"1084\":\"v-0ef8e004#工具类原理和延伸\",\"1085\":\"v-0ef8e004#static注意事项-面试常考\",\"1086\":\"v-0ef8e004#static应用知识-代码块\",\"1087\":\"v-0ef8e004#代码块分为\",\"1088\":\"v-0ef8e004#设计模式-面试\",\"1089\":\"v-0ef8e004#设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式\",\"1090\":\"v-0ef8e004#饿汉单例\",\"1091\":\"v-0ef8e004#设计步骤\",\"1092\":\"v-0ef8e004#懒汉单例\",\"1093\":\"v-0ef8e004#设计步骤-1\",\"1094\":\"v-0ef8e004#继承-面向对象三大特征之一\",\"1095\":\"v-0ef8e004#继承的基本介绍\",\"1096\":\"v-0ef8e004#继承设计规范\",\"1097\":\"v-0ef8e004#继承的内存运行原理\",\"1098\":\"v-0ef8e004#继承的特点\",\"1099\":\"v-0ef8e004#子类是否可以继承父类的私有成员\",\"1100\":\"v-0ef8e004#子类是否可以继承父类静态成员\",\"1101\":\"v-0ef8e004#在子类方法中访问成员-成员变量、成员方法-满足-就近原则\",\"1102\":\"v-0ef8e004#重写\",\"1103\":\"v-0ef8e004#override重写注解\",\"1104\":\"v-0ef8e004#注意事项\",\"1105\":\"v-0ef8e004#子类继承父类后构造器的特点\",\"1106\":\"v-0ef8e004#包、权限修饰符\",\"1107\":\"v-0ef8e004#权限修饰符\",\"1108\":\"v-0ef8e004#final修饰符\",\"1109\":\"v-0ef8e004#常量\",\"1110\":\"v-0ef8e004#枚举\",\"1111\":\"v-0ef8e004#枚举的概述\",\"1112\":\"v-0ef8e004#枚举的格式\",\"1113\":\"v-0ef8e004#枚举的特征\",\"1114\":\"v-0ef8e004#抽象类\",\"1115\":\"v-0ef8e004#抽象类特征\",\"1116\":\"v-0ef8e004#final和abstract是什么关系\",\"1117\":\"v-0ef8e004#互斥关系\",\"1118\":\"v-0ef8e004#接口interface\",\"1119\":\"v-0ef8e004#接口的定义\",\"1120\":\"v-0ef8e004#接口的实现\",\"1121\":\"v-0ef8e004#接口可以多继承\",\"1122\":\"v-0ef8e004#接口新增方法、注意事项-了解\",\"1123\":\"v-0ef8e004#jdk8开始接口新增了一些方法\",\"1124\":\"v-0ef8e004#默认方法\",\"1125\":\"v-0ef8e004#静态方法\",\"1126\":\"v-0ef8e004#私有方法\",\"1127\":\"v-0ef8e004#多态-面向对象三大特征之一-重点\",\"1128\":\"v-0ef8e004#概述、形式\",\"1129\":\"v-0ef8e004#多态是同类型的对象-执行不同的行为-表现出不同的行为特征。\",\"1130\":\"v-0ef8e004#多态中成员访问的特点\",\"1131\":\"v-0ef8e004#优势\",\"1132\":\"v-0ef8e004#多态产生的一个问题\",\"1133\":\"v-0ef8e004#引用类型的转换\",\"1134\":\"v-0ef8e004#自动类型转换-从子类到父类-子类对象赋值给父类类型的变量指向。\",\"1135\":\"v-0ef8e004#强制类型转换-从父类到子类-子类-对象变量-子类-父类类型的变量\",\"1136\":\"v-0ef8e004#至于为什么多态的父类不能调用子类的独有方法-例如-animal-a-new-dog-此时-a对象-的-引用类型-是-animal动物-但是吃骨头是狗独有的行为方法-而animal都不会吃骨头-如果用没有强转的a对象能调用到狗的吃骨头-这是不符合逻辑的。所以只能狗吃骨头-我们就得把a对象的animal类型强转成dog类型-dog-d-dog-a-这个时候原来的动物对象就被确认确确实实是狗-我们才可以让-d-调用吃骨头。注意强转的时候一定要复合逻辑-不能把猫转换成狗-java在强制类型转换的时候有一个建议-如下\",\"1137\":\"v-0ef8e004#建议\",\"1138\":\"v-0ef8e004#补充知识\",\"1139\":\"v-0ef8e004#内部类\",\"1140\":\"v-0ef8e004#匿名内部类\",\"1141\":\"v-0ef8e004#作用\",\"1142\":\"v-0ef8e004#格式\",\"1143\":\"v-0ef8e004#特点\",\"1144\":\"v-0ef8e004@0\",\"1145\":\"v-0ef8e004@1\",\"1146\":\"v-0b8f2ec6\",\"1147\":\"v-0b8f2ec6#string类\",\"1148\":\"v-0b8f2ec6#不同方式定义字符串的内存原理\",\"1149\":\"v-0b8f2ec6#arraylist\",\"1150\":\"v-0b8f2ec6#快速入门\",\"1151\":\"v-0b8f2ec6#对象集合获取\",\"1152\":\"v-0b8f2ec6#添加数据\",\"1153\":\"v-0b8f2ec6#arraylist对于泛型的支持\",\"1154\":\"v-0b8f2ec6#泛型概述\",\"1155\":\"v-0b8f2ec6#arraylist常用api\",\"1156\":\"v-0b8f2ec6#案例\",\"1157\":\"v-0b8f2ec6#object、objects类\",\"1158\":\"v-0b8f2ec6#object类的作用\",\"1159\":\"v-0b8f2ec6#object类中的常用方法\",\"1160\":\"v-0b8f2ec6#tostring\",\"1161\":\"v-0b8f2ec6#equals\",\"1162\":\"v-0b8f2ec6#objects\",\"1163\":\"v-0b8f2ec6#equals-1\",\"1164\":\"v-0b8f2ec6#isnull\",\"1165\":\"v-0b8f2ec6#注意点\",\"1166\":\"v-0b8f2ec6#stringbuilder\",\"1167\":\"v-0b8f2ec6#stringbuilder构造器\",\"1168\":\"v-0b8f2ec6#stringbuilder常用方法\",\"1169\":\"v-0b8f2ec6#stringbuilder性能好的原因\",\"1170\":\"v-0b8f2ec6#math\",\"1171\":\"v-0b8f2ec6#概述\",\"1172\":\"v-0b8f2ec6#math中的常用方法\",\"1173\":\"v-0b8f2ec6#system\",\"1174\":\"v-0b8f2ec6#system中常用方法\",\"1175\":\"v-0b8f2ec6#bigdecimal\",\"1176\":\"v-0b8f2ec6#bigdecimal作用\",\"1177\":\"v-0b8f2ec6#使用步骤\",\"1178\":\"v-0b8f2ec6#java开发手册中-嵩山版\",\"1179\":\"v-0b8f2ec6#bigdecimal常用api\",\"1180\":\"v-0b8f2ec6#总结\",\"1181\":\"v-0b8f2ec6#date\",\"1182\":\"v-0b8f2ec6#总结-1\",\"1183\":\"v-0b8f2ec6#simpledateformat-简单日期格式化类\",\"1184\":\"v-0b8f2ec6#simpledateformat类的作用\",\"1185\":\"v-0b8f2ec6#simpledateformat的构造器\",\"1186\":\"v-0b8f2ec6#simpledateformat的格式化方法\",\"1187\":\"v-0b8f2ec6#总结-2\",\"1188\":\"v-0b8f2ec6#calendar\",\"1189\":\"v-0b8f2ec6#calendar概述\",\"1190\":\"v-0b8f2ec6#jdk8新增的日期api\",\"1191\":\"v-0b8f2ec6#localdate、localtime、localdatetime\",\"1192\":\"v-0b8f2ec6#包装类\",\"1193\":\"v-0b8f2ec6#概述-1\",\"1194\":\"v-0b8f2ec6#包装类的特有的功能\",\"1195\":\"v-0b8f2ec6#可以把字符串类型转换成真实的数据类型-非常有用\",\"1196\":\"v-0b8f2ec6#arrays类\",\"1197\":\"v-0b8f2ec6#arrays类概述\",\"1198\":\"v-0b8f2ec6#arrays类常用的api\",\"1199\":\"v-0b8f2ec6#选择排序和二分查找\",\"1200\":\"v-0b8f2ec6@0\",\"1201\":\"v-0b8f2ec6@1\",\"1202\":\"v-bd3b30e6\",\"1203\":\"v-bd3b30e6#反射概述\",\"1204\":\"v-bd3b30e6#反射的关键\",\"1205\":\"v-bd3b30e6#总结\",\"1206\":\"v-bd3b30e6#反射获取类对象\",\"1207\":\"v-bd3b30e6#反射第一步-获取class文件对象\",\"1208\":\"v-bd3b30e6#总结-1\",\"1209\":\"v-bd3b30e6#反射获取构造器对象\",\"1210\":\"v-bd3b30e6#使用反射技术获取构造器对象并使用\",\"1211\":\"v-bd3b30e6#constructor类中用于创建对象的方法\",\"1212\":\"v-bd3b30e6#总结-2\",\"1213\":\"v-bd3b30e6#反射获取成员变量对象\",\"1214\":\"v-bd3b30e6#总结-3\",\"1215\":\"v-bd3b30e6#反射获取方法对象\",\"1216\":\"v-bd3b30e6#使用反射技术获取方法对象并使用\",\"1217\":\"v-bd3b30e6#method类中用于触发执行的方法\",\"1218\":\"v-bd3b30e6#总结-4\",\"1219\":\"v-bd3b30e6#反射的作用-绕过编译阶段为集合添加数据\",\"1220\":\"v-bd3b30e6#总结-5\",\"1221\":\"v-bd3b30e6#反射的作用-通用框架的底层原理\",\"1222\":\"v-bd3b30e6#总结-6\",\"1223\":\"v-e6b493e2\",\"1224\":\"v-e6b493e2#正则表达式结构摘要\",\"1225\":\"v-ee26ae50\",\"1226\":\"v-ee26ae50#概述\",\"1227\":\"v-ee26ae50#stream流的获取\",\"1228\":\"v-ee26ae50#stream常用api\",\"1229\":\"v-ee26ae50#stream流的收集操作\",\"1230\":\"v-ee26ae50@0\",\"1231\":\"v-ee26ae50@1\",\"1232\":\"v-1927f6d6\",\"1233\":\"v-1927f6d6#xml的概述\",\"1234\":\"v-1927f6d6#xml的创建、语法规则\",\"1235\":\"v-58a839d9\",\"1236\":\"v-58a839d9#arraylist扩容原理\",\"1237\":\"v-2c173e3a\",\"1238\":\"v-2c173e3a#集合概述\",\"1239\":\"v-2c173e3a#collection集合的体系特点\",\"1240\":\"v-2c173e3a#集合类体系结构\",\"1241\":\"v-2c173e3a#collection集合体系\",\"1242\":\"v-2c173e3a#collection集合的特点\",\"1243\":\"v-2c173e3a#list系列集合-添加元素是有序的、可重复的、有索引。\",\"1244\":\"v-2c173e3a#set系列集合-添加元素是无序的、不重复、无索引。\",\"1245\":\"v-2c173e3a#集合对泛型的支持\",\"1246\":\"v-2c173e3a#conllection-api\",\"1247\":\"v-2c173e3a#collection-api\",\"1248\":\"v-2c173e3a#collection集合常用的遍历\",\"1249\":\"v-2c173e3a#迭代器遍历概述\",\"1250\":\"v-2c173e3a#foreach-增强for循环\",\"1251\":\"v-2c173e3a#lambda-表达式\",\"1252\":\"v-2c173e3a#collection集合存储自定义类型的对象\",\"1253\":\"v-2c173e3a#常见数据结构\",\"1254\":\"v-2c173e3a#数据结构概述\",\"1255\":\"v-2c173e3a#栈\",\"1256\":\"v-2c173e3a#队列\",\"1257\":\"v-2c173e3a#数组\",\"1258\":\"v-2c173e3a#链表\",\"1259\":\"v-2c173e3a#二叉树-二叉查找树\",\"1260\":\"v-2c173e3a#平衡二叉树\",\"1261\":\"v-2c173e3a#红黑树\",\"1262\":\"v-2c173e3a#红黑树概述\",\"1263\":\"v-2c173e3a#红黑规则\",\"1264\":\"v-2c173e3a#list系列集合\",\"1265\":\"v-2c173e3a#list集合特点\",\"1266\":\"v-2c173e3a#list集合特有的方法\",\"1267\":\"v-2c173e3a#list集合的遍历方式\",\"1268\":\"v-2c173e3a#arraylist集合底层原理-面试热点\",\"1269\":\"v-2c173e3a#linkedlist集合底层原理\",\"1270\":\"v-2c173e3a#linkedlist集合特有的功能\",\"1271\":\"v-2c173e3a#集合的并发修改异常问题\",\"1272\":\"v-2c173e3a#泛型深入\",\"1273\":\"v-2c173e3a#泛型概述和优势\",\"1274\":\"v-2c173e3a#泛型的好处\",\"1275\":\"v-2c173e3a#自定义泛型类\",\"1276\":\"v-2c173e3a#案例\",\"1277\":\"v-2c173e3a#自定义泛型方法\",\"1278\":\"v-2c173e3a#案例-1\",\"1279\":\"v-2c173e3a#自定义泛型接口\",\"1280\":\"v-2c173e3a#案例-2\",\"1281\":\"v-2c173e3a#泛型接口的作用\",\"1282\":\"v-2c173e3a#泛型通配符、上下限\",\"1283\":\"v-2c173e3a#案例-3\",\"1284\":\"v-2c173e3a#set集合体系\",\"1285\":\"v-2c173e3a#set集合的特点\",\"1286\":\"v-2c173e3a#set集合实现类的特点\",\"1287\":\"v-2c173e3a#hashset元素无序的底层原理-哈希表\",\"1288\":\"v-2c173e3a#hashset底层原理\",\"1289\":\"v-2c173e3a#哈希表的组成\",\"1290\":\"v-2c173e3a#哈希值\",\"1291\":\"v-2c173e3a#object类的api\",\"1292\":\"v-2c173e3a#对象的哈希值特点\",\"1293\":\"v-2c173e3a#哈希表原理\",\"1294\":\"v-2c173e3a#linkedhashset集合\",\"1295\":\"v-2c173e3a#treeset集合\",\"1296\":\"v-2c173e3a#treeset集合默认的排序规则\",\"1297\":\"v-2c173e3a#总结\",\"1298\":\"v-2c173e3a#可变参数\",\"1299\":\"v-2c173e3a#集合工具类\",\"1300\":\"v-2c173e3a#collections常用的api\",\"1301\":\"v-2c173e3a#collections常用的排序的api\",\"1302\":\"v-2c173e3a#案例-斗地主游戏\",\"1303\":\"v-2c173e3a#map集合\",\"1304\":\"v-2c173e3a#map集合概述和使用\",\"1305\":\"v-2c173e3a#map集合整体格式\",\"1306\":\"v-2c173e3a#map集合体系\",\"1307\":\"v-2c173e3a#map集合的特点\",\"1308\":\"v-2c173e3a#map集合实现类的特点\",\"1309\":\"v-2c173e3a#map集合常用api\",\"1310\":\"v-2c173e3a#map集合的遍历\",\"1311\":\"v-2c173e3a#键找值\",\"1312\":\"v-2c173e3a#键值对\",\"1313\":\"v-2c173e3a#lambda表达式\",\"1314\":\"v-2c173e3a#不可变集合\",\"1315\":\"v-2c173e3a#总结-1\",\"1316\":\"v-08374725\",\"1317\":\"v-08374725#多线程\",\"1318\":\"v-08374725#多线程的创建\",\"1319\":\"v-08374725#方式一-继承thread类\",\"1320\":\"v-08374725#优缺点\",\"1321\":\"v-08374725#疑问\",\"1322\":\"v-08374725#注意点\",\"1323\":\"v-08374725#方式二-实现runnable接口\",\"1324\":\"v-08374725#优缺点-1\",\"1325\":\"v-08374725#实现runnable接口-匿名内部类形式\",\"1326\":\"v-08374725#方式三-jdk5-0新增-实现callable接口\",\"1327\":\"v-08374725#优缺点-2\",\"1328\":\"v-08374725#总结\",\"1329\":\"v-08374725#thread的常用方法\",\"1330\":\"v-08374725#thread类的线程休眠方法\",\"1331\":\"v-08374725#总结-1\",\"1332\":\"v-08374725#线程安全\",\"1333\":\"v-08374725#线程安全是什么、方式的原因\",\"1334\":\"v-08374725#取钱模型\",\"1335\":\"v-08374725#模拟线程安全问题\",\"1336\":\"v-08374725#线程同步\",\"1337\":\"v-08374725#线程同步核心思想\",\"1338\":\"v-08374725#方式一-同步代码块\",\"1339\":\"v-08374725#锁对象要求\",\"1340\":\"v-08374725#锁对象用任意唯一的对象好不好呢\",\"1341\":\"v-08374725#锁对象的规范要求\",\"1342\":\"v-08374725#方式二-同步方法\",\"1343\":\"v-08374725#同步方法底层原理\",\"1344\":\"v-08374725#lock锁\",\"1345\":\"v-08374725#概述\",\"1346\":\"v-08374725#线程池实现的api、参数说明\",\"1347\":\"v-08374725#谁代表线程池\",\"1348\":\"v-08374725#如何得到线程对象\",\"1349\":\"v-08374725#threadpoolexecutor构造器的参数说明\",\"1350\":\"v-08374725#线程池常见面试题\",\"1351\":\"v-08374725#临时线程什么时候创建\",\"1352\":\"v-08374725#什么时候会开始拒绝任务\",\"1353\":\"v-08374725#线程池处理runnable任务\",\"1354\":\"v-08374725#线程处理callable任务\",\"1355\":\"v-08374725#executors工具类实现线程池\",\"1356\":\"v-08374725#executors得到线程对象的常用方法\",\"1357\":\"v-08374725#executors使用可能存在的陷阱\",\"1358\":\"v-08374725#定时器的实现方式\",\"1359\":\"v-08374725#timer定时器-不推荐使用\",\"1360\":\"v-08374725#scheduledexecutorservice定时器\",\"1361\":\"v-08374725#scheduledexecutorservice的优点\",\"1362\":\"v-08374725#线程的并发与并行\",\"1363\":\"v-08374725#并发与并行\",\"1364\":\"v-08374725#并发的理解\",\"1365\":\"v-08374725#并行的理解\",\"1366\":\"v-08374725#线程的生命周期\",\"1367\":\"v-08374725#状态\",\"1368\":\"v-08374725#java线程的状态\",\"1369\":\"v-0f0f0fa6\",\"1370\":\"v-0f0f0fa6#学习思路\",\"1371\":\"v-0f0f0fa6#判断文件类型、获取文件信息\",\"1372\":\"v-0f0f0fa6#创建文件、删除文件功能\",\"1373\":\"v-0f0f0fa6#file创建文件的功能\",\"1374\":\"v-0f0f0fa6#file类删除文件夹的功能\",\"1375\":\"v-0f0f0fa6#遍历文件夹\",\"1376\":\"v-0f0f0fa6#注意事项\",\"1377\":\"v-0f0f0fa6#递归的形式和特点\",\"1378\":\"v-0f0f0fa6#递归的形式\",\"1379\":\"v-0f0f0fa6#方法递归存在的问题\",\"1380\":\"v-0f0f0fa6#递归的算法流程、核心要素\",\"1381\":\"v-0f0f0fa6#案例-计算1-n的阶乘\",\"1382\":\"v-0f0f0fa6#递归算法三要素大体可以总结为\",\"1383\":\"v-0f0f0fa6#案例-计算1-n的和\",\"1384\":\"v-0f0f0fa6#案例-猴子吃桃问题-经典问题\",\"1385\":\"v-0f0f0fa6#非规律化递归案例-文件搜索\",\"1386\":\"v-0f0f0fa6#案例-文件搜索\",\"1387\":\"v-0f0f0fa6#常见字符集\",\"1388\":\"v-0f0f0fa6#字符集基础知识\",\"1389\":\"v-0f0f0fa6#ascii字符集\",\"1390\":\"v-0f0f0fa6#gbk\",\"1391\":\"v-0f0f0fa6#unicode码表\",\"1392\":\"v-0f0f0fa6#总结\",\"1393\":\"v-0f0f0fa6#字符集的编码、解码\",\"1394\":\"v-0f0f0fa6#io流概述\",\"1395\":\"v-0f0f0fa6#io流的分类\",\"1396\":\"v-0f0f0fa6#总结流的四大类\",\"1397\":\"v-0f0f0fa6#字节流的使用\",\"1398\":\"v-0f0f0fa6#文件字节输入流\",\"1399\":\"v-0f0f0fa6#每次读取一个字节\",\"1400\":\"v-0f0f0fa6#每次读取一个字节数组\",\"1401\":\"v-0f0f0fa6#一次读取完全部字节-避免乱码\",\"1402\":\"v-0f0f0fa6#文件字节输出流\",\"1403\":\"v-0f0f0fa6#文件拷贝\",\"1404\":\"v-0f0f0fa6#资源释放的方式\",\"1405\":\"v-0f0f0fa6#try-catch-finally\",\"1406\":\"v-0f0f0fa6#try-with-resource\",\"1407\":\"v-0f0f0fa6#一次读取一个字符\",\"1408\":\"v-0f0f0fa6#一次读取一个字符数组\",\"1409\":\"v-0f0f0fa6#文件字符输入流\",\"1410\":\"v-0f0f0fa6#缓冲流\",\"1411\":\"v-0f0f0fa6#缓冲流概述\",\"1412\":\"v-0f0f0fa6#字节缓冲流\",\"1413\":\"v-0f0f0fa6#字符缓冲流\",\"1414\":\"v-0f0f0fa6#对象序列化和反序列化\",\"1415\":\"v-0f0f0fa6#打印流\",\"1416\":\"v-0f0f0fa6#printstream、printwriter\",\"1417\":\"v-0f0f0fa6#properties\",\"1418\":\"v-0f0f0fa6#commons-io\",\"1419\":\"v-0f0f0fa6#fileutils主要方法如下\",\"1420\":\"v-0f0f0fa6@0\",\"1421\":\"v-0f0f0fa6@1\",\"1422\":\"v-2488c049\",\"1423\":\"v-2488c049#什么是网络编程\",\"1424\":\"v-2488c049#网络体系基本模式\",\"1425\":\"v-2488c049#网络通信的三要素\",\"1426\":\"v-2488c049#三要素概述、要素一-ip地址\",\"1427\":\"v-2488c049#实现网络编程的关键三要素\",\"1428\":\"v-2488c049#ip地址\",\"1429\":\"v-2488c049#ip地址形式\",\"1430\":\"v-2488c049#ip常用命令\",\"1431\":\"v-2488c049#特殊ip\",\"1432\":\"v-2488c049#ip地址操作类-inetaddress\",\"1433\":\"v-2488c049#inetaddress-api如下\",\"1434\":\"v-2488c049#端口号\",\"1435\":\"v-2488c049#协议\",\"1436\":\"v-2488c049#通信协议\",\"1437\":\"v-2488c049#网络通信协议有两种参考模型\",\"1438\":\"v-2488c049#传输层的2个常见协议\",\"1439\":\"v-2488c049#tcp协议特点\",\"1440\":\"v-2488c049#tcp协议通信场景\",\"1441\":\"v-2488c049#tcp三次握手确立连接\",\"1442\":\"v-2488c049#tcp四次挥手断开连接\",\"1443\":\"v-2488c049#udp协议\",\"1444\":\"v-2488c049#udp协议通信场景\",\"1445\":\"v-2488c049#udp通信\",\"1446\":\"v-2488c049#快速入门\",\"1447\":\"v-2488c049#datagrampacket-数据包对象-韭菜盘子\",\"1448\":\"v-2488c049#datagramsocket-发送端和接收端对象-人\",\"1449\":\"v-2488c049#datagramsocket类成员方法\",\"1450\":\"v-2488c049#多发多收\",\"1451\":\"v-2488c049#广播、组播\",\"1452\":\"v-2488c049#udp的三种通信方式\",\"1453\":\"v-2488c049#udp如何实现广播\",\"1454\":\"v-2488c049#udp如何实现组播\",\"1455\":\"v-2488c049#tcp通信\",\"1456\":\"v-2488c049#客户端\",\"1457\":\"v-2488c049#socket\",\"1458\":\"v-2488c049#socket类成员方法\",\"1459\":\"v-2488c049#服务端\",\"1460\":\"v-2488c049#serversocket\",\"1461\":\"v-2488c049#serversocket类成员方法\",\"1462\":\"v-2488c049#本案例的多发多收-是否可以同时接收多个客户端的消息\",\"1463\":\"v-2488c049#tcp通信-同时接收多个客户端消息-重点\",\"1464\":\"v-2488c049#如何才可以让服务端可以处理多个客户端的通信需求\",\"1465\":\"v-2488c049#tcp通信模型-线程池优化\",\"1466\":\"v-2488c049#实现bs开发-模拟\",\"1467\":\"v-6b0ecaf5\",\"1468\":\"v-6b0ecaf5#lambda概述\",\"1469\":\"v-6b0ecaf5#总结\",\"1470\":\"v-6b0ecaf5#stream流\",\"1471\":\"v-6b0ecaf5#stream流的获取\",\"1472\":\"v-6b0ecaf5#stream常用api\",\"1473\":\"v-6b0ecaf5#stream流的收集操作\",\"1474\":\"v-6b0ecaf5#函数式接口定义\",\"1475\":\"v-6b0ecaf5#jdk1-8-新增的函数式接口\",\"1476\":\"v-6b0ecaf5#supplier-供给型函数式接口\",\"1477\":\"v-6b0ecaf5#consumer-消费型函数式接口\",\"1478\":\"v-6b0ecaf5#predicate-断言型函数式接口\",\"1479\":\"v-6b0ecaf5#function-函数型函数式接口\",\"1480\":\"v-6b0ecaf5#总结-1\",\"1481\":\"v-6b0ecaf5@0\",\"1482\":\"v-6b0ecaf5@1\",\"1483\":\"v-6d191d66\",\"1484\":\"v-f0383c18\",\"1485\":\"v-eb072ff4\",\"1486\":\"v-744cd23b\",\"1487\":\"v-2fdaf601\",\"1488\":\"v-1303aad4\",\"1489\":\"v-ce4dfaee\",\"1490\":\"v-a7f04bf8\",\"1491\":\"v-9073e716\",\"1492\":\"v-10f63551\",\"1493\":\"v-6216b1e1\",\"1494\":\"v-14c69af4\",\"1495\":\"v-2bf7b2a9\",\"1496\":\"v-4378d438\",\"1497\":\"v-9828af56\",\"1498\":\"v-8ddf5a96\",\"1499\":\"v-b99b0d9e\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,13],\"1\":[1,15],\"2\":[1,14],\"3\":[1,12],\"4\":[1,10],\"5\":[1,13],\"6\":[1,10],\"7\":[1,12],\"8\":[1,16],\"9\":[1,7],\"10\":[1,11],\"11\":[1,9],\"12\":[1,7],\"13\":[1,7],\"14\":[1,8],\"15\":[1,7],\"16\":[1,9],\"17\":[1,10],\"18\":[1,17],\"19\":[1,9],\"20\":[1,9],\"21\":[1,10],\"22\":[1,9],\"23\":[1,10],\"24\":[1,8],\"25\":[1,10],\"26\":[1,9],\"27\":[1,28],\"28\":[1,10],\"29\":[1,10],\"30\":[2,6],\"31\":[1,7],\"32\":[2,7],\"33\":[1,9],\"34\":[2,8],\"35\":[1,6],\"36\":[2,4],\"37\":[1,9],\"38\":[2,5],\"39\":[1,8],\"40\":[1,20],\"41\":[1,15],\"42\":[1,9],\"43\":[1,14],\"44\":[1,12],\"45\":[1,14],\"46\":[1,15],\"47\":[1,11],\"48\":[1,11],\"49\":[1,31],\"50\":[1,5],\"51\":[1,14],\"52\":[1,9],\"53\":[1,10],\"54\":[1,6],\"55\":[1,9],\"56\":[1,9],\"57\":[1,9],\"58\":[1,23],\"59\":[1,7],\"60\":[1,8],\"61\":[1,6],\"62\":[1,7],\"63\":[1,8],\"64\":[1,7],\"65\":[1,6],\"66\":[1,7],\"67\":[1,9],\"68\":[1,16],\"69\":[1,8],\"70\":[1,10],\"71\":[1,10],\"72\":[1,9],\"73\":[1,13],\"74\":[1,10],\"75\":[1,28],\"76\":[1,7],\"77\":[1,11],\"78\":[1,8],\"79\":[1,12],\"80\":[1,11],\"81\":[1,9],\"82\":[1,10],\"83\":[1,15],\"84\":[1,8],\"85\":[1,8],\"86\":[1,8],\"87\":[1,8],\"88\":[1,9],\"89\":[1,9],\"90\":[2,18],\"91\":[1,1],\"92\":[1,99],\"93\":[1,3],\"94\":[1],\"95\":[3,72],\"96\":[8,36],\"97\":[4,45],\"98\":[6,31],\"99\":[9,32],\"100\":[9,42],\"101\":[6,52],\"102\":[11,29],\"103\":[9,63],\"104\":[4,28],\"105\":[4,19],\"106\":[7,53],\"107\":[6,59],\"108\":[6,40],\"109\":[2,54],\"110\":[7,44],\"111\":[10,42],\"112\":[3,89],\"113\":[6,30],\"114\":[6,33],\"115\":[6,74],\"116\":[7,26],\"117\":[6,63],\"118\":[4,21],\"119\":[8,24],\"120\":[10,27],\"121\":[1,35],\"122\":[1],\"123\":[1,19],\"124\":[2,42],\"125\":[2,39],\"126\":[2,9],\"127\":[4,40],\"128\":[2,83],\"129\":[1,37],\"130\":[1,24],\"131\":[1,17],\"132\":[1,14],\"133\":[2,13],\"134\":[1,9],\"135\":[1,6],\"136\":[1,23],\"137\":[2,29],\"138\":[1,14],\"139\":[3,43],\"140\":[1],\"141\":[2,39],\"142\":[2,39],\"143\":[3,10],\"144\":[2,25],\"145\":[6,24],\"146\":[2,21],\"147\":[2,6],\"148\":[1,37],\"149\":[2,20],\"150\":[2,47],\"151\":[2,42],\"152\":[4,16],\"153\":[3,16],\"154\":[3,38],\"155\":[1,22],\"156\":[1,6],\"157\":[1],\"158\":[2,52],\"159\":[2,44],\"160\":[3,35],\"161\":[2,11],\"162\":[2,26],\"163\":[1,20],\"164\":[1,66],\"165\":[2,5],\"166\":[1,39],\"167\":[4,26],\"168\":[1,23],\"169\":[5,14],\"170\":[1,9],\"171\":[3,20],\"172\":[4,14],\"173\":[1,20],\"174\":[2,19],\"175\":[1],\"176\":[3,21],\"177\":[2,7],\"178\":[2,8],\"179\":[2,11],\"180\":[1],\"181\":[1,4],\"182\":[2,24],\"183\":[2,14],\"184\":[2,29],\"185\":[4,12],\"186\":[4,8],\"187\":[1,77],\"188\":[4,22],\"189\":[3,16],\"190\":[4,39],\"191\":[1,27],\"192\":[2,13],\"193\":[6,16],\"194\":[4,17],\"195\":[1,2],\"196\":[2],\"197\":[2,36],\"198\":[1,11],\"199\":[2,75],\"200\":[4,17],\"201\":[6,8],\"202\":[6,7],\"203\":[2,11],\"204\":[2,20],\"205\":[2,40],\"206\":[1,2],\"207\":[4,31],\"208\":[2,9],\"209\":[2],\"210\":[4,47],\"211\":[2,67],\"212\":[1,16],\"213\":[2,19],\"214\":[1,14],\"215\":[2,45],\"216\":[2,19],\"217\":[1,41],\"218\":[2],\"219\":[3,37],\"220\":[2,16],\"221\":[3,13],\"222\":[3,47],\"223\":[1,6],\"224\":[1],\"225\":[1,22],\"226\":[1,83],\"227\":[2],\"228\":[1,32],\"229\":[1,105],\"230\":[1,19],\"231\":[1,85],\"232\":[1],\"233\":[1,132],\"234\":[1,27],\"235\":[1],\"236\":[1,11],\"237\":[1,19],\"238\":[1],\"239\":[1,9],\"240\":[1,245],\"241\":[2,8],\"242\":[1],\"243\":[1,58],\"244\":[1,51],\"245\":[1,126],\"246\":[null,null,2],\"247\":[null,null,1],\"248\":[1,19],\"249\":[1,13],\"250\":[1,20],\"251\":[1,55],\"252\":[1],\"253\":[1,10],\"254\":[1,23],\"255\":[1,3],\"256\":[1,15],\"257\":[1],\"258\":[1,80],\"259\":[1,40],\"260\":[1],\"261\":[2,10],\"262\":[1,12],\"263\":[1],\"264\":[1,302],\"265\":[1,28],\"266\":[1,17],\"267\":[1,84],\"268\":[1,6],\"269\":[1],\"270\":[1,89],\"271\":[1,36],\"272\":[1,86],\"273\":[1,66],\"274\":[1,42],\"275\":[3,62],\"276\":[1,25],\"277\":[2,82],\"278\":[1],\"279\":[1,53],\"280\":[1,133],\"281\":[1,84],\"282\":[2,12],\"283\":[1,21],\"284\":[2,4],\"285\":[1,18],\"286\":[1,18],\"287\":[2,19],\"288\":[1,48],\"289\":[2],\"290\":[1,12],\"291\":[2,10],\"292\":[2,10],\"293\":[1,43],\"294\":[1,5],\"295\":[1,68],\"296\":[1,9],\"297\":[1,44],\"298\":[1,30],\"299\":[1,48],\"300\":[1,4],\"301\":[1,7],\"302\":[2,33],\"303\":[1,2],\"304\":[2,4],\"305\":[1],\"306\":[1,11],\"307\":[1,98],\"308\":[1,109],\"309\":[1,146],\"310\":[1,72],\"311\":[1,10],\"312\":[1,32],\"313\":[1,81],\"314\":[1,65],\"315\":[1,94],\"316\":[1,48],\"317\":[1,17],\"318\":[1,45],\"319\":[1,20],\"320\":[1,76],\"321\":[1,40],\"322\":[1,36],\"323\":[1,68],\"324\":[1],\"325\":[1,31],\"326\":[1,30],\"327\":[1,20],\"328\":[1,2],\"329\":[1,80],\"330\":[1,5],\"331\":[1,40],\"332\":[1],\"333\":[1,70],\"334\":[1,13],\"335\":[1,29],\"336\":[1,17],\"337\":[1,15],\"338\":[1,40],\"339\":[1,2],\"340\":[1,4],\"341\":[1,3],\"342\":[1],\"343\":[1,4],\"344\":[1,26],\"345\":[2,4],\"346\":[1,49],\"347\":[1,63],\"348\":[2,2],\"349\":[1,45],\"350\":[1,89],\"351\":[1,21],\"352\":[1,13],\"353\":[1,71],\"354\":[1,115],\"355\":[1,14],\"356\":[1,91],\"357\":[1,7],\"358\":[1,141],\"359\":[1,11],\"360\":[1,83],\"361\":[1,18],\"362\":[1,77],\"363\":[1,16],\"364\":[1],\"365\":[1,63],\"366\":[1,23],\"367\":[1],\"368\":[1,18],\"369\":[1,19],\"370\":[1,6],\"371\":[1,32],\"372\":[1,5],\"373\":[2,47],\"374\":[1,18],\"375\":[1,93],\"376\":[1,16],\"377\":[1,83],\"378\":[1,39],\"379\":[1,12],\"380\":[1,6],\"381\":[1,25],\"382\":[1,13],\"383\":[1],\"384\":[1,15],\"385\":[1,1],\"386\":[1,358],\"387\":[1,43],\"388\":[1,18],\"389\":[1,154],\"390\":[1,9],\"391\":[1,11],\"392\":[1,88],\"393\":[1,9],\"394\":[1,14],\"395\":[1,89],\"396\":[1,19],\"397\":[1,16],\"398\":[2,73],\"399\":[5,20],\"400\":[3,21],\"401\":[5,10],\"402\":[2,54],\"403\":[3,13],\"404\":[2,43],\"405\":[5,37],\"406\":[1],\"407\":[1],\"408\":[1,11],\"409\":[1,44],\"410\":[1,18],\"411\":[1,3],\"412\":[1,17],\"413\":[1,48],\"414\":[1,18],\"415\":[1,13],\"416\":[1],\"417\":[1,10],\"418\":[1,31],\"419\":[1,19],\"420\":[1,5],\"421\":[4],\"422\":[1,26],\"423\":[2,18],\"424\":[3,49],\"425\":[1],\"426\":[1],\"427\":[1,8],\"428\":[1,88],\"429\":[1],\"430\":[1,1],\"431\":[3,14],\"432\":[2,24],\"433\":[1,34],\"434\":[1,14],\"435\":[3,248],\"436\":[2,47],\"437\":[2,99],\"438\":[1],\"439\":[1,11],\"440\":[1,34],\"441\":[3,27],\"442\":[1,10],\"443\":[1,10],\"444\":[1,5],\"445\":[1,14],\"446\":[1,4],\"447\":[1,4],\"448\":[1,6],\"449\":[1,18],\"450\":[1,10],\"451\":[1,26],\"452\":[1,3],\"453\":[1,23],\"454\":[1,14],\"455\":[1,25],\"456\":[2,36],\"457\":[1,4],\"458\":[1,13],\"459\":[4,20],\"460\":[1,66],\"461\":[1,16],\"462\":[1,24],\"463\":[1,9],\"464\":[6,7],\"465\":[1,35],\"466\":[1,23],\"467\":[1],\"468\":[1,2],\"469\":[1,2],\"470\":[1,2],\"471\":[1,1],\"472\":[1],\"473\":[1,17],\"474\":[1,39],\"475\":[1,19],\"476\":[1,28],\"477\":[1],\"478\":[1,32],\"479\":[1,5],\"480\":[1],\"481\":[1,116],\"482\":[1,7],\"483\":[1],\"484\":[1,8],\"485\":[1,13],\"486\":[1,36],\"487\":[1],\"488\":[1,12],\"489\":[1],\"490\":[1,61],\"491\":[1,23],\"492\":[1,14],\"493\":[1],\"494\":[3,219],\"495\":[1,181],\"496\":[1,724],\"497\":[1],\"498\":[1,2],\"499\":[1,2],\"500\":[1,7],\"501\":[1,10],\"502\":[1],\"503\":[1,3],\"504\":[1,17],\"505\":[1,19],\"506\":[1],\"507\":[2,22],\"508\":[2,9],\"509\":[1,7],\"510\":[1,14],\"511\":[1,33],\"512\":[1,22],\"513\":[1,8],\"514\":[1,40],\"515\":[1],\"516\":[1,21],\"517\":[1,17],\"518\":[1,26],\"519\":[1,35],\"520\":[1],\"521\":[1,39],\"522\":[1,28],\"523\":[1,14],\"524\":[1],\"525\":[1,89],\"526\":[1,64],\"527\":[1],\"528\":[1,16],\"529\":[1,78],\"530\":[1],\"531\":[8,23],\"532\":[11,14],\"533\":[1,24],\"534\":[1],\"535\":[1,17],\"536\":[1,29],\"537\":[2,4],\"538\":[1,4],\"539\":[1,2],\"540\":[1],\"541\":[1],\"542\":[1],\"543\":[1,2],\"544\":[1,81],\"545\":[1],\"546\":[1,2],\"547\":[1,8],\"548\":[1],\"549\":[1],\"550\":[2],\"551\":[1,2],\"552\":[1,35],\"553\":[3,7],\"554\":[1],\"555\":[1],\"556\":[1,2],\"557\":[1,162],\"558\":[1,2],\"559\":[1],\"560\":[1],\"561\":[1,2],\"562\":[1,40],\"563\":[1],\"564\":[1],\"565\":[1],\"566\":[1,30],\"567\":[1],\"568\":[2,4],\"569\":[1],\"570\":[1,310],\"571\":[1,44],\"572\":[1,10],\"573\":[1,36],\"574\":[1],\"575\":[1],\"576\":[1,2],\"577\":[1],\"578\":[1,2],\"579\":[1,105],\"580\":[1],\"581\":[3,2],\"582\":[6,12],\"583\":[4,1],\"584\":[1],\"585\":[3,2],\"586\":[3,2],\"587\":[1],\"588\":[3,2],\"589\":[4,2],\"590\":[5,2],\"591\":[4,2],\"592\":[1],\"593\":[1],\"594\":[6,2],\"595\":[3,2],\"596\":[1,2],\"597\":[1],\"598\":[1,2],\"599\":[1,2],\"600\":[1,2],\"601\":[1,82],\"602\":[1,6],\"603\":[1,2],\"604\":[2],\"605\":[1,2],\"606\":[1,2],\"607\":[1,2],\"608\":[1,2],\"609\":[1,2],\"610\":[1,12],\"611\":[1,2],\"612\":[1,2],\"613\":[1,54],\"614\":[1,2],\"615\":[1,247],\"616\":[1,25],\"617\":[1,2],\"618\":[2],\"619\":[1,2],\"620\":[1,19],\"621\":[3,2],\"622\":[1],\"623\":[3,2],\"624\":[1],\"625\":[1],\"626\":[3],\"627\":[1,13],\"628\":[1,57],\"629\":[1,148],\"630\":[1],\"631\":[2,10],\"632\":[1,7],\"633\":[2,8],\"634\":[2,14],\"635\":[4,61],\"636\":[2,60],\"637\":[1,36],\"638\":[1,54],\"639\":[null,null,1],\"640\":[null,null,1],\"641\":[1,58],\"642\":[1,2],\"643\":[1,7],\"644\":[1],\"645\":[1,2],\"646\":[1,17],\"647\":[1,29],\"648\":[1,32],\"649\":[1,17],\"650\":[1,20],\"651\":[1,5],\"652\":[1,24],\"653\":[1,27],\"654\":[2,45],\"655\":[null,null,1],\"656\":[null,null,1],\"657\":[1,2],\"658\":[1,6],\"659\":[1,12],\"660\":[1,41],\"661\":[1,9],\"662\":[2,36],\"663\":[1,43],\"664\":[1,30],\"665\":[1,10],\"666\":[1],\"667\":[5],\"668\":[2,12],\"669\":[2],\"670\":[4],\"671\":[1],\"672\":[3,41],\"673\":[1],\"674\":[1],\"675\":[2,14],\"676\":[1,10],\"677\":[1,11],\"678\":[3,54],\"679\":[1,56],\"680\":[3,7],\"681\":[3],\"682\":[2,21],\"683\":[3],\"684\":[4,9],\"685\":[2,3],\"686\":[2,28],\"687\":[1,4],\"688\":[1,47],\"689\":[3],\"690\":[1,19],\"691\":[1,20],\"692\":[1,2],\"693\":[1,10],\"694\":[2,14],\"695\":[2,6],\"696\":[5,4],\"697\":[1,2],\"698\":[2,9],\"699\":[2,7],\"700\":[2,6],\"701\":[2,16],\"702\":[1,8],\"703\":[1,15],\"704\":[1,39],\"705\":[1],\"706\":[1,3],\"707\":[1,31],\"708\":[2,42],\"709\":[1,45],\"710\":[2,26],\"711\":[2],\"712\":[1],\"713\":[1,11],\"714\":[2,34],\"715\":[2,49],\"716\":[1,3],\"717\":[4,16],\"718\":[2],\"719\":[1,4],\"720\":[1,3],\"721\":[1,76],\"722\":[4],\"723\":[2],\"724\":[4,11],\"725\":[1,7],\"726\":[2,27],\"727\":[2,8],\"728\":[1],\"729\":[4],\"730\":[6,19],\"731\":[27],\"732\":[1,60],\"733\":[1],\"734\":[1,5],\"735\":[1,5],\"736\":[2,3],\"737\":[2,13],\"738\":[2,65],\"739\":[null,null,1],\"740\":[null,null,1],\"741\":[1,2],\"742\":[1,3],\"743\":[1,208],\"744\":[1,20],\"745\":[2],\"746\":[2,3],\"747\":[2,64],\"748\":[1,8],\"749\":[2,45],\"750\":[1,82],\"751\":[2,177],\"752\":[2],\"753\":[1,6],\"754\":[1,15],\"755\":[1,53],\"756\":[1,101],\"757\":[1,3],\"758\":[1,87],\"759\":[1,38],\"760\":[2,10],\"761\":[1,7],\"762\":[1,9],\"763\":[1,64],\"764\":[2,21],\"765\":[1],\"766\":[2,8],\"767\":[1,27],\"768\":[1,4],\"769\":[1,53],\"770\":[1],\"771\":[1,34],\"772\":[1,9],\"773\":[3,26],\"774\":[1,79],\"775\":[2,10],\"776\":[1,46],\"777\":[2,15],\"778\":[3],\"779\":[2,3],\"780\":[1,9],\"781\":[1,97],\"782\":[2,23],\"783\":[1],\"784\":[1,78],\"785\":[1,26],\"786\":[3,54],\"787\":[1],\"788\":[1,28],\"789\":[1,11],\"790\":[3,19],\"791\":[1],\"792\":[1,3],\"793\":[1,128],\"794\":[1,76],\"795\":[null,null,1],\"796\":[null,null,1],\"797\":[1],\"798\":[1,12],\"799\":[1,2],\"800\":[1,6],\"801\":[1],\"802\":[2,51],\"803\":[1,15],\"804\":[1,88],\"805\":[1,1],\"806\":[1,78],\"807\":[1,20],\"808\":[1,93],\"809\":[1,22],\"810\":[1,19],\"811\":[1,1],\"812\":[1,95],\"813\":[1,22],\"814\":[2,71],\"815\":[1,5],\"816\":[2,102],\"817\":[1,6],\"818\":[1,60],\"819\":[1,274],\"820\":[1],\"821\":[1,70],\"822\":[1,52],\"823\":[1,105],\"824\":[1,54],\"825\":[null,null,1],\"826\":[null,null,1],\"827\":[1],\"828\":[1,2],\"829\":[2,75],\"830\":[1],\"831\":[1,182],\"832\":[1],\"833\":[1,20],\"834\":[1],\"835\":[1,16],\"836\":[1,8],\"837\":[1],\"838\":[5,5],\"839\":[5,49],\"840\":[1,67],\"841\":[2,3],\"842\":[3,94],\"843\":[1],\"844\":[1,59],\"845\":[2,58],\"846\":[2,46],\"847\":[1,42],\"848\":[1,9],\"849\":[1,5],\"850\":[1,14],\"851\":[1,12],\"852\":[1,10],\"853\":[1,15],\"854\":[2,8],\"855\":[1,22],\"856\":[1,1],\"857\":[1,10],\"858\":[1,18],\"859\":[1],\"860\":[2,8],\"861\":[1,70],\"862\":[1,7],\"863\":[3,17],\"864\":[1,5],\"865\":[1,76],\"866\":[1,80],\"867\":[1],\"868\":[1,11],\"869\":[1,5],\"870\":[1,22],\"871\":[1,44],\"872\":[1,17],\"873\":[1,57],\"874\":[1,9],\"875\":[1,38],\"876\":[1,4],\"877\":[2,11],\"878\":[1,47],\"879\":[1],\"880\":[1,10],\"881\":[1,53],\"882\":[2],\"883\":[1,2],\"884\":[1,4],\"885\":[1,2],\"886\":[1,5],\"887\":[1,34],\"888\":[1,122],\"889\":[1,9],\"890\":[1,8],\"891\":[1,131],\"892\":[1,22],\"893\":[1,50],\"894\":[1,7],\"895\":[1,19],\"896\":[1,97],\"897\":[2,133],\"898\":[1],\"899\":[1,8],\"900\":[1,11],\"901\":[1,7],\"902\":[1,8],\"903\":[1,50],\"904\":[1,115],\"905\":[1],\"906\":[1,68],\"907\":[1,73],\"908\":[1,103],\"909\":[1,58],\"910\":[2,8],\"911\":[1],\"912\":[1,13],\"913\":[1],\"914\":[2,53],\"915\":[2,6],\"916\":[2,4],\"917\":[2,5],\"918\":[2,53],\"919\":[2,10],\"920\":[3,41],\"921\":[4,102],\"922\":[2,9],\"923\":[1,15],\"924\":[1,57],\"925\":[1,41],\"926\":[1,40],\"927\":[1],\"928\":[2,6],\"929\":[1,8],\"930\":[2,74],\"931\":[1,11],\"932\":[1,5],\"933\":[2,28],\"934\":[1,2],\"935\":[2,2],\"936\":[1,29],\"937\":[2,50],\"938\":[1,14],\"939\":[1,147],\"940\":[1,9],\"941\":[2],\"942\":[2,5],\"943\":[2,7],\"944\":[1,40],\"945\":[1],\"946\":[2,4],\"947\":[2,3],\"948\":[1,163],\"949\":[1,71],\"950\":[1],\"951\":[1,67],\"952\":[1,33],\"953\":[1,4],\"954\":[3,53],\"955\":[1,25],\"956\":[1,58],\"957\":[1],\"958\":[1,5],\"959\":[1,5],\"960\":[1,4],\"961\":[1],\"962\":[1,4],\"963\":[1,22],\"964\":[1],\"965\":[1,86],\"966\":[2,74],\"967\":[2],\"968\":[1,10],\"969\":[1,62],\"970\":[1,15],\"971\":[1,47],\"972\":[1,4],\"973\":[1,5],\"974\":[1,27],\"975\":[2],\"976\":[3,25],\"977\":[2,7],\"978\":[3,31],\"979\":[4,34],\"980\":[2],\"981\":[2,75],\"982\":[1],\"983\":[1,9],\"984\":[1,11],\"985\":[2,12],\"986\":[1,18],\"987\":[1,7],\"988\":[2,32],\"989\":[1,8],\"990\":[1,8],\"991\":[1,7],\"992\":[1],\"993\":[1,2],\"994\":[1,74],\"995\":[1,104],\"996\":[3,62],\"997\":[1,65],\"998\":[1,65],\"999\":[1],\"1000\":[3,74],\"1001\":[3,68],\"1002\":[1,46],\"1003\":[1,39],\"1004\":[1,40],\"1005\":[1],\"1006\":[1,10],\"1007\":[1,67],\"1008\":[1,75],\"1009\":[1,99],\"1010\":[1,10],\"1011\":[2,57],\"1012\":[1,47],\"1013\":[2,12],\"1014\":[2,57],\"1015\":[null,null,1],\"1016\":[null,null,1],\"1017\":[1],\"1018\":[1,64],\"1019\":[2,69],\"1020\":[1,70],\"1021\":[1,52],\"1022\":[1,105],\"1023\":[1,54],\"1024\":[1,38],\"1025\":[3,61],\"1026\":[2,50],\"1027\":[2,86],\"1028\":[2,105],\"1029\":[2,85],\"1030\":[1,6],\"1031\":[null,null,1],\"1032\":[null,null,2],\"1033\":[1,57],\"1034\":[1,148],\"1035\":[1],\"1036\":[2,10],\"1037\":[1,7],\"1038\":[2,8],\"1039\":[2,14],\"1040\":[4,61],\"1041\":[2,60],\"1042\":[1,36],\"1043\":[1,54],\"1044\":[null,null,1],\"1045\":[null,null,1],\"1046\":[1,58],\"1047\":[1,2],\"1048\":[1,7],\"1049\":[1],\"1050\":[1,2],\"1051\":[1,17],\"1052\":[1,29],\"1053\":[1,32],\"1054\":[1,17],\"1055\":[1,20],\"1056\":[1,5],\"1057\":[1,24],\"1058\":[1,27],\"1059\":[2,45],\"1060\":[null,null,1],\"1061\":[null,null,1],\"1062\":[1,2],\"1063\":[1,6],\"1064\":[1,12],\"1065\":[1,41],\"1066\":[1,9],\"1067\":[2,36],\"1068\":[1,43],\"1069\":[1,30],\"1070\":[1,10],\"1071\":[1],\"1072\":[5],\"1073\":[2,12],\"1074\":[2],\"1075\":[4],\"1076\":[1],\"1077\":[3,41],\"1078\":[1],\"1079\":[1],\"1080\":[2,14],\"1081\":[1,10],\"1082\":[1,11],\"1083\":[3,54],\"1084\":[1,56],\"1085\":[3,7],\"1086\":[3],\"1087\":[2,21],\"1088\":[3],\"1089\":[4,9],\"1090\":[2,3],\"1091\":[2,28],\"1092\":[1,4],\"1093\":[1,47],\"1094\":[3],\"1095\":[1,19],\"1096\":[1,20],\"1097\":[1,2],\"1098\":[1,10],\"1099\":[2,14],\"1100\":[2,6],\"1101\":[5,4],\"1102\":[1,2],\"1103\":[2,9],\"1104\":[2,7],\"1105\":[2,6],\"1106\":[2,16],\"1107\":[1,8],\"1108\":[1,15],\"1109\":[1,39],\"1110\":[1],\"1111\":[1,3],\"1112\":[1,31],\"1113\":[2,42],\"1114\":[1,45],\"1115\":[2,26],\"1116\":[2],\"1117\":[1],\"1118\":[1,11],\"1119\":[2,34],\"1120\":[2,49],\"1121\":[1,3],\"1122\":[4,16],\"1123\":[2],\"1124\":[1,4],\"1125\":[1,3],\"1126\":[1,76],\"1127\":[4],\"1128\":[2],\"1129\":[4,11],\"1130\":[1,7],\"1131\":[2,27],\"1132\":[2,8],\"1133\":[1],\"1134\":[4],\"1135\":[6,19],\"1136\":[27],\"1137\":[1,60],\"1138\":[1],\"1139\":[1,5],\"1140\":[1,5],\"1141\":[2,3],\"1142\":[2,13],\"1143\":[2,65],\"1144\":[null,null,1],\"1145\":[null,null,1],\"1146\":[1,2],\"1147\":[1,3],\"1148\":[1,208],\"1149\":[1,20],\"1150\":[2],\"1151\":[2,3],\"1152\":[2,64],\"1153\":[1,8],\"1154\":[2,45],\"1155\":[1,82],\"1156\":[2,177],\"1157\":[2],\"1158\":[1,6],\"1159\":[1,15],\"1160\":[1,53],\"1161\":[1,101],\"1162\":[1,3],\"1163\":[1,87],\"1164\":[1,38],\"1165\":[2,10],\"1166\":[1,7],\"1167\":[1,9],\"1168\":[1,64],\"1169\":[2,21],\"1170\":[1],\"1171\":[2,8],\"1172\":[1,27],\"1173\":[1,4],\"1174\":[1,53],\"1175\":[1],\"1176\":[1,34],\"1177\":[1,9],\"1178\":[3,26],\"1179\":[1,79],\"1180\":[2,10],\"1181\":[1,46],\"1182\":[2,15],\"1183\":[3],\"1184\":[2,3],\"1185\":[1,9],\"1186\":[1,97],\"1187\":[2,23],\"1188\":[1],\"1189\":[1,78],\"1190\":[1,26],\"1191\":[3,54],\"1192\":[1],\"1193\":[1,28],\"1194\":[1,11],\"1195\":[3,19],\"1196\":[1],\"1197\":[1,3],\"1198\":[1,128],\"1199\":[1,76],\"1200\":[null,null,1],\"1201\":[null,null,1],\"1202\":[1],\"1203\":[1,12],\"1204\":[1,2],\"1205\":[1,6],\"1206\":[1],\"1207\":[2,51],\"1208\":[1,15],\"1209\":[1,88],\"1210\":[1,1],\"1211\":[1,78],\"1212\":[1,20],\"1213\":[1,93],\"1214\":[1,22],\"1215\":[1,19],\"1216\":[1,1],\"1217\":[1,95],\"1218\":[1,22],\"1219\":[2,71],\"1220\":[1,5],\"1221\":[2,102],\"1222\":[1,6],\"1223\":[1,60],\"1224\":[1,274],\"1225\":[1],\"1226\":[1,70],\"1227\":[1,52],\"1228\":[1,105],\"1229\":[1,54],\"1230\":[null,null,1],\"1231\":[null,null,1],\"1232\":[1],\"1233\":[1,2],\"1234\":[2,75],\"1235\":[1],\"1236\":[1,182],\"1237\":[1],\"1238\":[1,20],\"1239\":[1],\"1240\":[1,16],\"1241\":[1,8],\"1242\":[1],\"1243\":[5,5],\"1244\":[5,49],\"1245\":[1,67],\"1246\":[2,3],\"1247\":[3,94],\"1248\":[1],\"1249\":[1,59],\"1250\":[2,58],\"1251\":[2,46],\"1252\":[1,42],\"1253\":[1,9],\"1254\":[1,5],\"1255\":[1,14],\"1256\":[1,12],\"1257\":[1,10],\"1258\":[1,15],\"1259\":[2,8],\"1260\":[1,22],\"1261\":[1,1],\"1262\":[1,10],\"1263\":[1,18],\"1264\":[1],\"1265\":[2,8],\"1266\":[1,70],\"1267\":[1,7],\"1268\":[3,17],\"1269\":[1,5],\"1270\":[1,76],\"1271\":[1,80],\"1272\":[1],\"1273\":[1,11],\"1274\":[1,5],\"1275\":[1,22],\"1276\":[1,44],\"1277\":[1,17],\"1278\":[1,57],\"1279\":[1,9],\"1280\":[1,38],\"1281\":[1,4],\"1282\":[2,11],\"1283\":[1,47],\"1284\":[1],\"1285\":[1,10],\"1286\":[1,53],\"1287\":[2],\"1288\":[1,2],\"1289\":[1,4],\"1290\":[1,2],\"1291\":[1,5],\"1292\":[1,34],\"1293\":[1,122],\"1294\":[1,9],\"1295\":[1,8],\"1296\":[1,131],\"1297\":[1,22],\"1298\":[1,50],\"1299\":[1,7],\"1300\":[1,19],\"1301\":[1,97],\"1302\":[2,133],\"1303\":[1],\"1304\":[1,8],\"1305\":[1,11],\"1306\":[1,7],\"1307\":[1,8],\"1308\":[1,50],\"1309\":[1,115],\"1310\":[1],\"1311\":[1,68],\"1312\":[1,73],\"1313\":[1,103],\"1314\":[1,58],\"1315\":[2,8],\"1316\":[1],\"1317\":[1,13],\"1318\":[1],\"1319\":[2,53],\"1320\":[2,6],\"1321\":[2,4],\"1322\":[2,5],\"1323\":[2,53],\"1324\":[2,10],\"1325\":[3,41],\"1326\":[4,102],\"1327\":[2,9],\"1328\":[1,15],\"1329\":[1,57],\"1330\":[1,41],\"1331\":[1,40],\"1332\":[1],\"1333\":[2,6],\"1334\":[1,8],\"1335\":[2,74],\"1336\":[1,11],\"1337\":[1,5],\"1338\":[2,28],\"1339\":[1,2],\"1340\":[2,2],\"1341\":[1,29],\"1342\":[2,50],\"1343\":[1,14],\"1344\":[1,147],\"1345\":[1,9],\"1346\":[2],\"1347\":[2,5],\"1348\":[2,7],\"1349\":[1,40],\"1350\":[1],\"1351\":[2,4],\"1352\":[2,3],\"1353\":[1,163],\"1354\":[1,71],\"1355\":[1],\"1356\":[1,67],\"1357\":[1,33],\"1358\":[1,4],\"1359\":[3,53],\"1360\":[1,25],\"1361\":[1,58],\"1362\":[1],\"1363\":[1,5],\"1364\":[1,5],\"1365\":[1,4],\"1366\":[1],\"1367\":[1,4],\"1368\":[1,22],\"1369\":[1],\"1370\":[1,86],\"1371\":[2,74],\"1372\":[2],\"1373\":[1,10],\"1374\":[1,62],\"1375\":[1,15],\"1376\":[1,47],\"1377\":[1,4],\"1378\":[1,5],\"1379\":[1,27],\"1380\":[2],\"1381\":[3,25],\"1382\":[2,7],\"1383\":[3,31],\"1384\":[4,34],\"1385\":[2],\"1386\":[2,75],\"1387\":[1],\"1388\":[1,9],\"1389\":[1,11],\"1390\":[2,12],\"1391\":[1,18],\"1392\":[1,7],\"1393\":[2,32],\"1394\":[1,8],\"1395\":[1,8],\"1396\":[1,7],\"1397\":[1],\"1398\":[1,2],\"1399\":[1,74],\"1400\":[1,104],\"1401\":[3,62],\"1402\":[1,65],\"1403\":[1,65],\"1404\":[1],\"1405\":[3,74],\"1406\":[3,68],\"1407\":[1,46],\"1408\":[1,39],\"1409\":[1,40],\"1410\":[1],\"1411\":[1,10],\"1412\":[1,67],\"1413\":[1,75],\"1414\":[1,99],\"1415\":[1,10],\"1416\":[2,57],\"1417\":[1,47],\"1418\":[2,12],\"1419\":[2,57],\"1420\":[null,null,1],\"1421\":[null,null,1],\"1422\":[1],\"1423\":[2,1],\"1424\":[1,9],\"1425\":[1],\"1426\":[3],\"1427\":[1,10],\"1428\":[1,11],\"1429\":[1,9],\"1430\":[1,7],\"1431\":[1,6],\"1432\":[2,3],\"1433\":[2,62],\"1434\":[1,10],\"1435\":[1],\"1436\":[1,1],\"1437\":[1],\"1438\":[1,4],\"1439\":[1,11],\"1440\":[1,4],\"1441\":[1,18],\"1442\":[1,10],\"1443\":[1,13],\"1444\":[1,2],\"1445\":[1],\"1446\":[1],\"1447\":[4,20],\"1448\":[4,9],\"1449\":[1,102],\"1450\":[1,104],\"1451\":[2],\"1452\":[1,6],\"1453\":[1,8],\"1454\":[1,16],\"1455\":[1],\"1456\":[1],\"1457\":[1,10],\"1458\":[1,71],\"1459\":[1],\"1460\":[1,7],\"1461\":[1,108],\"1462\":[3,3],\"1463\":[4],\"1464\":[2,117],\"1465\":[2,126],\"1466\":[2,87],\"1467\":[1],\"1468\":[1,64],\"1469\":[2,69],\"1470\":[1,70],\"1471\":[1,52],\"1472\":[1,105],\"1473\":[1,54],\"1474\":[1,38],\"1475\":[3,61],\"1476\":[2,50],\"1477\":[2,86],\"1478\":[2,105],\"1479\":[2,85],\"1480\":[1,6],\"1481\":[null,null,1],\"1482\":[null,null,2],\"1483\":[2],\"1484\":[1],\"1485\":[1],\"1486\":[1],\"1487\":[2],\"1488\":[1],\"1489\":[2],\"1490\":[1],\"1491\":[1],\"1492\":[2],\"1493\":[2],\"1494\":[1],\"1495\":[2],\"1496\":[1],\"1497\":[1],\"1498\":[1],\"1499\":[2]},\"averageFieldLength\":[1.5662624036999198,32.942614158703776,0.0422626511849884],\"storedFields\":{\"0\":{\"h\":\"Java世界\",\"t\":[\"Java\",\"Java基础第一幕\",\"Java基础第二幕\",\"Java基础第三幕\",\"迷失的路途\",\"第一次探索\",\"遭遇挑战\",\"知识的宝藏\",\"技能的提升\",\"巧妙的运用\",\"绝地反击\",\"终极试炼\",\"夺回大陆\"]},\"1\":{\"h\":\"发现新的世界\",\"t\":[\"早晨的阳光透过窗户洒进了房间，照亮了我的面庞。今天是特别的一天，我将踏上通向Java大陆的旅程。我怀着兴奋与好奇，背上了装满了各种学习资料的背包。Java大陆是一个神奇的地方，拥有无尽的知识和技能的宝藏等待我去发掘。\",\"我跨出家门，迎接我的是一个陌生的世界。路旁的建筑物以奇特的形状和鲜艳的色彩装饰着整个大陆。人们穿着五颜六色的服装，带着温暖的笑容相互交流。我知道这是一个充满着创意和热情的地方。\"]},\"2\":{\"h\":\"探险的第一步\",\"t\":[\"在神秘的大陆上，我随着地图上指示的指引，来到了一个隐藏着学习之门的地方。门前有一位老者，他拥有着深厚的Java知识。老者向我解释道，我需要完成一项任务来获得学习的资格。\",\"我进入了一间宽敞的房间，里面展示着Java大陆的各个角落和有趣的挑战。我第一次真正感受到了学习的魅力和挑战的刺激。这是开始，我意识到在这个探险的旅程中，我将面对各种知识和技能的挑战。\"]},\"3\":{\"h\":\"挑战的开始\",\"t\":[\"接下来的几天，我投入了全身心的学习。我了解了Java大陆的基本概念，学会了如何创建和运行简单的程序。我在学习的过程中遇到了许多困难，但我用毅力和努力克服了每一个障碍。\",\"在学习的过程中，我结识了一些志同道合的伙伴。我们一起交流学习心得，分享解决问题的经验。他们的支持成为了我坚持下去的动力。\"]},\"4\":{\"h\":\"巨大的收获\",\"t\":[\"当我解锁了一门门的知识和技能时，我感觉整个大陆都在向我展开。我掌握了Java大陆的核心概念和高级特性，学会了如何运用各种库和框架来实现复杂的应用程序。\",\"我对Java大陆的了解变得更加深入，我能够自如地应对各种挑战和问题。我开始发现知识的宝藏隐藏在大陆的每一个角落，只要有耐心和勇气去探索，就能够获得丰富的知识回报。\"]},\"5\":{\"h\":\"探险的精髓\",\"t\":[\"学习不仅是理论的积累，更是实践的过程。我开始动手实践，运用所学的知识和技能来解决实际问题。我学会了调试和优化程序，提高了代码的质量和效率。\",\"在实践中，我不断感受到自己在技能提升的过程中的成长和进步。我学会了巧妙地运用Java的各种特性和语法，使程序更加易读和高效。我开始享受着编写代码的乐趣，体验着技能的提升带来的成就感。\"]},\"6\":{\"h\":\"击败终极Boss\",\"t\":[\"经过漫长的探险，我终于来到了大陆的最后一关，终极Boss的挑战。这个Boss拥有着各种高级的技能和知识，是我探险旅程中最大的挑战。\",\"我花费了大量的时间和精力来攻克终极Boss，用尽了我所学的一切。经过多次的失败和尝试，我终于找到了一种独特的策略来战胜这个强大的对手。\"]},\"7\":{\"h\":\"重获大陆\",\"t\":[\"当我击败终极Boss后，我重新获得了对大陆的掌控权。我成为了Java大陆的一位专家，能够自由地运用各种知识和技能。\",\"我回顾了我的探险旅程，感慨万分。这是一段充满挑战和奇迹的旅程，我从中学到了无数的知识和技能。我现在能够自信地面对Java大陆的任何挑战，我也渴望将我的经验和知识分享给其他人，帮助他们踏上自己的探险之旅。\"]},\"8\":{\"h\":\"夺回大陆的意义\",\"t\":[\"Java大陆不仅仅是一个学习的地方，它代表着热爱和创造力。在这个大陆上，每个人都可以通过学习和实践，创造出属于自己的世界。夺回大陆意味着我可以在这个广阔的领域中尽情探索，创造出属于我的辉煌。\",\"探险旅程结束，但对Java大陆的热爱将永远留存。我希望无论是初学者还是资深开发者，都能够通过这本书，踏上自己的Java探险之旅，领略到学习和实践的乐趣。让我们一起探索Java大陆，开启属于自己的编程之旅！\"]},\"9\":{\"h\":\"迷失的起点\",\"t\":[\"当主角来到Java大陆的时候，他陷入了茫然的迷失中。整个大陆都是陌生的，一片浩瀚的未知等待着他去探索。他不知道从何处开始，只能向着陌生的方向前行。\"]},\"10\":{\"h\":\"迷茫的选择\",\"t\":[\"在迷失的路途中，主角面临着许多选择。他看着目录上的任务，踌躇不决，不知道应该先去哪里探索。是否先进入“第一次探索”，还是先解锁“知识的宝藏”，这些都是他迷茫的选择。\"]},\"11\":{\"h\":\"探索的艰辛\",\"t\":[\"主角勇敢地踏上了探索的道路，然而，他开始感受到了探索的艰辛。他遇到了各种困难和挑战，每一次都让他陷入迷茫和疲惫。但他明白，只有经历过艰辛才能成长，他必须坚持下去。\"]},\"12\":{\"h\":\"知识的指引\",\"t\":[\"在迷失的路途中，主角逐渐明白了知识的重要性。每一个目录都像是一道指引，引导他去学习一项重要的Java知识。他开始通过学习不断强化自己的能力，一步步逼近解锁所有大陆的目标。\"]},\"13\":{\"h\":\"技能的提升\",\"t\":[\"主角不断地学习和实践，他的技能也在不知不觉中提升。他的编程能力越来越纯熟，代码能力也在不断精进。他意识到，技能的提升是迷失路途中前进的重要支撑。\"]},\"14\":{\"h\":\"重重挑战\",\"t\":[\"然而，即使他的技能和知识都在提升，迷失的路途上仍然充满了重重挑战。他不断遭遇编程难题，需要巧妙地运用所学知识来解决。这些挑战让他更加坚定了自己的决心，要在Java大陆上一展身手。\"]},\"15\":{\"h\":\"最终试炼\",\"t\":[\"主角走到了迷失的路途的最后一站，他需要面对终极试炼。这是一个考验他所有知识和技能的关卡，只有通过这一关，他才能夺回整个大陆。这个试炼将是他迷失路途中最关键的战斗。\"]},\"16\":{\"h\":\"迎接挑战\",\"t\":[\"面对终极试炼的挑战，主角并没有退缩。他以所有学到的知识为武器，勇敢地迎接每一个难题，没有放弃的念头。他相信，只要保持坚持和信念，他就能夺回Java大陆的自由。\"]},\"17\":{\"h\":\"寻找大陆归宿\",\"t\":[\"最终，主角战胜了所有的终极试炼，成功夺回了Java大陆的自由。他用所学所得创造了属于自己的世界，成为了Java大陆的主人。这个故事告诉我们，不管迷失了多久，只要有坚持和勇气，终究会找到归宿。\"]},\"18\":{\"h\":\"结束与新的开始\",\"t\":[\"主角的传奇故事结束了，但这只是一个新的开始。他可以在Java大陆上尽情探索，学习更多的知识和技能。这本《Java - world》也成为了他的启蒙宝典，他将继续用它来驱动自己的学习，迎接新的挑战。\",\"笔者想通过这本书，帮助读者了解Java知识，同时也向读者传递坚持和勇气的力量。在这个探险的二次元世界里，愿每个人都能够找到自己的归宿，实现自己的价值。\"]},\"19\":{\"h\":\"奇妙的大陆\",\"t\":[\"主角醒来，发现自己置身于一个陌生的大陆，四周一片浩瀚的草原。他不知道自己如何来到这里，更不知道该如何离开。不远处，一个智者颤颤巍巍地走来，自称为Java大陆的守护者。\"]},\"20\":{\"h\":\"探寻真相\",\"t\":[\"守护者告诉主角，他是被选中的孩子，注定要探索Java的奥秘。只有通过学习Java的种种知识，主角才能够畅游这个大陆的每个角落。主角下定决心，他要完成这个任务，找到回家的方法。\"]},\"21\":{\"h\":\"遇到挑战\",\"t\":[\"主角踏上了第一次探索之旅，这是他学习Java的起点。他来到了一个神秘的洞穴，这里被称为“知识的宝藏”。然而，洞穴却被千钧一发的机关所保护，只有解开所有的谜题，才能够获得知识的钥匙。\"]},\"22\":{\"h\":\"收获知识\",\"t\":[\"在洞穴中，主角依次解开了各种谜题，不断学习Java的基础知识。他掌握了变量、数据类型、条件语句、循环语句等基本概念，逐渐掌握了Java的基础。\"]},\"23\":{\"h\":\"突破技能\",\"t\":[\"主角并不满足于只学习基础知识，他渴望掌握更高级的技能。于是，他前往Java大陆的一处训练场所，那里有各种技能的提升任务等待着他。主角通过挑战任务，逐渐熟悉了面向对象编程、异常处理、集合类等高级知识。\"]},\"24\":{\"h\":\"运用技巧\",\"t\":[\"拥有了更多的知识和技巧后，主角继续踏上探索的征程。他来到了一片星海，那里有着许许多多的星球和宇宙生物。主角利用自己学到的技巧，开发出了各种有趣而实用的Java应用程序，与星际文明进行了交流。\"]},\"25\":{\"h\":\"绝地反击\",\"t\":[\"然而，主角的探索之旅并不顺利。他遇到了一位对手，一位深谙Java之道的黑影。黑影凭借着自己强大的技术实力，使出种种手段想要阻挠主角的前进。但主角并不气馁，他借助掌握的知识和技巧，与黑影进行了一场激烈的对决。\"]},\"26\":{\"h\":\"终极试炼\",\"t\":[\"主角经历了一系列的历练后，来到了最终的挑战——终极试炼。这是一个充满考验与困难的场所，要求主角运用所学的所有知识与技巧，完成一系列的任务。主角化身为真正的Java大师，成功通过了终极试炼。\"]},\"27\":{\"h\":\"夺回大陆\",\"t\":[\"最后，主角完成了所有的目标，获得了夺回大陆的力量。他回到了最初的起点，与守护者再次相遇。守护者感叹道，主角已经成为了真正的Java大师，他已经可以离开这个大陆，回到自己的世界。\",\"主角告别了这个充满了奇幻与挑战的大陆，踏上回家的旅程。然而，他心中明白，这段探索之旅将永远铭刻在他的记忆中。他明白，这不仅仅是学习Java的旅程，更是成长、坚持和奋斗的意义所在。\",\"这只是Java大陆的一角，更广阔的世界正在等待着他，在未来的旅途中，他会继续学习、探索、创造，用Java的力量创造更美好的世界。\",\"故事未完，敬请期待。\"]},\"28\":{\"h\":\"蔑视的眼神\",\"t\":[\"主角来到一个名为Java城的地方。这个城市因为其神秘的力量和知识的宝藏而闻名。然而，正如故事一开始所述，主角作为一个初学者，对Java的知识一无所知。在Java城的街道上，主角感到自己似乎成了眼神蔑视的对象，仿佛周围的人们认为他无法解锁这个城市的宝藏。\"]},\"29\":{\"h\":\"师徒相助的契机\",\"t\":[\"幸运的是，主角遇到了一个善良而慷慨的老师傅，名叫Java大师。Java大师看穿了主角的困惑和担忧，主动向他伸出援助之手。他说，要学好Java，需要过五关斩六将，才能得到Java城的奥义。\"]},\"30\":{\"h\":\"挑战一：语法之迷\",\"t\":[\"进入挑战一，主角发现自己置身于一个巨大的迷宫。迷宫中充满了各种Java语法的谜题和难题。主角必须解决这些谜题，才能找到前往下一关的出口。\"]},\"31\":{\"h\":\"解谜之道\",\"t\":[\"Java大师向主角传授了一些关于Java语法的基础知识和解题技巧。主角开始逐渐理解语法的规则和机制，他们一起攻克了一个又一个的迷题。在解谜过程中，主角不仅仅学会了基本的语法要点，还培养了解决问题的思维能力。\"]},\"32\":{\"h\":\"挑战二：面向对象的力量\",\"t\":[\"挑战一的胜利使得主角更加自信。然而，他们并没有时间休息，转眼间进入了挑战二。这一次，主角必须学会运用面向对象编程的力量。\"]},\"33\":{\"h\":\"面向对象的秘密\",\"t\":[\"Java大师带领主角来到一个神秘的实验室，里面展示了各种各样的物品。Java大师解释道，这些物品代表了不同的类和对象。主角学习了如何通过定义类和创建对象来实现面向对象编程。同时，他们还一起进行了一系列的实践操作，加深了对面向对象编程的理解。\"]},\"34\":{\"h\":\"挑战三：数据结构的奥秘\",\"t\":[\"第二次挑战胜利后，主角和Java大师来到了挑战三的领域。这里是一个浩瀚的数据结构森林，里面寄居着各种不同的数据结构，如数组、链表、栈和队列等。\"]},\"35\":{\"h\":\"巧妙运用数据结构\",\"t\":[\"Java大师教导主角如何选择和使用不同的数据结构，以提高代码的效率和性能。主角在探索数据结构的过程中，学会了如何在解决各种实际问题时，巧妙地运用不同的数据结构。\"]},\"36\":{\"h\":\"挑战四：异常的破解\",\"t\":[\"第三次挑战的胜利令主角更加坚定了学习Java的信心。进入挑战四后，他们来到异常的迷宫。\"]},\"37\":{\"h\":\"异常处理的智慧\",\"t\":[\"Java大师告诉主角，异常就像是一个隐藏的陷阱，不慎掉入将导致程序崩溃。主角学习了异常的分类和处理机制，掌握了如何捕获、抛出和处理异常。通过不断地尝试和修正错误，主角逐渐掌握了避免和解决异常的智慧。\"]},\"38\":{\"h\":\"挑战五：图形界面的绚丽\",\"t\":[\"最终，主角和Java大师来到了挑战五。这里是一个栩栩如生的虚拟世界，需要主角运用图形界面编程的技巧来创造出一个全新的世界。\"]},\"39\":{\"h\":\"创意与技术的结合\",\"t\":[\"Java大师引导主角学习了图形界面编程的基础知识和技术。主角通过绘制图形、添加交互功能和设计界面布局等操作，逐渐掌握了图形界面编程的奥秘。最终，他们成功地构建了一个令人惊叹的虚拟世界，展示出了创意与技术的完美结合。\"]},\"40\":{\"h\":\"迎接新挑战\",\"t\":[\"经过五关斩六将的努力，主角终于成功地解锁了Java城的所有知识宝藏。他已经不再是一个无知的新手，而是一个Java大师。\",\"Java城的居民们对主角的眼神发生了巨大的变化。曾经的蔑视和不屑，变成了赞叹和敬佩。主角成为了城市的英雄，他的传说将在Java城中流传下去。\",\"然而，故事并没有结束。新的挑战和奇遇在等待着主角。Java城是一个无尽的世界，知识的宝藏没有尽头。主角决心继续探索，不断成长，成为更加卓越的Java大师。\",\"Java的故事，将会继续传承下去。\"]},\"41\":{\"h\":\"解锁知识的密码\",\"t\":[\"主角在探索Java大陆的过程中发现了一座神秘的古堡，听说这里隐藏着许多关于Java知识的宝藏。为了解锁知识的密码，主角需要寻找线索并解决谜题。他开始了仔细的搜索，寻找与Java相关的谜题线索。经过艰苦的努力，主角找到了几个线索，分别是\\\"对象\\\"、\\\"继承\\\"、\\\"多态\\\"和\\\"异常处理\\\"。\"]},\"42\":{\"h\":\"掌握对象的奥秘\",\"t\":[\"在古堡的一间房间里，主角发现了一本陈旧的书。书中记述了有关对象的创建和使用的基本知识。主角学习了如何声明类、创建对象和调用对象的方法。他也了解到了封装和继承的概念。通过练习和实践，主角逐渐掌握了对象的奥秘。\"]},\"43\":{\"h\":\"探索继承的力量\",\"t\":[\"接下来，主角来到了古堡的下一层。他发现了一道门，门上刻着\\\"继承\\\"两个字。主角明白这将是学习继承的重要机会。他研读了有关继承的资料，了解了继承的定义、继承的用途以及如何在Java中实现继承。主角也学习了多级继承和重写方法的技巧。通过感受继承的力量，主角在Java大陆的旅程中迈出了坚实的一步。\"]},\"44\":{\"h\":\"迎接多态的挑战\",\"t\":[\"继续深入古堡，主角发现了一道看似无解的谜题。谜题的答案藏在多态的世界中。主角决心面对挑战，掌握多态的精髓。他学习了如何使用继承和接口实现多态，并掌握了运行时多态的原理。主角逐渐意识到多态的威力，它可以提高代码的可扩展性和可维护性。主角在解开谜题的同时，也解开了多态的奥秘。\"]},\"45\":{\"h\":\"征服异常的迷雾\",\"t\":[\"战胜了多态的挑战后，主角来到了古堡的最后一层，这里是异常的迷雾。主角面对各种异常情况，如何处理它们成为了新目标。主角学习了异常的分类，包括受检异常和非受检异常。他也掌握了异常处理的技巧，如try-catch语句和抛出异常。通过实践，主角学会了优雅地处理异常，保证代码的可靠性和可读性。\"]},\"46\":{\"h\":\"星光大陆的获得与新挑战\",\"t\":[\"在完成谜题后，主角成功解锁了知识的宝藏。他获得了Java大陆的全部知识，成为了Java的大师。但是，他并没有止步于此。主角迎接了新的挑战，继续探索Java的奥秘。他在新的旅程中将会面对更高级的主题，如多线程、数据库和网络编程。在这个广阔的Java世界中，主角带着对知识的渴望与热情，继续书写他在Java大陆的传奇。\"]},\"47\":{\"h\":\"知识的升华\",\"t\":[\"经历了一系列领悟和挑战，主角的知识水平逐渐升华。他的技能不断提升，思维变得更加灵活。通过学习和实践，主角掌握的不仅是Java的语法和概念，更是解决问题的能力和创新的思维。主角明白，探索知识的旅程永无止境，他已经成为了一个真正的Java世界的冒险家。\"]},\"48\":{\"h\":\"新的挑战与成长\",\"t\":[\"即将结束在Java大陆的旅程，主角思绪万千。他回顾了自己的成长，感谢这段探索带给他的一切。同时，主角也为即将到来的新挑战充满期待。他决定将自己获得的知识和经验传授给更多初学者，帮助他们踏上自己的Java之旅。主角深信这是一个无比美妙的循环，每个冒险者都能在这个有趣的Java世界中找到属于自己的精彩。\"]},\"49\":{\"h\":\"探索未知的世界\",\"t\":[\"主角的故事并未结束，而是一个新的开始。接下来是关于多线程、数据库、网络编程等更高级主题的探索。主角注视着Java大陆的边界，期待着下一个冒险的故事。他深知在未知的世界中隐藏着无穷的可能性和挑战，而这正是驱动他继续前进的力量。Java大陆的故事将在每一个勇敢的冒险家身上继续绽放。\",\"【故事的开头在启程，主角诞生于一个Java大陆，为了解锁这个大陆的全部知识，开始了他的冒险之旅。他经历了迷失的路途、第一次探索和遭遇挑战等一系列的事件，最终到达了知识的宝藏。在知识的宝藏中，主角解锁了对象、继承、多态和异常处理的知识，逐渐成为了Java的大师。在星光大陆的获得与新挑战环节，主角获得了Java大陆的全部知识，但他并没有止步于此，继续探索Java的更高级主题。最后，主角为即将到来的新挑战和成长充满期待，也决定将自己的知识和经验传授给更多初学者。故事以探索未知的世界作为结尾，主角注视着Java大陆的边界，期待着下一个冒险的故事。】\"]},\"50\":{\"h\":\"掌握基础技巧\",\"t\":[\"Java大陆的探险之旅进入了关键的阶段，主角意识到自己需要掌握更多的技能来应对即将出现的挑战。于是，他开始了专注于基础技巧的学习。\"]},\"51\":{\"h\":\"面向对象编程\",\"t\":[\"在Java大陆，面向对象编程是一项非常重要的技能。主角通过学习类、对象、封装、继承等概念，逐渐理解了面向对象编程的本质。他发现，通过封装数据和行为，可以使程序更加可靠、可维护。通过继承和多态，他可以灵活地扩展和重用代码。\"]},\"52\":{\"h\":\"异常处理\",\"t\":[\"探险途中，主角经历了许多意想不到的困难。而异常处理技术成为他应对困境的一把利器。他学会了如何使用try-catch语句来捕获异常并进行处理，避免了程序的崩溃。他还了解了异常的分类和常见的异常类型，以便更好地理解和解决问题。\"]},\"53\":{\"h\":\"输入输出流\",\"t\":[\"Java大陆充满了各种宝藏和秘密，主角明白获取和处理数据的重要性。他深入研究了输入输出流的概念和使用方法。通过学习文件输入输出流、字符流、字节流等，他可以从文件中读取数据、写入数据，并灵活地操作各种形式的数据。\"]},\"54\":{\"h\":\"拓展技巧领域\",\"t\":[\"技能的提升远远不止于此，主角决定进一步拓展自己的技巧。他意识到，只有掌握更广泛和更深入的技术，才能真正成为Java大陆的探险家。\"]},\"55\":{\"h\":\"多线程编程\",\"t\":[\"面对复杂多变的探险环境，主角明白到单线程无法胜任。于是，他开始学习多线程编程技术。通过使用线程和锁、同步和异步等概念，他可以同时处理多个任务，提高程序的效率和性能。\"]},\"56\":{\"h\":\"数据库连接\",\"t\":[\"在探索的过程中，主角发现了许多与宝藏和任务相关的数据。为了更好地管理和操控这些数据，他深入研究了数据库连接技术。他学会了如何连接、查询、更新和删除数据库中的数据，从而更好地掌控探险的进程。\"]},\"57\":{\"h\":\"图形界面开发\",\"t\":[\"主角渐渐意识到，探险的过程不应该只停留在控制台。为了打造更加与众不同的探险体验，他决定学习图形界面开发技术。通过使用Swing或JavaFX等工具，他可以设计出更加美观、互动性更强的用户界面，为探险带来更多的乐趣。\"]},\"58\":{\"h\":\"全新挑战之路\",\"t\":[\"经过艰苦的学习和不断的实践，主角的技能得到了显著的提升。然而，Java大陆并不会停止带给他新的挑战。接下来，他将面临更加艰巨、复杂的任务，为夺回整个大陆而努力。这是一场全新的冒险，他的技能提升只是起点。让我们拭目以待，见证他在探险路上的精彩表现！\",\"以上就是主角在Java大陆中学习和提升技能的过程，他掌握了面向对象编程、异常处理、输入输出流等基础技巧，同时拓展了多线程编程、数据库连接和图形界面开发等技能领域。这些技能的提升将为他继续探索Java大陆打下坚实的基础，为夺回大陆做好充分准备。\",\"（字数：386）\"]},\"59\":{\"h\":\"面对前方的困境\",\"t\":[\"在前面的章节中，主角已经成功地学习了Java的各个知识点，但是现在他面临着一个关键问题：如何将这些知识巧妙地运用起来解决实际的问题？面对这个困境，主角感到有些无从下手。\"]},\"60\":{\"h\":\"与伙伴们的交流\",\"t\":[\"正当主角犹豫不决的时候，一群可爱的小伙伴闯入了他的生活。他们一起玩耍、交流，主角发现他们每个人都具备独特的技能和特长。这启发了主角，他意识到解决问题的关键在于团队协作和相互交流。\"]},\"61\":{\"h\":\"集思广益的大会\",\"t\":[\"主角决定组织一场集思广益的大会，邀请所有的小伙伴一起分享自己的经验和思考。大家纷纷得到了机会展示自己的才华，并且通过彼此的倾听和交流，他们一起解决了许多之前困扰主角的问题。\"]},\"62\":{\"h\":\"演练与实践\",\"t\":[\"在大会后，主角明确了下一步的行动计划。他们决定进行一系列的演练和实践，以巩固和应用所学的Java知识。通过模拟各种场景和情况，他们开始逐渐熟悉如何巧妙地运用Java的各种技能解决实际问题。\"]},\"63\":{\"h\":\"探索新的领域\",\"t\":[\"通过一段时间的训练和实践，主角和小伙伴们逐渐获得了相当的经验和技巧。他们开始向更高的挑战迈进，探索Java的新应用领域。无论是Web开发、移动应用还是人工智能，他们都能够灵活地运用Java技术解决各种问题。\"]},\"64\":{\"h\":\"收获与成长\",\"t\":[\"经过一段时间的不懈努力，主角和小伙伴们终于成功地克服了一个个困难。他们收获了宝贵的经验，不仅掌握了Java的应用技巧，还锻炼了团队合作和解决问题的能力。他们的成长成为了整个大陆的典范。\"]},\"65\":{\"h\":\"决战终极试炼\",\"t\":[\"经历了一系列的探险和挑战，主角和小伙伴们来到了终极试炼的战场。他们需要将所学的Java知识和技能发挥到极致，以战胜强大的对手。这将是他们最后一次为解锁整个大陆而奋斗的机会。\"]},\"66\":{\"h\":\"重获大陆的希望\",\"t\":[\"在终极试炼中，主角和小伙伴们不断拓展自己的思维和技能边界，摆脱了所有的束缚和困难。最终，他们成功地解锁了整个Java大陆，并且为这片大陆带来了希望和繁荣。\"]},\"67\":{\"h\":\"新的征程\",\"t\":[\"解锁了Java大陆的主角意识到，这只是他们新征程的开端。他们决定继续探索和学习，不断提升自己的技能，为未来的挑战做好准备。他们坚信，只有不断学习与变革，才能在这个充满竞争和机遇的世界中走得更远。\"]},\"68\":{\"h\":\"结语\",\"t\":[\"《巧妙的运用》讲述了主角在学习Java知识后如何巧妙地运用这些知识解决实际问题的故事。通过团队合作、交流与实践，主角逐渐成长并战胜了一个个困难。最终，他们成功解锁整个Java大陆，为这片大陆带来了希望和繁荣。这个故事告诉我们，学习知识只是第一步，真正的关键在于如何将所学运用到实际中，以创造出更大的价值。让我们跟随主角的脚步，继续探索Java的世界，为自己的未来铺平道路。\"]},\"69\":{\"h\":\"迫于困境\",\"t\":[\"终于，主角来到了Java大陆的绝地之地。这片土地遍布无尽的挑战和难题，似乎只有真正掌握Java知识的人才能够解决。主角陷入了困境，他意识到自己还有很长的路要走，才能够成功完成这次的探险。\"]},\"70\":{\"h\":\"再次学习\",\"t\":[\"主角决定再次回顾之前学到的知识，只有通过不断学习和练习，才能够在绝地之地立足。他回忆起之前的探索，从启程开始，一路掌握了Java的基础知识，学会了面向对象编程，熟悉了各种数据结构和算法。这些成为主角在绝地之地中的宝贵武器。\"]},\"71\":{\"h\":\"巧妙运用技巧\",\"t\":[\"面对挑战，主角开始巧妙地运用之前学到的技巧。他了解到Java拥有丰富的开发框架和工具，通过灵活运用，他解决了一系列难题。他利用面向对象的思想设计出高效的程序结构，运用数据结构和算法优化代码的性能，还使用多线程和并发编程提升程序的效率。每一次巧妙的运用都让他更加接近绝地之地的真正宝藏。\"]},\"72\":{\"h\":\"真正的绝地试炼\",\"t\":[\"然而，主角还未完全掌握Java的所有知识，他面临着绝地之地的最终试炼。这一次，他需要展现出自己在Java编程上的真实实力。绝地之地散布着各种难题和考验，只有通过合理运用已学知识和勇气面对，才能够最终夺回Java大陆的控制权。\"]},\"73\":{\"h\":\"胜利的果实\",\"t\":[\"通过不懈的努力，主角终于战胜了绝地之地的最终试炼。他夺回了Java大陆的控制权，也证明了自己在Java编程上的深厚造诣。回顾整个探险过程，主角感慨万分。这一路上，他从无知到卓越，从迷茫到自信。通过学习Java，他探索了一个充满挑战和惊喜的世界，也真正成为了一个Java世界的探险家。\"]},\"74\":{\"h\":\"新的起点\",\"t\":[\"完成了绝地之地的探险，主角获得了巨大的成就感和满足感。然而，他也意识到Java编程世界如此广阔，仍有更多的知识等待他学习和探索。这次的探险只是一个起点，他决定继续深入学习Java的高级特性和各种框架，不断提升自己的技术水平，开拓更广阔的世界。\"]},\"75\":{\"h\":\"探险的终点\",\"t\":[\"主角回顾着整本《Java - world》的目录，他意识到自己已经探索了Java大陆的每一个角落。这本书是他探险旅程的记录，也是他成长的见证。他从中得到了无尽的启发和知识，也收获了坚持和勇气。他深深地明白，探索的旅程永无终点，Java世界的无限可能让他充满激情和动力。\",\"在这个广袤的Java世界里，主角将继续探索，不断学习，追求技术的极致。他将带着这本《Java - world》的回忆，启程开启新的探险，去发现更多意想不到的惊喜和机遇。这是他永恒的使命，也是对Java世界的热爱与拥抱。\",\"这就是《Java - world》的旅程，一本带领读者探索Java世界的奇幻书籍，一次让人心潮澎湃的探险之旅。让我们一同踏上这个充满挑战和奇迹的Java之旅吧！\"]},\"76\":{\"h\":\"极限挑战的到来\",\"t\":[\"终于，主角在经历了一系列的探险和挑战之后，来到了终极试炼的关卡。这个关卡被称为“终极试炼”，是主角解锁Java大陆全部知识的最后一道障碍。\"]},\"77\":{\"h\":\"无尽的迷宫\",\"t\":[\"终极试炼的场景是一个巨大而复杂的迷宫。主角置身其中，感到异常的压抑和迷茫。迷宫四处弥漫着浓重的迷雾，无数的岔路口使得主角难以判断前行的方向。然而，这也正是终极试炼的真正考验，需要主角运用之前学到的Java知识，解决各种难题，找到正确的路径。\"]},\"78\":{\"h\":\"知识的呼唤\",\"t\":[\"在迷宫中，主角发现了一些残破的标识物和提示信息，上面记载着一些Java的概念和技巧。这让主角渐渐明白，只有通过掌握全面的Java知识，才能解开迷宫的谜题，走出困境。\"]},\"79\":{\"h\":\"难度逐渐攀升\",\"t\":[\"随着主角在迷宫中不断前行，试炼的任务也愈发艰巨。每个房间都隐藏着各种难题，需要主角灵活运用Java编程的知识解决。有的房间要求主角根据给定的代码进行调试，有的房间需要主角编写复杂的算法，有的则考验主角对Java API的熟悉程度。每一关都要求主角将之前学到的知识发挥到极致，找到突破口，才能逐渐接近迷宫的出口。\"]},\"80\":{\"h\":\"团结的力量\",\"t\":[\"在迷宫中，主角遇到了其他正在进行终极试炼的探险者。面对困境，他们决定联手合作，共同克服难关。每个探险者都有自己擅长的领域，他们互相取长补短，共同攻克迷宫中的难题。这个团队精神不仅让主角获得了宝贵的友情，还加快了他们解决问题的速度。\"]},\"81\":{\"h\":\"能力的进化\",\"t\":[\"在迷宫的深处，主角遇到了一个神秘的老师。老师告诉主角，终极试炼考察的不仅仅是知识，更是能力的进化。只有不断提升自己的编程水平，不断优化和改进代码，才能真正成为Java编程的高手。\"]},\"82\":{\"h\":\"最终的试炼\",\"t\":[\"在终极试炼的最后一关，在一个空旷的大厅，主角面对一个巨大的机器人。机器人拥有强大的力量和智慧，漫长的战斗看似无解。然而，正是主角通过之前的学习和挑战获得的经验，成功解决了机器人的攻击，带来了胜利的曙光。\"]},\"83\":{\"h\":\"出口的启示\",\"t\":[\"机器人被击败后，大厅的墙壁缓缓打开，主角看到了迷宫的出口。走出迷宫，主角感慨万分。他终于在这个庞大而复杂的迷宫中找到了通往完整Java知识的出口。通过这段探险，主角学到了如何运用Java编程的各种技巧和思想，不仅成功解锁了全部的Java知识，也发现了自己的成长与进步。\",\"这次终极试炼不仅是主角个人成长的历程，也是对整个Java大陆的融会贯通。主角将以更高的水平回归自己的起点，并向着更广阔的世界进发。\"]},\"84\":{\"h\":\"面临威胁\",\"t\":[\"探险者们终于来到了最终目的地，大陆的核心区域。然而，他们发现大陆已经被邪恶势力统治。这些邪恶势力不仅破坏了大陆的秩序，还封锁了人们对Java知识的获取途径。主角和他的伙伴们面临着前所未有的威胁。\"]},\"85\":{\"h\":\"激烈战斗\",\"t\":[\"为了夺回大陆，主角和他的伙伴们决定展开一场激烈的战斗。他们利用在前面探险过程中学到的Java知识，不断提升自己的技能。他们遭遇了强大的敌人，但凭借着坚韧的毅力和智慧，他们一一击败了敌人。\"]},\"86\":{\"h\":\"夺回知识宝藏\",\"t\":[\"战斗过程中，主角发现邪恶势力们所控制的知识宝藏。为了夺回这些宝藏，主角需要运用自己所学的Java技能，解锁宝藏中的关卡。他们一步一步解决难题，夺回了被封锁的Java知识。\"]},\"87\":{\"h\":\"技能的进阶\",\"t\":[\"主角和他的伙伴们不满足于只夺回宝藏，他们决定进一步提升自己的技能。在夺回大陆的过程中，他们经历了种种挑战，不断优化自己的代码和算法。这些经验让他们在战斗中更加得心应手，创造出了一系列惊人的技巧。\"]},\"88\":{\"h\":\"终极试炼\",\"t\":[\"最终，主角和他的伙伴们到达了大陆的最高峰。在这里，他们必须面对一场终极试炼，以夺回完整的Java知识。这场试炼涉及到各种高级Java知识和编程挑战。主角们需要借助自己的智慧和团队的力量，才能成功战胜这个终极挑战。\"]},\"89\":{\"h\":\"胜利与重生\",\"t\":[\"经过艰苦的战斗和努力，主角和他的伙伴们成功夺回了大陆，并解放了被压抑的Java知识。大陆重新回到了和谐与繁荣的轨道上。主角们也在这次冒险中获得了巨大的成长，他们不仅拥有了丰富的Java知识，还学会了团队合作和坚持不懈的精神。他们以更加强大的姿态开始了新的探险之旅。\"]},\"90\":{\"h\":\"真正的终点？\",\"t\":[\"虽然主角和他的伙伴们取得了巨大的胜利，但探险的世界从来没有真正的终点。Java知识的世界无穷无尽，主角们意识到自己还有许多可以学习和探索的东西。他们决定继续保持学习的姿态，不断追求更高的Java技能，并将这些知识应用于实际项目中，创造出更加出色的作品。\",\"驱使着他们的，是对知识的渴望与对探索的热情。他们相信，只有不断学习和进步，才能在这个充满机遇与挑战的Java世界中立足。他们期待着未来的探险，希望能够创造出更多的奇迹。\",\"这是他们的故事，也是Java世界的传奇。\"]},\"91\":{\"h\":\"面试总结篇\",\"t\":[\"参照个人的简历准备的面试资料\"]},\"92\":{\"h\":\"专业技能\",\"t\":[\"Java基础：熟练掌握 Java 编程语言，熟悉常用集合类、面向对象、多线程、反射、IO\",\"并发编程：熟悉 Java 并发编程，了解 synchornized、ThreadLocal、CAS、AQS、线程池 等\",\"关系型数据库：熟悉 MySQL 和 SQL 语句的编写，掌握 MySQL 中的索引、事务、mvcc等常见知识\",\"非关系型数据库：熟悉 Redis 的使用，能够通过 Redis 实现分布式锁、缓存，并了解 Redis 的持久化策略以及数据过期策略，了解缓存穿透，击穿，雪崩的问题\",\"消息队列：熟悉RocketMQ的基本用法，能够使用消息队列实现业务的 异步处理、应用解构、流量削峰，了解如何解决消息顺序消费、消息的重复消费以及消息堆积的问题\",\"开源框架：熟悉 SSM + SpringBoot开发框架，能够使用 MyBatis Plus + MyBatis X 自动生成基础 CRUD 代码，熟悉 IOC 、AOP、Bean 的生命周期、Bean 的循环依赖、SpringBoot 的自动装配原理 等知识\",\"微服务：熟悉 Nacos 和 Dubbo RPC 框架，能使用 Spring Cloud Gateway 实现 API 网关、访问控制、流量染色\",\"云原生：熟悉 Docker 容器的基本命令的使用，了解 Dockerfile 和 docker-compose 的编写， 能够独立部署前后端分离项目\",\"开发工具：熟练使用 Maven、Git、IDEA、 Docker 等开发工具\",\"前端技术：了解 HTML 、CSS 、JavaScript 、Axios ；熟悉 Vue 框架\"]},\"93\":{\"h\":\"简历模板\",\"t\":[\"image-20230918123333783\",\"点击查看模板\"]},\"94\":{\"h\":\"项目经历\"},\"95\":{\"h\":\"胖达 API 开放平台\",\"t\":[\"Spring BootSpring Cloud GatewayMySQLMyBatis-PlusRedisDubbonacosReact\",\"2023.07-至今\",\"项目描述： 基于 React + Spring Boot + Dubbo + Gateway 的 API 接口开放调用平台。 管理员可以接入并发布接口；用户可以调用接口、浏览接口、在线调试，并通过客户端 SDK 轻松调用接口。\",\"技术要点：\",\"根据业务流程，将整个项目后端划分为 web 系统、模拟接口、公共模块、客户端 SDK、API 网关这 5 个子项目，并使用 Maven 进行多模块依赖管理。\",\"为防止接口被恶意调用，设计 API 签名认证算法，为用户分配唯一 ak / sk 以鉴权，保障调用的安全性、可溯源性。\",\"为解决开发者调用成本过高的问题，基于 Spring Boot Starter 开发了客户端 SDK，用户只需在项目中引入 SDK 即可实现一行代码调用接口，提高开发体验。\",\"选用 Spring Cloud Gateway 作为 API 网关，实现了路由转发、访问控制、流量染色，并集中处理签名校验、请求参数校验、接口调用统计等业务逻辑，提高系统的安全性，便于系统的开发维护。\",\"为解决多个子系统内代码大量重复的问题，抽象模型层和业务层代码为公共模块，使用Nacos作为服务注册中心，Dubbo RPC 框架实现服务间的高性能接口调用，大幅减少重复代码。\"]},\"96\":{\"h\":\"你的项目中使用了哪些技术栈？请分别介绍一下 Spring Boot、Dubbo、Gateway 在项目中的作用。\",\"t\":[\"主观回答\",\"项目技术栈：SSM + Spring Boot、Spring Cloud Gateway、Dubbo、Nacos、MySQL、Redis、MyBatis-Plus、Hutool 工具库。 Spring Boot：用于快速构建基础的后端项目，只需要修改配置文件，就能轻松整合 SSM、MySQL、Redis 等依赖。 Dubbo：分布式 RPC 框架，实现项目中不同模块的高性能相互调用，比如网关服务集中统计接口调用次数时通过 Dubbo 调用接口服务完成次数扣减。 Gateway：作为 API 网关，集中接受客户端的请求，并执行统一的安全认证、请求转发、流量控制、请求日志、公共业务等操作。\"]},\"97\":{\"h\":\"你将后端项目划分为了多个子项目，请分别介绍这几个子项目的作用、以及它们之间是如何协作和交互的？\",\"t\":[\"主观回答\",\"API 开放平台分为 5 个子项目（核心模块），分别为：\",\"api-backend：核心业务后端，负责用户和接口管理等核心业务功能\",\"api-gateway：API 网关服务，负责集中的路由转发、统一鉴权、统一业务处理、访问控制等\",\"api-common：公共模块，包括各其他模块中需要复用的方法、工具类、实体类、全局异常等\",\"api-sdk-starter：客户端 SDK，封装了对各 API 接口的调用方法，降低开发者的使用成本。\",\"api-interface：提供模拟 API 接口\",\"交互流程：首先管理员创建接口后通过核心业务后端（api-backend）保存到数据库中。用户调用某个接口时，在自己的项目中引入客户端 SDK（api-client-sdk）并通过一行代码发起调用，请求会首先发送到 API 网关（api-gateway）进行用户的鉴权和接口调用统计，然后将请求转发到实际的 API 接口（api-interface）。\"]},\"98\":{\"h\":\"请简要介绍 Maven 的基本概念、作用以及如何使用 Maven 进行多模块依赖管理和打包？\",\"t\":[\"背诵类题目，但可以有主观回答\",\"Maven 是一个开源的构建工具，用于管理 Java 项目的构建、依赖管理和项目生命周期。 本项目的所有依赖都是由 Maven 进行管理的，每个子项目都有自己的 pom.xml 进行管理。首先使用 mvn install 命令将 common 公共模块在本地打包，然后在其他子项目的 pom.xml 中引入该模块即可复用代码。每个子项目可以独立通过 mvn package 命令进行打包和部署。 Maven 还支持子父依赖多模块管理，通过 modules 配置给父项目指定子模块，从而实现统一的公共依赖和依赖版本定义。\"]},\"99\":{\"h\":\"请介绍一下你是如何使用 MyBatis Plus 框架的 QueryWrapper 实现了对 MySQL 的灵活查询？\",\"t\":[\"主观回答\",\"MyBatis-Plus 是 MyBatis 的增强版框架，允许用户通过编程的方式构建复杂的查询条件，无需编写繁琐的 SQL 语句。 在本项目中，使用 MyBatis-Plus 的 QueryWrapper 查询条件构造器，通过链式调用的方式，灵活构造接口信息表的查询条件，比如使用 like 方法指定根据描述模糊查询、比如 orderBy 指定查询排序规则等，示例代码如下：\",\"除了 QueryWrapper 外，MyBatis-Plus 还提供了 LambdaQueryWrapper，支持使用 Lambda 表达式来定义查询条件，更灵活。\"]},\"100\":{\"h\":\"你在项目中使用了 Swagger + Knife4j 自动生成接口文档，请谈谈 Swagger 和 Knife4j 的作用和它们对项目开发的影响。\",\"t\":[\"主观回答\",\"Swagger 是一个用于自动构建和生成可交互接口文档的工具集。使用 Swagger 接口文档生成工具后，我不需要在开发完项目后手动编写一套接口文档，而是直接交由系统自动根据 Controller 接口层的代码自动生成文档，大幅节省时间。 使用 Swagger 生成的接口文档不仅能够分组查看请求参数和响应，还支持灵活的在线调试，可以直接通过界面发送请求来测试接口，提高开发调试效率。 此外，引入 Swagger 后，可以得到基于 OpenAPI 规范的接口定义 JSON，可以配合第三方工具来根据 JSON 自动生成前端请求代码、自动生成客户端调用 SDK 等。 Knife4j 是 Swagger 的增强版，能够生成更美观的 API 接口文档，并且提供了离线文档导出、接口分组排序等增强功能。（参考官网：https://doc.xiaominfo.com/docs/features）\"]},\"101\":{\"h\":\"什么是 API 签名认证算法？它有什么作用？你又是如何实现它的？\",\"t\":[\"前半句背诵类题目，后半句主观回答\",\"API 签名认证算法是一种用于验证 API 请求的合法性和完整性的安全机制。 给接口使用 API 签名认证算法，可以增强 API 的安全性，防止未经授权的用户访问、防止恶意用户篡改请求数据。 实现步骤如下： 1 生成密钥对：给每个用户生成唯一的密钥对（accessKey 和 secretKey），并保存到数据库中，仅用户本人可查看自己的密钥对。 2 请求方生成签名： 请求方（客户端）使用 secretKey 对请求参数和数据进行签名，签名的内容包括请求参数、时间戳、随机数等，签名加密算法此处选择 MD5。 3 请求方发送请求：请求方将请求参数、签名、用户标识一起发送给 API 提供者，通常会把签名等元信息放到请求头参数中传递，注意千万不要传递 secretKey。 4 API 提供者验证签名：在 API 网关中，通过请求头获取到用户标识，根据标识到数据库中查找该用户对应的 accessKey 和 secretKey，并使用相同的签名算法生成签名，和请求中的签名进行比对，如果签名一致，则 API 提供者可以信任请求方，可以进行后续操作。\"]},\"102\":{\"h\":\"你在项目中使用了 Spring Cloud Gateway 作为 API 网关，请解释一下 API 网关的应用场景，以及它在项目中的实际应用？\",\"t\":[\"前半句背诵类题目，后半句主观回答\",\"API 网关的主要应用场景：路由转发、统一鉴权认证、负载均衡、访问控制、流量染色、集中限流、统一监控和日志记录、全局跨域解决等。\",\"在本项目中，使用 API 网关： 1）统一鉴权认证：应用 API 签名认证算法校验用户请求的合法性 2）公共业务逻辑：对每个接口的调用进行集中的统计 3）路由转发：前端发送请求到 API 网关，通过网关转发到实际的 API 接口 4）流量染色：给经过网关的请求加上特定的请求头参数，便于让实际的 API 服务确定请求来源及合法性\"]},\"103\":{\"h\":\"你是如何基于 Spring Boot Starter 开发了客户端 SDK 的，讲述一下实现过程？\",\"t\":[\"主观回答\",\"0）首先明确客户端 SDK 的定位和功能，不要把 SDK 设计得过于繁重 1）引入相关依赖。如 spring-boot-configuration-processor、spring-boot-autoconfigure 等，用于开启自动导入以及给出配置文件的编辑提示 2）编写配置类，用于创建一个客户端 Bean 对象。给配置类添加 @ConfigurationProperties(prefix = \\\"yuapi.client\\\") 注解，用于自动从 Spring Boot 配置文件中读取配置。 3）注册配置类。在 resources/META-INF/spring.factories 文件中填写自动加载的配置类包路径 4）开发 SDK。像开发 Spring Boot 业务系统一样编写 SDK 功能代码 5）使用 SDK。在本地用 mvn install 命令打包 SDK，其他本地项目引入 SDK 即可使用 6）发布 SDK。在 Maven 中央仓库发布 SDK 包，其他开发者可通过 Maven 包索引在自己的项目中引入 SDK 并使用。\"]},\"104\":{\"h\":\"用户如何使用你开发的客户端 SDK？讲述一下流程。\",\"t\":[\"主观回答\",\"1）在 API 开放平台进行注册登录，获取到开发者密钥 ak、sk 2）下载 SDK 代码到本地，或者从 Maven 中央仓库引入 pom 依赖 3）在项目的 application.yml 配置文件中填写客户端配置，比如 ak、sk 等 4）项目启动时，会自动创建一个客户端调用对象，可以直接在项目中注入该对象并使用\"]},\"105\":{\"h\":\"有哪些客户端 SDK 的设计技巧？\",\"t\":[\"背诵类题目，也可以主观回答\",\"客户端 SDK 的目的是帮助开发者更轻松地使用我们系统提供的功能，因此在设计 SDK 时，要从开发者出发，提升开发者的调用体验。 可以从易用性、可理解性、可扩展性、高效稳定几个角度出发，多结合自己开发 SDK 的经历去回答，具体请见这篇文章：大厂 SDK 设计技巧 。\"]},\"106\":{\"h\":\"什么是 RPC？为什么要使用 Dubbo RPC 框架，它有什么优势？\",\"t\":[\"背诵类题目\",\"RPC（Remote Procedure Call，远程过程调用）是一种用于实现分布式系统通信的协议和技术。它允许一个计算机程序调用另一个地址的函数或方法，就像本地函数调用一样，而不需要开发者显式地处理底层网络通信和数据序列化等问题。 Dubbo 是基于 Java 的高性能、轻量级的开源 RPC 框架，便于开发者轻松实现分布式系统和微服务架构。此外，Dubbo 还提供了服务治理等功能。 Dubbo RPC 框架的优势，简单来说就是性能高、协议多、功能强、生态好、易扩展。 具体的优势如下： 1 性能优秀：Dubbo 经过高度优化，具有出色的性能表现，适用于高并发和低延迟的场景。 2 多协议支持：Dubbo 支持多种通信协议，可以根据不同的需求选择合适的协议，提供灵活性。 3 服务治理：Dubbo 提供了丰富的服务治理功能，包括负载均衡、路由、容错处理等，有助于构建可靠的分布式系统。 4 生态系统：Dubbo 有广泛的生态系统和社区支持，提供了大量扩展和插件，满足各种应用场景的需求。 5 可扩展性：Dubbo 的架构设计允许开发者轻松扩展和定制功能，以适应不同的业务需求。\"]},\"107\":{\"h\":\"你在项目中是如何使用 Dubbo RPC 框架的，讲述一下使用流程？\",\"t\":[\"主观回答\",\"在正式运用 Dubbo 到项目前，我先阅读了 Dubbo 的官方文档，按照快速启动文档跑通了基础的 RPC 调用 Demo，明确了注册中心、Maven 包等各依赖的版本号。 先在本地启动 Nacos 注册中心，然后在服务提供者和服务调用者项目引入 Dubbo 依赖（尽量引入相同的依赖和配置）、编写 Nacos 的连接配置、并且在项目启动类通过 @EnableDubbo 注解开启 Dubbo 支持。 编写服务提供者和服务调用客户端类，分别加上 @DubboService 和 @DubboReference 注解。 优先启动服务提供者项目，在 Nacos 控制台观察到服务注册信息，再启动服务调用者项目。\",\"你在公共模块中抽象了模型层和业务层代码，请解释一下模型层和业务层的概念，并说明抽象公共模块的目的和好处。 背诵类题目，也可以主观回答\",\"模型层（Model）：包括数据模型、实体类、业务封装对象等，一般不包含业务逻辑。 业务层（Service）：包含了应用程序的业务逻辑和处理规则，一般会用到模型层的代码。 抽象公共模块的主要目的是为了复用代码。尤其是在微服务项目中，通常要把独立于业务的请求响应封装对象、全局异常处理类、常量、公共的数据模型抽象为公共模块，提供给各业务服务引入，便于项目的维护和理解。\"]},\"108\":{\"h\":\"你通过 API 网关实现了流量染色技术，请介绍一下流量染色的概念、以及它的作用？\",\"t\":[\"背诵类题目，也可以主观回答\",\"流量染色是指根据请求的属性对请求进行分类和标记，从而进行特定的处理。 3 个关键概念： 1）请求分类：在请求层面的流量染色中，将请求分为不同的类别或组，通常基于请求的特性、内容、来源、用户身份等因素来进行分类。 2）请求标记：每个请求被标记为属于特定的类别或组，这个标记可以是请求头中的特定字段、请求参数、或其他识别请求的方式。 3）处理策略：为每个请求类别定义特定的处理策略，包括资源分配、访问控制、限流、缓存策略、安全性等。\",\"在本项目中，所有的外部请求都要先经过 Gateway 网关，由网关给请求加上特定的请求头参数（比如 Source = MyAPI），便于让下游的 API 服务确定请求来源及合法性。\"]},\"109\":{\"h\":\"篝火 - 伙伴匹配系统\",\"t\":[\"SpringBootMySQLMyBatis-PlusRedisRedissonVue3\",\"2023.05 - 2023.07\",\"项目描述： 一个帮助大家找到志同道合的伙伴的移动端App，实现了登录注册、更新个人信息、按标签检索用户、推荐伙伴列表、匹配伙伴、组队等功能。独立开发完整前后端，项目上线地址：hb.wuluwulu.cn\",\"技术要点： \",\"用户登录：使用 Redis 实现分布式 Session，解决集群间登录态同步问题；使用腾讯云COS云对象存储保存图片文件。\",\"为了明确接口的返回，自定义统一的错误码，并封装了 全局异常处理器 ，从而规范了异常返回、屏蔽了项目冗余的报错细节。 \",\"使用 Redis 缓存首页高频访问的推荐用户信息列表，将接口的响应时长从 2.01 秒缩短至 76.92 毫秒。且通过自定义 Redis 序列化器来解决数据乱码、空间浪费的问题。\",\"为解决首次访问系统的用户主页加载过慢的问题，使用 Spring Scheduled 定时任务来实现缓存预热，并通过分布式锁保证多机部署时定时任务不会重复执行。\",\"为解决同一用户重复加入队伍、入队人数超限的问题，使用 Redisson 分布式锁来实现操作互斥，保证了接口幂等性。\"]},\"110\":{\"h\":\"请介绍一下你在项目中使用的 Redis，它有哪些优势，为什么选择使用 Redis 实现分布式 Session？\",\"t\":[\"前半句背诵类题目，后半句主观回答\",\"Redis 是一个开源的、基于内存的 K / V 存储中间件。由于基于内存，其读写性能非常高，很适用于缓存。此外，Redis 支持多种数据结构、各类编程语言的客户端、支持持久数据，其生态也非常广泛。 本项目中，我使用 Redis 分布式 Session 来代替 Tomcat 本地的 Session 存储，能够在分布式多机场景下保证获取登录用户信息的一致性。用 Redis 实现分布式 Session 的优点是非常简单方便，只需要引入 Redis 和 spring-session-data-redis 依赖，然后在配置文件中指定 Redis 的地址和 session 的 store-type 为 redis，即可自动生效，不用自己额外编码。\"]},\"111\":{\"h\":\"你在用户登录功能中提到使用 Hash 代替 String 存储用户信息，这样的做法有什么好处？在实际应用中，Hash 与 String 存储方式有哪些区别？\",\"t\":[\"主观回答\",\"Redis 的 Hash 结构采用 key / value 键值对的形式存储数据，使用 Redis 的 Hash 来存储用户信息后，能够很方便地对用户每个属性进行独立的更新和查询操作，而不是更新和返回整个 JSON 字符串，性能会更高。 举个例子，你想要获取用户的昵称（就 4 个字符串），但是用户的简介有 100 KB 的大小。如果用 Hash 结构，可以只获取昵称，网络传输的内容大小就很小；而如果用 String 结构整体存储，网络传输数据时会把所有的用户信息都返回出来，增加传输开销。 此外，相比于直接在 Spring Boot 中使用 String 类型存储用户信息，使用 Hash 结构不用额外存储序列化对象信息，可以一定程度上节省内存。\"]},\"112\":{\"h\":\"你是如何自定义线程池的？如何合理设置线程池的参数？\",\"t\":[\"背诵类题目，但是最好实践过\",\"项目中，我使用 ThreadPoolExecutor 实现灵活的自定义线程池，并通过 ArrayBlockingQueue 存放任务。针对每类不同的业务，我分别定义不同的线程池，让它们互不影响。 示例代码：\",\"自定义线程池参数如下： 1 核心线程数（corePoolSize）：线程池中一直保持活动的线程数。可以使用corePoolSize方法来设置。一般情况下，可以根据系统的资源情况和任务的特性来设置合适的值。 2 最大线程数（maximumPoolSize）：线程池中允许存在的最大线程数。可以使用maximumPoolSize方法来设置。如果所有线程都处于活动状态，而此时又有新的任务提交，线程池会创建新的线程，直到达到最大线程数。 3 空闲线程存活时间（keepAliveTime）：当线程池中的线程数量超过核心线程数时，如果这些线程在一定时间内没有执行任务，则这些线程会被销毁。可以使用keepAliveTime和TimeUnit方法来设置。 4 阻塞队列（workQueue）：用于存放等待执行的任务的阻塞队列。可以根据任务的特性选择不同类型的队列，如LinkedBlockingQueue、ArrayBlockingQueue等。默认情况下，使用无界阻塞队列，即LinkedBlockingQueue，但也可以根据需要设置有界队列。 5 线程工厂（threadFactory）：用于创建线程的工厂。可以通过实现ThreadFactory接口自定义线程的创建逻辑。 6 拒绝策略（rejectedExecutionHandler）：当线程池无法接受新的任务时，会根据设置的拒绝策略进行处理。常见的拒绝策略有AbortPolicy、DiscardPolicy、DiscardOldestPolicy和CallerRunsPolicy。\",\"我是根据任务的类型以及消耗资源的情况来调整线程池的参数。比如针对更消耗 CPU 资源的计算密集型任务，我会将核心线程数设置为和 CPU 核心数相同，充分利用系统资源；针对更消耗网络等 IO 的 IO 密集型任务，我会将核心线程数设置得更大，比如 CPU 核心数的 2 - 4 倍，能够增加并发度、并且提高 CPU 的利用率。\",\"有一个经验值公式，其中 N 为 CPU 核心数：CPU 密集型任务，核心线程数设置为 N（或 N + 1）；IO 密集型任务，核心线程数设置为 2N。\"]},\"113\":{\"h\":\"你在使用 Redis 缓存高频访问用户信息时提到了自定义序列化器，为什么需要自定义序列化器，以及自定义序列化器的实现方式？\",\"t\":[\"主观回答\",\"由于 Spring Boot Data Redis 默认使用 JDK 序列化器，会将存储到 Redis 的键值对转化为字节数组，不利于在 Redis 可视化工具中阅读、并且不利于跨语言兼容，所以需要指定序列化器。 所以我通过新建 RedisTemplateConfig 配置类来创建自定义的 RedisTemplate Bean，并且通过 redisTemplate.setKeySerializer(RedisSerializer.string()) 指定了 Redis Key 的序列化方式。 示例代码如下：\"]},\"114\":{\"h\":\"你在项目中是如何实现 Redis 缓存的？选用了哪种 Redis 数据结构？\",\"t\":[\"主观回答\",\"我的项目中，使用 Redis 缓存实现了登录用户信息的存储、主页推荐用户列表的存储。 具体的实现方式： ● 对于登录用户信息的存储，直接使用 spring-session-data-redis 依赖开启对 Redis 分布式 Session 的支持。 ● 对于主页用户推荐列表的存储，我使用 Spring Data Redis 整合 Redis，并通过 RedisTemplate 来操作 Redis，根据业务类型设计了缓存 key 的规则，选用 string 数据结构来存储推荐用户列表。\"]},\"115\":{\"h\":\"使用 Redis 缓存时，有哪些可能出现的常见问题？你又是如何解决的？\",\"t\":[\"背诵类题目\",\"建议先列举使用缓存可能出现的常见问题，然后再挑其中一点举例。 使用 Redis 缓存可能的常见问题： 1）缓存击穿： 缓存击穿指的是某个热门的缓存键在过期后，同时有大量并发请求到达，导致所有请求都穿透缓存直接访问数据库，造成数据库压力激增。解决方法包括： ● 使用互斥锁来保护缓存访问，只允许一个线程重新生成缓存。 ● 针对缓存失效时的并发请求使用分布式锁，确保只有一个线程重新生成缓存。 2）缓存雪崩： 缓存雪崩指的是大量缓存键在相同时间失效，导致大量请求落到数据库上，造成数据库压力激增。解决方法包括： ● 为缓存键设置不同的失效时间，使失效时间分散。 ● 使用热点数据预热，提前加载热门数据到缓存。 3）缓存过期问题： 缓存中的数据过期后可能会导致数据不一致或数据不可用。解决方法包括： ● 设置合理的缓存失效时间，避免缓存数据长时间不更新。 ● 使用缓存的时候检查数据是否过期，如果过期则重新生成缓存。 4）缓存内存问题： 如果缓存数据量很大，可能会导致内存占用过多。解决方法包括： ● 设置合理的内存限制，避免缓存数据过多。 ● 使用LRU（Least Recently Used）策略或淘汰算法来淘汰不常用的缓存数据。 5）缓存数据一致性问题： 缓存数据和数据库数据不一致。解决方法包括： ● 使用缓存更新策略，当数据库数据发生变化时，及时更新缓存。 ● 使用双写策略，即同时更新数据库和缓存，确保数据一致性。 6）缓存安全问题： 某些敏感数据可能不应该被缓存，如果被缓存可能引发安全问题。解决方法包括： ● 避免缓存敏感数据。 ● 使用加密或其他安全措施来保护缓存数据。 7）缓存监控和调优问题： 缓存需要监控和调优，以确保性能和稳定性。解决方法包括： ● 使用监控工具来监测缓存的命中率、内存占用等性能指标。 ● 定期调整缓存配置，优化性能。\",\"在本项目中，我通过给不同的缓存设置不同的随机过期时间（N + n）来解决缓存雪崩问题。\"]},\"116\":{\"h\":\"在解决首页加载过慢的问题中，你使用了 Spring Scheduler 定时任务和分布式锁，请解释一下定时任务的执行原理和此处分布式锁的作用。\",\"t\":[\"主观回答\",\"项目使用 Spring Scheduler 实现定时任务，我将每个任务定义为独立的 Job 类，并且给实际需要定时执行的方法增加 @Scheduled 注解来开启定时任务。 在 @Scheduled 注解中，我使用 crontab 表达式来定义执行定时任务的时间周期，Spring Scheduler 会根据这些定义，在时机到达时开启独立的线程来执行任务。 在分布式场景下，可能有多个服务器实例同时执行同一个定时任务，导致并发问题或重复执行，所以用分布式锁来保证定时任务执行的唯一性。当定时任务要执行时，先去抢锁，只有抢到锁的服务器实例才会执行定时任务。\"]},\"117\":{\"h\":\"你在项目中使用 Redisson 分布式锁解决了接口幂等性的问题，请简要介绍一下 Redisson 分布式锁的使用场景和实现原理。\",\"t\":[\"背诵类题目\",\"Redisson 是一个基于 Redis 的数据网格，它提供了开箱即用的分布式锁功能，用于解决分布式环境下的并发控制问题。 比如在项目中，使用 Redisson 分布式锁保证接口幂等性，防止多个用户同时操作或重复提交带来的数据不一致。\",\"Redisson 分布式锁的实现是基于 Redis 的 SETNX 命令和 Lua 脚本，具体的实现原理如下： 1 获取锁：当客户端请求获取锁时，Redisson 会向 Redis 发送一个 SETNX 命令，尝试将一个特定的键（锁的标识）设置为一个特定的值（客户端标识），并设置锁的超时时间。 2 争用锁：如果多个客户端同时尝试获取同一个锁，只有一个客户端能够成功设置键的值，其他客户端的 SETNX 命令将失败，它们会继续尝试获取锁。 3 锁超时：为了防止某个客户端获取锁后发生异常导致锁永远不会被释放，Redisson 设置了锁的超时时间。当锁的超时时间到达后，Redisson 会自动释放锁，允许其他客户端获取锁。 4 释放锁：当客户端执行完锁保护的操作后，可以主动释放锁，这将删除锁的标识键，或者锁的自动超时也会导致锁的释放。 5 锁的可重入性：Redisson 支持可重入锁，允许同一客户端多次获取同一个锁，然后多次释放锁。只有所有获取锁的次数都释放后，锁才会被完全释放。 6 锁的续期：如果一个客户端在持有锁时，锁的超时时间即将到期，Redisson会自动为锁续期，防止锁在操作过程中被自动释放。\"]},\"118\":{\"h\":\"编辑距离算法是什么，它在你实现的用户匹配功能中起到了什么作用？请解释一下编辑距离算法的实现原理。\",\"t\":[\"背诵类题目\",\"编辑距离算法是一种用于度量两个字符串之间的相似度或差异性的算法，常用于字符串相似度比较、拼写检查等场景。 在用户匹配功能中，我使用编辑距离算法来计算用户输入的搜索关键词与已有用户信息的匹配程度，并按照相似度进行排序，从而实现最相似用户的推荐。 编辑距离算法的实现原理：https://blog.csdn.net/DBC_121/article/details/104198838，仅做了解即可，不用背诵。\"]},\"119\":{\"h\":\"在项目中，你自主编写了 Dockerfile 来实现自动化镜像构建及容器部署，请介绍一下用 Docker 的优势？\",\"t\":[\"背诵类题目\",\"可以把 Docker 镜像想象成应用的安装包，我通过编写 Dockerfile 制作了项目的安装包，开发者可以使用该 Docker 镜像一键快速启动项目，无需手动安装 Java 等依赖项、并且手动输入启动 jar 包的命令，便于分发应用程序、并且提高应用部署效率。 此外，通过给 Docker 镜像打 tag，可以控制应用程序的版本，便于项目的持续发布和回滚。\"]},\"120\":{\"h\":\"你在项目中使用 Knife4j 和 Swagger 自动生成后端接口文档，请解释一下 Swagger 的作用，以及在项目中使用 Swagger 的好处。\",\"t\":[\"背诵类题目，也可以有主观回答\",\"使用 Swagger 接口文档生成工具后，我不需要在开发完项目后手动编写一套接口文档，而是直接交由系统自动根据 Controller 接口层的代码自动生成文档，大幅节省时间。 使用 Swagger 生成的接口文档不仅能够分组查看请求参数和响应，还支持灵活的在线调试，可以直接通过界面发送请求来测试接口，提高开发调试效率。 此外，引入 Swagger 后，可以得到基于 OpenAPI 规范的接口定义 JSON，可以配合第三方工具来根据 JSON 自动生成前端请求代码、自动生成客户端调用 SDK 等。\"]},\"121\":{\"h\":\"个人介绍\",\"t\":[\"面试官好，我叫xx，来自xxxx。\",\"在大学期间利用课外时间自学Java语言，到目前已经熟练掌握了Java基础、SSM框架、SpringBoot、MySQL、Redis、MyBatisPlus，微服务和前端也都有一定的了解。\",\"在大学期间我自己独立完成了一些项目，其中有API开放平台，做这个项目的目的是给后端用户提供方便的接口调用，其中我使用网关来做统一请求，路由转发，权限校验，并且自定义sdk，用户只需要引入sdk即可一行代码调用接口，该项目的技术难点是如何保证接口不被恶意调用 以及 避免请求重放给系统带来不必要的开销。\",\"另外一个项目是伙伴匹配系统，做这个项目的目的是帮助用户寻找志同道合的人，可以查看用户的联系方式，并且提供组队和创建队伍的功能，方便用户查看整个队伍中的志同道合的人。该项目的前端使用的是vue3+vant组件库开发的，后端使用的是SpringBoot。并且呢该项目使用Docker容器技术部署到服务器上避免了配置复杂的环境。\",\"说到业余爱好的话我会经常整理学习过的知识以及整理博客，在我的个人网站上已经发布了80多篇的个人博客。最后我一直都很想加入贵公司，非常期待能与大家成为同事。\"]},\"122\":{\"h\":\"Redis篇\"},\"123\":{\"h\":\"在你的项⽬中是怎么使⽤Redis的\",\"t\":[\"在我的项⽬中使⽤ Redis 配合 Spring 的 Redis-session，将⽤户的登录态存⼊ Redis，实现单点登录。\",\"对于系统的⾸⻚，为了加快响应速度，设置定时任务将⾸⻚数据缓存到 Redis中，避免了⾸⻚加载过慢⽤户体验差的情况。\",\"对于⽤户加⼊队伍的限制，使⽤ Redisson 作分布式锁，防⽌了⽤户恶意请求加⼊超出限制数量的队伍。\"]},\"124\":{\"h\":\"介绍一下缓存穿透，以及如何解决\",\"t\":[\"缓存穿透：用户发送请求查询某个队伍详细信息，正常情况下首先查询缓存，如果缓存中存在则直接返回数据，如果缓存中不存在，则会查询数据库，数据库中查询到数据之后写到缓存中然后返回数据，如果数据库中也没有该数据，就会发生缓存穿透，即所查询的数据缓存中不存在，数据库中也不存在，会出现大量的请求请求到数据库这就是缓存穿透。\",\"解决：在我的项目中，我是使用缓存空值的方法来解决缓存穿透的问题，优点是实现起来简单，缺点是可能会造成短暂的缓存与数据不一致的情况。当查询数据库中没有数据的时候，我们先缓存Redis中该id为key缓存一个空字符串，然后一定要设置一个合理的过期时间，然后返回不存在数据；当请求再次来到的时候，首先检查到Redis中该id对应的缓存是空字符串，直接返回数据不存在。\",\"还有一种我了解的解决方案是布隆过滤器，布隆过滤器主要是检查一个元素是否在一个集合中，可以使用redisson实现的布隆过滤器。\",\"底层是先初始化一个比较大的数组，里面存放二进制的0和1，在一开始全都是0，当一个key来了之后经过3次hash计算，然后模数组的长度找到对应的下标，把下标该为1，这样3个数组的位置就能确定一个key是否存在。\",\"缺点是可能存在误判，这个我们可以设置误判率，大概不超过5%。为什么会有误判？因为数组长度是固定的，当有一个key经过3次hash计算后模数组长度得到的3个下标对应的都是1的时候就会直接认为该数据存在，但是实际不存在。\"]},\"125\":{\"h\":\"什么是缓存击穿，如何解决\",\"t\":[\"缓存击穿：某个key设置了过期时间，当该key过期了，有大量的请求请求到该key，这些并发请求可能会瞬间把数据库压垮。\",\"解决：我了解的有两种解决方案，分别是分布式锁，逻辑过期法。在项目中我使用分布式锁解决缓存击穿问题，具体方法是使用Redis的setnx关键字来实现分布式锁，首先大量的并发请求请求到一个key刚好在缓存中过期了，缓存中没有该数据则会请求数据库，在请求数据库之前使用Redis的setnx设置一个业务前缀：lock的key，如果有一个请求设置成功了，则其他的请求会再此处重试，我们让获取锁成功的去进行缓存重构，当然在缓存重构之前需要再次查询缓存是否存在数据，防止已经被其他线程缓存重构过了，完成之后需要手动删除该锁。要注意需要给lock设置一个合理的过期时间，防止出现死锁。这个过期时间需要根据具体的业务复杂度来设置，不能太短，防止业务还没有处理完毕就自动把锁释放了。\",\"另一种是逻辑过期的方法解决缓存击穿，我们需要手动给热点key的数据中添加一个过期时间，在请求来到的时候，先查询缓存，然后检查缓存中的时间是否过期，如果没有过期则返回数据，如果已经过期，获取互斥锁，如果获取失败的直接先返回过期的数据，获取锁成功的线程执行缓存重构，同样在缓存重构之前需要进行二次校验判断是否被重构过了，如果没有重构则查询数据库更新逻辑过期时间和数据。\"]},\"126\":{\"h\":\"什么是缓存雪崩，如何解决\",\"t\":[\"缓存雪崩：在同一时刻缓存中有大量的key同时过期或者Redis宕机，导致大量的请求打到数据库中，给数据库带来巨大的压力。\",\"解决：给不同的key设置不同的过期时间，比如给不同的key设置一个固定的过期时间再加上一个随机的时间，这样就可以解决缓存同时过期的问题。如果Redis服务宕机可以设置Redis集群来提高Redis服务的可用性\"]},\"127\":{\"h\":\"Redis作为缓存，mysql的数据如何与Redis数据保持一致性(双写一致性)\",\"t\":[\"首先要结合自己的项目业务来分析，一致性高的场景下是一种方案，一致性不高允许出现延迟的场景可以采用另一种方案\",\"双写一致性：当修改了数据库中的数据，也要同时更新缓存的数据，缓存的数据需要和数据库中的数据保持一致性。\",\"在我的项目中，修改队伍信息是需要保证及时生效的，防止展示出来的还是原本的数据，可以采用延迟双删的方案来保证双写一致性。在修改之前先删除一次缓存，修改成功后然后再延迟删除缓存，这样的好处是可以极大的减少缓存不一致的情况。\",\"另外一种方案是读操作和写操作都加同一个分布式锁，不过不太推荐这样做，因为保存到缓存中的数据都是读多写少的数据，这样做在大量请求的情况下会极大的影响到读的效率，可以使用redisson封装的共享锁(读锁)和排它锁(写锁)，在读操作的前后加上共享锁，在写操作的前后加上排它锁，这样在读的时候其他线程是不可以写的但是可以读，在写的时候其他线程不允许读写数据；这样可以保证强一致性。\",\"另一种是允许数据短暂的不一致，在我别的项目中，Redis缓存店铺信息，店铺信息允许出现短暂的数据不一致情况，我采用的是给缓存的店铺设置一个短一点过期时间，当修改的时候不需要操作缓存，我们只需要等待缓存数据过期然后进行缓存重构即可更新缓存数据。我了解的还有另外一种方式：在修改数据之后，通过消息队列MQ通知缓存更新的服务来删除对应的数据，保证数据一致性；这里需要保证MQ的消息可靠性。\"]},\"128\":{\"h\":\"Redis作为缓存，数据的持久化是怎么做的\",\"t\":[\"在Redis中提供了两种持久化方案：RDB、AOF\",\"RDB：把内存中的所有数据都记录到磁盘中。当Redis出现故障重启后，可以从磁盘中读取该RDB文件，恢复数据。\",\"1.在Redis客户端中使用save可以在主进程中执行备份操作，不过会阻塞主进程，不推荐使用；另一种是使用bgsave，新开启一个子进程执行备份的操作。\",\"2.也可以在Redis.conf文件中配置备份的触发条件例如save 300 10(300秒内如果有10个key修改了则触发备份，这里备份也是在子进程中执行的)\",\"AOF：AOF全称Append Only File(追加文件)。Redis处理的每一个写的命令都会记录在AOF文件，可以看做是命令日志文件。\",\"AOF默认是关闭的需要我们到配置文件中手动开启:\",\"# 是否开启AOF功能，默认是no appendonly yes # AOF的文件的名称 appendfilename \\\"appendonly.aof\\\" \",\"开启后可以配置AOF记录的频率：\",\"# 每执行一次命令，立即记录到AOF中 appendfsync always # 写命令执行完毕先放入AOF缓冲区，然后每隔1秒将缓冲区的数据写入到AOF文件中，默认方案 appendfsync everysec # 写命令执行完毕后先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写入AOF文件 appendfsync no \",\"配置项\",\"刷盘时机\",\"优点\",\"缺点\",\"always\",\"同步刷盘\",\"可靠性高，几乎不丢失数据\",\"性能影响大\",\"everysec\",\"每秒刷盘\",\"性能适中\",\"最多丢失1秒的数据\",\"no\",\"操作系统控制\",\"性能最好\",\"可靠性差，可能丢失大量的数据\",\"另外由于AOF记录的是命令序列，当我们对一个key进行多次的写操作的时候，最后一次会覆盖掉前面的例如\",\"set k1 v1 set k2 v2 set k1 v3 \",\"k1的值就是v3了，但是AOF中还是记录了所有的操作，我们可以执行bgrewriteaof命令来让AOF执行重写来减少AOF文件的占用磁盘大小，重写后的如下：\",\"mset k2 v2 k1 v3 \",\"总结：\",\"RDB 适合⽤于数据集较⼤、备份、恢复数据和迁移数据等场景；AOF 适合⽤于数据可靠性要求⾼、数据恢复稳健等场景。\",\"image-20230823103515194\"]},\"129\":{\"h\":\"Redis数据过期策略\",\"t\":[\"引出：如果Redis的key过期后会立即删除吗？\",\"setex name jack 10\",\"数据过期之后就需要将数据从内存中删除，可以按照不同的规则删除，这种删除规则就称为数据的删除策略(数据过期策略)。惰性删除、定期删除\",\"惰性删除：设置一个key当该key过期的时候，我们不需要管他，当需要该key的时候我们在检查他是否过期，如果已经过期了我们就删除掉他，反之则返回该key的值\",\"优点：对CPU友好，我们只会在使用key的时候进行检查该key是否过期了，对于很多用不到的key不需要浪费时间进行检查是否过期\",\"缺点：对内存不友好，当大量的key都过期了，但是没有人访问他，那么这些key就会一直存在内存中从而占用大量的内存\",\"定期删除：每隔一段时间，我们就对一些key进行检查，删除里面过期的key。\",\"定期清理有两种模式：SLOW模式和FAST模式。\",\"优点：可以通过限制删除操作执行的时长和频率来减少删除操作对CPU的影响。定期删除能有效释放过期键占用的内存。\",\"缺点：难以确定删除操作执行的时长和频率。\",\"Redis的过期删除策略：惰性删除 + 定期删除 两种策略进行配合使用\"]},\"130\":{\"h\":\"Redis数据淘汰策略\",\"t\":[\"当Redis中内存不够用的时候，此时再向Redis中添加新的key的时候，那么Redis就会按照某一种规则将内存中的数据删除掉，这种删除规则称之为内存的淘汰策略。\",\"Redis常用的淘汰策略：\",\"noeviction：当内存打到限制时，不删除任何键，⽽是返回错误；\",\"allkeys-lru：当内存达到限制时，删除最近最少使⽤（LRU）的键；\",\"volatile-lru：当内存达到限制时，删除设置了过期时间并且最近最少使⽤的键；\",\"allkeys-random：当内存达到限制时，随机删除任意键；\",\"volatile-random：当内存达到限制时，随机删除设置了过期时间的键；\",\"volatile-ttl：当好内存达到限制时，删除设置了过期时间并且剩余⽣存时间最短的键。\"]},\"131\":{\"h\":\"Redis分布式锁\",\"t\":[\"Redis分布式锁主要利用Redis中的setnx来命令来实现。setnx命令是如果key不存在才能set对应的值，如果key存在了，则不能set对应的值\",\"获取锁：\",\"set lock 1 nx ex 10 # 添加锁，nx是互斥、ex是设置锁的失效时间\",\"释放锁：\",\"DEL lock # 删除即可\"]},\"132\":{\"h\":\"Redis分布式锁如何合理的控制锁的有效时间\",\"t\":[\"1.根据具体业务估计设置锁的时长。不太靠谱\",\"2.给锁续期，新开一个线程监视业务是否执行完毕，如果没有执行完毕并且锁的ttl快到期了，则自动续期。我的项目中使用的是redisson第三方依赖中的锁，该锁自带了watchdog机制可以自动续期。使用redisson加锁的时候，内部是通过Lua脚本进行实现的，可以保证命令的原子性。\"]},\"133\":{\"h\":\"Redisson的锁可以重入吗？\",\"t\":[\"锁的重入：方法a中加了锁，方法b中也加了同一把锁，在方法a中调用方法b如果可以成功加锁，并且释放锁则是可重入锁\",\"Redisson的锁是可重入的锁，redisson锁根据线程唯一标识判断是否是同一个线程，如果线程相同，则是可以重入的，重入一次对应的value值+1。在redis中存储的时候使用hash数据类型，来存储线程信息和重入次数。\"]},\"134\":{\"h\":\"Redisson锁可以解决主从数据的一致问题吗\",\"t\":[\"不能解决，但是可以使用redisson提供的红锁RedLock，原理是给(n/2)+1个节点设置锁，这样主节点宕机即使没有来得及同步从节点从节点中也是有锁的，从而避免只在一个redis实例上加锁。\"]},\"135\":{\"h\":\"介绍Redis的主从同步\",\"t\":[\"单节点的Redis的并发能力是有限的，想要提高Redis的并发能力，我们可以搭建Redis集群，实现一个主节点和若干个从节点，主节点主要负责写数据，从节点负责读数据\"]},\"136\":{\"h\":\"介绍一下Redis中哨兵的作用\",\"t\":[\"Redis提供了哨兵机制来实现Redis主从集群的自动故障恢复。\",\"监控：哨兵会不断的检查你的master和slave是否按照预期工作。\",\"故障自动恢复：如果master故障，哨兵会将一个slave提升为master。当故障恢复后还是以新提升的master位主节点\",\"通知：哨兵充当Redis客户端的服务发现来源，当集群发送故障转移时，会将最新的消息推送给Redis的客户端\",\"哨兵怎么监控Redis的服务状态的？\",\"哨兵基于心跳机制检测服务的状态，每一秒向集群的每一台实例发送ping命令：\",\"主观下线：如果哨兵发现某一台实例没有在规定的时间内响应，则认为该实例主观下线；\",\"客观下线：如果超过指定数量的哨兵(哨兵有多个)都认为该实例主观下线，则该实例就是客观下线了。指定数量最好是超过哨兵数量的一半\"]},\"137\":{\"h\":\"Redis集群脑裂，该如何解决\",\"t\":[\"集群脑裂：是由于主节点由于自身的网络问题导致主节点和从节点以及sentinel处于不同的网络分区，导致sentinel不能感知到master，所以通过选举的方式提升了一个从节点为主，这样就存在了两个master，就像大脑分裂了一样，这样就会导致客户端还是在老的主节点那里写入数据，新选举出来的主节点无法同步数据，当网络恢复的时候，原来的那个老的主节点就变成了新选举出来的主节点的从节点，这时候从节点会同步主节点的数据，就会导致数据丢失。\",\"解决：由于脑裂是由网络等原因造成的，除了提高网络、硬件等方法外，主要通过增加以下配置，改善出现脑裂而引发的数据丢失问题。\",\"# 要求至少有1个slave min-slaves-to-write 1 # 数据复制和同步的延迟不能超过10秒 min-slaves-max-lag 10 \"]},\"138\":{\"h\":\"分片集群解决海量数据的存储和高并发的写操作\",\"t\":[\"分片集群特征：\",\"集群中有多个master，每个master保存不同的数据\",\"每个master都可以有多个slave节点\",\"master之间通过ping监测彼此的健康状态\",\"客户端可以访问集群的任意节点，最终都会被转发到正确的节点\",\"Redis分片集群中引入了哈希槽的概念，Redis集群有16384(2^14)个哈希槽，每个key通过CRC16校验之后对16384取模来决定放入到哪个槽位，集群的每一个节点负责一部分的哈希槽。\"]},\"139\":{\"h\":\"Redis是单线程的，但是为什么还那么快？\",\"t\":[\"1、纯内存操作 Redis 是基于内存的数据存储系统，绝⼤部分请求是纯粹的内存操作。\",\"2、单线程操作，避免了频繁的上下⽂切换 Redis 的单线程操作是指，Redis 使⽤⼀个主线程来处理所有的客户端请求和数据操作，不会创建新的线程来处理请求。这种单线程模型的优点是可以避免多线程并发访问共享数据时的竞争和死锁问题，从⽽提⾼了 Redis 的性能和稳定性。此外，由于 Redis 的内存访问速度⾮常快，因此单线程处理请求也能够保证⾜够的性能。\",\"3、采⽤了⾮阻塞 I/O 多路复⽤机制 为了实现单线程模型，Redis 使⽤了 IO 多路复⽤技术。IO 多路复⽤是指操作系统提供的⼀种 IO 模型，可以让⼀个进程同时监听多个 IO 事件（如读写事件），并在有事件发⽣时通知进程，从⽽实现并发处理 IO 事件。具体来说，在 Redis 中，客户端的请求是由⼀个单线程来处理的，⽽ IO 操作却是通过 epoll 多路复⽤技术实现的。\"]},\"140\":{\"h\":\"MySQL篇\"},\"141\":{\"h\":\"如何定位慢查询？\",\"t\":[\"慢查询一般发生在如下查询场景：\",\"聚合查询\",\"多表查询\",\"表数据量过大查询\",\"深度分页查询\",\"表象：页面加载过慢、接口压测响应时间大于一秒\",\"方案一：使用开源工具\",\"方案二：MySQL自带的慢日志查询\",\"需要我们手动配置来开启慢日志查询。配置如下：\",\"# 开启慢日志查询 slow_query_log=1 # 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会被视为慢查询，记录慢查询日志 long_query_time=2 \",\"配置完毕后重启，当有慢查询的时候，就会在/var/lib/mysql/localhost-slow.log中记录查询超过2秒的sql\",\"image-20230824094928081\",\"我们在MySQL中开启了慢日志查询，我们设置的值是2秒钟，一旦sql执行超过了我们设置的2秒钟就会被记录到日志中。(调试阶段)\"]},\"142\":{\"h\":\"如何分析慢查询？\",\"t\":[\"在sql查询语句前面加上explain关键字可以对该查询sql进行分析，得到一张表如下：\",\"image-20230824095849403\",\"其中我们主要关注的有：\",\"possible_keys：当前sql可能使用到的索引\",\"key：当前sql实际命中的索引\",\"key_len：当前索引占用的大小\",\"Extra：额外的优化的建议\",\"我们可以通过key和key_len判断是否命中索引\",\"type：sql的连接的类型，性能由好到差为：NULL、system、const、eq_ref、ref、range、index、all\",\"NULL：查询中没有表\",\"system：查询MySQL内置自带的表\",\"const：根据主键索引查询\",\"eq_ref：根据主键索引查询或者唯一索引查询(只能返回一条数据，因为主键和唯一索引不能重复)\",\"ref：索引查询(可能返回多条数据)\",\"range：范围查询\",\"index：索引树扫描\",\"all：全盘扫描\",\"如果某个sql的type是index或者是all那么这个sql就需要优化\"]},\"143\":{\"h\":\"了解过索引吗？(什么是索引)\",\"t\":[\"索引(index)是帮助MySQL高效获取数据的数据结构。在数据之外，数据库系统维护了满足特定查找算法的数据结构(B+树)，这些数据结构以某种方式引用数据，这样就可以在这些数据结构上实现高效的查找算法，这种数据结构就是索引。\"]},\"144\":{\"h\":\"索引的底层数据结构是什么样的？\",\"t\":[\"索引底层的数据结构是B+树，B+Tree是在BTree的基础上的一种优化，非叶子节点上只存储指针不存储数据，叶子节点上真正的存储数据，并且叶子节点之间使用双向指针相互连接，innoDB存储引擎使用的就是B+树实现索引的\",\"image-20230824103228853\",\"B+树相对于B树的优点：\",\"磁盘读写代价B+树更低。比如我们需要查找6对应的数据，如果是B树因为B树的每个节点下的键值都由数据，会导致不需要的数据也会被读取到造成磁盘读写的浪费，而B+树只有叶子节点上保存数据，非叶子节点上保存的是指针，可以避免读取到不需要的数据\",\"查询效率B+树稳定。因为非叶子节点上没有数据，每次查找都会从根节点出发直到叶子结点，所以查询的效率更稳定\",\"B+树更适合区间查询，因为B+树的叶子节点使用双向指针相互连接，比如查询6-36之间的数据只需要查找到6然后根据指针来进行查找即可。\"]},\"145\":{\"h\":\"什么是聚簇索引(聚集索引)什么是非聚簇索引(非聚集索引、二级索引)？\",\"t\":[\"聚集索引：将数据与索引放到一块，索引结构的叶子结点保存了行数据；特点是索引必须有对应的整行数据并且只有一个。一般主键作为聚集索引。\",\"二级索引：将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键；特点是 索引结构的叶子节点关联的的主键 可以有多个。一般自定义的索引都是二级索引\",\"聚集索引的选举规则：\",\"如果存在主键，主键索引就是聚集索引。\",\"如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引。\",\"如果表没有主键，或者没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引\",\"image-20230824150748657\"]},\"146\":{\"h\":\"什么是回表查询？\",\"t\":[\"image-20230824151652643\",\"select * from user where name = ‘Arm’;\",\"由于name添加了索引，并且name不是主键也不是唯一索引而且表含有主键id，所以name就是二级索引，首先在二级索引中找到Arm对应的主键id，由于该sql语句查询的是*整行数据，所以需要再次查询聚集索引找到主键对应的整行数据。\",\"综上回表查询就是：通过二级索引查找到主键值，然后到聚集索引中通过主键值查找到对应的整行数据，这个过程就是回表查询。\"]},\"147\":{\"h\":\"什么是覆盖索引？\",\"t\":[\"覆盖索引：指查询使用了索引，并且需要返回的列 在该索引中已经全部能够找到。\",\"image-20230824154526112\"]},\"148\":{\"h\":\"MySQL超大分页处理\",\"t\":[\"在数据量比较大的时候，如果进行limit分页查询，在查询时候，越靠后分页查询的效率就越低。\",\"例如 select * from tb_user limit 9000000, 10;需要耗时10秒多，因为执行的时候MySQL需要排序前9000010记录，但是仅仅返回9000000 - 9000010 条的记录，其他的记录丢弃，查询排序的代价非常大。\",\"使用 覆盖索引+子查询 形式进行优化\",\"select * from tb_user u, (select id from tb_user order by id limit 9000000,10) a # 根据id排序和返回id直接走的是覆盖索引 where u.id = a.id; \",\"先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了。因为查询id的时候，走的覆盖索引，所以效率可以提升很多\"]},\"149\":{\"h\":\"创建索引的原则有哪些？\",\"t\":[\"数据量大，查询频繁的字段。\",\"表中的数据要超过10万以上，我们才会创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是像作为查询条件where，排序字段order by或分组group的字段这些。\",\"尽量选择区分度较高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率就越高。(例如性别和城市就不适合作为索引，因为会有大量重复的数据，区分度不高)\",\"如果是字符串类型的字段，并且该字段比较长，可以针对该字段创建前缀索引(只截取前面几个字符串来创建索引)\"]},\"150\":{\"h\":\"什么情况下索引会失效？\",\"t\":[\"违反最左前缀法则\",\"如果索引了多列，要遵循最左前缀法则。意思是查询必须从索引的最左前列开始，并且不能跳过索引中的列。\",\"匹配最左前缀法则，走索引的案例：\",\"image-20230824165829433\",\"违反最左前缀，索引失效的案例：\",\"image-20230824170127494\",\"如果符合最左法则，但是出现跳过某一列，只有最左索引生效(只命中了name一个索引)\",\"image-20230824170318295\",\"范围查询右边的列会索引失效。\",\"image-20230824170601060\",\"范围查询右边的address的索引会失效，所以上面的查询只命中了name和status两个索引\",\"不要在索引的字段上进行运算操作，否则索引将会失效。\",\"image-20230824171108620\",\"字符串不加单引号，可能造成索引失效\",\"image-20230824171229791\",\"在查询的时候没有对字符串的status加上单引号，MySQL的查询会自动进行类型转换，造成索引失效。\",\"以%开头的Like模糊查询，导致索引失效。如果仅仅是尾部模糊匹配，索引不会失效；如果是头部模糊匹配，索引会失效。\",\"image-20230824171513907\",\"综上：什么情况下会导致索引失效？\",\"违反了最左前缀法则\",\"范围查询的右边的列，不能使用索引，因为索引失效了\",\"索引列上进行运算操作\",\"字符串不加单引号(类型转换)\",\"以%开头的模糊查询\"]},\"151\":{\"h\":\"事务的特性是什么？\",\"t\":[\"事务是一组操作的集合，它是一个不可分割的单位，事务会把所有的操作视为一个整体一起向系统提交或撤销操作的请求，这些操作要么同时成功，要么同时失败。\",\"事务的特性是ACID：原子性、一致性、隔离性、持久性。\",\"原⼦性（Atomicity）：事务是⼀个原⼦操作，要么全部提交，要么全部回滚。当⼀个事务执⾏期间发⽣故 障，操作系统会⾃动将其回滚到事务执⾏之前的状态，保证数据的⼀致性。\",\"⼀致性（Consistency）：事务执⾏结束后，数据必须保持⼀致性状态。在事务执⾏期间，数据库中的数据可 以处于中间状态，但在事务完成时必须保证数据的⼀致性。\",\"隔离性（Isolation）：数据库系统必须保证事务之间相互隔离，不会互相⼲扰。隔离级别不同，会影响到事务 的并发性和数据⼀致性，⽐如出现脏读、不可重复读、幻读等问题。\",\"持久性（Durability）：⼀旦事务提交，其所做的修改必须永久保存到数据库中。即使系统发⽣故障或宕机， 数据也能够保持不变。\"]},\"152\":{\"h\":\"并发事务带来哪些问题？怎么解决？MySQL默认的隔离级别是什么？\",\"t\":[\"并发事务会导致的问题有：脏读，不可重复读，幻读，丢失更新。\",\"MySQL的隔离级别有：读未提交，读已提交，可重复读，串行化\",\"并发事务的问题：\",\"image-20230824174214437\",\"解决方法：对事务进行隔离\",\"image-20230824174356130\"]},\"153\":{\"h\":\"undo log和redo log的区别\",\"t\":[\"redo log日志记录的是数据页的物理变化，服务宕机可用来同步数据，而undo log 不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo log日志文件中新增一条delete语句，如果发生回滚就执行逆操作；\",\"redo log保证了事务的持久性，undo log保证了事务的原子性和一致性\"]},\"154\":{\"h\":\"事务中的隔离性是如何保证的呢？(解释一下MVCC)\",\"t\":[\"事务的隔离性是由锁和mvcc实现的。\",\"锁：排它锁(一个事务获取了一个数据行的排它锁，其他事务就不能再获取该行的其他锁)\",\"mvcc：多版本并发控制\",\"MVCC的具体实现主要依赖于数据库中记录的隐藏字段、undo log日志、readView。\",\"隐藏字段是指：在mysql中给每个表都设置了隐藏字段，有一个是trx_id(事务id)，记录每一次操作的事务id，是自增的；另一个字段是roll_pointer(回滚指针)，指向上一个版本的事务版本记录地址\",\"undo log主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表\",\"readView(读视图)解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是rc隔离级别，每一次执行快照读时生成ReadView，如果是rr隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用\"]},\"155\":{\"h\":\"MySQL主从同步原理\",\"t\":[\"MySQL主从复制的核心就是二进制日志(BINLOG)中记录了DDL（数据定义语言）语句和 DML（数据操纵语言）语句)，它的步骤是这样的：\",\"第一：主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。\",\"第二：从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 (Relay Log )。\",\"第三：从库重做中继日志中的事件，将改变反映它自己的数据\"]},\"156\":{\"h\":\"MySQL的分库分表\",\"t\":[\"image-20230825194845740\",\"image-20230825195028337\",\"image-20230825195215716\",\"image-20230825195410827\",\"image-20230825195454723\"]},\"157\":{\"h\":\"框架篇\"},\"158\":{\"h\":\"Spring中的Bean是线程安全的吗？\",\"t\":[\"Spring 框架中的 Bean 是否线程安全，取决于其作用域和状态。\",\"我们这里以最常用的两种作用域 prototype 和 singleton 为例介绍。几乎所有场景的 Bean 作用域都是使用默认的 singleton ，重点关注 singleton 作用域即可。\",\"prototype 作用域下，每次获取都会创建一个新的 bean 实例，不存在资源竞争问题，所以不存在线程安全问题。singleton 作用域下，IoC 容器中只有唯一的 bean 实例，可能会存在资源竞争问题（取决于 Bean 是否有状态）。如果这个 bean 是有状态的话，那就存在线程安全问题（有状态 Bean 是指包含可变的成员变量的对象）。\",\"不过，大部分 Bean 实际都是无状态（没有定义可变的成员变量）的（比如 Dao、Service），这种情况下， Bean 是线程安全的。\",\"对于有状态单例 Bean 的线程安全问题，常见的有两种解决办法：\",\"在 Bean 中尽量避免定义可变的成员变量。\",\"在类中定义一个 ThreadLocal 成员变量，将需要的可变成员变量保存在 ThreadLocal 中（推荐的一种方式）。\"]},\"159\":{\"h\":\"Bean的作用域有哪些？\",\"t\":[\"Spring 中 Bean 的作用域通常有下面几种：\",\"singleton : IoC 容器中只有唯一的 bean 实例。Spring 中的 bean 默认都是单例的，是对单例设计模式的应用。\",\"prototype : 每次获取都会创建一个新的 bean 实例。也就是说，连续 getBean() 两次，得到的是不同的 Bean 实例。\",\"request （仅 Web 应用可用）: 每一次 HTTP 请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request 内有效。\",\"session （仅 Web 应用可用） : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTP session 内有效。\",\"application/global-session （仅 Web 应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean 仅在当前应用启动时间内有效。\",\"websocket （仅 Web 应用可用）：每一次 WebSocket 会话产生一个新的 bean。\"]},\"160\":{\"h\":\"什么是AOP？你的项目中有没有使用到AOP？\",\"t\":[\"AOP 称为面向切面编程，用于将那些与业务无关 但却对多个对象产生影响的公共行为和逻辑，抽取并且封装成一个可重用的模块，这个模块被命名为切面(Aspect)，减少系统中的重复代码，降低了模块之间的耦合度，同时提高了系统的可维护性。\",\"我的项目中使用AOP来记录请求日志，校验登录用户是否是管理员(配合自定义注解authCheck中的mustRole必须是admin才可以执行方法)。\",\"先来介绍一下项目中使用AOP记录请求日志：首先编写一个类并使用@Aspect和@Component注解来表示这是一个AOP类，再定义一个方法并且使用@Around注解来标识在注解中填写表达式或者是切入点的方法，这里我直接填写表达式为 * com.panda.controller.*.*(..) 这个表达式可以匹配controller包中所有的方法，然后通过RequestContextHolder工具类来获取当前线程的Request相关的信息，获取Session得到当前的用户信息和请求的路径，记录请求日志。\",\"校验当前用户是否是管理员使用AOP是在Around中写@annotation(authCheck)来拦截被authCheck注解标注的类，获取当前方法要求的用户权限，与该用户的角色进行判断，如果该用户是管理员则可以执行方法。\"]},\"161\":{\"h\":\"Spring中的事务是如何实现的？\",\"t\":[\"Spring中的事务也是通过AOP来实现的，Spring提供了两种事务的使用方法：编程式事务和声明式事务\",\"经常使用的是声明式事务，在类或者是方法上添加@Transactional注解来开启事务，Spring使用AOP在方法的前面开启事务，在执行方法完毕之后提交事务，如果方法出现异常则会回滚事务。所以Spring中的事务是通过AOP来实现的。\"]},\"162\":{\"h\":\"Spring中事务失效的场景有哪些？\",\"t\":[\"异常捕获处理\",\"在添加事务注解的方法中自己捕获异常并且在捕获的cache中没有抛出异常则会导致 事务不知道出现了异常 导致事务失效。\",\"解决方法：在cache中再次抛出异常throw new RuntimeException(\\\"异常\\\");\",\"抛出检查异常\",\"Spring默认只会回滚非检查异常运行时异常(检查异常：在方法上使用throws抛出异常)\",\"解决方法：配置rollbackFor属性为Exception.class只要出现异常就会回滚\",\"非public方法\",\"Spring为方法创建代理、添加事务通知的前提条件是该方法是public的\",\"解决方法：把方法改为public\",\"同一个类里面调用(无法代理自己，可以通过AOP上下文对象(AopContext.currentProxy)获取一个当前类的代理类)\"]},\"163\":{\"h\":\"Spring的Bean的生命周期\",\"t\":[\"Spring Bean 生命周期\",\"Spring Bean 生命周期\",\"通过BeanDefinition获取bean的定义信息\",\"调用构造函数实例化bean\",\"bean的依赖注入(@Value、@Autowired...)\",\"处理Aware接口(实现以Aware结尾的接口，里面有方法需要我们重写，执行这些方法)\",\"BeanPostProcessor前置处理器\",\"初始化方法(检查是否是InitializingBean、是否配置有自定义的init-method)\",\"BeanPostProcessor后置处理器⭐️(可以在后置处理器中通过动态代理增强某个Bean)\",\"销毁Bean\"]},\"164\":{\"h\":\"Spring中的循环引用\",\"t\":[\"两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A；循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖(set方法注入)\",\"创建A对象调用构造函数生成一个半成品的A对象，在设置对象属性，发现对象属性中有B对象，那么创建B对象调用B对象的构造函数生成一个半成品的B对象然后初始化B对象发现B对象中有A对象需要到Spring容器中找A对象但是A对象并没有初始化完毕，所以造成了循环依赖。\",\"Spring解决循环依赖是通过三级缓存来解决的\",\"image-20230901110522841\",\"缓存名称\",\"源码名称\",\"作用\",\"一级缓存\",\"singletonObjects\",\"单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象\",\"二级缓存\",\"earlySingletonObjects\",\"缓存早期的bean对象(生命周期还没有走完)\",\"三级缓存\",\"singletonFactories\",\"缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的\",\"①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象\",\"②二级缓存：缓存早期的bean对象（生命周期还没走完）\",\"③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的\",\"具体流程：\",\"第一，先实例A对象，同时会创建ObjectFactory对象存入三级缓存singletonFactories\",\"第二，A在初始化的时候需要B对象，这个走B的创建的逻辑\",\"第三，B实例化完成，也会创建ObjectFactory对象存入三级缓存singletonFactories\",\"第四，B需要注入A，通过三级缓存中获取ObjectFactory来生成一个A的对象同时存入二级缓存，这个是有两种情况，一个是可能是A的普通对象，另外一个是A的代理对象，都可以让ObjectFactory来生产对应的对象，这也是三级缓存的关键\",\"第五，B通过从通过二级缓存earlySingletonObjects 获得到A的对象后可以正常注入，B创建成功，存入一级缓存singletonObjects\",\"第六，回到A对象初始化，因为B对象已经创建完成，则可以直接注入B，A创建成功存入一次缓存singletonObjects\",\"第七，二级缓存中的临时对象A清除\"]},\"165\":{\"h\":\"构造方法出现了循环依赖怎么解决？\",\"t\":[\"由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建\"]},\"166\":{\"h\":\"SpringMVC的执行流程\",\"t\":[\"img\",\"客户端（浏览器）发送请求， DispatcherServlet拦截请求。\",\"DispatcherServlet 根据请求信息调用 HandlerMapping 。HandlerMapping 根据 uri 去匹配查找能处理的 Handler（也就是我们平常说的 Controller 控制器） ，并会将请求涉及到的拦截器和 Handler 一起封装。\",\"DispatcherServlet 调用 HandlerAdapter适配器执行 Handler 。\",\"Handler 完成对用户请求的处理后，会返回一个 ModelAndView 对象给DispatcherServlet，ModelAndView 顾名思义，包含了数据模型以及相应的视图的信息。Model 是返回的数据对象，View 是个逻辑上的 View。\",\"ViewResolver 会根据逻辑 View 查找实际的 View。\",\"DispaterServlet 把返回的 Model 传给 View（视图渲染）。\",\"把 View 返回给请求者（浏览器）\"]},\"167\":{\"h\":\"Spring MVC 的核心组件有哪些？\",\"t\":[\"DispatcherServlet：核心的中央处理器，负责接收请求、分发，并给予客户端响应。\",\"HandlerMapping：处理器映射器，根据 uri 去匹配查找能处理的 Handler ，并会将请求涉及到的拦截器和 Handler 一起封装。\",\"HandlerAdapter：处理器适配器，根据 HandlerMapping 找到的 Handler ，适配执行对应的 Handler；\",\"Handler：请求处理器，处理实际请求的处理器。\",\"ViewResolver：视图解析器，根据 Handler 返回的逻辑视图 / 视图，解析并渲染真正的视图，并传递给 DispatcherServlet 响应客户端\"]},\"168\":{\"h\":\"SpringBoot的自动配置原理\",\"t\":[\"在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：\",\"@SpringBootConfiguration\",\"@EnableAutoConfiguration\",\"@ComponentScan\",\"其中@EnableAutoConfiguration是实现自动化配置的核心注解。\",\"该注解通过@Import注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下META-INF/spring.factories文件中的所配置的类的全类名。\",\"在这些配置类中所定义的Bean会根据条件注解所指定的条件来决定是否需要将其导入到Spring容器中。\",\"一般条件判断会有像@ConditionalOnClass这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。\"]},\"169\":{\"h\":\"Spring && Spring MVC && SpringBoot 常用注解有哪些？\",\"t\":[\"image-20230901173331454\",\"image-20230901173457417\",\"image-20230901173707590\",\"https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html\"]},\"170\":{\"h\":\"MyBatis\",\"t\":[\"https://javaguide.cn/system-design/framework/mybatis/mybatis-interview.html\"]},\"171\":{\"h\":\"项目中使用的Spring Cloud组件有哪些？\",\"t\":[\"注册中心和配置中心：nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\",\"RPC远程调用框架：Dubbo\",\"网关：Spring Cloud Gateway：用于网关服务，实现请求的转发和路由。\",\"服务保护：Sentinel(在项目中暂时没有使用到)以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。\"]},\"172\":{\"h\":\"服务注册和发现是什么意思？Spring Cloud如何实现服务注册发现？\",\"t\":[\"服务注册：服务提供者需要把自己的信息注册到注册中心中，由注册中心来保存这些信息，比如服务名称、ip、端口等等\",\"服务发现：消费者向注册中心拉取服务列表信息，如果服务的提供者有集群，则消费者会使用负载均衡选择一个服务发起调用\",\"服务监控：服务提供者会每隔一段时间向注册中心发送心跳，汇报健康状态，如果注册中心超过一定的时间没有收到心跳则会被剔除掉\"]},\"173\":{\"h\":\"nacos和Eureka的区别\",\"t\":[\"api平台项目就是采用的nacos作为注册中心，选择nacos还要一个重要原因就是它支持配置中心，不过nacos作为注册中心，也比eureka要方便好用一些，主要相同不同点在于几点：\",\"共同点\",\"Nacos与eureka都支持服务注册和服务拉取，都支持服务提供者心跳方式做健康检测\",\"Nacos与Eureka的区别\",\"①Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式\",\"②临时实例心跳不正常会被剔除，非临时实例则不会被剔除\",\"③Nacos支持服务列表变更的消息推送模式，服务列表更新更及时\",\"④Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式\"]},\"174\":{\"h\":\"什么是CAP理论？\",\"t\":[\"CAP主要是在分布式项目下的一个理论。包含了三项，一致性、可用性、分区容错性\",\"一致性(Consistency)是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致(强一致性)，不能存在中间状态。\",\"可用性(Availability) 是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。\",\"分区容错性(Partition tolerance) 是指分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。\"]},\"175\":{\"h\":\"消息队列\"},\"176\":{\"h\":\"消息队列可以用来干什么，在你的项目中有使用到吗？\",\"t\":[\"异步、解耦、削峰\",\"在我曾经的一个项目中有主要使用到消息队列的异步的特性，当时是一个秒杀优惠券的功能，为了提高秒杀的性能 我使用到了redis缓存优惠券的库存，并且配合Lua脚本实现操作redis的原子性，在判断库存充足的情况下，会减少库存之后就向消息队列中发送下单优惠券的消息，然后就直接返回下单成功，消息的订阅者就监听消息队列发现有消息则执行具体的下单操作修改数据库的信息，完成下单的完整操作实现业务的异步，提高接口的响应速度。\",\"引入消息队列可能会对系统造成的影响：\",\"可用性降低，复杂度上升，又带来一系列的重复消费，顺序消费，消息堆积的问题。这些都有对应的解决方案\"]},\"177\":{\"h\":\"RocketMQ如何保证消息的顺序性？\",\"t\":[\"生产者端发送消息使用哈希取余算法(根据业务的id得到hashCode然后对队列的大小取余得到该消息应该放到哪个队列中)，消费者端应该使用单线程模型，在SpringBoot中应该指定@RocketMQListener中消费者的模式为单线程即一个队列只对应一个线程来处理消费，这样就可以保证消息的顺序消费。\"]},\"178\":{\"h\":\"如何避免消息的重复消费？\",\"t\":[\"在生产者发送消息的时候，可以给消息指定一个唯一的业务key，在消费者端接收的时候直接保存到数据库或者缓存的去重表中，在这个去重表中key是唯一索引，如果保存数据库失败那么就说明该消息已经消费过了，我们直接返回通过就ok了，如果没有该消息那么则会创建成功也会直接返回成功。\"]},\"179\":{\"h\":\"如何解决消息大量堆积的问题？\",\"t\":[\"消息堆积的问题产生的根源就是：生产者生产的速度相对于消费者消费的速度过快，我们可以对生产者进行限流操作，限制生产者的生产速度，当然最快解决大量消息堆积的方法就是添加多个消费者，在添加消费者的时候要注意必须保证主题中的队列数量大于等于消费者否则就会出现某个消费者没有对应的队列，所以在添加消费者的同时也要添加主题中的队列，这样可以快速解决大量消息堆积的问题，对了，同时我们也可以给消费者添加消费线程来加快消费的进度。\"]},\"180\":{\"h\":\"常见集合篇\"},\"181\":{\"h\":\"数组\",\"t\":[\"数组(Array)是一种使用连续的内存空间存储相同类型的数据的线性数据结构。\"]},\"182\":{\"h\":\"为什么Java的数组下标从0开始而不是从1开始？\",\"t\":[\"首先在回答这个问题之前，我们需要先了解数据在堆内存中的数据结构，当我们创建了一个数组比如 int[] array = {1,2,3} array变量是保存在栈中的并且保存的是数组对象的首地址，并且数组是连续的，int占用的内存大小是4个字节，\",\"数组的寻址公式就是：首地址+i*数组中元素类型的大小；对应上面的array就是:首地址+i*4;如果数组下标从1开始，那么寻址公式就变为了首地址+(i-1)*4 多了一个减一的操作，对于CPU来说就多了一次指令，相对来说会影响一部分的性能。\"]},\"183\":{\"h\":\"ArrayList底层的实现原理是什么？\",\"t\":[\"ArrayList底层是用动态的数组实现的。\",\"当我们创建一个ArrayList对象的时候，底层其实是一个Object数组并且在我们创建的时候进行了初始化为空数组； 当我们第一次调用add方法进行添加元素的时候，内部会对数组进行一个长度为10的扩容，扩容完毕之后再进行元素的添加。 然后第二次调用add方法进行添加元素的时候，因为当前元素大小为2没有超过10所以并不需要扩容。 直到添加到第10个元素之后，当添加到第11个元素的时候，因为超过数组的长度10，所以会按照原先数组长度的1.5倍进行扩容，扩容完毕之后再进行元素的添加。\"]},\"184\":{\"h\":\"如何实现数组和List之间的转换？\",\"t\":[\"数组转List：\",\"可以使用Arrays.toList()方法来使数组转换为List，不过转换得到的List并不是java.util.ArrayList，而是Arrays的一个内部类，该内部类实现了AbstractList接口但是并没有重写add、remove、clear方法，所以使用这种方法得到的集合不能进行修改。\",\"另一种方法是使用stream流来把数组收集为List集合，这也是比较推荐的做法。\",\"还有一种方法是使用Arrays.toList()得到的集合放到new ArrayList()的构造函数中，这样就可以得到一个完整的ArrayList对象了。\",\"List转数组：\",\"可以调用集合的toArray(T[] array)方法，可以传入一个类型一致、长度为0的空数组(这里只是为了说明返回的类型起到了一个模板的作用，0是为了节省空间)。如果不传递参数那么返回的则是Object类型的数组。\"]},\"185\":{\"h\":\"数组调用Arrays.toList()转换List之后修改数组会影响List吗？\",\"t\":[\"会影响List的。\",\"这个我曾经看过Arrays.toList()的源码，在调用该方法之后内部返回了一个ArrayList对象，但是这个ArrayList是Arrays类的内部类，该类的构造方法中接收一个数组，然后会判断数组是否是空，如果不是空则会直接把该数组赋值给内部的数组。它们指向的是同一个地址，所以修改数组会影响到使用该方法得到的List。\"]},\"186\":{\"h\":\"List用toArray转数组后，如果修改了List内容，数组受影响吗？\",\"t\":[\"list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响\"]},\"187\":{\"h\":\"ArrayList与LinkedList的区别\",\"t\":[\"是否保证线程安全：ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；\",\"如果需要保证线程安全，有两种解决方案：\",\"在方法内部使用，局部变量可以保证线程安全的。\",\"使用线程安全的ArrayList和LinkedList：使用Collections.synchronizedList(new ArrayLisy<>()); 把List包装为线程安全的List。\",\"底层数据结构：ArrayList 底层使用的是 Object 数组；LinkedList 底层使用的是 双向链表 数据结构\",\"插入和删除是否受元素位置的影响：\",\"ArrayList 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行add(E e)方法的时候， ArrayList 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（add(int index, E element)），时间复杂度就为 O(n)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。\",\"LinkedList 采用链表存储，所以在头尾插入或者删除元素不受元素位置的影响（add(E e)、addFirst(E e)、addLast(E e)、removeFirst()、 removeLast()），时间复杂度为 O(1)，如果是要在指定位置 i 插入和删除元素的话（add(int index, E element)，remove(Object o),remove(int index)）， 时间复杂度为 O(n) ，因为需要先移动到指定位置再插入和删除。\",\"是否支持快速随机访问：LinkedList 不支持高效的随机元素访问，而 ArrayList（实现了 RandomAccess 接口） 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。\",\"内存空间占用：ArrayList 的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。\"]},\"188\":{\"h\":\"说一下 HashMap 的实现原理？\",\"t\":[\"HashMap的数据结构： 底层使用hash表数据结构，即数组和链表或红黑树\",\"当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标\",\"存储时，如果出现hash值相同的key，此时有两种情况。 a. 如果key相同，则覆盖原始值； b. 如果key不同（出现冲突），则将当前的key-value放入链表或红黑树中\",\"获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值\",\"image-20230906160611492\"]},\"189\":{\"h\":\"HashMap的jdk1.7和jdk1.8有什么区别\",\"t\":[\"JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。\",\"jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于为8时 并且 数组长度达到64时，将链表转化为红黑树，以减少搜索时间。\"]},\"190\":{\"h\":\"HashMap 的 put 方法的具体流程\",\"t\":[\"image-20230906163433311\",\"判断键值对数组table是否为空或为null，否则执行resize()进行扩容（初始化长度为16的数组）\",\"根据键值key计算hash值得到数组索引\",\"判断table[i]==null，条件成立，直接新建节点添加\",\"如果table[i]==null ,不成立 4.1 判断table[i]的首个元素是否和key一样，如果相同直接覆盖value 4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对 4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value\",\"插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。\"]},\"191\":{\"h\":\"HashMap的扩容机制\",\"t\":[\"在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是达到了扩容阈值（数组长度 *0.75）\",\"每次扩容的时候，都是扩容之前容量的2倍；\",\"扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中没有hash冲突的节点，则直接使用 e.hash & (newCap - 1) 计算新数组的索引位置\",\"如果是红黑树，走红黑树的添加\",\"如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上\"]},\"192\":{\"h\":\"hashMap 的寻址算法\",\"t\":[\"首先获取key的hashCode值，然后右移16位 异或运算 原来的hashCode值，主要作用就是使原来的hash值更加均匀，减少hash冲突\",\"(n-1)&hash : 得到数组中的索引，代替取模，性能更好，数组长度必须是2的n次幂\"]},\"193\":{\"h\":\"为何 HashMap 的数组长度一定是 2 的次幂？\",\"t\":[\"计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模\",\"扩容时重新计算索引效率更高： hash & oldCap == 0 的元素留在原来位置，否则新位置 = 旧位置 + oldCap\"]},\"194\":{\"h\":\"HashSet 与 HashMap 的区别\",\"t\":[\"(1)HashSet实现了Set接口, 仅存储对象; HashMap实现了 Map接口, 存储的是键值对.\",\"(2)HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为同一个Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.\"]},\"195\":{\"h\":\"并发编程篇\",\"t\":[\"image-20230906170843331\"]},\"196\":{\"h\":\"线程的基础知识：\"},\"197\":{\"h\":\"什么是线程和进程?\",\"t\":[\"进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。\",\"在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。\",\"线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。\",\"线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。\",\"区别：\",\"进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务\",\"不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间\",\"线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)\"]},\"198\":{\"h\":\"并发与并行的区别\",\"t\":[\"并发：两个及两个以上的作业在同一 时间段 内执行。\",\"并行：两个及两个以上的作业在同一 时刻 执行。\",\"最关键的点是：是否是 同时 执行。\"]},\"199\":{\"h\":\"创建线程的方式有哪些？\",\"t\":[\"共有四种方式可以创建线程，分别是：\",\"继承Thread类、\",\"实现Runnable接口、\",\"实现Callable接口、\",\"线程池创建线程(项目中使用)\",\"package com.hm.createThread; public class MyThreadDemo01 extends Thread{ @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\" MyThread run ...\\\"); } public static void main(String[] args) { MyThreadDemo01 myThreadDemo01 = new MyThreadDemo01(); MyThreadDemo01 myThreadDemo02 = new MyThreadDemo01(); myThreadDemo01.start(); myThreadDemo02.start(); System.out.println(Thread.currentThread().getName()+\\\" MainThread run ...\\\"); } } \",\"package com.hm.createThread; public class MyThreadDemo02 implements Runnable{ @Override public void run() { System.out.println(\\\"Runnable Thread run ...\\\"); } public static void main(String[] args) { new Thread(new MyThreadDemo02()).start(); } } \",\"package com.hm.createThread; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; public class MyThreadDemo03 implements Callable<String> { @Override public String call() throws Exception { return \\\"Callable thread run ...\\\"; } public static void main(String[] args) throws ExecutionException, InterruptedException { FutureTask<String> stringFutureTask = new FutureTask<>(new MyThreadDemo03()); new Thread(stringFutureTask).start(); System.out.println(stringFutureTask.get()); } } \",\"package com.hm.createThread; import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.Executors; import java.util.concurrent.ThreadPoolExecutor; import java.util.concurrent.TimeUnit; public class MyThreadDemo04 { public static void main(String[] args) { ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(10), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); threadPoolExecutor.submit(()-> System.out.println(Thread.currentThread().getName()+\\\"Thread Pool run ...\\\")); threadPoolExecutor.shutdown(); } } \"]},\"200\":{\"h\":\"runnable 和 callable 有什么区别\",\"t\":[\"Runnable 接口run方法没有返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果\",\"Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。\",\"Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛\"]},\"201\":{\"h\":\"线程的 **run()**和 **start()**有什么区别？\",\"t\":[\"start(): 用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。start方法只能被调用一次。\",\"run(): 封装了要被线程执行的代码，可以被调用多次。\"]},\"202\":{\"h\":\"可以直接调用 Thread 类的 run 方法吗？\",\"t\":[\"调用 start() 方法方可启动线程并使线程进入就绪状态，直接执行 run() 方法的话不会以多线程的方式执行。\"]},\"203\":{\"h\":\"说说线程包含哪些状态?\",\"t\":[\"Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：\",\"新建NEW\",\"可运行RUNNABLE\",\"阻塞BLOCKED\",\"等待WAITING\",\"时间等待TIME_WAITING\",\"终止TERMINATED\"]},\"204\":{\"h\":\"线程状态之间是如何变化的？\",\"t\":[\"image-20230906203311735\",\"创建线程对象是新建状态\",\"调用start()方法转变为可执行状态\",\"线程获取到了CPU的执行权，执行结束是终止状态\",\"在可执行状态的过程中，如果没有获取到CPU的执行权，可能会切换到其他的状态 \",\"如果没有获取到锁会进入阻塞状态，获取到锁再切换为可执行状态\",\"如果线程调用了wait()方法进入等待状态，其他线程调用notify()唤醒后切换为可执行状态\",\"如果线程调用了sleep()方法，则会进入计时等待状态，到时间后可切换为可执行状态\"]},\"205\":{\"h\":\"如何保证线程的顺序执行？\",\"t\":[\"比如说现在我们创建了3个线程分别是t1、t2、t3，我们需要保证t1、t2、t3按照顺序执行。\",\"首先最简单的方法就是在t2线程中调用t1.join()方法等待t1线程结束；在t3线程中调用t2.join()方法等待t2线程结束。\",\"package com.hm.createThread; public class OrderlyThread { public static void main(String[] args) { Thread t1 = new Thread(() -> { System.out.println(\\\"t1\\\"); }); Thread t2 = new Thread(() -> { try { // 等待t1线程死亡。 t1.join(); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\\\"t2\\\"); }); Thread t3 = new Thread(() -> { try { // 等待t2线程死亡。 t2.join(); } catch (InterruptedException e) { throw new RuntimeException(e); } System.out.println(\\\"t3\\\"); }); t1.start(); t2.start(); t3.start(); } } \"]},\"206\":{\"h\":\"notify和notifyAll有什么区别\",\"t\":[\"notify随机唤醒一个wait线程\",\"notifyAll唤醒所有的wait线程\"]},\"207\":{\"h\":\"sleep() 方法和 wait() 方法对比\",\"t\":[\"共同点：两者都可以暂停线程的执行。\",\"区别：\",\"sleep() 方法没有释放锁，而 wait() 方法释放了锁 。\",\"wait() 通常被用于线程间交互/通信，sleep()通常被用于暂停执行。\",\"wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify()或者 notifyAll() 方法。sleep()方法执行完成后，线程会自动苏醒，或者也可以使用 wait(long timeout) 超时后线程会自动苏醒。\",\"sleep() 是 Thread 类的静态本地方法，wait() 则是 Object 类的本地方法。\"]},\"208\":{\"h\":\"如何停止一个正在运行的线程？\",\"t\":[\"使用退出标志，使线程正常退出。定义一个volatile(保证变量可见性)的flag变量\",\"使用线程的stop()方法强行停止(不推荐)\",\"使用interrupt方法中断线程\"]},\"209\":{\"h\":\"线程中并发安全的问题：\"},\"210\":{\"h\":\"讲一下 synchronized 关键字的底层原理？\",\"t\":[\"回答如下：\",\"Synchronized【对象锁】采用互斥的方式让**同一时刻至多只有一个线程**能持有【对象锁】\",\"它的底层由monitor实现的，monitor是jvm级别的对象（ C++实现），线程获得锁需要使用对象（锁）关联monitor\",\"在monitor内部有三个属性，分别是owner、entrylist、waitset\",\"owner是关联的获得锁的线程，并且只能关联一个线程；\",\"entrylist关联的是处于阻塞状态的线程；\",\"waitset关联的是处于Waiting状态的线程\",\" Monitor内部具体的存储结构： Owner：存储当前**获取锁的线程**，只能有一个线程可以获取 EntryList：关联没有抢到锁的线程，处于Blocked状态的线程 WaitSet：关联调用了wait方法的线程，处于Waiting状态的线程\",\"具体的流程：\",\"代码进入synchorized代码块，先让lock（对象锁）关联的monitor，然后判断Owner是否有线程持有\",\"如果没有线程持有，则让当前线程持有，表示该线程获取锁成功\",\"如果有线程持有，则让当前线程进入entryList进行阻塞，如果Owner持有的线程已经释放了锁，在EntryList中的线程去竞争锁的持有权（非公平）\",\"如果代码块中调用了wait()方法，则会进去WaitSet中进行等待\"]},\"211\":{\"h\":\"什么是CAS？\",\"t\":[\"CAS 的全称是 Compare And Swap（比较与交换） ，用于实现乐观锁，被广泛应用于各大框架中(AbstractQueuedSynchronizer（AQS框架）AtomicXXX类)CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。\",\"CAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。\",\"原子操作 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。\",\"CAS 涉及到三个操作数：\",\"V：要更新的变量值(Var)\",\"E：预期值(Expected)\",\"N：拟写入的新值(New)\",\"举一个简单的例子：线程 A 要修改变量 i 的值为 6 ，i 原值为 1（V = 1，E=1，N=6，假设不存在 ABA 问题）。\",\"i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6 。\",\"i 与 1 进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS 操作失败。\",\"当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。\"]},\"212\":{\"h\":\"谈谈你对volatile关键字的理解\",\"t\":[\"一旦一个共享变量(类的成员变量、类的静态成员变量)被volatile修饰后，那么就具备了两层语义：\",\"保证线程之间的可见性\",\"禁止进行指令重排序\",\"保证线程之间的可见性：\",\"用volatile关键字修饰的共享变量，能够防止编译器的优化发生，让一个线程对共享变量的修改对另一个线程可见\",\"禁止进行指令重排序：\",\"用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果\"]},\"213\":{\"h\":\"什么是AQS？\",\"t\":[\"AQS是多线程中的抽象队列同步器。是一种锁机制，它是做为一个基础框架使用的，像是ReentrantLock、Semaphore、CountDownLatch都是基于AQS实现的\",\"AQS内部维护了一个先进先出的双向队列，队列中存储排队的线程\",\"在AQS内部还有一个属性status，这个status代表是否有锁的状态，默认是0(无锁状态)，如果队列中的某一个线程修改为1，则当前线程就获取到了资源，其他线程进入FIFO队列中等待\",\"对status的修改操作使用的是CAS，保证了多个线程修改的情况下的原子性\",\"image-20230908094138355\"]},\"214\":{\"h\":\"ReentrantLock的实现原理\",\"t\":[\"ReentrantLock翻译过来是可重入锁，一个线程调用lock获取锁之后再次调用lock不会阻塞，相对于synchronized它具备以下特点：\",\"可中断\",\"可以设置超时时间\",\"可以设置公平锁\",\"支持多个条件变量\",\"与synchronized一样，都支持重入\",\"ReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现 类似。\"]},\"215\":{\"h\":\"synchronized和Lock有什么区别？\",\"t\":[\"语法层面：\",\"synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现\",\"Lock 是接口，源码由 jdk 提供，用 java 语言实现\",\"使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁\",\"功能层面：\",\"二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能\",\"Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量\",\"Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock\",\"性能层面：\",\"在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁\",\"在竞争激烈时，Lock 的实现通常会提供更好的性能\"]},\"216\":{\"h\":\"死锁产生的条件是什么？\",\"t\":[\"死锁：一个线程需要同时获取多把锁，这时就容易发生死锁\",\"例如：\",\"t1 线程获得A对象锁，接下来想获取B对象的锁\",\"t2 线程获得B对象锁，接下来想获取A对象的锁\",\"怎么诊断出程序是否出现了死锁？\",\"使用jdk自带的工具：jps和 jstack\",\"首先使用jps查看java线程id\",\"使用jstack -l xxx 查看日志检查死锁\"]},\"217\":{\"h\":\"聊一下ConcurrentHashMap\",\"t\":[\"jdk1.7：\",\"存储结构：\",\"image-20230908111512527\",\"提供了一个segment数组，在初始化ConcurrentHashMap 的时候可以指定数组的长度，默认是16，一旦初始化之后中间不可扩容\",\"在每个segment中都可以挂一个HashEntry数组，数组里面可以存储具体的元素，HashEntry数组是可以扩容的\",\"在HashEntry存储的数组中存储的元素，如果发生冲突，则可以挂单向链表\",\"存储流程：\",\"image-20230908112552188\",\"先去计算key的hash值，然后确定segment数组下标\",\"再通过hash值确定hashEntry数组中的下标存储数据\",\"在进行操作数据的之前，会先判断当前segment对应下标位置是否有线程进行操作，为了线程安全使用的是ReentrantLock进行加锁，如果获取锁是被会使用cas自旋锁进行尝试\",\"jdk1.8：\",\"在JDK1.8中，放弃了Segment臃肿的设计，数据结构跟HashMap的数据结构是一样的：数组+红黑树+链表\",\"采用 CAS + Synchronized来保证并发安全进行实现\",\"CAS控制数组节点的添加\",\"synchronized只锁定当前链表或红黑二叉树的首节点，只要hash不冲突，就不会产生并发的问题 , 效率得到提升\",\"image-20230908113146272\"]},\"218\":{\"h\":\"线程池的内容：\"},\"219\":{\"h\":\"说一下线程池的核心参数（线程池的执行原理知道吗？）\",\"t\":[\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) ; \",\"corePoolSize 核心线程\",\"maximumPoolSize 最大有多少个线程 = (核心线程+临时线程)\",\"keepAliveTime 生存时间 - 临时线程的生存时间，生存时间内没有新任务，此线程资源会释放\",\"unit 时间单位 - 临时线程的生存时间单位，如秒、毫秒等\",\"workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建临时线程执行任务\",\"threadFactory 线程工厂 - 可以定制线程对象的创建，用于创建线程\",\"handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略\"]},\"220\":{\"h\":\"如何确定核心线程数？\",\"t\":[\"在设置核心线程数之前，需要先熟悉一些执行线程池执行任务的类型\",\"IO密集型任务\",\"一般来说：文件读写、DB读写、网络请求等\",\"推荐：核心线程数大小设置为2N+1 （N为计算机的CPU核数）\",\"CPU密集型任务\",\"一般来说：计算型代码、Bitmap转换、Gson转换等\",\"推荐：核心线程数大小设置为N+1 （N为计算机的CPU核数）\"]},\"221\":{\"h\":\"ThreadLocal 有什么用？\",\"t\":[\"ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。\",\"如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\"]},\"222\":{\"h\":\"ThreadLocal 内存泄露问题是怎么导致的？\",\"t\":[\"ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，而 value 是强引用。所以，如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。\",\"这样一来，ThreadLocalMap 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap 实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。使用完 ThreadLocal方法后最好手动调用remove()方法\",\"弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。\"]},\"223\":{\"h\":\"面试海岛\",\"t\":[\"提示\",\"征服面试海岛!\",\"该章节目前共有：\",\"面试总结\",\"提示\",\"正在不断完善中...\"]},\"224\":{\"h\":\"JDBC\"},\"225\":{\"h\":\"JDBC简介\",\"t\":[\"JDBC就是使用java语言操作关系型数据库的一套API\",\"全称（Java DataBase Connectivity）Java数据库连接\",\"同一套Java代码操作不同的关系型数据库\",\"sun公司通过Java代码写了一套标准接口 JDBC ，关系型数据库想要被java操作就必须自己去实现java写的JDBC接口，于是关系型数据库都自己实现了JDBC接口又称为驱动（例如MySQL驱动，Oracle驱动，DB2驱动）jar包。\",\"JDBC的好处：各个数据库厂商使用相同的接口，java代码不需要针对不同的数据库分别开发，可以随时替换底层数据库，访问数据库的java代码基本不变\",\"image-20220813181127793\"]},\"226\":{\"h\":\"JDBC快速入门\",\"t\":[\"旧版MySQL的url和driver的写法\",\"url = jdbc:mysql://localhost:3306/user?useUnicode=true&characterEncoding=utf8 driver = com.mysql.jdbc.Driver \",\"MySQL8.x新版本的url和driver的写法\",\"url = jdbc:mysql://localhost:3306/user?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=false drive = com.mysql.cj.jdbc.Driver \",\"注意：新版mysql驱动的url必须设置时区，即serverTimezone=UTC\",\"package com.JDBC; import java.sql.Connection; import java.sql.DriverManager; import java.sql.Statement; /** * JDBC的快速入门 */ public class JDBCDemo1 { public static void main(String[] args) throws Exception { //1、注册驱动 Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\"); //2、获取连接 String url = \\\"jdbc:mysql://localhost:3306/db2\\\"; String username = \\\"root\\\"; String password = \\\"12345678\\\"; Connection connection = DriverManager.getConnection(url, username, password); //3、定义sql语句 String sql = \\\"update emp set age = 22 where id = 1\\\"; //4、获取执行sql的对象 Statement Statement statement = connection.createStatement(); //5、执行sql int count = statement.executeUpdate(sql); //6、处理结果 System.out.println(\\\"受影响的行数：\\\" + count); //7、释放资源 statement.close(); connection.close(); } } \"]},\"227\":{\"h\":\"JDBC-API详解\"},\"228\":{\"h\":\"DriverManager工具类\",\"t\":[\"DriverManager（驱动管理类）作用： \",\"注册驱动\",\"获取数据库连接\",\"作用：\",\"注册驱动\",\"Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\");//MySQL5之后就可以不用写这行注册驱动代码了 \",\"提示：MySQL5之后就可以不用写这行注册驱动代码了，自动加载jar包中的META-INF/services/java.sql.Driver文件中的驱动类\",\"获取连接\",\"DriverManager.getConnection(url, username, password);\",\"参数一：URL：连接路径\",\"参数二：username：用户名\",\"参数三：password：密码\"]},\"229\":{\"h\":\"Connection\",\"t\":[\"Connection作用： \",\"获取执行sql的对象\",\"管理事务\",\"获取执行SQL的对象\",\"执行普通的SQL对象\",\"Statement createStatement() \",\"预编译SQL的执行SQL对象：防止SQL注入(注意要在url后面加上&useServerPrepStmts=true)\",\"PreparedStatement prepareStatement(sql) \",\"执行存储过程的对象\",\"CallableStatement prepareCall(sql) \",\"事务管理\",\"MySQL事务管理\",\"开启事务：begin 提交事务：commit 回滚事务：rollback MySQL默认自动提交事务 \",\"JDBC事务管理：Connection接口中定义了3个对应的方法\",\"开启事务：setAutoCommit(boolean autoCommit):true为自动提交;false为手动提交 提交事务：commit() 回滚事务：rollback() \",\"package com.JDBC; import java.sql.Connection; import java.sql.DriverManager; import java.sql.Statement; /** * JDBC的快速入门 */ public class JDBCDemo2 { public static void main(String[] args) throws Exception { //1、注册驱动 //Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\");MySQL5之后就可以不用写这行注册驱动代码了 //2、获取连接 String url = \\\"jdbc:mysql://localhost:3306/db2\\\"; String username = \\\"root\\\"; String password = \\\"12345678\\\"; Connection connection = DriverManager.getConnection(url, username, password); //3、定义sql语句 String sql = \\\"update emp set age = 22 where id = 2\\\"; //4、获取执行sql的对象 Statement Statement statement = connection.createStatement(); try { //开启事务 connection.setAutoCommit(false); //5、执行sql int count = statement.executeUpdate(sql); //6、处理结果 System.out.println(\\\"受影响的行数：\\\" + count); //提交事务 connection.commit(); } catch (Exception e) { //回滚事务 connection.rollback(); e.printStackTrace(); } //7、释放资源 statement.close(); connection.close(); } } \"]},\"230\":{\"h\":\"Statement\",\"t\":[\"作用\",\"执行SQL语句\",\"执行SQL语句\",\"int executeUpdate(sql):执行DML、DDL语句 返回值：1.DML语句影响的行数 2.DDL语句执行成功后，执行成功也可能返回 0 ResultSet executeQuery(sql):执行DQL语句 返回值：ResultSet结果集对象 \"]},\"231\":{\"h\":\"ResultSet\",\"t\":[\"ResultSet结果集对象作用： \",\"封装了DQL查询语句的结果\",\"package com.JDBC; import java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.Statement; import java.util.ArrayList; import java.util.List; /** * JDBC的快速入门 */ public class JDBCDemo3 { public static void main(String[] args) throws Exception { //1、注册驱动 //Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\");MySQL5之后就可以不用写这行注册驱动代码了 //2、获取连接 String url = \\\"jdbc:mysql://localhost:3306/db2\\\"; String username = \\\"root\\\"; String password = \\\"12345678\\\"; Connection connection = DriverManager.getConnection(url, username, password); //3、定义sql语句 String sql = \\\"select * from tb_user;\\\"; //4、获取执行sql的对象 Statement Statement statement = connection.createStatement(); //5、执行sql ResultSet resultSet = statement.executeQuery(sql); List<User> list = new ArrayList<>(); while (resultSet.next()) { int id = resultSet.getInt(1); String name = resultSet.getString(2); String UserPassword = resultSet.getString(3); User user = new User(id, name, UserPassword); list.add(user); } //6、处理结果 System.out.println(list); //7、释放资源 statement.close(); connection.close(); } } \"]},\"232\":{\"h\":\"PreparedStatement\"},\"233\":{\"h\":\"作用\",\"t\":[\"继承Statement，也是执行SQL语句的，进行预编译的SQL语句对象\",\"作用\",\"预编译SQL语句并执行：预防SQL注入问题\",\"SQL注入\",\"SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法\",\"例如： 'or'1'='1\",\"登入案例的SQL：\",\"select * from tb_user where username = 'zhangsan' and password = '123'; -- 当我们密码输入'or'1'='1的时候，我们发现我们的SQL变成了： select * from tb_user where username = 'zhangsan' and password = ''or'1'='1'; -- 我们发现用户对SQL的语句进行了更改！就相当于密码是空或者'1'='1'，因为中间是or连接，而后者永远为true所以登入成功了 \",\"防止SQL注入：\",\"获取PreparedStatement对象\",\"//SQL语句中的参数值用？占位符替代 String sql = \\\"select * from tb_user where username = ? and password = ?\\\"; //通过Connection对象获取，并传入对应的SQL语句 PreparedStatement pstmt = conn.preparedStatement(sql); \",\"设置参数\",\"PreparedStatement对象：setXxx(参数1，参数2):给？赋值 Xxx：数据类型；如setInt（参数1，参数2） 参数： - 参数1：？的位置编号，从1开始 - 参数2：？的值 \",\"执行SQL\",\"executeUpdata();/executeQuery();//不需要再传递SQL \",\"package com.JDBC; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; /** * JDBC的快速入门 */ public class JDBCDemo4 { public static void main(String[] args) throws Exception { //1、注册驱动 //Class.forName(\\\"com.mysql.cj.jdbc.Driver\\\");MySQL5之后就可以不用写这行注册驱动代码了 //2、获取连接 String url = \\\"jdbc:mysql://localhost:3306/db2\\\"; String username = \\\"root\\\"; String password = \\\"12345678\\\"; Connection connection = DriverManager.getConnection(url, username, password); String name = \\\"李四\\\"; String password2 = \\\"'or'1'='1\\\";//再尝试SQL注入，发现登入失败 //3、定义sql语句 String sql = \\\"select * from tb_user where username = ? and password = ?;\\\"; //4、获取执行sql的对象 Statement PreparedStatement preparedStatement = connection.prepareStatement(sql); //5、替换？占位符 preparedStatement.setString(1, name); preparedStatement.setString(2, password2);//预编译会把密码自动转义为 \\\\'or\\\\'1\\\\'=\\\\'1 将敏感字符进行转义 //6、执行sql ResultSet resultSet = preparedStatement.executeQuery(); //7、结果处理 if (resultSet.next()) { System.out.println(\\\"success\\\"); } else { System.out.println(\\\"false\\\"); } //8、释放资源 resultSet.close(); preparedStatement.close(); connection.close(); } } \",\"image-20220814100647636\"]},\"234\":{\"h\":\"原理\",\"t\":[\"PreparedStatement好处 \",\"预编译SQL，性能更好\",\"防止SQL注入：将敏感字符进行转义\",\" String url = \\\"jdbc:mysql://localhost:3306/db2&useServerPrepStmts=true\\\";//开启预编译功能 \",\"PreparedStatement原理：\",\"在获取PreparedStatement对象时，将SQL语句发送给MySQL服务器进行检查，编译（这些步骤很耗时）\",\"执行时就不用再进行这些步骤了，速度很快\",\"如果SQL模板一样，则只需要进行一次检查、编译\",\"注意：要在URL后面开启预编译：加上： &useServerPrepStmts=true\"]},\"235\":{\"h\":\"数据库连接池\"},\"236\":{\"h\":\"简介\",\"t\":[\"数据库连接池是一个容器，负责分配，管理数据库连接（Connection）\",\"它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个\",\"释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接连接而引起的数据库连接遗漏\",\"好处 \",\"资源重用\",\"提升系统响应速度\",\"避免数据库连接遗漏\"]},\"237\":{\"h\":\"数据库连接池的实现\",\"t\":[\"标准接口：DataSource\",\"官方（SUN）提供的数据库连接池的标准接口，由第三方组织实现此接口\",\"功能：获取连接\",\"Connection getConnection() \",\"常见的数据库连接池有：\",\"DBCP\",\"C3P0\",\"Druid\",\"Druid(德鲁伊)\",\"Druid连接池是阿里巴巴开源的数据库连接池项目\",\"功能强大，性能优秀，是java语言最好的数据库连接池之一\"]},\"238\":{\"h\":\"Druid数据库连接池\"},\"239\":{\"h\":\"使用步骤\",\"t\":[\"导入jar包 druid-1.1.12.jar\",\"定义配置文件\",\"加载配置文件\",\"获取数据库连接池对象\",\"获取连接\"]},\"240\":{\"h\":\"druid配置详解\",\"t\":[\"属性\",\"说明\",\"建议值\",\"url\",\"数据库的jdbc连接地址。一般为连接oracle/mysql。示例如下：\",\"mysql : jdbc:mysql://ip:port/dbname?option1&option2&…\",\"oracle : jdbc:oracle:thin:@ip:port:oracle_sid\",\"username\",\"登录数据库的用户名\",\"password\",\"登录数据库的用户密码\",\"initialSize\",\"启动程序时，在连接池中初始化多少个连接\",\"10-50已足够\",\"maxActive\",\"连接池中最多支持多少个活动会话\",\"maxWait\",\"程序向连接池中请求连接时,超过maxWait的值后，认为本次请求失败，即连接池\",\"100\",\"没有可用连接，单位毫秒，设置-1时表示无限等待\",\"minEvictableIdleTimeMillis\",\"池中某个连接的空闲时长达到 N 毫秒后, 连接池在下次检查空闲连接时，将\",\"见说明部分\",\"回收该连接,要小于防火墙超时设置\",\"net.netfilter.nf_conntrack_tcp_timeout_established的设置\",\"timeBetweenEvictionRunsMillis\",\"检查空闲连接的频率，单位毫秒, 非正整数时表示不进行检查\",\"keepAlive\",\"程序没有close连接且空闲时长超过 minEvictableIdleTimeMillis,则会执\",\"true\",\"行validationQuery指定的SQL,以保证该程序连接不会池kill掉,其范围不超\",\"过minIdle指定的连接个数。\",\"minIdle\",\"回收空闲连接时，将保证至少有minIdle个连接.\",\"与initialSize相同\",\"removeAbandoned\",\"要求程序从池中get到连接后, N 秒后必须close,否则druid 会强制回收该\",\"false,当发现程序有未\",\"连接,不管该连接中是活动还是空闲, 以防止进程不会进行close而霸占连接。\",\"正常close连接时设置为true\",\"removeAbandonedTimeout\",\"设置druid 强制回收连接的时限，当程序从池中get到连接开始算起，超过此\",\"应大于业务运行最长时间\",\"值后，druid将强制回收该连接，单位秒。\",\"logAbandoned\",\"当druid强制回收连接后，是否将stack trace 记录到日志中\",\"true\",\"testWhileIdle\",\"当程序请求连接，池在分配连接时，是否先检查该连接是否有效。(高效)\",\"true\",\"validationQuery\",\"检查池中的连接是否仍可用的 SQL 语句,drui会连接到数据库执行该SQL, 如果\",\"正常返回，则表示连接可用，否则表示连接不可用\",\"testOnBorrow\",\"程序 申请 连接时,进行连接有效性检查（低效，影响性能）\",\"false\",\"testOnReturn\",\"程序 返还 连接时,进行连接有效性检查（低效，影响性能）\",\"false\",\"poolPreparedStatements\",\"缓存通过以下两个方法发起的SQL:\",\"true\",\"public PreparedStatement prepareStatement(String sql)\",\"public PreparedStatement prepareStatement(String sql,\",\"int resultSetType, int resultSetConcurrency)\",\"maxPoolPrepareStatementPerConnectionSize\",\"每个连接最多缓存多少个SQL\",\"20\",\"filters\",\"这里配置的是插件,常用的插件有:\",\"stat,wall,slf4j\",\"监控统计: filter:stat\",\"日志监控: filter:log4j 或者 slf4j\",\"防御SQL注入: filter:wall\",\"connectProperties\",\"连接属性。比如设置一些连接池统计方面的配置。\",\"druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\",\"比如设置一些数据库连接属性:\",\"# 数据库连接池的配置文件 driverClassName=com.mysql.cj.jdbc.Driver url=jdbc:mysql:///db2 username=root password=12345678 # initial connection count 5 initialSize=5 # max connection 10 maxActive=10 # max wait time 3s maxWait=3000 \",\"package com.druid; import com.alibaba.druid.pool.DruidDataSourceFactory; import com.pojo.User; import javax.sql.DataSource; import java.io.FileInputStream; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.util.Properties; /** * Druid数据库连接池演示 */ public class DruidDemo1 { public static void main(String[] args) throws Exception { //1、导入jar包 //2、定义配置文件 //3、加载配置文件 Properties prop = new Properties(); prop.load(new FileInputStream(\\\"d1_JDBC/src/druid.properties\\\")); //4、获取连接池对象 DataSource dataSource = DruidDataSourceFactory.createDataSource(prop); //5、获取数据库连接 Connection Connection connection = dataSource.getConnection(); System.out.println(connection);//打印一下连接对象检查是否连接成功 //根据Uid查询用户 int Uid = 2; String sql = \\\"select * from tb_user where id = ?\\\";//SQL语句 PreparedStatement preparedStatement = connection.prepareStatement(sql);//预编译sql preparedStatement.setInt(1, Uid);//设置？占位符的参数 ResultSet resultSet = preparedStatement.executeQuery();//执行查询的sql while (resultSet.next()) { //将光标向下一行查询结果（起始光标在内容的上一行，也就是在表头） int id = resultSet.getInt(1); String name = resultSet.getString(2); String pwd = resultSet.getString(3); User user = new User(id, name, pwd); System.out.println(user); } resultSet.close(); preparedStatement.close(); connection.close(); } } \"]},\"241\":{\"h\":\"练习：完成商品品牌数据的增删改查操作\",\"t\":[\"查询：查询所有数据\",\"添加：添加品牌\",\"修改：根据id修改品牌\",\"删除：根据id删除品牌\"]},\"242\":{\"h\":\"准备环境\"},\"243\":{\"h\":\"SQL\",\"t\":[\"-- 建表sql -- 删除tb_brand表 drop table if exists tb_brand; -- 创建tb_brand表 create table tb_brand ( -- id 主键 id int primary key auto_increment, -- 品牌名称 brand_name varchar(20), -- 企业名称 company_name varchar(20), -- 排序字段 ordered int, -- 描述信息 description varchar(100), -- 状态：0：禁用 1：启用 status int ); -- 添加数据 insert into tb_brand (brand_name, company_name, ordered, description, status) values ('三只松鼠', '三只松鼠股份有限公司', 5, '好吃不上火', 0), ('华为', '华为技术有限公司', 100, '华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界', 1), ('小米', '小米科技有限公司', 50, 'are you ok', 1); SELECT * FROM tb_brand; \"]},\"244\":{\"h\":\"实体类\",\"t\":[\"根据SQL列表字段还原实体类（pojo或者叫javabean）\",\"package com.test.pojo; public class Brand { private Integer id;//商品的id private String brandName;//商品的名称 private String companyName;//公司名称 private Integer ordered;//排序 private String description;//描述 private Integer status;//开关 public Brand() { } public Brand(int id, String brandName, String companyName, int ordered, String description, int status) { this.id = id; this.brandName = brandName; this.companyName = companyName; this.ordered = ordered; this.description = description; this.status = status; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getBrandName() { return brandName; } public void setBrandName(String brandName) { this.brandName = brandName; } public String getCompanyName() { return companyName; } public void setCompanyName(String companyName) { this.companyName = companyName; } public int getOrdered() { return ordered; } public void setOrdered(int ordered) { this.ordered = ordered; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public int getStatus() { return status; } public void setStatus(int status) { this.status = status; } @Override public String toString() { return \\\"Brand{\\\" + \\\"id=\\\" + id + \\\", brandName='\\\" + brandName + '\\\\'' + \\\", companyName='\\\" + companyName + '\\\\'' + \\\", ordered=\\\" + ordered + \\\", description='\\\" + description + '\\\\'' + \\\", status=\\\" + status + '}'; } } \"]},\"245\":{\"h\":\"测试用例\",\"t\":[\"数据库连接池工具类\",\"package com.test.utils; import com.alibaba.druid.pool.DruidDataSourceFactory; import javax.sql.DataSource; import java.io.FileInputStream; import java.sql.Connection; import java.util.Properties; /** * 数据库连接池工具类 */ public class ConnectionUtils { public static Connection connection() { Connection connection = null; try { //3、加载配置文件 Properties prop = new Properties(); prop.load(new FileInputStream(\\\"src/druid.properties\\\")); //4、获取连接池对象 DataSource dataSource = DruidDataSourceFactory.createDataSource(prop); //5、获取数据库连接 Connection connection = dataSource.getConnection(); } catch (Exception e) { e.printStackTrace(); } return connection; } } \",\"增删改查业务\",\"package com.test.crud; import com.test.pojo.Brand; import com.test.utils.ConnectionUtils; import org.junit.Test; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.util.ArrayList; import java.util.List; public class TestCRUD { /** * 查询所有 */ @Test public void getAll() throws Exception { //通过数据库连接池工具类获取连接对象 Connection connection = ConnectionUtils.connection(); String sql = \\\"select * from tb_brand;\\\"; //获取预编译对象 PreparedStatement preparedStatement = connection.prepareStatement(sql); ResultSet resultSet = preparedStatement.executeQuery(); List<Brand> brands = new ArrayList<>(); while (resultSet.next()) { int id = resultSet.getInt(\\\"id\\\"); String brandName = resultSet.getString(\\\"brand_name\\\"); String companyName = resultSet.getString(\\\"company_name\\\"); int ordered = resultSet.getInt(\\\"ordered\\\"); String description = resultSet.getString(\\\"description\\\"); int status = resultSet.getInt(\\\"status\\\"); Brand brand = new Brand(id, brandName, companyName, ordered, description, status); brands.add(brand); } System.out.println(brands); preparedStatement.close(); connection.close(); } /** * 添加 * * @throws Exception */ @Test public void add() throws Exception { //模拟来自web的数据 String brandName = \\\"大米\\\";//商品的名称 String companyName = \\\"大米\\\";//公司名称 int ordered = 100;//排序 String description = \\\"好吃\\\";//描述 int status = 1;//开关 Connection connection = ConnectionUtils.connection(); String sql = \\\"insert into tb_brand (brand_name, company_name, ordered, description, status) values (?,?,?,?,?);\\\"; PreparedStatement preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, brandName); preparedStatement.setString(2, companyName); preparedStatement.setInt(3, ordered); preparedStatement.setString(4, description); preparedStatement.setInt(5, status); int count = preparedStatement.executeUpdate();//影响的行数 System.out.println(count > 0); preparedStatement.close(); connection.close(); } /** * 修改 */ @Test public void update() throws Exception { int id = 4; String brandName = \\\"测试数据\\\";//商品的名称 String companyName = \\\"大米\\\";//公司名称 int ordered = 1000;//排序 String description = \\\"好吃\\\";//描述 int status = 1;//开关 Connection connection = ConnectionUtils.connection(); String sql = \\\"update tb_brand set brand_name = ?,company_name = ?,ordered = ?, description = ?,status = ? where id = ?;\\\"; PreparedStatement preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, brandName); preparedStatement.setString(2, companyName); preparedStatement.setInt(3, ordered); preparedStatement.setString(4, description); preparedStatement.setInt(5, status); preparedStatement.setInt(6, id); int count = preparedStatement.executeUpdate();//影响的行数 System.out.println(count > 0); preparedStatement.close(); connection.close(); } @Test public void remove() throws Exception { int id = 4; Connection connection = ConnectionUtils.connection(); String sql = \\\"delete from tb_brand where id = ?;\\\"; PreparedStatement preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, id); int count = preparedStatement.executeUpdate(); System.out.println(count > 0); getAll();//查询所有 preparedStatement.close(); connection.close(); } } \"]},\"246\":{\"c\":[\"java web\"]},\"247\":{\"c\":[\"jdbc\"]},\"248\":{\"h\":\"Maven\",\"t\":[\"提示\",\"Maven是专门用于管理和构建Java项目的工具，它的主要功能有： \",\"提供了一套标准化的项目结构\",\"提供了一套标准化的构建流程（编译、测试、打包、发布...）\",\"提供了一套依赖管理机制\",\"Maven提供了一套标准化的项目结构，所有的IDE使用Maven构建的项目结构完全一样，所有IDE创建的Maven项目可以通用\",\"Maven提供了一套简单的命令来完成项目构建\",\"Maven依赖管理就是管理项目的第三方资源（jar包、插件...）\",\"image-20220814103941013\"]},\"249\":{\"h\":\"Maven简介\",\"t\":[\"Apache Maven 是一个项目管理和构建的工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档\",\"官网：https://maven.apache.org\"]},\"250\":{\"h\":\"Maven仓库\",\"t\":[\"本地仓库\",\"中央仓库：由Maven团队维护的全球唯一的仓库\",\"地址：https://repo1.maven.org/maven2/\",\"远程仓库（私服）：一般由公司团队搭建私有仓库\",\"当项目使用坐标引入对应的依赖jar包，首先会查找本地仓库中是否有对应的jar包\",\"如果有，项目会直接使用\",\"如果没有，则会去中央仓库中下载对应的jar包导入到本地仓库\",\"image-20220814105454764\"]},\"251\":{\"h\":\"Maven环境配置\",\"t\":[\"下载Maven并且配置环境变量后，打开Maven文件夹，进入到conf文件夹的setting文件进行配置\",\"本地仓库的位置\",\"<!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository <localRepository>/path/to/local/repo</localRepository> --> <localRepository>/Users/humeng/devTools/apache-maven-3.8.4/mvn_resp</localRepository> \",\"阿里云私服镜像\",\" <mirror> <id>nexus-aliyun</id> <mirrorOf>central</mirrorOf> <name>Nexus aliyun</name> <url>http://maven.aliyun.com/nexus/content/groups/public</url> </mirror> \"]},\"252\":{\"h\":\"Maven的基本使用\"},\"253\":{\"h\":\"Maven的常用命令\",\"t\":[\"compile：编译\",\"clean：清理\",\"test：测试\",\"package：打包\",\"install：安装\"]},\"254\":{\"h\":\"Maven生命周期\",\"t\":[\"Maven构建项目的时候经历了哪些事情就是生命周期\",\"Maven对项目构建的生命周期划分为3套 \",\"clean：清理工作\",\"default：核心工作，例如编译，测试，打包，安装等\",\"site：产生报告，发布站点等\",\"同一生命周期内，执行后面的命令，前面的所有命令会自动执行\",\"-------------------------------------------------->\",\"pre-clean clean post-clean\",\"-------------------------------------------------->\",\"compile test package install\",\"-------------------------------------------------->\",\"pre-site site post-site\"]},\"255\":{\"h\":\"IDEA配置Maven\",\"t\":[\"在IDEA中把Maven主路径和设置文件以及本地仓库更改为我们下载的Maven文件\",\"image-20220814110522799\"]},\"256\":{\"h\":\"Maven坐标\",\"t\":[\"什么是坐标？ \",\"Maven中坐标是资源的唯一标识\",\"使用坐标来定义项目或引入项目中需要的依赖\",\"Maven坐标的主要组成 \",\"groupId：定义当前的Maven项目隶属组织的名称（通常是域名的反写，例如：com.xxx）\",\"artifactId：定义当前Maven项目名称（通常是模块名）\",\"version：定义当前项目的版本号\"]},\"257\":{\"h\":\"依赖管理\"},\"258\":{\"h\":\"使用坐标导入jar包\",\"t\":[\"在pom.xml 中编写 < dependencies >标签\",\"在 < dependencies > 标签中 使用 < dependency > 引入坐标\",\"定义坐标的 groupId，artifactId，version\",\"点击刷新按钮，使坐标生效\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!-- 当前项目的jar包--> <groupId>com.meng</groupId> <artifactId>maven-demo</artifactId> <version>1.0-SNAPSHOT</version> <dependencies> <!-- MySQL驱动jar包--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <!-- druid数据库连接池jar包--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <!-- Junit测试jar包--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> </dependencies> </project> \"]},\"259\":{\"h\":\"依赖范围\",\"t\":[\"通过设置坐标的依赖范围（scope），可以设置对应的jar包的作用范围：编译环境、测试环境、运行环境\",\"<!-- Junit测试jar包--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> \",\"依赖范围\",\"编译classpath\",\"测试classpath\",\"运行classpath\",\"例子\",\"compile\",\"有效\",\"有效\",\"有效\",\"logback\",\"test\",\"-\",\"有效\",\"-\",\"Junit\",\"provided\",\"有效\",\"有效\",\"-\",\"servlet-api\",\"runtime\",\"-\",\"有效\",\"有效\",\"jdbc驱动\",\"system\",\"有效\",\"有效\",\"-\",\"存在本地的jar包\",\"import\",\"引入DependencyManagement\",\"引入DependencyManagement\",\"引入DependencyManagement\",\"< scope > 默认值：compile\"]},\"260\":{\"h\":\"MyBatis\"},\"261\":{\"h\":\"什么是MyBatis？\",\"t\":[\"MyBatis是一款优秀的持久层框架，用于简化JDBC开发\",\"官网：https://mybatis.org/mybatis-3/zh/index.html\"]},\"262\":{\"h\":\"持久层\",\"t\":[\"负责将数据保存到数据库的那一层代码\",\"JavaEE三层架构：表现层、业务层、持久层\",\"表现层：页面展示\",\"业务层：逻辑处理\",\"持久层：数据持久化（保存到数据库）\",\"image-20220814113823463\",\"image-20220814114048918\"]},\"263\":{\"h\":\"MyBatis快速入门\"},\"264\":{\"h\":\"查询User表中的所有数据\",\"t\":[\"创建User表，添加数据\",\"创建模块，导入坐标\",\"编写MyBatis核心配置文件 --> 替换连接信息 解决硬编码问题\",\"编写SQL映射文件 --> 统一SQL管理，解决硬编码问题\",\"编码：\",\"定义POJO类\",\"加载核心配置文件，获取SqlSessionFactory对象\",\"获取SqlSession对象，执行SQL语句\",\"释放资源\",\"配置pom.xml文件(pom.xml)\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <!-- 当前项目的jar包--> <groupId>com.meng</groupId> <artifactId>maven-demo</artifactId> <version>1.0-SNAPSHOT</version> <dependencies> <!-- MyBatis 依赖jar包--> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.9</version> </dependency> <!-- MySQL驱动jar包--> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.25</version> </dependency> <!-- druid数据库连接池jar包--> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <!-- Junit测试jar包--> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.12</version> <scope>test</scope> </dependency> <!-- logback依赖坐标--> <!-- 添加slf4j日志api --> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> <version>1.7.20</version> </dependency> <!-- 添加logback-classic依赖 --> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-classic</artifactId> <version>1.2.3</version> </dependency> <!-- 添加logback-core依赖 --> <dependency> <groupId>ch.qos.logback</groupId> <artifactId>logback-core</artifactId> <version>1.2.3</version> </dependency> </dependencies> </project> \",\"logback.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration> <!-- CONSOLE ：表示当前的日志信息是可以输出到控制台的。 --> <appender name=\\\"Console\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>[%level] %blue(%d{HH:mm:ss.SSS}) %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n</pattern> </encoder> </appender> <logger name=\\\"com.meng\\\" level=\\\"DEBUG\\\" additivity=\\\"false\\\"> <appender-ref ref=\\\"Console\\\"/> </logger> <!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF ， 默认debug <root>可以包含零个或多个<appender-ref>元素，标识这个输出位置将会被本日志级别控制。 --> <root level=\\\"DEBUG\\\"> <appender-ref ref=\\\"Console\\\"/> </root> </configuration> \",\"配置mybatis-config配置文件(mybatis-config.xml)\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <environments default=\\\"development\\\"> <environment id=\\\"development\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!-- 连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"12345678\\\"/> </dataSource> </environment> </environments> <mappers> <!-- 加载SQL的映射文件--> <mapper resource=\\\"UserMapper.xml\\\"/> </mappers> </configuration> \",\"SQL的映射文件(UserMapper.xml)\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace:名称空间 --> <mapper namespace=\\\"com.meng.MyBatisDemo\\\"> <!-- id：唯一标识 resultType:返回结果的类型（将来数据返回的是什么类型就写什么类型） --> <select id=\\\"selectAll\\\" resultType=\\\"com.meng.pojo.User\\\"> select * from tb_user; </select> </mapper> \",\"POJO(User)\",\"package com.meng.pojo; public class User { private Integer id; private String username; private String password; private String gender; private String addr; public User() { } public User(Integer id, String username, String password, String gender, String addr) { this.id = id; this.username = username; this.password = password; this.gender = gender; this.addr = addr; } public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public String getAddr() { return addr; } public void setAddr(String addr) { this.addr = addr; } @Override public String toString() { return \\\"User{\\\" + \\\"id=\\\" + id + \\\", username='\\\" + username + '\\\\'' + \\\", password='\\\" + password + '\\\\'' + \\\", gender='\\\" + gender + '\\\\'' + \\\", addr='\\\" + addr + '\\\\'' + '}'; } } \",\"MyBatisDemo.java\",\"package com.meng; import com.meng.pojo.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.InputStream; import java.util.List; /** * MyBatis的快速入门 */ public class MyBatisDemo { public static void main(String[] args) throws Exception { //1、加载MyBatis的核心配置文件，获取SqlSessionFactory对象(官网直接复制） String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); //2、获取SqlSession 对象，用它来执行sql SqlSession sqlSession = sqlSessionFactory.openSession(); //3、执行sql语句 List<User> users = sqlSession.selectList(\\\"com.meng.MyBatisDemo.selectAll\\\"); //4、打印users System.out.println(users); //5、释放资源 sqlSession.close(); } } \"]},\"265\":{\"h\":\"Mapper代理开发\",\"t\":[\"目的\",\"解决原生方式中的硬编码问题\",\"例如：\",\"//2、获取SqlSession 对象，用它来执行sql SqlSession sqlSession = sqlSessionFactory.openSession(); //3、执行sql语句 List<User> users = sqlSession.selectList(\\\"com.meng.MyBatisDemo.selectAll\\\"); \",\"通过Mapper代理可以简化成这样\",\"//3.1获取UserMapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); List<User> users = userMapper.selectAll(); \",\"简化后期执行SQL\"]},\"266\":{\"h\":\"步骤\",\"t\":[\"定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下\",\"附上一张编译打包后的图片注意文件位置和原本的位置\",\"image-20220814134849573\",\"设置SQL映射文件的namespace属性为Mapper接口的全限名\",\"在Mapper接口中定义方法，方法名就是SQL映射文件中SQL语句的id，并且保持参数类型和返回值类型一致\",\"编码：\",\"通过SQLSession的getMapper方法获取Mapper接口的代理对象\",\"调用对应的方法完成sql的执行\",\"细节：如果Mapper接口名称和SQL映射文件名称相同，并且在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载\",\"image-20220814134248084\"]},\"267\":{\"h\":\"MyBatis核心配置文件\",\"t\":[\"mybatis-config\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <configuration> <!-- 起别名，以后在Mapper映射文件中SQL语句上面的resultType返回值类型就可以不带包名了，可以直接使用返回值类型 而且不区分大小写了 --> <typeAliases> <package name=\\\"com.meng.pojo\\\"/> </typeAliases> <!-- environments：配置数据库连接环境信息，可以配置多个environment，将来使用哪个数据库可以直接修改environments的default --> <environments default=\\\"development\\\"> <!-- 开发环境的数据库--> <environment id=\\\"development\\\"> <!-- 事务的信息，以后会被Spring接管--> <transactionManager type=\\\"JDBC\\\"/> <!-- 数据源信息，以后也会被spring接管--> <dataSource type=\\\"POOLED\\\"> <!-- 连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"12345678\\\"/> </dataSource> </environment> <!-- 测试环境的数据库--> <environment id=\\\"test\\\"> <transactionManager type=\\\"JDBC\\\"/> <dataSource type=\\\"POOLED\\\"> <!-- 连接信息--> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql:///mybatis\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"12345678\\\"/> </dataSource> </environment> </environments> <mappers> <!-- 加载SQL的映射文件--> <!-- <mapper resource=\\\"com/meng/mapper/UserMapper.xml\\\"/>--> <!-- Mapper 代理方式（包扫描）--> <package name=\\\"com.meng.mapper\\\"/> </mappers> </configuration> \",\"细节：配置各个标签的时候，需要遵守前后的顺序\"]},\"268\":{\"h\":\"别名typeAliases属性\",\"t\":[\"起别名，以后在Mapper映射文件中SQL语句上面的resultType返回值类型就可以不带包名了，可以直接使用返回值类型而且不区分大小写了\",\"image-20220814141907126\",\"image-20220814142119638\"]},\"269\":{\"h\":\"结果映射\"},\"270\":{\"h\":\"resultMap标签\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- namespace:名称空间 --> <mapper namespace=\\\"com.meng.mapper.BrandMapper\\\"> <!-- id：唯一标识 resultType:返回结果的类型（将来数据返回的是什么类型就写什么类型） --> <!-- 我们发现数据库列名和实体类的名称有的不一样，显示数据为null--> <!-- 解决方案一：起别名（每次查询都要定义一次别名，不方便）--> <!-- <select id=\\\"getAll\\\" resultType=\\\"brand\\\">--> <!-- select id, brand_name as brandName, company_name as companyName, ordered, description, status--> <!-- from tb_brand;--> <!-- </select>--> <!-- 解决方案二：sql片段（不灵活）--> <!-- <sql id=\\\"brand_column\\\">--> <!-- id, brand_name as brandName, company_name as companyName, ordered, description, status--> <!-- </sql>--> <!-- <select id=\\\"getAll\\\" resultType=\\\"brand\\\">--> <!-- select--> <!-- <include refid=\\\"brand_column\\\"></include>--> <!-- from tb_brand;--> <!-- </select>--> <!--解决方案三：resultMap--> <!-- id:唯一标识 type：映射的文件类型（该实体类），支持别名 --> <resultMap id=\\\"brandResultMap\\\" type=\\\"brand\\\"> <!-- id:完成主键字段的映射 result：完成一般字段的映射 column:表的列名 property:实体列的属性名 --> <result column=\\\"brand_name\\\" property=\\\"brandName\\\"></result> <result column=\\\"company_name\\\" property=\\\"companyName\\\"></result> </resultMap> <select id=\\\"getAll\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand; </select> </mapper> \",\"image-20220814150743094\"]},\"271\":{\"h\":\"参数占位符\",\"t\":[\"参数占位符： 1. #{} :select * from tb_brand where id = ?;（会将其参数替换为？，为了防止SQL注入） 2. ${} :select * from tb_brand where id = 1;（拼SQL，存在SQL注入问题）不要使用！！ 3. 使用时机： 参数传递的时候使用: #{} 特殊字符处理（例如小于号<) 1. 转义字符 : &lt;(字符少的时候) 2. CDATA区 :<![CDATA[ < ]]> (字符多的时候) \",\"<!-- 参数占位符： 1. #{} :select * from tb_brand where id = ?;（会将其参数替换为？，为了防止SQL注入） 2. ${} :select * from tb_brand where id = 1;（拼SQL，存在SQL注入问题）不要使用！！ 3. 使用时机： 参数传递的时候使用: #{} 特殊字符处理（例如小于号<) 1. 转义字符 : &lt;(字符少的时候) 2. CDATA区 :<![CDATA[ < ]]> (字符多的时候) --> <select id=\\\"getById\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where id = #{id}; </select> \"]},\"272\":{\"h\":\"条件查询\",\"t\":[\"/** * 条件查询 * * 参数接收： * 1. 散装参数：如果方法中有多个参数（传到Mapper的映射的xml SQL文件 不知道哪个对应哪个），所以需要使用@Parma(\\\"SQL参数占位符\\\") * 2. 对象参数 * 3. map集合参数 * * @param status * @param companyName * @param brandName * @return */ List<Brand> selectByCondition(@Param(\\\"status\\\") int status, @Param(\\\"companyName\\\") String companyName, @Param(\\\"brandName\\\") String brandName); \",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where status = #{status} and company_name like #{companyName} and brand_name like #{brandName}; </select> \",\"/** * 条件查询 * * @throws Exception */ @Test public void selectByCondition() throws Exception { //接收参数 Integer status = 1; String companyName = \\\"华为\\\";//%华为% String brandName = \\\"华为\\\";//%华为% //处理参数 companyName = \\\"%\\\" + companyName + \\\"%\\\"; brandName = \\\"%\\\" + brandName + \\\"%\\\"; //1、获取SqlSessionFactory对象 String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); List<Brand> brands = brandMapper.selectByCondition(status, companyName, brandName); System.out.println(brands); sqlSession.close(); } \",\"发现存在BUG，当用户只传入一个参数的时候\",\"我们原来的SQL为\",\"select * from tb_brand where status = #{status} and company_name like #{companyName} and brand_name like #{brandName}; \",\"当只传入brandName时\",\"select * from tb_brand where status = #{status} and company_name like #{companyName} and brand_name like #{brandName}; Parameters: null,null,%华为%(String) \",\"所有我们就要使用动态的条件查询了\"]},\"273\":{\"h\":\"动态条件查询\",\"t\":[\"image-20220814160056984\",\"https://mybatis.org/mybatis-3/zh/dynamic-sql.html\",\"SQL语句随着用户的输入或外部条件的变化而变化，我们称之为 动态SQL\",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where status = #{status} and company_name like #{companyName} and brand_name like #{brandName}; </select> \",\"MyBatis对动态SQL有很强大的支持\",\"if\",\"choose(when,otherwise)\",\"trim(where,set)\",\"foreach\",\"if标签（这个时候出现了一个问题 where后可能直接连接了and 造成SQL语法错误，解决方案MyBatis提供了where标签） <select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where <if test=\\\"status != null\\\"> status = #{status} </if> <if test=\\\"companyName != null and companyName !='' \\\"> and company_name like #{companyName} </if> <if test=\\\"brandName != null and brandName != '' \\\"> and brand_name like #{brandName}; </if> </select> \",\"where标签(解决上面的SQL语法错误问题)where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。\",\"<select id=\\\"selectByCondition\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand <where> <if test=\\\"status != null\\\"> and status = #{status} </if> <if test=\\\"companyName != null and companyName !='' \\\"> and company_name like #{companyName} </if> <if test=\\\"brandName != null and brandName != '' \\\"> and brand_name like #{brandName}; </if> </where> </select> <!-- Preparing: select * from tb_brand WHERE company_name like ? --> \"]},\"274\":{\"h\":\"单条件的动态查询\",\"t\":[\"从多个条件中选择一个\",\"choose相当于switch\",\"<select id=\\\"selectByConditionSingle\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand where <choose><!-- choose相当于switch --> <when test=\\\"status != null\\\"><!--when相当于case --> status = #{status} </when> <when test=\\\"companyName != null and companyName != '' \\\"> company_name like #{companyName} </when> <when test=\\\"brandName != null and brandName != ''\\\"> brand_name like #{brandName}; </when> <otherwise><!-- 相当于default --> 1=1 </otherwise> </choose> </select> <!-- Preparing: select * from tb_brand WHERE 1=1 --> \",\"<select id=\\\"selectByConditionSingle\\\" resultMap=\\\"brandResultMap\\\"> select * from tb_brand <where><!-- 使用where标签--> <choose> <when test=\\\"status != null\\\"> status = #{status} </when> <when test=\\\"companyName != null and companyName != '' \\\"> company_name like #{companyName} </when> <when test=\\\"brandName != null and brandName != ''\\\"> brand_name like #{brandName}; </when> </choose> </where> </select> <!-- Preparing: select * from tb_brand --> \"]},\"275\":{\"h\":\"添加-MyBatis事务默认开启的，需要手动提交\",\"t\":[\"BrandMapper.java\",\"/** * 添加 */ void add(Brand brand); \",\"BrandMapper.xml\",\"<!-- 添加--> <insert id=\\\"add\\\"> insert into tb_brand (brand_name, company_name, ordered, description, status) values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status}); </insert> \",\"Test.java\",\"/** * 添加 * * @throws IOException */ @Test public void add() throws IOException { int status = 1; String companyName = \\\"测试数据\\\"; String brandName = \\\"测试数据\\\"; String description = \\\"测试数据\\\"; int ordered = 100; Brand brand = new Brand(); brand.setStatus(status); brand.setCompanyName(companyName); brand.setBrandName(brandName); brand.setDescription(description); brand.setOrdered(ordered); //1、获取SqlSessionFactory对象 String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); brandMapper.add(brand); sqlSession.commit();//提交事务!!! sqlSession.close(); } \"]},\"276\":{\"h\":\"返回添加数据的主键\",\"t\":[\"image-20220814162016102\",\"useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"\",\" <insert id=\\\"add\\\" useGeneratedKeys=\\\"true\\\" keyProperty=\\\"id\\\"> insert into tb_brand (brand_name, company_name, ordered, description, status) values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status}); </insert> \",\"image-20220814162156033\"]},\"277\":{\"h\":\"修改-动态字段\",\"t\":[\"这个例子中，set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。\",\"<update id=\\\"update\\\"> update tb_brand <set> <if test=\\\"brandName != null and brandName != '' \\\"> brand_name = #{brandName}, </if> <if test=\\\"companyName != null and companyName != '' \\\"> company_name = #{companyName}, </if> <if test=\\\"description != null and description != '' \\\"> description = #{description}, </if> <if test=\\\"ordered != null\\\"> ordered = #{ordered}, </if> <if test=\\\"status != null \\\"> status = #{status}, </if> </set> where id = #{id}; </update> \",\"/** * 修改 * * @throws IOException */ @Test public void update() throws IOException { int id = 2;//要修改的id int status = 1; String companyName = \\\"测试数据11111111\\\"; String brandName = \\\"测试数据\\\"; String description = \\\"测试数据\\\"; int ordered = 100000; Brand brand = new Brand(); brand.setId(id); brand.setStatus(status); //brand.setCompanyName(companyName); //brand.setBrandName(brandName); //brand.setDescription(description); brand.setOrdered(ordered); //1、获取SqlSessionFactory对象 String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); int count = brandMapper.update(brand); System.out.println(count); sqlSession.commit();//提交事务 sqlSession.close(); } \"]},\"278\":{\"h\":\"删除\"},\"279\":{\"h\":\"根据id删除\",\"t\":[\"<!-- 删除--> <delete id=\\\"deleteById\\\"> delete from tb_brand where id = #{id}; </delete> \",\"@Test public void deleteById() throws IOException { int id = 10;//要删除的id //1、获取SqlSessionFactory对象 String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); int count = brandMapper.deleteById(id); System.out.println(count); sqlSession.commit();//提交事务 sqlSession.close(); } \"]},\"280\":{\"h\":\"批量删除\",\"t\":[\"/** * 批量删除 * * @param ids * @return */ int deleteByIds(@Param(\\\"ids\\\") int[] ids); \",\"<!-- 批量删除--> <!-- mybatis会将数组封装成一个map集合 * 默认 ： array = 数组 * 使用 @Param注解改变map集合的默认key的名称 foreach标签中的属性 * collection ： 集合的名字（map集合） * item ：使用foreach遍历后得到的每一个元素 * separator ： 每一个元素之间的分割符\\\" , \\\" * open : 开头的符号 \\\" ( \\\" * close : 结束的符号 \\\" ) \\\" --> <delete id=\\\"deleteByIds\\\"> delete from tb_brand where id in <foreach collection=\\\"ids\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"> #{id} </foreach> </delete> \",\"@Test public void deleteByIds() throws IOException { int[] ids = {12, 13, 14, 15, 16};//要删除的id //1、获取SqlSessionFactory对象 String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper brandMapper = sqlSession.getMapper(BrandMapper.class); int count = brandMapper.deleteByIds(ids); System.out.println(count); sqlSession.commit();//提交事务 sqlSession.close(); } \",\"[DEBUG] 14:38:05.563 [main] c.m.m.B.deleteByIds - ==> Preparing: delete from tb_brand where id in ( ? , ? , ? , ? , ? ) [DEBUG] 14:38:05.586 [main] c.m.m.B.deleteByIds - ==> Parameters: 12(Integer), 13(Integer), 14(Integer), 15(Integer), 16(Integer) [DEBUG] 14:38:05.593 [main] c.m.m.B.deleteByIds - <== Updates: 5 5 [DEBUG] 14:38:05.593 [main] o.a.i.t.j.JdbcTransaction - Committing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4dbb42b7] [DEBUG] 14:38:05.594 [main] o.a.i.t.j.JdbcTransaction - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4dbb42b7] [DEBUG] 14:38:05.594 [main] o.a.i.t.j.JdbcTransaction - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4dbb42b7] [DEBUG] 14:38:05.595 [main] o.a.i.d.p.PooledDataSource - Returned connection 1304117943 to pool. \"]},\"281\":{\"h\":\"参数传递\",\"t\":[\"MyBatis接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式\",\"https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=59&spm_id_from=pageDriver&vd_source=51ea6336b76b9ea01f2d5cad2110fe0a&t=340.9\",\"单个参数：\",\"POJO类型：直接使用，属性名 和 参数占位符( #{} )名称一致\",\"Map集合：直接使用，键名 和 参数占位符名称一致\",\"Collection：也封装为Map集合，可以使用@Param注解，替换Map集合的默认的arg键名\",\"map.put(\\\"arg0\\\",collection集合)\",\"map.put(\\\"collection\\\",collection集合)\",\"List：也封装为Map集合，可以使用@Param注解，替换Map集合的默认的arg键名\",\"map.put(\\\"arg0\\\",List集合)\",\"map.put(\\\"collection\\\",List集合)\",\"map.put(\\\"List\\\",List集合)\",\"Array：也封装为Map集合 ，可以使用@Param注解，替换Map集合的默认的arg键名\",\"map.put(\\\"arg0\\\",数组)\",\"map.put(\\\"array\\\",数组)\",\"其他类型：直接使用\",\"多个参数：封装为Map集合，可以使用@Param注解，替换Map集合的默认的arg键名\",\"map.put(\\\"arg0\\\",参数1)\",\"map.put(\\\"param1\\\",参数1)\",\"map.put(\\\"arg1\\\",参数2)\",\"map.put(\\\"param2\\\",参数2)\",\"MyBatis提供了ParamNameResolver类来进行参数封装\",\"/** * 条件查询 * * 参数接收： * 1. 散装参数：如果方法中有多个参数（传到Mapper的映射的xml SQL文件 不知道哪个对应哪个），所以需要使用@Parma(\\\"SQL参数占位符\\\") * <p> * 1. 散装参数：多个参数（mybatis会把多个参数封装为Mao集合） * 封装为Map集合(底层原理） * map值为参数值，而不是@Param注解中的 * 如果不写@Param map的键是默认的[arg0,arg1,arg3...]或者[param1,param2...] * map.put(\\\"arg0\\\",status) * map.put(\\\"param1\\\",status) * <p> * map.put(\\\"arg1\\\",companyName) * map.put(\\\"param2\\\",companyName) * <p> * map.put(\\\"arg2\\\",brandName) * map.put(\\\"param3\\\",brandName) * * @param status * @param companyName * @param brandName * @return */ List<Brand> selectByCondition(@Param(\\\"status\\\") int status, @Param(\\\"companyName\\\") String companyName, @Param(\\\"brandName\\\") String brandName); \"]},\"282\":{\"h\":\"建议：\",\"t\":[\"将来 都使用 @Param 注解 来修改 Map集合中的 默认键名，并使用 修改后的名称 来获取值，这样可读性更高！\"]},\"283\":{\"h\":\"注解完成增删改查\",\"t\":[\"使用注解开发会比使用配置文件开发更方便\",\" //注解开发 @Select(\\\"select * from tb_brand;\\\") List<Brand> selectAll(); @Select(\\\"select * from tb_brand where id = #{id} ;\\\") Brand selectById(); \",\"查询：@Select\",\"添加：@Insert\",\"修改：@Update\",\"删除：@Delete\"]},\"284\":{\"h\":\"提示：\",\"t\":[\"注解完成简单功能\",\"配置文件完成复杂功能（动态SQL）\"]},\"285\":{\"h\":\"Web核心内容\",\"t\":[\"JavaEE：Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF\"]},\"286\":{\"h\":\"HTTP\",\"t\":[\"HTTP的特点 \",\"基于TCP协议：面向连接，安全\",\"基于请求-响应模型的：一次请求对应一次响应\",\"HTTP协议是无状态的协议：对于事务处理没有记忆能力，每次请求-响应都是独立的 \",\"缺点：多次请求之间不能共享数据。Java中会使用会话技术（Cookie和Session）来解决这些问题\",\"优点：速度快\"]},\"287\":{\"h\":\"HTTP-请求数据格式\",\"t\":[\"请求数据分为3部分： \",\"请求行：请求数据的第一行。其中GET表示请求方式，/ 表示请求资源路径，HTTP/1.1 表示协议版本\",\"请求头：第二行开始，格式为key : value 形式\",\"请求体：POST请求的最后一部分，存放请求参数\",\"image-20220815093322207\",\"image-20220815093443392\"]},\"288\":{\"h\":\"HTTP响应数据格式\",\"t\":[\"响应数据分为3部分 \",\"响应行：响应数据的第一行，其中HTTP/1.1表示协议版本，200表示响应状态码，OK表示状态码描述\",\"响应头：第二行开始，格式为key : value 形式\",\"响应体：最后一部分，存放数据\",\"image-20220815094326688\",\"响应状态码\",\"状态码分类\",\"说明\",\"1xx\",\"响应中——临时状态码，表示请求已接受，告诉客户端应该继续请求或者如果它已完成则忽略它\",\"2xx\",\"成功——表示请求已经被成功接收，处理完成\",\"3xx\",\"重定向——重定向到其他地方：它让客户端再发起一个请求以完成整个处理\",\"4xx\",\"客户端错误——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等\",\"5xx\",\"服务器端错误——处理发生错误，责任在服务端，如：服务端抛出异常，路由错误，HTTP版本不支持\"]},\"289\":{\"h\":\"Apache Tmocat\"},\"290\":{\"h\":\"概述\",\"t\":[\"Tomcat是Apache软件基金会的一个核心项目，是一个开源的免费的轻量级的web服务器，支持Servlet/JSP少量JavaEE规范\",\"Tomcat称为Web容器、Servlet容器。Servlet需要依赖于Tomcat才能运行\",\"官网：https://tomcat.apache.org\"]},\"291\":{\"h\":\"总结：\",\"t\":[\"web服务器的作用？ \",\"封装HTTP协议操作、开发简单\",\"可以将web项目部署到服务器中，对外提供网上浏览服务\",\"Tomcat是一个开源的免费的轻量级的web服务器，支持Servlet/JSP少量JavaEE规范也称为Web容器、Servlet容器。\"]},\"292\":{\"h\":\"IDEA中创建Maven Web项目\",\"t\":[\"image-20220815100352988\",\"使用骨架 \",\"选择web项目骨架，创建项目\",\"删除pom.xml中的多余的坐标\",\"补齐缺失的目录结构\",\"image-20220815100441716\",\"image-20220815101126341\"]},\"293\":{\"h\":\"IDEA中使用Tomcat\",\"t\":[\"将本地的Tomcat集成到IDEA中，然后进行项目部署即可\",\"image-20220815101348247\",\"Maven插件使用Tomcat\",\"pom.xml中添加Tomcat插件\",\" <build> <plugins> <!-- tomcat的插件--> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> \",\"使用Maven Helper插件快速启动项目，选中项目，右键--》Run Maven--》tomcat7：run\",\"image-20220815102432544\"]},\"294\":{\"h\":\"Servlet\",\"t\":[\"Servlet是Java提供的动态web资源开发技术\",\"Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet\"]},\"295\":{\"h\":\"快速入门\",\"t\":[\"创建 web 项目，导入Servlet 依赖坐标（注意范围scope为provided运行时无效，因为tomcat中已经自带了Servlet的jar包，防止冲突）\",\"<!-- 导入Servlet依赖坐标--> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>4.0.1</version> <scope>provided</scope> </dependency> \",\"创建：定义一个类，实现Servlet接口，并重写接口中的所有方法，并在 service 方法总共输入一句话\",\"public class ServletDemo1 implements Servlet { @Override public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException { System.out.println(\\\"servlet hello world~你好\\\"); } \",\"配置：在类上是用 @WebServlet 注解，配置该Servlet的访问路径\",\"@WebServlet(\\\"/demo1\\\")//配置访问路径 public class ServletDemo1 implements Servlet { \",\"访问：启动 Tomcat ，浏览器输入URL 访问该Servlet\",\"http://localhost:8080/tomcat-demo1/demo1 \"]},\"296\":{\"h\":\"Servlet执行流程\",\"t\":[\"image-20220815121826653\",\"Servlet由谁创建？Servlet方法由谁调用？ \",\"Servlet由web服务器创建，Servlet方法由web服务器调用\",\"服务器怎么知道Servlet中一定有service方法？ \",\"因为我们自定义的Servlet类是实现了Servlet接口并且重写其方法，而Servlet接口中有service方法\"]},\"297\":{\"h\":\"Servlet生命周期\",\"t\":[\"对象的生命周期是指一个对象从被创建到被销毁的过程\",\"Servlet运行在Servlet容器（web服务器）中，其生命周期由容器来管理，分为4个阶段：\",\"加载和实例化：默认情况下，当Servlet第一次被访问的时候，由容器创建Servlet对象（可以设置在服务器启动的时候创建对象节约第一次访问时间：@WebServlet(urlPatterns = \\\"/demo\\\",loadOnStartup = 1)默认值为-1，设置为大于等于0的数在服务器启动的时候创建Servlet对象并且执行init初始化方法，优先级0最大 ）\",\"初始化：在Servlet实例化之后（创建），容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化工作，该方法只会被调用一次\",\"请求处理：每次请求（访问url）Servlet时，Servlet容器会调用Servlet的**service()**方法对请求进行处理\",\"服务终止：当需要释放内存或者容器关闭时，容器会调用Servlet实例的**destroy()**方法完成资源的释放，在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器回收\"]},\"298\":{\"h\":\"Servlet方法介绍\",\"t\":[\"初始化方法，在Servlet对象被创建时执行，只执行一次\",\"void init(ServletConfig config) \",\"提供服务方法，每次Servlet被访问，都会调用该方法\",\"void service(ServletRequest req,ServletResponse res) \",\"销毁方法，当Servlet被销毁时，调用该方法，在内存释放或服务关闭时销毁Servlet\",\"void destroy() \",\"获取ServletConfig对象\",\"ServletConfig getServletConfig() \",\"获取Servlet信息(返回作者信息等，很少使用，可以直接返回\\\"\\\"空字符串)\",\"String getServletInfo() \"]},\"299\":{\"h\":\"Servlet体系结构\",\"t\":[\"image-20220815123839835\",\"Servlet是根接口有抽象实现类GenericServlet，这个抽象实现类又有HttpServlet抽象实现类（对HTTP协议封装的Servlet实现类）\",\"我们将来都是开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义的Servlet，会继承HttpServlet\",\"package com.meng.web; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(value = \\\"/demo2\\\") public class ServletDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"get...\\\"); } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"post...\\\"); } } \"]},\"300\":{\"h\":\"思考\",\"t\":[\"HttpServlet中为什么要根据请求方式的不同，调用不同的方法？\",\"因为Get和POST的请求消息不一样，我们需要分别的去处理\"]},\"301\":{\"h\":\"总结\",\"t\":[\"HttpServlet使用步骤：\",\"继承HttpServlet\",\"重写doGet和doPost方法\",\"HttpServlet原理\",\"获取请求方式，根据不同的请求方式，调用不同的doXxx方法\"]},\"302\":{\"h\":\"Servlet urlPattern配置\",\"t\":[\"Servlet要想被访问，必须配置其访问路径（urlPattern）\",\"一个Servlet，可以配置多个urlPattern\",\"@WebServlet(urlPatterns = { \\\" /demo1 \\\" , \\\" /demo2 \\\" } )\",\"urlPattern配置规则\",\"精确匹配\",\"目录匹配\",\"扩展名匹配\",\"任意匹配\",\"精确匹配：\",\"配置路径：@WebServlet(\\\"/user/select\\\")\",\"访问路径：localhost:8080/web-demo/user/select\",\"目录匹配：\",\"配置路径：@WebServlet(\\\"/user/*\\\")\",\"访问路径：localhost:8080/web-demo/user/aaa 或者 localhost:8080/web-demo/user/bbb\",\"扩展名匹配：\",\"配置路径：@WebServlet(\\\"*.do\\\")\",\"访问路径：localhost:8080/web-demo/aaa.do或者localhost:8080/web-demo/bbb.do\",\"任意匹配：不要配置\",\"配置路径：@WebServlet(\\\"/\\\")或者@WebServlet(\\\"/*\\\")\",\"访问路径：localhost:8080/web-demo/aaa 或者 localhost:8080/web-demo/bbb\",\"优先级：精确路径>目录路径>扩展名路径> /* > /\"]},\"303\":{\"h\":\"使用XML配置Servlet\",\"t\":[\"image-20220815124837628\"]},\"304\":{\"h\":\"Request&Response\",\"t\":[\"Request：获取请求数据\",\"Response：设置响应数据\"]},\"305\":{\"h\":\"Request\"},\"306\":{\"h\":\"Request继承体系\",\"t\":[\"ServletRequest：java提供的请求对象根接口\",\"HttpServletRequest：java提供的对Http协议封装的请求对象接口（继承1）\",\"RequestFacade：Tomcat定义的实现类（继承2）（tomcat需要解析请求数据，封装为request对象，并且创建request对象传递到service方法中\"]},\"307\":{\"h\":\"Request获取请求数据\",\"t\":[\"请求数据分为三部分：\",\"请求行：GET/reuqest-demo/req1?username=zhangsan HTTP/1.1 \",\"String getMethod()：获取请求方式：GET\",\"String getContextPath()：获取虚拟目录（项目访问路径）：/request-demo\",\"StringBuffer getRequestURL() ：获取URL(统一资源定位符)：http://localhost:8080/request-demo/req1\",\"String getRequestURI()：获取URI(统一资源标识符)：/request-demo/req1\",\"String getQueryString()：获取请求参数（GET方式）：username=zhangsan&password=123\",\"请求头： \",\"String getHeader(String name)：根据请求头名称，获取值。（user-agent：浏览器版本）\",\"请求体： \",\"ServletInputStream getInputStream()：获取字节输入流（音视频文件）\",\"BufferReader getReader()：获取字符输入流（文本）\",\"package com.meng.web; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.BufferedReader; import java.io.IOException; @WebServlet(\\\"/demo3\\\") public class ServletDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //1. **请求行**：GET/reuqest-demo/req1?username=zhangsan HTTP/1.1 // - String getMethod()：获取请求方式：GET String method = request.getMethod(); System.out.println(\\\"请求方式：\\\" + method); // - String getContextPath()：获取虚拟目录（项目访问路径）：/tomcat-demo1 String contextPath = request.getContextPath(); System.out.println(\\\"虚拟目录\\\" + contextPath); // - StringBuffer getRequestURL() ：获取URL(统一资源定位符)：http://localhost:8080/tomcat-demo1/demo3 StringBuffer url = request.getRequestURL(); System.out.println(url.toString()); // - String getRequestURI()：获取URI(统一资源标识符)：/request-demo/req1 String requestURI = request.getRequestURI(); System.out.println(requestURI); // - String getQueryString()：获取请求参数（GET方式）：username=zhangsan&password=123 String queryString = request.getQueryString(); System.out.println(queryString); //2. **请求头**： // - String getHeader(String name)：根据请求头名称，获取值。（user-agent：浏览器版本） String agent = request.getHeader(\\\"user-agent\\\"); System.out.println(agent); //3. **请求体**： // - ServletInputStream getInputStream()：获取字节输入流（音视频文件） // - BufferReader getReader()：获取字符输入流（文本） BufferedReader reader = request.getReader(); String line = reader.readLine(); System.out.println(line); } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { this.doGet(request, response); } } \"]},\"308\":{\"h\":\"Request使用通用方式获取参数\",\"t\":[\"刚刚我们发现： \",\"GET方式： \",\"String getQueryString()\",\"POST方式： \",\"BufferRead getReader(); reader.readLine();\",\"通用方式：（思考：因为GET和POST方式代码中只有一部分获取用户传输的数据不一样，其他都一样，所有我们想在doPost中写this.doGet(request,response)将来收到POST请求也让它去GET方法中，可以大大简化重复代码，所以我们要使用相同的方式去获取不同方式传输的数据 \",\"我们的想法：在doGet中写一个先获取请求方式，然后if判断是GET还是POST，如果是GET就调用request的getQueryString()方法，如果是POST就调用request的getReader()方法然后读一行reader.readLine();。\",\"其实Request已经这样做好了，而且做得更详细，它会把传进来的参数自动切割为键和值的Map集合！！而且如果一个键对应多个值，Request会判断键是否一样，如果一样会把值拼接一起形成一个数组！！！Map集合：键：字符串；值：字符串数组我们可以直接通过Request对象获取数据\",\"Request提供的获取参数的通用方法： \",\"Map<String, String[]> getParameterMap();：获取所有参数Map集合\",\"String[] getParameterValues(String name)：根据名称获取参数值（数组）\",\"String getParameter(String name)：根据名称获取参数值（单个值）\",\"package com.meng.web; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.util.Arrays; import java.util.Map; @WebServlet(\\\"/req1\\\") public class RequestDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String method = req.getMethod(); System.out.println(method); //1、获取所有参数集合 Map<String, String[]> map = req.getParameterMap(); for (String key : map.keySet()) { System.out.print(key + \\\":\\\"); String[] values = map.get(key); for (String value : values) { System.out.print(value + \\\" \\\"); } System.out.println(); } System.out.println(\\\"-------------------\\\"); //2、根据key获取参数值，数组 String[] hobbies = req.getParameterValues(\\\"hobby\\\"); System.out.println(Arrays.toString(hobbies)); System.out.println(\\\"-------------------\\\"); //3、根据key获取单个参数值 String username = req.getParameter(\\\"username\\\"); String password = req.getParameter(\\\"password\\\"); System.out.println(username); System.out.println(password); System.out.println(\\\"-------------------\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \"]},\"309\":{\"h\":\"请求参数中文乱码处理\",\"t\":[\"请求参数如果存在中文数据，则会乱码，原因：tomcat7默认的编解码字符集为ISO_8859_1\",\"解决方案：\",\"POST：设置输入流的编码\",\"//1、解决乱码:POST。POST底层是通过getReader() 字符输入流获取数据，但是tomcat默认的获取流的数据的编码是ISO-8859-1的 所以读中文数据的时候乱码 request.setCharacterEncoding(\\\"UTF-8\\\");//设置字符输入流的编码 \",\"GET：获取参数后，先通过getBytes(StandardCharsets.ISO_8859_1)编码获取参数对应的字节码数组byte[] bytes，再通过\",\"String s = new String(bytes, StandardCharsets.UTF_8);通过UTF-8将字节数组转换为字符串，解码，详细解析如下：\",\"@Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //1、解决乱码:POST。POST底层是通过getReader() 字符输入流获取数据，但是tomcat默认的获取流的数据的编码是ISO-8859-1的 所以读中文数据的时候乱码 request.setCharacterEncoding(\\\"UTF-8\\\");//设置字符输入流的编码 //2、获取username String username = request.getParameter(\\\"username\\\"); //System.out.println(username); //1、get方式，底层获取请求参数和post不一样，所以不可以使用设置字符输入流的编码 // getQueryString() 返回的是字符串 // 乱码原因：首先中文参数通过浏览器的HTTP协议发送到Tomcat中， // 而浏览器不支持中文，则会对中文的字符串做出处理，会对中文进行URL编码 // （ 浏览器数据：张三----浏览器对utf-8进行URL编码为----->%E5%BC%A0%E4%B8%89 ---传送到--> tomcat中 ） // （tomcat7对URL解码 ： %E5%BC%A0%E4%B8%89-------ISO-8859-1解码 --- 产生乱码-------> å¼ ä¸） // 解决思路：既然tomcat通过ISO_8859_1解码产生乱码，但是底层的字符编码始终没有改变 // 我们可以得到乱码的字符编码 ( getBytes(StandardCharsets.ISO_8859_1) ) 要通过StandardCharsets.ISO_8859_1进行解码获得字节编码为： // [-27, -68, -96, -28, -72, -119] 就是 张三 对应的二进制的转为十进制的编码的字符集编码utf-8（一个汉字占三个字节） // 然后再通过 new String的构造器方法把字符集：[-27, -68, -96, -28, -72, -119] 按照utf-8编码得到 张三 byte[] usernameBytes = username.getBytes(StandardCharsets.ISO_8859_1);//转换为字节数据，编码 String s = new String(usernameBytes, StandardCharsets.UTF_8);//将字节数组转换为字符串，解码 //String newUsername = CharsetsUtil.getChinese(username);自定义的一个工具类，用于解决get方式的乱码问题 System.out.println(s); } \",\"自定义了一个解决Tomcat7 的获取 Get 方式的参数乱码的工具类\",\"package com.meng.utils; import java.nio.charset.StandardCharsets; /** * 解决Get请求方式获取参数乱码的工具类！！！注意仅仅解决Get请求方式乱码 * 由于Get请求底层获取参数为getQueryString() 返回值为String字符串 * 乱码原因：首先中文参数通过浏览器的HTTP协议发送到Tomcat中， * 而浏览器不支持中文，则会对中文的字符串做出处理，会对中文进行URL编码 * （ 浏览器数据：张三----浏览器对utf-8进行URL编码为----->%E5%BC%A0%E4%B8%89 ---传送到--> tomcat中 ） * （tomcat7对URL解码 ： %E5%BC%A0%E4%B8%89-------ISO-8859-1解码 --- 产生乱码-------> å¼ ä¸） * 解决思路：既然tomcat通过ISO_8859_1解码产生乱码，但是底层的字符编码始终没有改变 * 我们可以得到乱码的字符编码 ( getBytes(StandardCharsets.ISO_8859_1) ) 要通过StandardCharsets.ISO_8859_1进行解码获得字节编码为： * [-27, -68, -96, -28, -72, -119] 就是 张三 对应的二进制的转为十进制的编码的字符集编码utf-8（一个汉字占三个字节） * 然后再通过 new String的构造器方法把字符集：[-27, -68, -96, -28, -72, -119] 按照utf-8编码得到 张三 * <p> * <p> * 由于解决Post方式请求参数乱码可以直接通过设置字符输入流的编码进行解决： * 解决乱码:POST。 * POST底层是通过getReader() 字符输入流获取数据，但是tomcat默认的获取流的数据的编码是ISO-8859-1的 所以读中文数据的时候乱码 * request.setCharacterEncoding(\\\"UTF-8\\\");//通过这行代码设置字符输入流的编码 */ public class CharsetsUtil { public static String getChinese(String s) { //通过ISO_8859_1编码获取s的字节 byte[] bytes = s.getBytes(StandardCharsets.ISO_8859_1); //直接使用utf-8对字节进行解码获取内容 return new String(bytes, StandardCharsets.UTF_8); } } \",\"Tomcat8.0 之后，已经将GET请求乱码问题解决，设置默认的解码方式为UTF-8\",\"image-20220815135721642\"]},\"310\":{\"h\":\"Request请求转发\",\"t\":[\"请求转发(forward)：一种在服务器内部的资源跳转方式（转发地址栏的url不会变，重定向url会改变，在登入的时候要使用重定向改变url地址为主页面，防止刷新的时候登入表单的重复提交）\",\"实现方式：\",\"request.getRequestDispatcher(\\\"/req4\\\").forward(request, response); \",\"请求转发资源间共享数据：使用Request对象\",\"void setAttribute(String name,Object o)：存储数据到request域中\",\"Object getAttribute(String name)：根据 key ，获取值\",\"void removeAttribute(String name)：根据 key，删除该键值对\",\"image-20220815141002875\",\"req3\",\"package com.meng.web; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; /** * 请求转发 */ @WebServlet(\\\"/req3\\\") public class RequestDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"req3......\\\"); //把要转发的数据存储到Request对象中 request.setAttribute(\\\"msg\\\", \\\"hello\\\"); //请求转发 request.getRequestDispatcher(\\\"/req4\\\").forward(request, response); } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { this.doGet(request, response); } } \",\"req4\",\"package com.meng.web; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; /** * 请求转发 */ @WebServlet(\\\"/req4\\\") public class RequestDemo4 extends HttpServlet { @Override protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { System.out.println(\\\"req4......\\\"); //获取res3的数据 Object msg = request.getAttribute(\\\"msg\\\"); System.out.println(msg); // request.removeAttribute(\\\"msg\\\");//删除共享的数据 } @Override protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { this.doGet(request, response); } } \",\"请求转发的特点： \",\"请求地址栏的路径url不发生变化\",\"只能转发到当前服务器内部资源\",\"一次请求，可以在转发的资源间使用Request对象共享数据\"]},\"311\":{\"h\":\"Response\",\"t\":[\"image-20220815141304120\",\"使用Response对象设置响应数据\",\"Response继承体系和Request继承体系基本一样 \",\"ServletResponse：java提供的响应对象根接口\",\"HttpServletResponse：java提供的对Http协议封装的响应对象接口\",\"ResponseFacade：Tomcat定义的实现类\"]},\"312\":{\"h\":\"Response设置响应数据功能介绍\",\"t\":[\"响应数据分为三部分： \",\"响应行：HTTP/1.1 200 OK \",\"void setStatus(int sc)：设置响应码\",\"响应头：Context-Type:text/html \",\"void setHeader(String name,String value)：设置响应头键值对\",\"响应体：<html><header><header/><body><body/><html/>\",\"PrintWriter getWriter()：获取字符输出流\",\"ServletOutputStream getOutputStream()：获取字节输出流\"]},\"313\":{\"h\":\"Response完成重定向\",\"t\":[\"重定向(Redirect)：一种资源跳转的方式\",\"设置状态码：302\",\"响应头：location:xxxx\",\"实现方式：\",\"resp.setStatus(302); resp.setHeader(\\\"location\\\",\\\"资源b的路径\\\") \",\"package com.meng.web.response; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\\\"/resp1\\\") public class ResponseDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"resp1...\\\"); //重定向 //1、设置响应状态码：302 //resp.setStatus(302); //2、设置响应头location //resp.setHeader(\\\"location\\\", req.getContextPath() + \\\"/resp2\\\"); //简化方式完成重定向 resp.sendRedirect(req.getContextPath() + \\\"/resp2\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \",\"package com.meng.web.response; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; @WebServlet(\\\"/resp2\\\") public class ResponseDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { System.out.println(\\\"resp2...\\\"); PrintWriter writer = resp.getWriter(); writer.write(\\\"hello\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \",\"重定向的特点：（和转发的特点完全相反）\",\"浏览器的路径地址栏url发生改变\",\"可以重定向到任意位置资源（服务器内部、外部均可）\",\"两次请求，不能在多个资源使用request共享数据\",\"路径问题：\",\"浏览器使用：需要加虚拟目录（项目的访问路径）（重定向）\",\"服务端使用：不需要加虚拟目录（转发）\",\"image-20220815141930909\",\"image-20220815142201707\"]},\"314\":{\"h\":\"Response响应字符数据\",\"t\":[\"使用：\",\"通过Response对象获取字符输入流\",\"PrintWriter writer = response.getWriter(); \",\"写数据\",\"writer.write(\\\"aaa\\\"); \",\"package com.meng.web.response; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.io.PrintWriter; /** * 设置字符数据的响应体 */ @WebServlet(\\\"/resp3\\\") public class ResponseDemo3 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1、设置响应数据格式以及字符集!!!!!!!!!!否则会乱码 resp.setContentType(\\\"text/html;charset=utf-8\\\"); //2、获取字符输出流 // resp.setHeader(\\\"content-type\\\", \\\"text/html\\\"); PrintWriter writer = resp.getWriter(); writer.write(\\\"<h1>你好<h1>\\\"); //细节：1. 输出流不需要关闭，会随着response对象销毁，由服务器关闭 // 2. 中文数据乱码：原因通过Response获取的字符字符输出流默认编码：ISO_8859_1 // resp.setContentType(\\\"text/html;charset=utf-8\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \"]},\"315\":{\"h\":\"Response响应字节数据\",\"t\":[\"使用\",\"通过Response对象获取字节输出流\",\"ServletOutputStream outputStream = response.getOutputStream(); \",\"写数据\",\"outputStream.write(字节数据); \",\"IOUtils工具类使用\",\"导入坐标\",\"<!-- commons-io依赖坐标，提供了很多对io操作的工具--> <dependency> <groupId>commons-io</groupId> <artifactId>commons-io</artifactId> <version>2.11.0</version> </dependency> \",\"使用\",\"IOUtlis.copy(输入流，输出流); \",\"package com.meng.web.response; import org.apache.commons.io.IOUtils; import javax.servlet.ServletException; import javax.servlet.ServletOutputStream; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.FileInputStream; import java.io.IOException; /** * 设置字节数据的响应体 */ @WebServlet(\\\"/resp4\\\") public class ResponseDemo4 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1、读取文件 FileInputStream fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/IMG_8484(20220301-105418).JPG\\\"); //2、获取response字节输出流 ServletOutputStream outputStream = resp.getOutputStream(); //3、完成流的copy /*byte[] buffer = new byte[1024]; int len = 0; while ((len = fileInputStream.read(buffer)) != -1) { outputStream.write(buffer, 0, len); }*/ IOUtils.copy(fileInputStream, outputStream); fileInputStream.close(); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \"]},\"316\":{\"h\":\"SqlSessionFatory工具类抽取\",\"t\":[\"问题： \",\"代码重复：工具类\",\"SqlSessionFactory 工厂只创建一次，不要重复创建（浪费资源）：静态代码块\",\"package com.meng.util; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.InputStream; public class SqlSessionFactoryUtils { private static SqlSessionFactory sqlSessionFactory; //静态代码块会随着类的加载自动执行，并且值执行一次 static { try { String resource = \\\"mybatis-config.xml\\\"; InputStream inputStream = Resources.getResourceAsStream(resource); sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } catch (Exception e) { e.printStackTrace(); } } public static SqlSessionFactory getSqlSessionFactory() { return sqlSessionFactory; } } \"]},\"317\":{\"h\":\"JSP\",\"t\":[\"概念：Java Server Pages，Java服务端页面\",\"一种动态的网站技术，其中既可以定义HTML、CSS、JS等静态内容，还可以定义Java代码的动态内容\",\"JSP = HTML + Java\",\"JSP的作用：简化开发，避免了在Servlet中直接输出HTML标签\"]},\"318\":{\"h\":\"JSP快速入门\",\"t\":[\"导入JSP坐标（范围：provided）\",\"<!-- jsp--> <dependency> <groupId>javax.servlet.jsp</groupId> <artifactId>jsp-api</artifactId> <version>2.2</version> <scope>provided</scope> </dependency> \",\"创建JSP文件\",\"编写HTML标签和Java代码\",\" <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <h1>hello jsp</h1> <% System.out.println(\\\"hello jsp\\\"); %> </body> </html> \"]},\"319\":{\"h\":\"JSP原理\",\"t\":[\"JSP本质就是一个Servlet（JSP继承HttpJspBase，而HttpJspBase又继承HttpServlet，在jsp中的_jspService里就是通过输出流把我们的jsp写出去了，简化开发）\",\"当浏览器请求hello.jsp，tomcat会把hello.jsp转换为Servlet的hello_jsp.java然后经过编译为class文件hello_jsp.class然后提供服务\",\"JSP被访问的时候，由JSP容器（tomcat）将其转换为Java文件（Servlet），由JSP容器（Tomcat）将其编译，最终对外提供服务的其实就是这个字节码文件\"]},\"320\":{\"h\":\"JSP脚本\",\"t\":[\"JSP脚本用于JSP页面内定义Java代码\",\"JSP脚本分类： \",\"<%.....%>：内容会直接放到_jspService()方法之中\",\"<%=...%>：内容会放到out.print()之中，作为out.print()的参数\",\"<%!...%>：内容会放到_jspService()方法之外，被类直接包含\",\"<%-- Created by IntelliJ IDEA. User: humeng Date: 2022/3/16 Time: 3:51 PM To change this template use File | Settings | File Templates. --%> <%@ page contentType=\\\"text/html;charset=UTF-8\\\" language=\\\"java\\\" %> <html> <head> <title>Title</title> </head> <body> <h1>hello jsp</h1> <%--jsp_service中--%> <% System.out.println(\\\"hello jsp\\\"); int i = 3; %> <%--out.print(\\\"内容\\\")--%> <%=\\\"hello\\\" + i%> <%--jsp_service方法外，成员变量，成员方法--%> <%! String name = \\\"张三\\\"; void show() { System.out.println(name); } %> </body> </html> \"]},\"321\":{\"h\":\"JSP缺点\",\"t\":[\"由于JSP页面内，既可以定义HTML标签，又可以定义Java代码，造成了以下问题： \",\"书写麻烦：特别是复杂的页面\",\"阅读麻烦\",\"复杂程度高：运行需要依赖各种环境，JRE，JSP容器，JavaEE...\",\"占内存和磁盘：JSP会自动生成 .java和 .class 文件占磁盘，运行的是 .class 文件占内存\",\"调试困难：出错后，需要找到自动生成的 .java 文件进行调试\",\"不利于团队协作：前端人员不会Java，后端人员不精HTML\",\"。。。\",\"JSP已经逐渐退出历史舞台，因为更好的技术替代了jsp：HTML+AJAX\",\"JavaWeb技术演进的过程：Servlet，JSP，Servlet+JSP，Servlet+HTML+AJAX\",\"不要直接在JSP里面写JSP代码：我们在Servlet中逻辑处理，封装数据；在JSP中获取数据，遍历展现数据\"]},\"322\":{\"h\":\"EL表达式\",\"t\":[\"Expression Language 表达式语言，用于简化 JSP 页面内的Java代码\",\"主要功能：获取数据\",\"语法：$\",\"${brands}：获取域中存储的key为brands的数据\",\"JavaWeb中的四大域对象：\",\"page：当前页面有效\",\"request：当前请求有效（ request.setAttribute(\\\"brands\\\",brands);//存储到request域中，\",\"通过转发到el-demo.jsp页面：request.getRequestDispatcher(\\\"/el-demo.jsp\\\").forward(request,response);\",\"session：当前会话有效\",\"application：当前应用有效\",\"el表达式获取数据( ${brands} )，会依次从这4个域中寻找，直到找到为止（由小到大）\"]},\"323\":{\"h\":\"JSTL标签\",\"t\":[\"JSP标准标签库，使用标签来取代JSP页面上的Java代码\",\"快速入门\",\"导入坐标\",\"<!-- jstl--> <dependency> <groupId>javax.servlet</groupId> <artifactId>jstl</artifactId> <version>1.2</version> </dependency> <dependency> <groupId>taglibs</groupId> <artifactId>standard</artifactId> <version>1.1.2</version> </dependency> \",\"在JSP页面上引入JSTL标签库\",\"<%@ taglib prefix=\\\"c\\\" uri=\\\"http://java.sun.com/jsp/jstl/core\\\" %> \",\"使用\",\"< c:if >\",\"<%-- c:if ：是来完成逻辑判断的，替换java if else --%> <c:if test=\\\"${status == 1}\\\"> <h1>启用</h1> </c:if> <c:if test=\\\"${status != 1}\\\"> <h1>禁用</h1> </c:if> \",\"< c:forEach >：相当于for循环\",\"items：被遍历的容器\",\"var：遍历产生的临时变量\",\"<c:forEach items=\\\"${brands}\\\" var=\\\"brand\\\"> <tr align=\\\"center\\\"> <td>${brand.id}</td> <td>${brand.brandName}</td> <td>${brand.companyName}</td> <td>${brand.description}</td> </tr> </c:forEach> \"]},\"324\":{\"h\":\"MVC模式和三层架构\"},\"325\":{\"h\":\"MVC\",\"t\":[\"MVC是一种分成开发的模式，其中：\",\"M：Model，业务模型，处理业务\",\"V：View，视图，界面展示\",\"C：Controller，控制器，处理请求，调用模型和视图\",\"步骤：\",\"浏览器请求访问控制器，控制器（Servlet）就要来调用模型（JavaBean：业务逻辑层和数据访问层）获取数据（从数据库查询。。。），获取数据之后控制器将数据交给视图（JSP），视图做最终的页面展示\",\"MVC好处：\",\"职责单一，互不影响\",\"有利于分工协作\",\"有利于组件重用\"]},\"326\":{\"h\":\"三层架构\",\"t\":[\"数据访问层（数据持久层）（dao/mapper) ：对数据库的CRUD基本操作（selectById，selectAll，insert，update，delete）\",\"业务逻辑层（service）：对业务逻辑的封装，组合数据访问层 层中的基本功能，形成复杂的业务逻辑功能（例如：注册：selectByName，insert）\",\"表现层（controller） ：接收请求，封装数据，调用业务逻辑层，响应数据\",\"后期框架：\",\"表现层（SpringMVC）\",\"业务逻辑层（Spring）\",\"数据访问层（MyBatis）\",\"SSM框架\"]},\"327\":{\"h\":\"会话跟踪技术\",\"t\":[\"会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束，在一次会话中可以包含多次请求和响应\",\"会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求之间共享数据\",\"HTTP协议是无状态的，每次浏览器向服务器请求时候，服务器都会视为新的请求，因此我们需要会话跟踪技术来实现会话内数据共享\",\"实现方式： \",\"客户端会话跟踪技术：Cookie\",\"服务端会话跟踪技术：Session\"]},\"328\":{\"h\":\"Cookie\",\"t\":[\"image-20220815154853163\"]},\"329\":{\"h\":\"基本使用\",\"t\":[\"Cookie：客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问\",\"Cookie基本使用：\",\"创建Cookie对象，设置数据\",\"Cookie cookie = new Cookie(\\\"key\\\",\\\"value\\\"); \",\"发送Cookie到客户端：使用response对象\",\"response.addCookie(cookie); \",\"Cookie发送到浏览器后，浏览器携带Cookie数据访问服务器的其他资源（这次会话还在）\",\"获取Cookie\",\"获取客户端携带的所有的cookie，使用request对象\",\"Cookie[] cookies = request.getCookies(); \",\"遍历数组，获取每一个Cookie对象：for\",\"遍历Cookie对象方法获取数据：\",\"cookie.getName(); cookie.getValue(); \",\"发送Cookie\",\"package com.meng.controller; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\\\"/aServlet\\\") public class AServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //发送Cookie //1、创建Cookie Cookie cookie = new Cookie(\\\"username\\\", \\\"zs\\\"); //2、发送Cookie对象 resp.addCookie(cookie); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \",\"获取Cookie\",\"package com.meng.controller; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\\\"/bServlet\\\") public class BServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //获取Cookie Cookie[] cookies = req.getCookies(); for (Cookie cookie : cookies) { if (\\\"username\\\".equals(cookie.getName())) { String name = cookie.getName(); String value = cookie.getValue(); System.out.println(name + \\\" : \\\" + value); } } } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \"]},\"330\":{\"h\":\"Cookie原理\",\"t\":[\"Cookie的实现是基于HTTP协议的 \",\"响应头：set-cookie\",\"请求头：cookie\"]},\"331\":{\"h\":\"Cookie的使用细节\",\"t\":[\"cookie的存活时间\",\"默认情况下，cookie存活在浏览器内存当中，当浏览器关闭，内存释放，则cookie被销毁\",\"setMaxAge(int seconds)：设置Cookie存活时间（单位：秒） \",\"正数：将Cookie写入到浏览器所在电脑的硬盘，持久化存储，到时间自动删除\",\"负数：默认值，cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁\",\"零：删除对应的Cookie\",\"Cookie存储中文\",\"Cookie默认不能直接存储中文，否则会报错（500）\",\"如果需要存储，则需要进行转码：URL编码\",\"//URL编码 URLEncoder.encode(value, \\\"UTF-8\\\"); //URL解码 value = URLDecoder.decode(value, \\\"utf-8\\\"); \"]},\"332\":{\"h\":\"Session\"},\"333\":{\"h\":\"基本使用\",\"t\":[\"服务端会话跟踪技术：将数据保存到服务端（由于Cookie是保存在客户端，数据会携带来写带去的所以不安全，因此我们使用Session把数据保存到服务端）\",\"JavaEE提供HttpSession接口，来实现一次会话的多次请求间数据共享功能\",\"使用：\",\"获取Session对象\",\"HttpSession session = request.getSession(); \",\"Session对象功能：\",\"void setAttribute(String name,Object o)：存储数据到session域中\",\"Object getAttribute(String name)：根据key，获取值\",\"void removeAttribute(String name)：根据key，删除该键值对\",\"package com.meng.controller.session; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import java.io.IOException; @WebServlet(\\\"/demo1\\\") public class SessionDemo1 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1、获取session对象 HttpSession session = req.getSession(); //2、存数据 session.setAttribute(\\\"username\\\", \\\"zs\\\"); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \",\"package com.meng.controller.session; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; import java.io.IOException; @WebServlet(\\\"/demo2\\\") public class SessionDemo2 extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { //1、获取session对象 HttpSession session = req.getSession(); //2、取数据 Object username = session.getAttribute(\\\"username\\\"); System.out.println(username); } @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { this.doGet(req, resp); } } \"]},\"334\":{\"h\":\"Session原理\",\"t\":[\"Session是基于Cookie实现的\",\"通过请求1获取session对象，其实session在服务端是有一个唯一的标识：id，会自动通过cookie发送到客户端浏览器（JSEEIONID=xxxxxx），当浏览器发送请求2的时候，会把JSESSIONID=xxxxxxx发送给服务端，根据id找对应的session，如果有该session对象直接使用，如果没有会创建session对象\",\"image-20220815160423990\"]},\"335\":{\"h\":\"Session的使用细节\",\"t\":[\"image-20220815161059845\",\"Session的钝化、活化\",\"服务器重启后，Session中的数据是否还在？（在） \",\"钝化：在服务器正常关闭后，tomcat会自动将session数据写入到硬盘文件中去\",\"活化：再次启动服务器后，从文件中加载数据到session中\",\"Session销毁\",\"默认情况下，无操作，30分钟自动销毁\",\" <!-- web.xml --> <session-config> <session-timeout>30</session-timeout> </session-config> \",\"//销毁，注销账户 session.invalidate(); \"]},\"336\":{\"h\":\"小结\",\"t\":[\"Cookie和Session都是来完成一次会话内的多次请求间共享数据的\",\"区别： \",\"**存储位置：**Cookie是将数据存储在客户端，Session是将数据存储在服务端\",\"**安全性：**Cookie不安全，Session安全\",\"**数据大小：**Cookie最大3kb，Session无大小限制\",\"**存储时间：**Cookie可以长期存储，Session默认30分钟\",\"**服务器性能：**Cookie不占服务器资源，Session占用服务器资源\"]},\"337\":{\"h\":\"Filter\",\"t\":[\"概念：Filter表示过滤器，是javaWeb三大组件（Servlet、Filter、Listener）之一\",\"过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能\",\"过滤器一般完成一些通用的操作，比如权限控制、统一编码处理、敏感字符处理等等...\",\"image-20220815162357169\"]},\"338\":{\"h\":\"Filter快速入门\",\"t\":[\"image-20220815162622066\",\"package com.meng.filter; import javax.servlet.*; import javax.servlet.annotation.WebFilter; import java.io.IOException; @WebFilter(\\\"/*\\\") public class FilterDemo implements Filter { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { System.out.println(\\\"filter demo...\\\"); // 放行 chain.doFilter(request, response); } @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void destroy() { } } \"]},\"339\":{\"h\":\"Filter执行流程\",\"t\":[\"image-20220815163706765\"]},\"340\":{\"h\":\"Filter使用细节\",\"t\":[\"image-20220815164232549\",\"image-20220815164911765\",\"image-20220815165838615\"]},\"341\":{\"h\":\"Listener\",\"t\":[\"image-20220815170031879\",\"image-20220815170202341\"]},\"342\":{\"h\":\"Linux上部署各类软件\"},\"343\":{\"h\":\"注意\",\"t\":[\"下面全部的软件安装的相关流程，90%都是取自软件自身的官方网站。\",\"一个合格的程序员要有良好的信息收集能力哦\"]},\"344\":{\"h\":\"简介\",\"t\":[\"MySQL数据库管理系统（后续简称MySQL），是一款知名的数据库系统，其特点是：轻量、简单、功能丰富。\",\"MySQL数据库可谓是软件行业的明星产品，无论是后端开发、大数据、AI、运维、测试等各类岗位，基本上都会和MySQL打交道。\",\"让我们从MySQL开始，进行实战的Linux软件安装部署。\",\"本次课程分为2个版本进行安装：\",\"MySQL 5.7版本安装\",\"MySQL 8.x版本安装\",\"由于MySQL5.x和8.x各自有许多使用者，所以这两个版本我们都演示安装一遍\"]},\"345\":{\"h\":\"MySQL5.7版本在CentOS系统安装\",\"t\":[\"注意：安装操作需要root权限\",\"MySQL的安装我们可以通过前面学习的yum命令进行。\"]},\"346\":{\"h\":\"安装\",\"t\":[\"配置yum仓库\",\"# 更新密钥 rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 # 安装Mysql yum库 rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm \",\"image-20221012182514865\",\"由于MySQL并不在CentOS的官方仓库中，所以我们通过上述rpm命令：\",\"导入MySQL仓库的密钥\",\"配置MySQLQ的yum仓库\",\"使用yum安装MySQL\",\"# yum安装Mysql yum -y install mysql-community-server \",\"安装完成后，启动MySQL并配置开机自启动\",\"systemctl start mysqld # 启动 systemctl enable mysqld # 开机自启 \",\"MySQL安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理\",\"检查MySQL的运行状态\",\"systemctl status mysqld \",\"image-20221012182716598\"]},\"347\":{\"h\":\"配置\",\"t\":[\"主要配置管理员用户root的密码以及配置允许远程登录的权限。\",\"获取MySQL的初始密码\",\"# 通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码 grep 'temporary password' /var/log/mysqld.log \",\"image-20221012182744115\",\"登陆MySQL数据库系统\",\"# 执行 mysql -uroot -p # 解释 # -u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root # -p，表示使用密码登陆 # 执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库 \",\"修改root用户密码\",\"# 在MySQL控制台内执行 ALTER USER 'root'@'localhost' IDENTIFIED BY '密码'; -- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc \",\"退出MySQL控制台页面\",\"# 退出命令 exit # 或者通过快捷键退出：ctrl + d \",\"检查端口\",\"MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态\",\"netstat -anp | grep 3306 \",\"image-20221012183746802\",\"至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。\"]},\"348\":{\"h\":\"MySQL8.0版本在CentOS系统安装\",\"t\":[\"注意：安装操作需要root权限\"]},\"349\":{\"h\":\"安装\",\"t\":[\"配置yum仓库\",\"# 更新密钥 rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 # 安装Mysql8.x版本 yum库 rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm \",\"使用yum安装MySQL\",\"# yum安装Mysql yum -y install mysql-community-server \",\"安装完成后，启动MySQL并配置开机自启动\",\"systemctl start mysqld # 启动 systemctl enable mysqld # 开机自启 \",\"MySQL安装完成后，会自动配置为名称叫做：mysqld的服务，可以被systemctl所管理\",\"检查MySQL的运行状态\",\"systemctl status mysqld \"]},\"350\":{\"h\":\"配置\",\"t\":[\"主要修改root密码和允许root远程登录\",\"获取MySQL的初始密码\",\"# 通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码 grep 'temporary password' /var/log/mysqld.log \",\"登录MySQL数据库系统\",\"# 执行 mysql -uroot -p # 解释 # -u，登陆的用户，MySQL数据库的管理员用户同Linux一样，是root # -p，表示使用密码登陆 # 执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库 \",\"修改root密码\",\"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '密码'; -- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc \",\"[扩展]，配置root的简单密码\",\"我们可以给root设置简单密码，如123456.\",\"请注意，此配置仅仅是用于测试环境或学习环境的MySQL，如果是正式使用，请勿设置简单密码\",\"set global validate_password.policy=0; # 密码安全级别低 set global validate_password.length=4; # 密码长度最低4位即可 \",\"允许root远程登录，并设置远程登录密码\",\"默认情况下，root用户是不运行远程登录的，只允许在MySQL所在的Linux服务器登陆MySQL系统\",\"请注意，允许root远程登录会带来安全风险\",\"# 第一次设置root远程登录，并配置远程密码使用如下SQL命令 create user 'root'@'%' IDENTIFIED WITH mysql_native_password BY '密码!'; -- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc # 后续修改密码使用如下SQL命令 ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '密码'; \",\"退出MySQL控制台页面\",\"# 退出命令 exit # 或者通过快捷键退出：ctrl + d \",\"检查端口\",\"MySQL默认绑定了3306端口，可以通过端口占用检查MySQL的网络状态\",\"netstat -anp | grep 3306 \",\"image-20221012192303607\",\"至此，MySQL就安装完成并可用了，请妥善保存好MySQL的root密码。\"]},\"351\":{\"h\":\"简介\",\"t\":[\"Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为Web服务器的一些特有功能，如Tomcat管理和控制平台、安全域管理和Tomcat阀等。\",\"简单来说，Tomcat是一个WEB应用程序的托管平台，可以让用户编写的WEB应用程序，被Tomcat所托管，并提供网站服务。\",\"即让用户开发的WEB应用程序，变成可以被访问的网页。\"]},\"352\":{\"h\":\"安装\",\"t\":[\"Tomcat的安装非常简单，主要分为2部分：\",\"安装JDK环境\",\"解压并安装Tomcat\",\"本次安装使用Tomcat版本是：10.0.27版本，需要Java（JDK）版本最低为JDK8或更高版本\",\"使用的JDK版本是：JDK8u351版本\"]},\"353\":{\"h\":\"安装JDK环境\",\"t\":[\"下载JDK软件\",\"https://www.oracle.com/java/technologies/downloads\",\"在页面下方找到：\",\"下载jdk-8u351-linux-x64.tar.gz\",\"image-20221017163440491\",\"在弹出的页面中输入Oracle的账户密码即可下载（如无账户，请自行注册，注册是免费的）\",\"登陆Linux系统，切换到root用户\",\"通过FinalShell，上传下载好的JDK安装包\",\"image-20221017163706026\",\"创建文件夹，用来部署JDK，将JDK和Tomcat都安装部署到：/export/server 内\",\"mkdir -p /export/server \",\"解压缩JDK安装文件\",\"tar -zxvf jdk-8u351-linux-x64.tar.gz -C /export/server \",\"配置JDK的软链接\",\"ln -s /export/server/jdk1.8.0_351 /export/server/jdk \",\"配置JAVA_HOME环境变量，以及将$JAVA_HOME/bin文件夹加入PATH环境变量中\",\"# 编辑/etc/profile文件 export JAVA_HOME=/export/server/jdk export PATH=$PATH:$JAVA_HOME/bin \",\"生效环境变量\",\"source /etc/profile \",\"配置java执行程序的软链接\",\"# 删除系统自带的java程序 rm -f /usr/bin/java # 软链接我们自己安装的java程序 ln -s /export/server/jdk/bin/java /usr/bin/java \",\"执行验证：\",\"java -version javac -version \"]},\"354\":{\"h\":\"解压并部署Tomcat\",\"t\":[\"Tomcat建议使用非Root用户安装并启动\",\"可以创建一个用户：tomcat用以部署(可以有效防止服务器被黑)\",\"首先，放行tomcat需要使用的8080端口的外部访问权限\",\"CentOS系统默认开启了防火墙，阻止外部网络流量访问系统内部\",\"所以，如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行\",\"放行有2种操作方式：\",\"关闭防火墙\",\"配置防火墙规则，放行端口\",\"# 以下操作2选一即可 # 方式1：关闭防火墙 systemctl stop firewalld # 关闭防火墙 systemctl disable firewalld # 停止防火墙开机自启 # 方式2：放行8080端口的外部访问 firewall-cmd --add-port=8080/tcp --permanent # --add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效 firewall-cmd --reload # 重新载入防火墙规则使其生效 \",\"方便起见，建议同学们选择方式1，直接关闭防火墙一劳永逸\",\"防火墙的配置非常复杂，后面会视情况独立出一集防火墙配置规则的章节。\",\"以root用户操作，创建tomcat用户\",\"# 使用root用户操作 useradd tomcat # 可选，为tomcat用户配置密码 passwd tomcat \",\"下载Tomcat安装包\",\"# 使用root用户操作 wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz # 如果出现https相关错误，可以使用--no-check-certificate选项 wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz \",\"如果Linux内下载过慢，可以复制下载链接在Windows系统中使用迅雷等软件加速下载然后上传到Linux内即可\",\"解压Tomcat安装包\",\"# 使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限 tar -zxvf apache-tomcat-10.0.27.tar.gz -C /export/server \",\"创建Tomcat软链接\",\"# 使用root用户操作 ln -s /export/server/apache-tomcat-10.0.27 /export/server/tomcat \",\"修改tomcat安装目录权限\",\"# 使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配 chown -R tomcat:tomcat /export/server/*tomcat* \",\"切换到tomcat用户\",\"su - tomcat \",\"启动tomcat\",\"/export/server/tomcat/bin/startup.sh \",\"tomcat启动在8080端口，可以检查是否正常启动成功\",\"netstat -anp | grep 8080 \",\"image-20221017223814737\",\"打开浏览器，输入：\",\"http://centos:8080或http://192.168.88.130:8080\",\"使用主机名（需配置好本地的主机名映射）或IP地址访问Tomcat的WEB页面\",\"image-20221017223915498\",\"至此，Tomcat安装配置完成。\"]},\"355\":{\"h\":\"简介\",\"t\":[\"Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。\",\"同Tomcat一样，Nginx可以托管用户编写的WEB应用程序成为可访问的网页服务，同时也可以作为流量代理服务器，控制流量的中转。\",\"Nginx在WEB开发领域，基本上也是必备组件之一了。\"]},\"356\":{\"h\":\"安装\",\"t\":[\"Nginx同样需要配置额外的yum仓库，才可以使用yum安装\",\"安装Nginx的操作需要root身份\",\"安装yum依赖程序\",\"# root执行 yum install -y yum-utils \",\"手动添加，nginx的yum仓库\",\"yum程序使用的仓库配置文件，存放在：/etc/yum.repo.d内。\",\"# root执行 # 创建文件使用vim编辑 vim /etc/yum.repos.d/nginx.repo # 填入如下内容并保存退出 [nginx-stable] name=nginx stable repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true [nginx-mainline] name=nginx mainline repo baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/ gpgcheck=1 enabled=0 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true \",\"通过如上操作，我们手动添加了nginx的yum仓库\",\"通过yum安装最新稳定版的nginx\",\"# root执行 yum install -y nginx \",\"启动\",\"# nginx自动注册了systemctl系统服务 systemctl start nginx # 启动 systemctl stop nginx # 停止 systemctl status nginx # 运行状态 systemctl enable nginx # 开机自启 systemctl disable nginx # 关闭开机自启 \",\"配置防火墙放行\",\"nginx默认绑定80端口，需要关闭防火墙或放行80端口\",\"# 方式1（推荐），关闭防火墙 systemctl stop firewalld # 关闭 systemctl disable firewalld # 关闭开机自启 # 方式2，放行80端口 firewall-cmd --add-port=80/tcp --permanent # 放行tcp规则下的80端口，永久生效 firewall-cmd --reload # 重新加载防火墙规则 \",\"启动后浏览器输入Linux服务器的IP地址或主机名即可访问\",\"http://192.168.88.130 或 http://centos\",\"ps：80端口是访问网站的默认端口，所以后面无需跟随端口号\",\"显示的指定端口也是可以的比如：\",\"http://192.168.88.130:80\",\"http://centos:80\",\"至此，Nginx安装配置完成。\",\"image-20221018143113053\"]},\"357\":{\"h\":\"简介\",\"t\":[\"RabbitMQ一款知名的开源消息队列系统，为企业提供消息的发布、订阅、点对点传输等消息服务。\",\"RabbitMQ在企业开发中十分常见，课程为大家演示快速搭建RabbitMQ环境。\"]},\"358\":{\"h\":\"安装\",\"t\":[\"rabbitmq在yum仓库中的版本比较老，所以我们需要手动构建yum仓库\",\"准备yum仓库\",\"# root执行 # 1. 准备gpgkey密钥 rpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc rpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey rpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey # 2. 准备仓库文件 vim /etc/yum.repos.d/rabbitmq.repo # 填入如下内容 ## ## Zero dependency Erlang ## [rabbitmq_erlang] name=rabbitmq_erlang baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/$basearch repo_gpgcheck=1 gpgcheck=1 enabled=1 # PackageCloud's repository key and RabbitMQ package signing key gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt metadata_expire=300 [rabbitmq_erlang-source] name=rabbitmq_erlang-source baseurl=https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS repo_gpgcheck=1 gpgcheck=0 enabled=1 # PackageCloud's repository key and RabbitMQ package signing key gpgkey=https://packagecloud.io/rabbitmq/erlang/gpgkey https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt metadata_expire=300 ## ## RabbitMQ server ## [rabbitmq_server] name=rabbitmq_server baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/$basearch repo_gpgcheck=1 gpgcheck=0 enabled=1 # PackageCloud's repository key and RabbitMQ package signing key gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt metadata_expire=300 [rabbitmq_server-source] name=rabbitmq_server-source baseurl=https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS repo_gpgcheck=1 gpgcheck=0 enabled=1 gpgkey=https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt metadata_expire=300 \",\"安装RabbitMQ\",\"# root执行 yum install erlang rabbitmq-server -y \",\"Installed: erlang.x86_64 0:23.3.4.11-1.el7 rabbitmq-server.noarch 0:3.10.0-1.el7 \",\"启动\",\"# root执行 # 使用systemctl管控，服务名：rabbitmq-server systemctl enable rabbitmq-server # 开机自启 systemctl disable rabbitmq-server # 关闭开机自启 systemctl start rabbitmq-server # 启动 systemctl stop rabbitmq-server # 关闭 systemctl status rabbitmq-server # 查看状态 \",\"放行防火墙，RabbitMQ使用5672、15672、25672 3个端口\",\"# 方式1（推荐），关闭防火墙 systemctl stop firewalld # 关闭 systemctl disable firewalld # 关闭开机自启 # 方式2，放行5672 25672端口 firewall-cmd --add-port=5672/tcp --permanent # 放行tcp规则下的5672端口，永久生效 firewall-cmd --add-port=15672/tcp --permanent # 放行tcp规则下的15672端口，永久生效 firewall-cmd --add-port=25672/tcp --permanent # 放行tcp规则下的25672端口，永久生效 firewall-cmd --reload # 重新加载防火墙规则 \",\"启动RabbitMQ的WEB管理控制台\",\"rabbitmq-plugins enable rabbitmq_management \",\"添加admin用户，并赋予权限\",\"rabbitmqctl add_user admin 'Itheima66^' rabbitmqctl set_permissions -p \\\"/\\\" \\\"admin\\\" \\\".*\\\" \\\".*\\\" \\\".*\\\" rabbitmqctl set_user_tags admin administrator \",\"浏览器打开管理控制台\",\"http://192.168.88.130:15672\",\"image-20221018154823983\",\"至此，RabbitMQ已经安装完成了。\"]},\"359\":{\"h\":\"简介\",\"t\":[\"redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库。\",\"redis的特点就是：快，可以基于内存存储数据并提供超低延迟、超快的检索速度\",\"一般用于在系统中提供快速缓存的能力。\"]},\"360\":{\"h\":\"安装\",\"t\":[\"配置EPEL仓库\",\"EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。\",\"# root执行 yum install -y epel-release \",\"安装redis\",\"# root执行 yum install -y redis \",\"启动redis\",\"# root执行 # 使用systemctl管控，服务名：redis systemctl enable redis # 开机自启 systemctl disable redis # 关闭开机自启 systemctl start redis # 启动 systemctl stop redis # 关闭 systemctl status redis # 查看状态 \",\"放行防火墙，redis使用端口6379\",\"# 方式1（推荐），关闭防火墙 systemctl stop firewalld # 关闭 systemctl disable firewalld # 关闭开机自启 # 方式2，放行6379端口 firewall-cmd --add-port=6379/tcp --permanent # 放行tcp规则下的6379端口，永久生效 firewall-cmd --reload \",\"进入redis服务\",\"# 执行redis-cli [root@centos ~]# redis-cli 127.0.0.1:6379> set mykey hello OK 127.0.0.1:6379> get mykey \\\"hello\\\" 127.0.0.1:6379> \",\"至此，redis安装完成。\"]},\"361\":{\"h\":\"简介\",\"t\":[\"全文搜索属于最常见的需求，开源的 Elasticsearch （以下简称 es）是目前全文搜索引擎的首选。\",\"它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。\",\"Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。\",\"很多服务中的搜索功能，都是基于es来实现的。\"]},\"362\":{\"h\":\"安装\",\"t\":[\"添加yum仓库\",\"# root执行 # 导入仓库密钥 rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch # 添加yum源 # 编辑文件 vim /etc/yum.repos.d/elasticsearch.repo [elasticsearch-7.x] name=Elasticsearch repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md # 更新yum缓存 yum makecache \",\"安装es\",\"yum install -y elasticsearch \",\"配置es\",\"vim /etc/elasticsearch/elasticsearch.yml # 17行，设置集群名称 cluster.name: my-cluster # 23行，设置节点名称 node.name: node-1 # 56行，允许外网访问 network.host: 0.0.0.0 # 74行，配置集群master节点 cluster.initial_master_nodes: [\\\"node-1\\\"] \",\"启动es\",\"systemctl start | stop | status | enable | disable elasticsearch \",\"关闭防火墙\",\"systemctl stop firewalld systemctl disable firewalld \",\"测试\",\"浏览器打开：http://ip:9200/?pretty\",\"image-20221025085432335\"]},\"363\":{\"h\":\"介绍\",\"t\":[\"在前面，我们所学习安装的软件，都是以单机模式运行的。\",\"后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。\",\"所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。\"]},\"364\":{\"h\":\"部署\"},\"365\":{\"h\":\"配置多台Linux虚拟机\",\"t\":[\"安装集群化软件，首要条件就是要有多台Linux服务器可用。\",\"我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。\",\"首先，关机当前CentOS系统虚拟机（可以使用root用户执行shutdown来快速关机）\",\"新建文件夹\",\"image-20221025104157628\",\"文件夹起名为：虚拟机集群\",\"克隆\",\"image-20221025104131303\",\"image-20221025104312091\",\"image-20221025104329109\",\"image-20221025104345484\",\"image-20221025104414576\",\"image-20221025104427160\",\"image-20221025104432927\",\"image-20221025104446044\",\"同样的操作克隆出：node2和node3\",\"image-20221025104825204\",\"开启node1，修改主机名为node1，并修改固定ip为：192.168.88.131\",\"# 修改主机名 hostnamectl set-hostname node1 # 修改IP地址 vim /etc/sysconfig/network-scripts/ifcfg-ens33 IPADDR=\\\"192.168.88.131\\\" # 重启网卡 systemctl stop network systemctl start network # 或者直接 systemctl restart network \",\"同样的操作启动node2和node3,\",\"修改node2主机名为node2，设置ip为192.168.88.132\",\"修改node2主机名为node3，设置ip为192.168.88.133\",\"配置FinalShell，配置连接到node1、node2、node3的连接\",\"为了简单起见，建议配置root用户登录\"]},\"366\":{\"h\":\"准备主机名映射\",\"t\":[\"在Windows系统中修改hosts文件，填入如下内容：\",\"如果同学们使用MacOS系统，请：\",\"sudo su -，切换到root\",\"修改/etc/hosts文件\",\"192.168.88.131 node1 192.168.88.132 node2 192.168.88.133 node3 \",\"在3台Linux的/etc/hosts文件中，填入如下内容（3台都要添加）\",\"192.168.88.131 node1 192.168.88.132 node2 192.168.88.133 node3 \"]},\"367\":{\"h\":\"配置SSH免密登录\"},\"368\":{\"h\":\"简介\",\"t\":[\"SSH服务是一种用于远程登录的安全认证协议。\",\"我们通过FinalShell远程连接到Linux，就是使用的SSH服务。\",\"SSH服务支持：\",\"通过账户+密码的认证方式来做用户认证\",\"通过账户+秘钥文件的方式做用户认证\",\"SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：\",\"在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆\",\"或者ssh node2，将以当前用户直接登陆到node2服务器。\"]},\"369\":{\"h\":\"SSH免密配置\",\"t\":[\"后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆\",\"在每一台机器都执行：ssh-keygen -t rsa -b 4096，一路回车到底即可\",\"在每一台机器都执行：\",\"ssh-copy-id node1 ssh-copy-id node2 ssh-copy-id node3 \",\"执行完毕后，node1、node2、node3之间将完成root用户之间的免密互通\"]},\"370\":{\"h\":\"配置JDK环境\",\"t\":[\"后续的大数据集群软件，多数是需要Java运行环境的，所以我们为每一台机器都配置JDK环境。\",\"JDK配置参阅：Tomcat安装部署环节。\"]},\"371\":{\"h\":\"关闭防火墙和SELinux\",\"t\":[\"集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。\",\"在每一台机器都执行\",\"systemctl stop firewalld systemctl disable firewalld \",\"Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。\",\"SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。\",\"在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，\",\"在每一台机器都执行\",\"vim /etc/sysconfig/selinux # 将第七行，SELINUX=enforcing 改为 SELINUX=disabled # 保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统 \"]},\"372\":{\"h\":\"添加快照\",\"t\":[\"为了避免后续出现问题，在完成上述设置后，为每一台虚拟机都制作快照，留待使用。\"]},\"373\":{\"h\":\"补充命令 - scp\",\"t\":[\"后续的安装部署操作，我们将会频繁的在多台服务器之间相互传输数据。\",\"为了更加方面的互相传输，我们补充一个命令：scp\",\"scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。\",\"其主要的功能就是：在不同的Linux服务器之间，通过SSH协议互相传输文件。\",\"只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。\",\"语法：\",\"scp [-r] 参数1 参数2 - -r选项用于复制文件夹使用，如果复制文件夹，必须使用-r - 参数1：本机路径 或 远程目标路径 - 参数2：远程目标路径 或 本机路径 如： scp -r /export/server/jdk root@node2:/export/server/ 将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内 同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆） 如： scp -r node2:/export/server/jdk /export/server/ 将远程node2的jdk文件夹，复制到本机的/export/server/内 # scp命令的高级用法 cd /export/server scp -r jdk node2:`pwd`/ # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下 scp -r jdk node2:$PWD # 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下 \"]},\"374\":{\"h\":\"简介\",\"t\":[\"ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\",\"除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。\",\"Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。\"]},\"375\":{\"h\":\"安装\",\"t\":[\"Zookeeper是一款分布式的集群化软件，可以在多台服务器上部署，并协同组成分布式集群一起工作。\",\"首先，要确保已经完成了集群化环境前置准备环节的全部内容\",\"【node1上操作】下载Zookeeper安装包，并解压\",\"# 下载 wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz # 确保如下目录存在，不存在就创建 mkdir -p /export/server # 解压 tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz -C /export/server \",\"【node1上操作】创建软链接\",\"ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper \",\"【node1上操作】修改配置文件\",\"vim /export/server/zookeeper/conf/zoo.cfg tickTime=2000 # zookeeper数据存储目录 dataDir=/export/server/zookeeper/data clientPort=2181 initLimit=5 syncLimit=2 server.1=node1:2888:3888 server.2=node2:2888:3888 server.3=node3:2888:3888 \",\"【node1上操作】配置myid\",\"# 1. 创建Zookeeper的数据目录 mkdir /export/server/zookeeper/data # 2. 创建文件，并填入1 vim /export/server/zookeeper/data/myid # 在文件内填入1即可 \",\"【在node2和node3上操作】，创建文件夹\",\"mkdir -p /export/server \",\"【node1上操作】将Zookeeper 复制到node2和node3\",\"cd /export/server scp -r apache-zookeeper-3.5.9 node2:`pwd`/ scp -r apache-zookeeper-3.5.9 node3:`pwd`/ \",\"【在node2上操作】\",\"# 1. 创建软链接 ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper # 2. 修改myid文件 vim /export/server/zookeeper/data/myid # 修改内容为2 \",\"【在node3上操作】\",\"# 1. 创建软链接 ln -s /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper # 2. 修改myid文件 vim /export/server/zookeeper/data/myid # 修改内容为3 \",\"【在node1、node2、node3上分别执行】启动Zookeeper\",\"# 启动命令 /export/server/zookeeper/bin/zkServer.sh start # 启动Zookeeper \",\"【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动\",\"jps # 结果中找到有：QuorumPeerMain 进程即可 \",\"【node1上操作】验证Zookeeper\",\"/export/server/zookeeper/zkCli.sh # 进入到Zookeeper控制台中后，执行 ls / # 如无报错即配置成功 \",\"至此Zookeeper安装完成\"]},\"376\":{\"h\":\"简介\",\"t\":[\"Kafka是一款分布式的、去中心化的、高吞吐低延迟、订阅模式的消息队列系统。\",\"同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。\",\"Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。\",\"Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。\"]},\"377\":{\"h\":\"安装\",\"t\":[\"确保已经跟随前面的，安装并部署了JDK和Zookeeper服务\",\"Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper\",\"【在node1操作】下载并上传Kafka的安装包\",\"# 下载安装包 wget http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz \",\"【在node1操作】解压\",\"mkdir -p /export/server # 此文件夹如果不存在需先创建 # 解压 tar -zxvf kafka_2.12-2.4.1.tgz -C /export/server/ # 创建软链接 ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka \",\"【在node1操作】修改Kafka目录内的config目录内的server.properties文件\",\"cd /export/server/kafka/config # 指定broker的id broker.id=1 # 指定 kafka的绑定监听的地址 listeners=PLAINTEXT://node1:9092 # 指定Kafka数据的位置 log.dirs=/export/server/kafka/data # 指定Zookeeper的三个节点 zookeeper.connect=node1:2181,node2:2181,node3:2181 \",\"【在node1操作】将node1的kafka复制到node2和node3\",\"cd /export/server # 复制到node2同名文件夹 scp -r kafka_2.12-2.4.1 node2:`pwd`/ # 复制到node3同名文件夹 scp -r kafka_2.12-2.4.1 node3:$PWD \",\"【在node2操作】\",\"# 创建软链接 ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka cd /export/server/kafka/config # 指定broker的id broker.id=2 # 指定 kafka的绑定监听的地址 listeners=PLAINTEXT://node2:9092 # 指定Kafka数据的位置 log.dirs=/export/server/kafka/data # 指定Zookeeper的三个节点 zookeeper.connect=node1:2181,node2:2181,node3:2181 \",\"【在node3操作】\",\"# 创建软链接 ln -s /export/server/kafka_2.12-2.4.1 /export/server/kafka cd /export/server/kafka/config # 指定broker的id broker.id=3 # 指定 kafka的绑定监听的地址 listeners=PLAINTEXT://node3:9092 # 指定Kafka数据的位置 log.dirs=/export/server/kafka/data # 指定Zookeeper的三个节点 zookeeper.connect=node1:2181,node2:2181,node3:2181 \",\"启动kafka\",\"# 请先确保Zookeeper已经启动了 # 方式1：【前台启动】分别在node1、2、3上执行如下语句 /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties # 方式2：【后台启动】分别在node1、2、3上执行如下语句 nohup /export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties 2>&1 >> /export/server/kafka/kafka-server.log & \",\"验证Kafka启动\",\"# 在每一台服务器执行 jps \",\"image-20221025174522487\"]},\"378\":{\"h\":\"测试Kafka能否正常使用\",\"t\":[\"创建测试主题\",\"# 在node1执行，创建一个主题 /export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh --create --zookeeper node1:2181 --replication-factor 1 --partitions 3 --topic test \",\"运行测试，请在FinalShell中打开2个node1的终端页面\",\"# 打开一个终端页面，启动一个模拟的数据生产者 /export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 --topic test # 再打开一个新的终端页面，在启动一个模拟的数据消费者 /export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 --topic test --from-beginning \"]},\"379\":{\"h\":\"简介\",\"t\":[\"1）Hadoop是一个由Apache基金会所开发的分布式系统基础架构。 2）主要解决，海量数据的存储和海量数据的分析计算问题。\",\"Hadoop HDFS 提供分布式海量数据存储能力\",\"Hadoop YARN 提供分布式集群资源管理能力\",\"Hadoop MapReduce 提供分布式海量数据计算能力\"]},\"380\":{\"h\":\"前置要求\",\"t\":[\"请确保完成了集群化环境前置准备章节的内容\",\"即：JDK、SSH免密、关闭防火墙、配置主机名映射等前置操作\"]},\"381\":{\"h\":\"Hadoop集群角色\",\"t\":[\"Hadoop生态体系中总共会出现如下进程角色：\",\"Hadoop HDFS的管理角色：Namenode进程（仅需1个即可（管理者一个就够））\",\"Hadoop HDFS的工作角色：Datanode进程（需要多个（工人，越多越好，一个机器启动一个））\",\"Hadoop YARN的管理角色：ResourceManager进程（仅需1个即可（管理者一个就够））\",\"Hadoop YARN的工作角色：NodeManager进程（需要多个（工人，越多越好，一个机器启动一个））\",\"Hadoop 历史记录服务器角色：HistoryServer进程（仅需1个即可（功能进程无需太多1个足够））\",\"Hadoop 代理服务器角色：WebProxyServer进程（仅需1个即可（功能进程无需太多1个足够））\",\"Zookeeper的进程：QuorumPeerMain进程（仅需1个即可（Zookeeper的工作者，越多越好））\"]},\"382\":{\"h\":\"角色和节点分配\",\"t\":[\"角色分配如下：\",\"node1:Namenode、Datanode、ResourceManager、NodeManager、HistoryServer、WebProxyServer、QuorumPeerMain\",\"node2:Datanode、NodeManager、QuorumPeerMain\",\"node3:Datanode、NodeManager、QuorumPeerMain\",\"image-20221026202935745\"]},\"383\":{\"h\":\"安装\"},\"384\":{\"h\":\"调整虚拟机内存\",\"t\":[\"如上图，可以看出node1承载了太多的压力。同时node2和node3也同时运行了不少程序\",\"为了确保集群的稳定，需要对虚拟机进行内存设置。\",\"请在VMware中，对：\",\"node1设置4GB或以上内存\",\"node2和node3设置2GB或以上内存\",\"大数据的软件本身就是集群化（一堆服务器）一起运行的。\",\"现在我们在一台电脑中以多台虚拟机来模拟集群，确实会有很大的内存压力哦。\"]},\"385\":{\"h\":\"Zookeeper集群部署\",\"t\":[\"略\"]},\"386\":{\"h\":\"Hadoop集群部署\",\"t\":[\"下载Hadoop安装包、解压、配置软链接\",\"# 1. 下载 wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz # 2. 解压 # 请确保目录/export/server存在 tar -zxvf hadoop-3.3.0.tar.gz -C /export/server/ # 3. 构建软链接 ln -s /export/server/hadoop-3.3.0 /export/server/hadoop \",\"修改配置文件：hadoop-env.sh\",\"Hadoop的配置文件要修改的地方很多，请细心\",\"cd 进入到/export/server/hadoop/etc/hadoop，文件夹中，配置文件都在这里\",\"修改hadoop-env.sh文件\",\"此文件是配置一些Hadoop用到的环境变量\",\"这些是临时变量，在Hadoop运行时有用\",\"如果要永久生效，需要写到/etc/profile中\",\"# 在文件开头加入： # 配置Java安装路径 export JAVA_HOME=/export/server/jdk # 配置Hadoop安装路径 export HADOOP_HOME=/export/server/hadoop # Hadoop hdfs配置文件路径 export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop # Hadoop YARN配置文件路径 export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop # Hadoop YARN 日志文件夹 export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn # Hadoop hdfs 日志文件夹 export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs # Hadoop的使用启动用户配置 export HDFS_NAMENODE_USER=root export HDFS_DATANODE_USER=root export HDFS_SECONDARYNAMENODE_USER=root export YARN_RESOURCEMANAGER_USER=root export YARN_NODEMANAGER_USER=root export YARN_PROXYSERVER_USER=root \",\"修改配置文件：core-site.xml\",\"如下，清空文件，填入如下内容\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"configuration.xsl\\\"?> <!-- Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --> <!-- Put site-specific property overrides in this file. --> <configuration> <property> <name>fs.defaultFS</name> <value>hdfs://node1:8020</value> <description></description> </property> <property> <name>io.file.buffer.size</name> <value>131072</value> <description></description> </property> </configuration> \",\"配置：hdfs-site.xml文件\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"configuration.xsl\\\"?> <!-- Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --> <!-- Put site-specific property overrides in this file. --> <configuration> <property> <name>dfs.datanode.data.dir.perm</name> <value>700</value> </property> <property> <name>dfs.namenode.name.dir</name> <value>/data/nn</value> <description>Path on the local filesystem where the NameNode stores the namespace and transactions logs persistently.</description> </property> <property> <name>dfs.namenode.hosts</name> <value>node1,node2,node3</value> <description>List of permitted DataNodes.</description> </property> <property> <name>dfs.blocksize</name> <value>268435456</value> <description></description> </property> <property> <name>dfs.namenode.handler.count</name> <value>100</value> <description></description> </property> <property> <name>dfs.datanode.data.dir</name> <value>/data/dn</value> </property> </configuration> \",\"配置：mapred-env.sh文件\",\"# 在文件的开头加入如下环境变量设置 export JAVA_HOME=/export/server/jdk export HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000 export HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA \",\"配置：mapred-site.xml文件\",\"<?xml version=\\\"1.0\\\"?> <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"configuration.xsl\\\"?> <!-- Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --> <!-- Put site-specific property overrides in this file. --> <configuration> <property> <name>mapreduce.framework.name</name> <value>yarn</value> <description></description> </property> <property> <name>mapreduce.jobhistory.address</name> <value>node1:10020</value> <description></description> </property> <property> <name>mapreduce.jobhistory.webapp.address</name> <value>node1:19888</value> <description></description> </property> <property> <name>mapreduce.jobhistory.intermediate-done-dir</name> <value>/data/mr-history/tmp</value> <description></description> </property> <property> <name>mapreduce.jobhistory.done-dir</name> <value>/data/mr-history/done</value> <description></description> </property> <property> <name>yarn.app.mapreduce.am.env</name> <value>HADOOP_MAPRED_HOME=$HADOOP_HOME</value> </property> <property> <name>mapreduce.map.env</name> <value>HADOOP_MAPRED_HOME=$HADOOP_HOME</value> </property> <property> <name>mapreduce.reduce.env</name> <value>HADOOP_MAPRED_HOME=$HADOOP_HOME</value> </property> </configuration> \",\"配置：yarn-env.sh文件\",\"# 在文件的开头加入如下环境变量设置 export JAVA_HOME=/export/server/jdk export HADOOP_HOME=/export/server/hadoop export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn export HADOOP_LOG_DIR=$HADOOP_HOME/logs/hdfs \",\"配置：yarn-site.xml文件\",\"<?xml version=\\\"1.0\\\"?> <!-- Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. See accompanying LICENSE file. --> <configuration> <!-- Site specific YARN configuration properties --> <property> <name>yarn.log.server.url</name> <value>http://node1:19888/jobhistory/logs</value> <description></description> </property> <property> <name>yarn.web-proxy.address</name> <value>node1:8089</value> <description>proxy server hostname and port</description> </property> <property> <name>yarn.log-aggregation-enable</name> <value>true</value> <description>Configuration to enable or disable log aggregation</description> </property> <property> <name>yarn.nodemanager.remote-app-log-dir</name> <value>/tmp/logs</value> <description>Configuration to enable or disable log aggregation</description> </property> <!-- Site specific YARN configuration properties --> <property> <name>yarn.resourcemanager.hostname</name> <value>node1</value> <description></description> </property> <property> <name>yarn.resourcemanager.scheduler.class</name> <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</value> <description></description> </property> <property> <name>yarn.nodemanager.local-dirs</name> <value>/data/nm-local</value> <description>Comma-separated list of paths on the local filesystem where intermediate data is written.</description> </property> <property> <name>yarn.nodemanager.log-dirs</name> <value>/data/nm-log</value> <description>Comma-separated list of paths on the local filesystem where logs are written.</description> </property> <property> <name>yarn.nodemanager.log.retain-seconds</name> <value>10800</value> <description>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.</description> </property> <property> <name>yarn.nodemanager.aux-services</name> <value>mapreduce_shuffle</value> <description>Shuffle service that needs to be set for Map Reduce applications.</description> </property> </configuration> \",\"修改workers文件\",\"# 全部内容如下 node1 node2 node3 \",\"分发hadoop到其它机器\",\"# 在node1执行 cd /export/server scp -r hadoop-3.3.0 node2:`pwd`/ scp -r hadoop-3.3.0 node2:`pwd`/ \",\"在node2、node3执行\",\"# 创建软链接 ln -s /export/server/hadoop-3.3.0 /export/server/hadoop \",\"创建所需目录\",\"在node1执行：\",\"mkdir -p /data/nn mkdir -p /data/dn mkdir -p /data/nm-log mkdir -p /data/nm-local \",\"在node2执行：\",\"mkdir -p /data/dn mkdir -p /data/nm-log mkdir -p /data/nm-local \",\"在node3执行：\",\"mkdir -p /data/dn mkdir -p /data/nm-log mkdir -p /data/nm-local \",\"配置环境变量\",\"在node1、node2、node3修改/etc/profile\",\"export HADOOP_HOME=/export/server/hadoop export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin \",\"执行source /etc/profile生效\",\"格式化NameNode，在node1执行\",\"hadoop namenode -format \",\"hadoop这个命令来自于：$HADOOP_HOME/bin中的程序\",\"由于配置了环境变量PATH，所以可以在任意位置执行hadoop命令哦\",\"启动hadoop的hdfs集群，在node1执行即可\",\"start-dfs.sh # 如需停止可以执行 stop-dfs.sh \",\"start-dfs.sh这个命令来自于：$HADOOP_HOME/sbin中的程序\",\"由于配置了环境变量PATH，所以可以在任意位置执行start-dfs.sh命令哦\",\"启动hadoop的yarn集群，在node1执行即可\",\"start-yarn.sh # 如需停止可以执行 stop-yarn.sh \",\"启动历史服务器\",\"mapred --daemon start historyserver # 如需停止将start更换为stop \",\"启动web代理服务器\",\"yarn-daemon.sh start proxyserver # 如需停止将start更换为stop \"]},\"387\":{\"h\":\"验证Hadoop集群运行情况\",\"t\":[\"在node1、node2、node3上通过jps验证进程是否都启动成功\",\"验证HDFS，浏览器打开：http://node1:9870\",\"创建文件test.txt，随意填入内容，并执行：\",\"hadoop fs -put test.txt /test.txt hadoop fs -cat /test.txt \",\"验证YARN，浏览器打开：http://node1:8088\",\"执行：\",\"# 创建文件words.txt，填入如下内容 itheima itcast hadoop itheima hadoop hadoop itheima itcast # 将文件上传到HDFS中 hadoop fs -put words.txt /words.txt # 执行如下命令验证YARN是否正常 hadoop jar /export/server/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar wordcount -Dmapred.job.queue.name=root.root /words.txt /output \"]},\"388\":{\"h\":\"简介\",\"t\":[\"HBase 是一种分布式、可扩展、支持海量数据存储的 NoSQL 数据库。\",\"和Redis一样，HBase是一款KeyValue型存储的数据库。\",\"不过和Redis设计方向不同\",\"Redis设计为少量数据，超快检索\",\"HBase设计为海量数据，快速检索\",\"HBase在大数据领域应用十分广泛，现在我们来在node1、node2、node3上部署HBase集群。\"]},\"389\":{\"h\":\"安装\",\"t\":[\"HBase依赖Zookeeper、JDK、Hadoop（HDFS），请确保已经完成前面\",\"集群化软件前置准备（JDK）\",\"Zookeeper\",\"Hadoop\",\"这些环节的软件安装\",\"【node1执行】下载HBase安装包\",\"# 下载 wget http://archive.apache.org/dist/hbase/2.1.0/hbase-2.1.0-bin.tar.gz # 解压 tar -zxvf hbase-2.1.0-bin.tar.gz -C /export/server # 配置软链接 ln -s /export/server/hbase-2.1.0 /export/server/hbase \",\"【node1执行】，修改配置文件，修改conf/hbase-env.sh文件\",\"# 在28行配置JAVA_HOME export JAVA_HOME=/export/server/jdk # 在126行配置： # 意思表示，不使用HBase自带的Zookeeper，而是用独立Zookeeper export HBASE_MANAGES_ZK=false # 在任意行，比如26行，添加如下内容： export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=\\\"true\\\" \",\"【node1执行】，修改配置文件，修改conf/hbase-site.xml文件\",\"# 将文件的全部内容替换成如下内容： <configuration> <!-- HBase数据在HDFS中的存放的路径 --> <property> <name>hbase.rootdir</name> <value>hdfs://node1:8020/hbase</value> </property> <!-- Hbase的运行模式。false是单机模式，true是分布式模式。若为false,Hbase和Zookeeper会运行在同一个JVM里面 --> <property> <name>hbase.cluster.distributed</name> <value>true</value> </property> <!-- ZooKeeper的地址 --> <property> <name>hbase.zookeeper.quorum</name> <value>node1,node2,node3</value> </property> <!-- ZooKeeper快照的存储位置 --> <property> <name>hbase.zookeeper.property.dataDir</name> <value>/export/server/apache-zookeeper-3.6.0-bin/data</value> </property> <!-- V2.1版本，在分布式情况下, 设置为false --> <property> <name>hbase.unsafe.stream.capability.enforce</name> <value>false</value> </property> </configuration> \",\"【node1执行】，修改配置文件，修改conf/regionservers文件\",\"# 填入如下内容 node1 node2 node3 \",\"【node1执行】，分发hbase到其它机器\",\"scp -r /export/server/hbase-2.1.0 node2:/export/server/ scp -r /export/server/hbase-2.1.0 node3:/export/server/ \",\"【node2、node3执行】，配置软链接\",\"ln -s /export/server/hbase-2.1.0 /export/server/hbase \",\"【node1、node2、node3执行】，配置环境变量\",\"# 配置在/etc/profile内，追加如下两行 export HBASE_HOME=/export/server/hbase export PATH=$HBASE_HOME/bin:$PATH source /etc/profile \",\"【node1执行】启动HBase\",\"请确保：Hadoop HDFS、Zookeeper是已经启动了的\",\"start-hbase.sh # 如需停止可使用 stop-hbase.sh \",\"由于我们配置了环境变量export PATH=PATH:HBASE_HOME/bin\",\"start-hbase.sh即在$HBASE_HOME/bin内，所以可以无论当前目录在哪，均可直接执行\",\"验证HBase\",\"浏览器打开：http://node1:16010，即可看到HBase的WEB UI页面\",\"简单测试使用HBase\",\"【node1执行】\",\"hbase shell # 创建表 create 'test', 'cf' # 插入数据 put 'test', 'rk001', 'cf:info', 'itheima' # 查询数据 get 'test', 'rk001' # 扫描表数据 scan 'test' \"]},\"390\":{\"h\":\"注意\",\"t\":[\"本小节的操作，基于：大数据集群（Hadoop生态）安装部署环节中所构建的Hadoop集群\",\"如果没有Hadoop集群，请参阅前置内容，部署好环境。\"]},\"391\":{\"h\":\"简介\",\"t\":[\"Spark是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。\",\"Spark在大数据体系是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。\",\"在大数据领域广泛应用，是目前世界上使用最多的大数据分布式计算引擎。\",\"我们将基于前面构建的Hadoop集群，部署Spark Standalone集群。\"]},\"392\":{\"h\":\"安装\",\"t\":[\"【node1执行】下载并解压\",\"wget https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz # 解压 tar -zxvf spark-2.4.5-bin-hadoop2.7.tgz -C /export/server/ # 软链接 ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark \",\"【node1执行】修改配置文件名称\",\"# 改名 cd /export/server/spark/conf mv spark-env.sh.template spark-env.sh mv slaves.template slaves \",\"【node1执行】修改配置文件，spark-env.sh\",\"## 设置JAVA安装目录 JAVA_HOME=/export/server/jdk ## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群 HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop YARN_CONF_DIR=/export/server/hadoop/etc/hadoop ## 指定spark老大Master的IP和提交任务的通信端口 export SPARK_MASTER_HOST=node1 export SPARK_MASTER_PORT=7077 SPARK_MASTER_WEBUI_PORT=8080 SPARK_WORKER_CORES=1 SPARK_WORKER_MEMORY=1g \",\"【node1执行】修改配置文件，slaves\",\"node1 node2 node3 \",\"【node1执行】分发\",\"scp -r spark-2.4.5-bin-hadoop2.7 node2:$PWD scp -r spark-2.4.5-bin-hadoop2.7 node3:$PWD \",\"【node2、node3执行】设置软链接\",\"ln -s /export/server/spark-2.4.5-bin-hadoop2.7 /export/server/spark \",\"【node1执行】启动Spark集群\",\"/export/server/spark/sbin/start-all.sh # 如需停止，可以 /export/server/spark/sbin/stop-all.sh \",\"打开Spark监控页面，浏览器打开：http://node1:8081\",\"【node1执行】提交测试任务\",\"/export/server/spark/bin/spark-submit --master spark://node1:7077 --class org.apache.spark.examples.SparkPi /export/server/spark/examples/jars/spark-examples_2.11-2.4.5.jar \"]},\"393\":{\"h\":\"注意\",\"t\":[\"本小节的操作，基于：大数据集群（Hadoop生态）安装部署环节中所构建的Hadoop集群\",\"如果没有Hadoop集群，请参阅前置内容，部署好环境。\"]},\"394\":{\"h\":\"简介\",\"t\":[\"Flink同Spark一样，是一款分布式内存计算引擎，可以支撑海量数据的分布式计算。\",\"Flink在大数据体系同样是明星产品，作为最新一代的综合计算引擎，支持离线计算和实时计算。\",\"在大数据领域广泛应用，是目前世界上除去Spark以外，应用最为广泛的分布式计算引擎。\",\"我们将基于前面构建的Hadoop集群，部署Flink Standalone集群\",\"Spark更加偏向于离线计算而Flink更加偏向于实时计算。\"]},\"395\":{\"h\":\"安装\",\"t\":[\"【node1操作】下载安装包\",\"wget https://archive.apache.org/dist/flink/flink-1.10.0/flink-1.10.0-bin-scala_2.11.tgz # 解压 tar -zxvf flink-1.10.0-bin-scala_2.11.tgz -C /export/server/ # 软链接 ln -s /export/server/flink-1.10.0 /export/server/flink \",\"【node1操作】修改配置文件，conf/flink-conf.yaml\",\"# jobManager 的IP地址 jobmanager.rpc.address: node1 # JobManager 的端口号 jobmanager.rpc.port: 6123 # JobManager JVM heap 内存大小 jobmanager.heap.size: 1024m # TaskManager JVM heap 内存大小 taskmanager.heap.size: 1024m # 每个 TaskManager 提供的任务 slots 数量大小 taskmanager.numberOfTaskSlots: 2 #是否进行预分配内存，默认不进行预分配，这样在我们不使用flink集群时候不会占用集群资源 taskmanager.memory.preallocate: false # 程序默认并行计算的个数 parallelism.default: 1 #JobManager的Web界面的端口（默认：8081） jobmanager.web.port: 8081 \",\"【node1操作】，修改配置文件，conf/slaves\",\"node1 node2 node3 \",\"【node1操作】分发Flink安装包到其它机器\",\"cd /export/server scp -r flink-1.10.0 node2:`pwd`/ scp -r flink-1.10.0 node3:`pwd`/ \",\"【node2、node3操作】\",\"# 配置软链接 ln -s /export/server/flink-1.10.0 /export/server/flink \",\"【node1操作】，启动Flink\",\"/export/server/flink/bin/start-cluster.sh \",\"验证Flink启动\",\"# 浏览器打开 http://node1:8081 \",\"提交测试任务\",\"【node1执行】\",\"/export/server/flink/bin/flink run /export/server/flink-1.10.0/examples/batch/WordCount.jar \"]},\"396\":{\"h\":\"简介\",\"t\":[\"Zabbix 由 Alexei Vladishev 创建，目前由其成立的公司—— Zabbix SIA 积极的持续开发更新维护， 并为用户提供技术支持服务。\",\"Zabbix 是一个企业级分布式开源监控解决方案。\",\"Zabbix 软件能够监控众多网络参数和服务器的健康度、完整性。Zabbix 使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警。这样用户可以快速响应服务器问题。Zabbix 基于存储的数据提供出色的报表和数据可视化功能。这些功能使得 Zabbix 成为容量规划的理想选择。\"]},\"397\":{\"h\":\"安装\",\"t\":[\"安装整体步骤:\",\"准备Linux 服务器(虚拟机)\",\"安装Mysql\",\"安装zabbix( 包含 server agent web)\",\"配置 mysql, 为zabbix创建表结构\",\"配置zabbix server\",\"启动并开启开机自启动\",\"1574338996145\"]},\"398\":{\"h\":\"安装前准备 - Mysql\",\"t\":[\"安装ZabbixServer需要先安装好Mysql数据库\",\"课程使用Mysql 5.7\",\"安装步骤：\",\"# 安装Mysql yum库 rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm # yum安装Mysql yum -y install mysql-community-server # 启动Mysql设置开机启动 systemctl start mysqld systemctl enable mysqld # 检查Mysql服务状态 systemctl status mysqld # 第一次启动mysql，会在日志文件中生成root用户的一个随机密码，使用下面命令查看该密码 grep 'temporary password' /var/log/mysqld.log # 修改root用户密码 mysql -u root -p -h localhost Enter password: mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'Root!@#$'; # 如果你想设置简单密码，需要降低Mysql的密码安全级别 set global validate_password_policy=LOW; # 密码安全级别低 set global validate_password_length=4; # 密码长度最低4位即可 # 然后就可以用简单密码了（课程中使用简单密码，为了方便，生产中不要这样） ALTER USER 'root'@'localhost' IDENTIFIED BY 'root'; mysql> grant all privileges on *.* to root@'%' identified by 'root'; \"]},\"399\":{\"h\":\"安装Zabbix Server 和 Zabbix Agent\",\"t\":[\"初始安装，我们先安装ZabbixServer以及在Server本机安装Agent。\",\"打开官网下载页面：https://www.zabbix.com/download?zabbix=4.0&os_distribution=centos&os_version=7&db=mysql\",\"1571981197131\",\"选择对应的版本，然后再下面官网给出了具体的安装命令，使用rpm和yum来进行安装。\",\"需要有网络。\",\"以下内容来自官方页面\"]},\"400\":{\"h\":\"a. 安装Zabbix yum库\",\"t\":[\"documentation\",\"rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm yum clean all \"]},\"401\":{\"h\":\"b. 安装Zabbix Server、前端、Agent\",\"t\":[\"yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent # 如果只需要安装Agent的话 yum -y install zabbix-agent \"]},\"402\":{\"h\":\"c. 初始化Mysql数据库\",\"t\":[\"documentation\",\"在Mysql中操作\",\"# 登录Mysql 数据库 mysql -uroot -pYourPassword mysql> create database zabbix character set utf8 collate utf8_bin; mysql> grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix'; # 或者: grant all privileges on zabbix.* to zabbix@'%' identified by 'zabbix'; mysql> quit; \",\"测试在Zabbix Server服务器上能否远程登录Mysql，如果可以登录继续向下走。\",\"Import initial schema and data. You will be prompted to enter your newly created password.\",\"# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix \"]},\"403\":{\"h\":\"d. 为Zabbix Server配置数据库\",\"t\":[\"Edit file /etc/zabbix/zabbix_server.conf\",\"DBPassword=password DBHost=mysql-host-ip-or-hostname \"]},\"404\":{\"h\":\"e. 配置Zabbix的PHP前端\",\"t\":[\"Edit file /etc/httpd/conf.d/zabbix.conf, uncomment and set the right timezone for you.# php_value date.timezone Asia/Shanghai\",\"Start Zabbix server and agent processes and make it start at system boot:\",\"systemctl restart zabbix-server zabbix-agent httpd # 启动、重启 systemctl enable zabbix-server zabbix-agent httpd # 开机自启 \",\"Now your Zabbix server is up and running!\"]},\"405\":{\"h\":\"配置zabbix 前端（WEB UI）\",\"t\":[\"打开:http://192.168.88.131/zabbix\",\"即可进入Zabbix页面，在首次打开的时候，会进入设置页面，如图：\",\"1571993951841\",\"点击下一步，会检查相应的设置是否都正常\",\"1571994018126\",\"如果一切正常，点击下一步。\",\"配置DB连接\",\"1571994069689\",\"按具体情况填写即可\",\"配置Server细节\",\"1571994111921\",\"具体配置即可，Name表示这个Zabbix服务的名字，这里起名叫ITHEIMA-TEST\",\"安装前总结预览\",\"检查确认没有问题就下一步\",\"1571994206902\",\"配置完成\",\"1571994221531\",\"初始管理员账户Admin密码zabbix\",\"输入账户密码后，就能进入zabbix页面了。\",\"如下图：\",\"1571994287036\",\"现在是一个崭新的zabbix等待我们去探索。\"]},\"406\":{\"h\":\"简介\"},\"407\":{\"h\":\"安装\"},\"408\":{\"h\":\"部署形式\",\"t\":[\"Grafana支持两种部署形式\",\"自行部署, 可以部署在操作系统之上. 自行提供服务器, 域名等.\",\"Grafana官方托管. 无需安装, 在线注册即可得到一个专属于自己的Grafana, 但是要花钱的. 是一种SaaS服务\",\"我们课程选择方式1\"]},\"409\":{\"h\":\"安装\",\"t\":[\"Grafana支持常见的绝大多数操作系统, 如windowsmaclinux 同时也支持部署在docker中.\",\"大多数情况下, Grafana都是部署在linux服务器之上. 所以本课程也是基于Linux系统来讲解.\",\"对windowsmac系统 或 docker部署有兴趣的同学, 请参考: https://grafana.com/grafana/download\",\"我们部署Grafana可以使用YUM来进行部署.\",\"# 创建一个文件 vim /etc/yum.repos.d/grafana.repo # 将下面的内容复制进去 [grafana] name=grafana baseurl=https://packages.grafana.com/oss/rpm repo_gpgcheck=1 enabled=1 gpgcheck=1 gpgkey=https://packages.grafana.com/gpg.key sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt # 最后安装 yum install grafana \"]},\"410\":{\"h\":\"配置说明\",\"t\":[\"grafana-server具有许多配置选项，这些选项可以在.ini配置文件中指定，也可以使用环境变量指定。\",\"Note.Grafana needs to be restarted for any configuration changes to take effect.\"]},\"411\":{\"h\":\"配置文件注释\",\"t\":[\";符号在.ini文件中全局表示注释 ()\"]},\"412\":{\"h\":\"配置文件路径\",\"t\":[\"如果是自己解压安装, 或者自行编译的方式安装, 配置文件在:\",\"默认: $WORKING_DIR/conf/defaults.ini\",\"自定义:$WORKING_DIR/conf/custom.ini\",\"自定义配置文件路径可以被参数--config覆盖\",\"对于YUMRPM 安装的方式, 配置文件在: /etc/grafana/grafana.ini\"]},\"413\":{\"h\":\"使用环境变量\",\"t\":[\"可以使用以下语法使用环境变量来覆盖配置文件中的所有选项：\",\"GF_<SectionName>_<KeyName> \",\"其中SectionName是方括号内的文本。一切都应为大写，.应替换为_ 例如，给定以下配置设置：\",\"# default section instance_name = ${HOSTNAME} [security] admin_user = admin [auth.google] client_secret = 0ldS3cretKey \",\"Then you can override them using:\",\"export GF_DEFAULT_INSTANCE_NAME=my-instance export GF_SECURITY_ADMIN_USER=true # GF_ 固定 SECURITY 是SectionName ADMIN_USER 是配置的key 转大写 . 转 _ export GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey \"]},\"414\":{\"h\":\"开始配置\",\"t\":[\"Grafana支持使用Sqlite3PostgresqlMysql这三种数据库作为其元数据的存储.\",\"我们课程使用Mysql. 和zabbix的元数据mysql共用一个实例\",\"只需要配置如下内容即可:\",\"1573635500521\",\"并登陆mysql, 执行:\",\"create database grafana CHARACTER SET utf8 COLLATE utf8_general_ci;\",\"创建Grafana使用的数据库作为元数据存储.\"]},\"415\":{\"h\":\"启动\",\"t\":[\"systemctl daemon-reload systemctl start grafana-server systemctl enable grafana-server \",\"浏览器打开：http://node1:3000\",\"默认账户密码：admin/admin\"]},\"416\":{\"h\":\"Linux常用命令\"},\"417\":{\"h\":\"目录切换\",\"t\":[\"cd usr： 切换到该目录下 usr 目录\",\"cd ..（或cd../）： 切换到上一层目录\",\"cd /： 切换到系统根目录\",\"cd ~： 切换到用户主目录\",\"cd -： 切换到上一个操作所在目录\"]},\"418\":{\"h\":\"目录的操作命令\",\"t\":[\"mkdir 目录名称： 增加目录。\",\"ls/ll（ll 是 ls -l 的别名，ll 命令可以看到该目录下的所有目录和文件的详细信息）：查看目录信息。\",\"find 目录 参数： 寻找目录（查）。\",\"mv 目录名称 新目录名称： 修改目录的名称（改）。\",\"mv 目录名称 目录的新位置： 移动目录的位置---剪切（改）。\",\"cp -r 目录名称 目录拷贝的目标位置： 拷贝目录（改）\",\"rm [-rf] 目录 : 删除目录（删）。\"]},\"419\":{\"h\":\"文件操作\",\"t\":[\"touch 文件名称: 文件的创建（增）。\",\"cat/more/less/tail 文件名称 ：文件的查看（查） 。\",\"vim 文件： 修改文件的内容（改）。\",\"rm -rf 文件： 删除文件（删）。\"]},\"420\":{\"h\":\"压缩文件\",\"t\":[\"**tar -zcvf **打包压缩后的文件名 要与打包压缩的文件\"]},\"421\":{\"h\":\"Linux——后台执行命令：nohup和&的使用\"},\"422\":{\"h\":\"nohup的作用\",\"t\":[\"nohup 是 no hungup的缩写，以为“不挂断”,我们在使用Xshell等工具执行Linux脚本时，有时候会由于网络问题，导致失去连接，终端断开，程序运行一半就意外结束了。这种时候，就可以用nohup指令来运行指令，使程序可以忽略挂起信号继续运行。\",\"语法\",\"nohup Command [ Arg ... ] [ & ]\",\"nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。\"]},\"423\":{\"h\":\"& 的作用\",\"t\":[\"要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。\",\"如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。\"]},\"424\":{\"h\":\"nohup 和 & 的区别\",\"t\":[\"&：是指在后台运行，当用户退出（挂起）的时候，命令自动跟着结束\",\"nohup：不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&才是后台运行\",\"因此将nohup和&结合使用，就可以实现使命令永久地在后台执行的功能\",\"举例\",\"sh test.sh &\",\"将sh test.sh任务放到后台 ，关闭xshell，对应的任务也跟着停止\",\"nohup sh test.sh\",\"将sh test.sh任务放到后台，关闭标准输入，终端不再能够接收任何输入（标准输入），重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前会话依然继续运行\",\"nohup sh test.sh &\",\"将sh test.sh任务放到后台，但是依然可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件，即使关闭xshell退出当前session依然继续运行\",\"输出重定向 作业在后台运行的时候，可以把输出重定向到某个文件中，相当于一个日志文件，记录运行过程中的输出。使用方法：\",\"nohup command > out.file\\ncommand>out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。\"]},\"425\":{\"h\":\"一周掌握Linux\"},\"426\":{\"h\":\"目录结构介绍\"},\"427\":{\"h\":\"基本介绍\",\"t\":[\"linux的文件系统是采用层级式的树状目录结构，在此结构中的最上层是根目录/ ，然后在此目录下再创建其他的目录\",\"有一个经典的话：在Linux世界里，一切皆文件\",\"image-20230319111526819\"]},\"428\":{\"h\":\"具体的目录结构\",\"t\":[\"/bin [常用] (usr/bin、/usr/local/bin)\",\"是Binary的缩写，这个目录存放最经常使用的命令\",\"/sbin(/usr/sbin,/usr/local/sbin)\",\"s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序\",\"/home[常用]\",\"存放普通用户的主目录，在Linux中每一个用户都有一个自己的目录，一般该目录的名就是用户的账号名称\",\"/root [常用]\",\"该目录为系统管理员，也称作超级权限者的用户主目录\",\"/lib 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库\",\"/lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件\",\"/etc [常用]\",\"所有的系统管理所需要的配置文件和子目录，比如安装MySQL数据库则会在该目录下产生MySQL的配置文件 my.conf\",\"/usr [常用]\",\"这是一个非常重要的目录，用户的很多用于程序和文件都放在这个目录下，类似于Windows下的program files目录\",\"/boot [常用]\",\"存放的是启动Linux时需要的一些核心文件，包括一些连接文件以及镜像文件\",\"/proc [不能动]\",\"这个目录是一个虚拟目录，它是系统内存的映射，访问这个目录来获取系统信息\",\"/srv [不能动]\",\"service 缩写，该目录存放一些服务器启动之后所需要提取的数据\",\"/sys [不能动]\",\"这是Linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统 sysfs\",\"/tmp 这个目录用来存放一些临时文件的\",\"/dev\",\"类似于Windows的设备管理器，把所有的硬件用文件的形式存储\",\"/media [常用]\",\"Linux系统会自动识别一些文件，例如U盘，光驱，等等。当识别后，Linux会把识别的设备挂载到这个目录下\",\"/mnt[常用]\",\"系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/ 上，然后进入该目录就可以查看里的内容了。\",\"/opt\",\"这是给主机额外安装软件所摆放的目录，如安装ORACLE数据库就可以放到该目录下，默认为空\",\"/usr/local[常用]\",\"这是另一个给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序\",\"/var [常用]\",\"这个目录中存放着不断扩充的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件\",\"/selinux[security-enhanced linux]\",\"SELinux是一个安全子系统，它能控制程序只能访问特定位件，有三种工作模式，可以自行设置\"]},\"429\":{\"h\":\"vi和vim快速入门\"},\"430\":{\"h\":\"快捷键映射图\",\"t\":[\"img\"]},\"431\":{\"h\":\"vi/vim 的使用\",\"t\":[\"基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：\"]},\"432\":{\"h\":\"命令模式：\",\"t\":[\"用户刚刚启动 vi/vim，便进入了命令模式。\",\"此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。\",\"以下是常用的几个命令：\",\"i 切换到输入模式，以输入字符。\",\"x 删除当前光标所在处的字符。\",\": 切换到底线命令模式，以在最底一行输入命令。\",\"若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。\",\"命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\"]},\"433\":{\"h\":\"输入模式\",\"t\":[\"在命令模式下按下i就进入了输入模式。\",\"在输入模式中，可以使用以下按键：\",\"字符按键以及Shift组合，输入字符\",\"ENTER，回车键，换行\",\"BACK SPACE，退格键，删除光标前一个字符\",\"DEL，删除键，删除光标后一个字符\",\"方向键，在文本中移动光标\",\"HOME/END，移动光标到行首/行尾\",\"Page Up/Page Down，上/下翻页\",\"Insert，切换光标为输入/替换模式，光标将变成竖线/下划线\",\"ESC，退出输入模式，切换到命令模式\"]},\"434\":{\"h\":\"底线命令模式\",\"t\":[\"在命令模式下按下:（英文冒号）就进入了底线命令模式。\",\"底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\",\"在底线命令模式中，基本的命令有（已经省略了冒号）：\",\"q 退出程序\",\"w 保存文件\",\"按ESC键可随时退出底线命令模式。\"]},\"435\":{\"h\":\"vi/vim 按键说明\",\"t\":[\"第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等\",\"移动光标的方法\",\"h 或 向左箭头键(←)\",\"光标向左移动一个字符\",\"j 或 向下箭头键(↓)\",\"光标向下移动一个字符\",\"k 或 向上箭头键(↑)\",\"光标向上移动一个字符\",\"l 或 向右箭头键(→)\",\"光标向右移动一个字符\",\"如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 \\\"30j\\\" 或 \\\"30↓\\\" 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！\",\"[Ctrl] + [f]\",\"屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)\",\"[Ctrl] + [b]\",\"屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)\",\"[Ctrl] + [d]\",\"屏幕『向下』移动半页\",\"[Ctrl] + [u]\",\"屏幕『向上』移动半页\",\"+\",\"光标移动到非空格符的下一行\",\"-\",\"光标移动到非空格符的上一行\",\"n\",\"那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。\",\"0 或功能键[Home]\",\"这是数字『 0 』：移动到这一行的最前面字符处 (常用)\",\"$ 或功能键[End]\",\"移动到这一行的最后面字符处(常用)\",\"H\",\"光标移动到这个屏幕的最上方那一行的第一个字符\",\"M\",\"光标移动到这个屏幕的中央那一行的第一个字符\",\"L\",\"光标移动到这个屏幕的最下方那一行的第一个字符\",\"G\",\"移动到这个档案的最后一行(常用)\",\"nG\",\"n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)\",\"gg\",\"移动到这个档案的第一行，相当于 1G 啊！ (常用)\",\"n\",\"n 为数字。光标向下移动 n 行(常用)\",\"/word\",\"向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) 如果需要取消高亮在底线命令模式输入noh\",\"?word\",\"向光标之上寻找一个字符串名称为 word 的字符串。\",\"n\",\"这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！\",\"N\",\"这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。\",\"使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！\",\":n1,n2s/word1/word2/g\",\"n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)\",\":1,$s/word1/word2/g 或 :%s/word1/word2/g\",\"从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)\",\":1,$s/word1/word2/gc 或 :%s/word1/word2/gc\",\"从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)\",\"删除、复制与贴上\",\"x, X\",\"在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)\",\"nx\",\"n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。\",\"dd\",\"剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。\",\"ndd\",\"n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。\",\"d1G\",\"删除光标所在到第一行的所有数据\",\"dG\",\"删除光标所在到最后一行的所有数据\",\"d$\",\"删除游标所在处，到该行的最后一个字符\",\"d0\",\"那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符\",\"yy\",\"复制游标所在的那一行(常用)\",\"nyy\",\"n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)\",\"y1G\",\"复制游标所在行到第一行的所有数据\",\"yG\",\"复制游标所在行到最后一行的所有数据\",\"y0\",\"复制光标所在的那个字符到该行行首的所有数据\",\"y$\",\"复制光标所在的那个字符到该行行尾的所有数据\",\"p, P\",\"p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)\",\"J\",\"将光标所在行与下一行的数据结合成同一行\",\"c\",\"重复删除多个数据，例如向下删除 10 行，[ 10cj ]\",\"u\",\"复原前一个动作。(常用)\",\"[Ctrl]+r\",\"重做上一个动作。(常用)\",\"这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！\",\".\",\"不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)\"]},\"436\":{\"h\":\"第二部分：一般模式切换到编辑模式的可用的按钮说明\",\"t\":[\"进入输入或取代的编辑模式\",\"i, I\",\"进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)\",\"a, A\",\"进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)\",\"o, O\",\"进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)\",\"r, R\",\"进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)\",\"上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！\",\"[Esc]\",\"退出编辑模式，回到一般模式中(常用)\"]},\"437\":{\"h\":\"第三部分：一般模式切换到指令行模式的可用的按钮说明\",\"t\":[\"指令行的储存、离开等指令\",\":w\",\"将编辑的数据写入硬盘档案中(常用)\",\":w!\",\"若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！\",\":q\",\"离开 vi (常用)\",\":q!\",\"若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。\",\"注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～\",\":wq\",\"储存后离开，若为 :wq! 则为强制储存后离开 (常用)\",\"ZZ\",\"这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)\",\"ZQ\",\"不保存，强制退出。效果等同于 :q!。\",\":w [filename]\",\"将编辑的数据储存成另一个档案（类似另存新档）\",\":r [filename]\",\"在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面\",\":n1,n2 w [filename]\",\"将 n1 到 n2 的内容储存成 filename 这个档案。\",\":! command\",\"暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！\",\"vim 环境的变更\",\":set nu\",\"显示行号，设定之后，会在每一行的前缀显示该行的行号\",\":set nonu\",\"与 set nu 相反，为取消行号！\",\"特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。\",\"举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可\"]},\"438\":{\"h\":\"Linux命令基础\"},\"439\":{\"h\":\"命令基础格式\",\"t\":[\"无论什么命令，用于什么用途，在Linux中，命令有其通用的格式：\",\"command [-options] [parameter]\",\"command: 命令本身\",\"-options：可选，可以通过选项控制命令的行为细节\",\"parameter：可选，多数用于命令的指向目标\"]},\"440\":{\"h\":\"ls\",\"t\":[\"ls命令的作用是列出目录下的内容，语法细节如下：\",\"ls [-a -l -h] [linux路径]\",\"-a -l -h 是可选的选项\",\"Linux路径是此命令可选的参数\",\"image-20230401085329304\",\"-a选项表示：all 的意思，即列出所有的文件，包括隐藏的文件(以.开头的文件和文件夹会被隐藏)\",\"image-20230401085711129\",\"-l 选项表示：以列表的形式展现内容，并展示文件的信息\",\"可以组合使用：\",\"ls -a -l并且等价于ls -al \",\"-h选项表示：以容易阅读的方式展现文件的大小例如(K,M,G)\",\"-h选项必须搭配-l一起使用\",\"组合使用：\",\"image-20230401090644646\"]},\"441\":{\"h\":\"drwxr-xr-x意思\",\"t\":[\"drwxr-xr-x意思如下：\",\"第一位表示文件类型。d是目录文件，l是链接文件，-是普通文件，p是管道。\",\"后面的分三个三个来看，即 rwx 、r-x 、r-x。\",\"第一个： 所属用户权限；r 是可读，w 是可写，x 是可执行，rwx 意思是可读可写可执行。\",\"第二个： **用户组权限：r-x 是可读可执行不可写。\",\"第三个： 其他用户权限，r-x 是可读可执行不可写。\",\"image-20230402144240712\"]},\"442\":{\"h\":\"cd\",\"t\":[\"我们可以通过cd命令更改当前的工作目录\",\"语法：\",\"cd [linux路径]\",\"注意：\",\"cd命令无需跟选项，只有参数，表示要切换到哪个路径\",\"cd直接执行，不跟参数则会回到home路径\"]},\"443\":{\"h\":\"pwd\",\"t\":[\"查看当前所在的工作目录\",\"pwd： Print Work Directory\",\"无选项，无参数，直接使用即可打印出当前工作目录\",\"image-20230401091236232\"]},\"444\":{\"h\":\"特殊路径符\",\"t\":[\".：表示当前路径\",\"..： 表示上一级目录\",\"~：表示HOME路径\"]},\"445\":{\"h\":\"mkdir\",\"t\":[\"通过mkdir命令创建文件夹\",\"mkdir来自英文：make directory\",\"语法：mkdir [-p] Linux路径\",\"参数必填，表示Linux路径，即要创建的文件夹的路径\",\"-p选项可选，表示自动创建不存在的父目录，适用于连续创建多级目录\"]},\"446\":{\"h\":\"touch\",\"t\":[\"可以通过touch命令创建文件\",\"语法：touch 文件名\"]},\"447\":{\"h\":\"cat\",\"t\":[\"查看文件内容\",\"语法：cat 文件名称\"]},\"448\":{\"h\":\"more\",\"t\":[\"翻页查看文件内容\",\"语法：more 文件名称\",\"使用空格翻页\",\"使用q退出查看\"]},\"449\":{\"h\":\"cp\",\"t\":[\"用于复制文件/文件夹的命令\",\"语法：cp [-r] 参数一 参数二\",\"-r 选项，可选，用于复制文件夹使用，表示递归\",\"参数一：Linux路径，表示被复制的文件或文件夹(原文件/文件夹)\",\"参数二：Linux路径，表示要复制到的地方(目标)\"]},\"450\":{\"h\":\"mv\",\"t\":[\"移动文件/文件夹\",\"语法：mv 参数一 参数二\",\"参数一：表示被移动的文件或文件夹\",\"参数二：表示要移动到的地方，如果目标不存在则进行改名，确保目标存在\"]},\"451\":{\"h\":\"rm\",\"t\":[\"用于删除文件或文件夹\",\"语法：rm [-r -f] 参数一 参数二 ...\",\"-r用于删除文件夹，递归(和cp命令的-r一样)\",\"-f表示force，强制删除(不会弹出提示确认信息)\",\"参数x：表示要删除的文件或文件夹\",\"rm命令支持通配符*，用来模糊匹配\",\"符号*表示通配符，即匹配任意内容(包括空) \",\"test*，匹配任何以test开头的内容\",\"*test，匹配任何以test结尾的内容\",\"*test*，表示匹配任何包括test的内容\"]},\"452\":{\"h\":\"which\",\"t\":[\"查看所使用的一系列命令的程序文件存放在哪里\",\"语法：which要查找的命令\"]},\"453\":{\"h\":\"find\",\"t\":[\"通过find命令搜索指定文件\",\"语法：find 起始路径 -name “被查找的文件名”\",\"被查找的文件名支持通配符*的写法\",\"按照文件大小查找文件\",\"语法：find 起始路径 -size +|-n[kMG]\",\"+、-表示大于和小于\",\"n表示大小数字\",\"kMG表示大小单位，k(小写)表示kb\",\"例如：\",\"find / -size +1G 查找大于1G的文件\"]},\"454\":{\"h\":\"grep\",\"t\":[\"从文件中通过关键字过滤文件\",\"语法：grep [-n] 关键字 文件路径\",\"选项-n，可选，表示在结果中显示匹配的行的行号\",\"关键字：表示过滤的关键字(带有空格或者其他特殊符号建议使用“ ”将关键字包裹起来)\",\"文件路径：表示要过滤内容的文件路径，可作为内容的输入端口\"]},\"455\":{\"h\":\"wc\",\"t\":[\"统计文件的行数、单词数量等\",\"语法：wc [-c -m -l -w] 文件路径\",\"-c统计字节数量\",\"-m统计字符数量\",\"-l统计行数\",\"-w统计单词数量\",\"文件路径：被统计的文件，可作为内容输入的端口\",\"wc test.txt 2 5 26 test.txt \",\"默认输出：行数 单词数 字节数 文件名称\"]},\"456\":{\"h\":\"管道符 |\",\"t\":[\"将左边命令的结果作为右边命令的输入\",\"例如：\",\"[root@VM-0-5-centos ~]# cat test.txt 你好林纳斯 [root@VM-0-5-centos ~]# cat test.txt | grep 你好 你好林纳斯 \",\"# 查看linux中关于nginx的进程信息 [root@VM-0-5-centos ~]# ps -ef | grep nginx root 24991 21597 0 11:52 pts/0 00:00:00 grep --color=auto nginx root 25946 1 0 3月20 ? 00:00:00 nginx: master process nginx nginx 25947 25946 0 3月20 ? 00:00:08 nginx: worker process nginx 25948 25946 0 3月20 ? 00:00:08 nginx: worker process \"]},\"457\":{\"h\":\"echo\",\"t\":[\"可以使用echo命令在命令行输出指定内容\",\"语法：echo 输出的内容\"]},\"458\":{\"h\":\"反引号`\",\"t\":[\"如果我们想通过echo输出pwd的内容,echo pwd则会直接输出pwd,我们就可以使用反引号包裹pwd则会被当做命令执行而不是普通的文字\",\"[root@VM-0-5-centos ~]# echo pwd pwd [root@VM-0-5-centos ~]# echo `pwd` /root \"]},\"459\":{\"h\":\"重定向符 > 和 >>\",\"t\":[\">将左边命令的结果，覆盖写入到符号右边的指定文件中\",\">>将左边命令的结果，追加写入到符号右边的指定文件中\",\"示例：\",\"[root@VM-0-5-centos ~]# cat test.txt 你好林纳斯 [root@VM-0-5-centos ~]# echo `pwd` > test.txt [root@VM-0-5-centos ~]# cat test.txt /root [root@VM-0-5-centos ~]# echo `pwd` >> test.txt [root@VM-0-5-centos ~]# cat test.txt /root /root \"]},\"460\":{\"h\":\"tail\",\"t\":[\"使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改\",\"语法：tail [-f -num] Linux路径\",\"参数：Linux路径，表示被跟踪的文件路径\",\"选项：-f，表示持续跟踪\",\"选项：-num，表示查看尾部多少行，不写默认是10行\",\"[root@VM-0-5-centos ~]# tail test.txt -rw-r--r-- 1 root root 51 3月 18 21:51 .gitconfig drwxr-xr-x 9 root root 4.0K 3月 27 18:51 halo drwxr-xr-x 2 root root 4.0K 3月 17 16:48 .orca_term drwxr-xr-x 2 root root 4.0K 7月 25 2022 .pip drwxr----- 3 root root 4.0K 3月 17 16:47 .pki -rw-r--r-- 1 root root 73 3月 17 16:21 .pydistutils.cfg drwx------ 2 root root 4.0K 3月 17 16:21 .ssh -rw-r--r--. 1 root root 129 12月 29 2013 .tcshrc -rw-r--r-- 1 root root 0 4月 2 11:18 test.txt -rw------- 1 root root 5.5K 4月 1 11:47 .viminfo [root@VM-0-5-centos ~]# tail -5 test.txt -rw-r--r-- 1 root root 73 3月 17 16:21 .pydistutils.cfg drwx------ 2 root root 4.0K 3月 17 16:21 .ssh -rw-r--r--. 1 root root 129 12月 29 2013 .tcshrc -rw-r--r-- 1 root root 0 4月 2 11:18 test.txt -rw------- 1 root root 5.5K 4月 1 11:47 .viminfo \"]},\"461\":{\"h\":\"su和exit命令\",\"t\":[\"su命令是用于切换用户的系统命令，来源英语单词switch user\",\"语法：su - [用户名]\",\"-符号是可选的，表示是否在切换用户后加载环境变量\",\"参数：用户名，表示需要切换的用户，也可以省略，省略默认表示切换到root\",\"切换用户后，可以通过exit命令退回上一个用户\",\"使用普通用户切换到root用户需要输入密码；\",\"使用root用户切换到普通用户不需要输入密码\"]},\"462\":{\"h\":\"sudo命令\",\"t\":[\"当我们知道root密码的时候，可以通过su切换到root用户得到最大的权限\",\"但是不建议长期使用root用户，避免对系统造成损坏\",\"因此我们可以使用sudo命令，为普通用户授权，临时使用root身份执行\",\"语法：sudo 其他命令\",\"注意并不是所有的用户都可以使用sudo，我们需要为普通用户配置sudo认证\",\"为普通用户配置sudo认证\",\"切换到root用户，执行visudo命令会自动通过vi编辑器打开:/etc/sudoers\",\"在文件的最后一行添加：\",\"用户名 ALL=(ALL) NOPASSWORD: ALL\",\"最后的NOPASSWORD表示使用sudo命令无需密码\",\"最后保存即可\"]},\"463\":{\"h\":\"groupadd和groupdel\",\"t\":[\"用户组管理命令，用户组：多个用户可以组成一个组，方便进行权限的统一管理\",\"创建用户组\",\"groupadd 用户组名称\",\"删除用户组\",\"groupdel 用户组名称\"]},\"464\":{\"h\":\"useradd和userdel；usermod；id；getent passwd和getent group\",\"t\":[\"useradd添加用户、userdel删除用户\",\"usermod修改用户组、id命令查看用户信息\",\"getent passwd查看系统全部用户信息\",\"getent group查看系统全部组信息\"]},\"465\":{\"h\":\"chmod\",\"t\":[\"我们可以使用chmod命令，修改文件、文件夹的权限信息\",\"注意只有文件、文件夹所属的用户或root用户可以修改\",\"语法：chmod [-R] 权限 文件或文件夹\",\"选项-R，对文件夹内的全部内容应用同样的操作\",\"示例：\",\"chmod u=rwx,g=rwx,o=r hello.txt,将会把hello.txt文件的权限修改为rwxrwxr-- \",\"其中u表示user所属用户权限，g表示group用户组的权限，o表示其他用户权限\",\"chmod u=rwx,g=rwx,o=r -R test对test文件夹以及文件夹内部的全部内容的权限修改为rwxrwxr--\",\"补充：权限数字序号\",\"r代表4；w代表2；x代表1\",\"7代表rwx；5代表r_x；1代表__x\",\"chmod 751 hello.txt，将会把hello.txt文件的权限修改为rwxr_x__x\"]},\"466\":{\"h\":\"chown\",\"t\":[\"chown命令可以修改文件或文件夹所属的用户和用户组\",\"语法：chown [-R] [用户][:][用户组] 文件或文件夹\",\"选项：-R和chmod的-R一样\",\"选项用户，用于修改文件或文件夹的所属用户\",\"选项用户组，用于修改文件或文件夹的所属用户组\",\"选项:：用于分隔用户和用户组\",\"示例：\",\"chown root hello.txt\",\"chown root:root hello.txt\",\"chown -R zs:test test将test文件夹以及文件夹中所有的文件和文件夹的所属用户修改为zs，用户组修改为test\"]},\"467\":{\"h\":\"小技巧快捷键\"},\"468\":{\"h\":\"ctrl+C强制停止\",\"t\":[\"可以强制停止某些程序的运行\",\"命令输入错误可以退出当前命令不执行\"]},\"469\":{\"h\":\"ctrl+D退出或登出\",\"t\":[\"可以退出用户的登陆\",\"或者退出某些程序的专属页面例如Python\"]},\"470\":{\"h\":\"history查看历史命令\",\"t\":[\"image-20230402154446076\"]},\"471\":{\"h\":\"clear\",\"t\":[\"清屏\"]},\"472\":{\"h\":\"软件安装\"},\"473\":{\"h\":\"yum命令\",\"t\":[\"yum：RPM包软件管理器，同于自动化安装配置Linux软件，并可以自动解决依赖问题\",\"语法：yum [-y] [install | remove | search] 软件名称\",\"-y自动确认\",\"install：安装\",\"remove：删除\",\"search：搜索\",\"yum需要有root权限，可以使用su切换到root或者sudo提权\"]},\"474\":{\"h\":\"systemctl\",\"t\":[\"Linux系统很多软件(内置和第三方)均支持使用systemctl命令控制：启动、停止、开机自启动\",\"能被systemctl管理的软件，一般也称之为服务\",\"语法：systemctl start | stop | status | enable |disable 服务名\",\"[root@VM-0-5-centos ~]# systemctl enable nginx Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service. \"]},\"475\":{\"h\":\"软连接\",\"t\":[\"在系统中创建软连接，可以将文件、文件夹链接到其他位置\",\"类似于Windows系统的快捷方式\",\"语法：ln -s 参数1 参数2\",\"-s选项，创建软连接\",\"参数1：被链接的文件或文件夹\",\"参数2：需要链接去的目的地\",\"示例：\",\"ln -s /etc/yum.conf ~/yum.conf\",\"ln -s /etc/yum ~/yum\",\"注意软连接必须使用绝对路径\"]},\"476\":{\"h\":\"date命令\",\"t\":[\"[root@VM-0-5-centos /]# date +%s 1680423588 [root@VM-0-5-centos /]# date +%Y-%m-%d 2023-04-02 [root@VM-0-5-centos /]# date +%Y-%m-%d %H:%M:%S date: 额外的操作数 \\\"%H:%M:%S\\\" Try 'date --help' for more information. [root@VM-0-5-centos /]# date \\\"+%Y-%m-%d %H:%M:%S\\\" 2023-04-02 16:21:19 \"]},\"477\":{\"h\":\"进程管理\"},\"478\":{\"h\":\"查看进程\",\"t\":[\"可以通过ps命令查看Linux系统中的进程信息\",\"语法：ps [-e -f]\",\"-e，显示全部进程\",\"-f，以完全格式化的形式展现信息\",\"常用的是ps -ef列出所有进程信息并且配合管道符和过滤命令使用\",\"image-20230402164304255\",\"从左到右依次是：\",\"UID：进程所属的用户ID\",\"PID：进程的进程号ID\",\"PPID：进程的父ID(启动该进程的其他进程)\",\"C：此进程CPU占用率(百分比)\",\"STIME：进程启动的时间\",\"TTY：启动此进程的终端序号，如果显示？表示非终端启动\",\"TIME：进程占用CPU的时间\",\"CMD：进程对应的名称或启动路径或启动命令\"]},\"479\":{\"h\":\"关闭进程\",\"t\":[\"语法：kill [-9] 进程ID\",\"-9代表强制关闭\"]},\"480\":{\"h\":\"主机状态\"},\"481\":{\"h\":\"top\",\"t\":[\"查看系统资源占用\",\"可以通过top命令查看CPU、内存的使用情况，类似于Windows中的任务管理器；默认每5秒刷新一次，语法：直接输入top即可，按q或者ctrl+c退出\",\"image-20230402204701848\",\"top显示的信息详解：\",\"top - 20:50:23 up 15 days, 8:13, 1 user, load average: 0.18, 0.16, 0.16 Tasks: 99 total, 1 running, 98 sleeping, 0 stopped, 0 zombie %Cpu(s): 2.7 us, 1.5 sy, 0.0 ni, 95.0 id, 0.8 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 2046508 total, 79848 free, 1271736 used, 694924 buff/cache KiB Swap: 0 total, 0 free, 0 used. 599556 avail Mem \",\"第一行：top - 20:50:23 up 15 days, 8:13, 1 user, load average: 0.18, 0.16, 0.16\",\"top命令名称；20:50:23当前系统时间；up 15 days：启动了15天；1 user：一个用户；load average：平均负载\",\"第二行：Tasks: 99 total, 1 running, 98 sleeping, 0 stopped, 0 zombie\",\"Tasks：99 total：99个进程；1 running：1个正在运行；98 sleeping：98个睡眠，0个停止，0个僵尸进程\",\"第三行：%Cpu(s): 2.7 us, 1.5 sy, 0.0 ni, 95.0 id, 0.8 wa, 0.0 hi, 0.0 si, 0.0 st\",\"%Cpu(s)：CPU使用率；us：用户CPU使用率，sy：系统CPU使用率···\",\"第四行和第五行：\",\"Kib Mem：物理内存，total：总量，free：空闲；used：使用；buff/cache：buff和cache占用\",\"KibSwap：虚拟内存(交换空间)\",\"内容重点关注的：\",\"image-20230402210539669\",\"PID：进程ID\",\"RES：进程使用的物理内存，单位KB\",\"%CPU：进程CPU占用率\",\"%MEM：进程内存占用率\",\"top交互式选项可以通过键盘按键控制内容(下面列出几个常用的)\",\"M：根据内存(RES)大小排序\",\"P：根据CPU使用百分比大小排序\",\"T：根据运行的时间排序\",\"E：切换顶部的内存显示的单位\",\"e：切换进程内存显示单位\",\"t：显示CPU状态信息\",\"m：显示内存信息\"]},\"482\":{\"h\":\"df\",\"t\":[\"使用df命令查看磁盘的使用情况\",\"语法：df [-h]\",\"-h可以使显示的单位更易读\",\"image-20230402211833945\"]},\"483\":{\"h\":\"环境变量\"},\"484\":{\"h\":\"PATH\",\"t\":[\"无论工作目录是什么，我们都可以执行cd(等一系列)命令，这就是借助了环境变量中的PATH这个项目值来做的\",\"image-20230403124053645\",\"当执行命令的时候会根据上面PATH的信息依次去对应的路径下查找该命令并执行\"]},\"485\":{\"h\":\"$符号\",\"t\":[\"在Linux中$符号通常用于获取环境变量\",\"[root@VM-0-5-centos ~]# echo $PWD /root [root@VM-0-5-centos ~]# echo ${PWD}/bin /root/bin [root@VM-0-5-centos ~]# \"]},\"486\":{\"h\":\"设置环境变量\",\"t\":[\"Linux中的环境变量可以自己设置，不过有等级区分\",\"临时设置，语法：export 变量名称=变量值\",\"永久生效： \",\"针对当前用户：配置当前用户的~/.bashrc文件\",\"针对所有用户生效：配置系统的/etc/profile文件\",\"并通过语法source 配置文件，进行立即生效\",\"案例：\",\"在~下创建一个文件夹，文件夹中创建文件，文件中简单输出一个内容。把该文件设置为全局可执行命令\",\"cd mkdir test cd test touch mktest echo \\\"echo test\\\" >> mktest chmod 755 mktest echo \\\"export PATH=$PATH:/root/test\\\" >> /etc/profile source /etc/profile mktest \"]},\"487\":{\"h\":\"文件的上传和下载\"},\"488\":{\"h\":\"通过命令行上传和下载\",\"t\":[\"通过可视化工具进行拖拽很容易进行文件的上传和下载，那么我们怎么通过命令行进行呢？\",\"使用rz和sz进行上传和下载\",\"首先需要安装：yum install lrzsz -y\",\"直接输入rz进行上传\",\"输入sz 要下载的文件 进行下载\"]},\"489\":{\"h\":\"压缩和解压\"},\"490\":{\"h\":\"tar\",\"t\":[\"Linux和Mac有两种常用的压缩格式，后缀名分别为：\",\".tar\",\".gz\",\"针对以上的两种格式均可以使用tar命令进行压缩和解压操作\",\"语法：tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数n\",\"-c：创建压缩文件，用于压缩模式\",\"-v：显示压缩、解压的过程，用于查看进度\",\"-x：解压模式\",\"-f：要创建的文件、要压缩的文件，-f选项必须在所有选项中位置处于最后一个\",\"-z：gzip模式，不使用-z就是普通的tarball格式\",\"-C：选择解压的目的地，用于解压模式\",\"tar压缩常用的组合为：\",\"tar -cvf test.tar 1.txt 2.txt 3.txt\",\"将1.txt 2.txt 3.txt压缩到test.tar文件中\",\"tar -zcvf test.tar.gz 1.txt 2.txt 3.txt\",\"将1.txt 2.txt 3.txt压缩到test.tar.gz文件中，使用gzip模式\",\"注意：\",\"-z选项如果需要使用一般处于第一个\",\"-f选项，必须在选项的最后一个(这样后面的名称就是这个选项需要的)\",\"tar解压常用的组合为：\",\"tar -xvf test.tar\",\"解压test.tar到当前目录\",\"tar -xvf test.tar -C /root \",\"解压test.tar到指定的/root目录\",\"tar -zxvf test.tar.gz -C /root\",\"使用gzip模式解压test.tar.gz到指定/root目录\",\"注意：\",\"-f选项，必须在选项的最后一位\",\"-z选项建议在开头\",\"-C选项单独使用，和加压其他参数分开\"]},\"491\":{\"h\":\"zip\",\"t\":[\"zip命令可以将文件压缩为zip压缩包\",\"语法：zip [-r] 参数1 参数2 ... 参数n\",\"-r用于压缩文件夹\",\"示例：\",\"zip test.zip a.txt b.txt c.txt\",\"将a.txt b.txt c.txt压缩到test.zip中\",\"zip -r test.zip test dev application.yml\",\"将test、dev两个文件夹和application.yml文件压缩到test.zip中\"]},\"492\":{\"h\":\"unzip\",\"t\":[\"用于解压zip压缩包\",\"语法：unzip [-d] 参数\",\"-d指定要解压到的位置\",\"示例：\",\"unzip test.zip\",\"将test.zip解压到当前目录\",\"unzip test.zip -d /root\",\"将test.zip解压到/root目录\"]},\"493\":{\"h\":\"使用docker部署前后端分离项目\"},\"494\":{\"h\":\"使用docker compose部署后端：\",\"t\":[\"springboot项目依赖MySQL和Redis\",\"为了数据库中的表可以在新的环境中不用手动创建，我们需要引入flyway工具，帮我们做组件库的迁移操作\",\"运行Spring Boot应用程序：启动Spring Boot应用程序时，Flyway将自动检测并应用迁移脚本。它会连接到Docker Compose中的MySQL服务，将数据库结构更新到最新状态。\",\"添加依赖\",\"<!--数据库迁移工具--> <dependency> <groupId>org.flywaydb</groupId> <artifactId>flyway-core</artifactId> </dependency> \",\"配置application.yml\",\"spring: flyway: url: ${spring.datasource.url} user: ${spring.datasource.username} password: ${spring.datasource.password} locations: classpath:db/migration baseline-on-migrate: true # 尝试10次连接，防止docker compose启动springboot项目的时候mysql还没有启动完毕 connect-retries: 10 # 每次重试之间的间隔为10秒 connect-retries-interval: 10s \",\"在类路径下的db/migration文件夹下编写V1__Create_table.sql文件，在项目运行初始化的时候会自动执行该sql文件具体路径：src/main/resources/db/migration/V1__Create_table.sql\",\"-- V1__Create_table.sql CREATE TABLE IF NOT EXISTS table1 ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL ); CREATE TABLE IF NOT EXISTS table2 ( id INT AUTO_INCREMENT PRIMARY KEY, email VARCHAR(100) NOT NULL ); -- 可以编写对个创建表的语句 \",\"每个迁移脚本都会被视为一个独立的迁移单元，并按照它们的版本号顺序执行。\",\"编写完后执行mvn package把项目打包，把打包完毕的jar包上传到服务器app文件夹下的target文件夹下\",\"在app文件夹下编写Dockerfile构建服务镜像\",\"FROM maven:3.8.2-jdk-8 # copy local code to the container image. WORKDIR /app #COPY pom.xml . #COPY src ./src COPY target/bonfire-backend-0.0.1.jar ./target/bonfire-backend-0.0.1.jar # Builder a release artifact. #RUN mvn package -DskipTests # Run the web service on container startup. CMD [\\\"java\\\",\\\"-jar\\\",\\\"/app/target/bonfire-backend-0.0.1.jar\\\",\\\"--spring.profiles.active=prod\\\"] \",\"构建springboot的镜像，执行docker build -t bonfire:4.0 .命令\",\"编写docker-compose.yml\",\"version: \\\"3\\\" services: bonfire_server: image: bonfire:4.0 container_name: bonfire_server restart: on-failure:3 depends_on: - bonfire_mysql - bonfire_redis networks: bonfire_network: volumes: - ./images/:/app/images/ ports: - \\\"8088:8088\\\" environment: - SERVER_PORT=8088 - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver - SPRING_DATASOURCE_URL=jdbc:mysql://bonfire_mysql:3306/star_project?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true - SPRING_DATASOURCE_USERNAME=root # mysql password - SPRING_DATASOURCE_PASSWORD=password - SPRING_REDIS_PORT=6379 - SPRING_REDIS_DATABASE=0 - SPRING_REDIS_HOST=bonfire_redis # redis password - SPRING_REDIS_PASSWORD=password bonfire_mysql: image: mysql:8.0.28 container_name: bonfire_mysql restart: on-failure:3 networks: bonfire_network: command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true volumes: - /etc/localtime:/etc/localtime:ro - ./mysql:/var/lib/mysql - ./mysqlBackup:/data/mysqlBackup ports: - \\\"3306:3306\\\" environment: # mysql password 和上面的一致 - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=star_project bonfire_redis: image: redis container_name: bonfire_redis restart: on-failure:3 networks: bonfire_network: volumes: - ./redis/data:/data - ./redis/logs:/logs # redis password 和上面一致 command: redis-server --requirepass password ports: - \\\"6379:6379\\\" networks: bonfire_network: \",\"可以根据需要进行对应的修改。\",\"注意springboot的application.yml的配置mysql和redis的ip地址需要写对应的服务容器的名称，因为可以上面编写的都在同一docker网络下，可以通过容器名称相互连接。不配置也没关系，在environment中配置会覆盖掉application.yml中的配置，因为优先级的原因。所以environment中如果配置一定要配置正确！\",\"执行docker compose up -d后台启动服务\",\"image-20230711155110179\"]},\"495\":{\"h\":\"在docker上使用Nginx部署前端\",\"t\":[\"把前端项目打包后的dist目录下的所有文件上传到服务器的指定目录下，这里我指定：/root/bonfire-app/html,编写一个nginx.conf的Nginx的配置文件，可参考如下配置：\",\" #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { worker_connections 1024; } http { client_max_body_size 50m; include mime.types; default_type application/json; #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server { listen 80; server_name hb.wuluwulu.cn; location / { # 加载前端的打包文件 root /usr/share/nginx/html; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } location /api { default_type application/json; keepalive_timeout 30s; keepalive_requests 1000; #支持keep-alive proxy_http_version 1.1; # 包含 /api #rewrite /api(/.*) $1 break; proxy_pass_request_headers on; #more_clear_input_headers Accept-Encoding; proxy_next_upstream error timeout; #proxy_pass http://127.0.0.1:8088; proxy_pass http://backend; } } # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #} upstream backend { # 指定后端springboot服务对应的ip和端口号 server 118.195.244.168:8088 max_fails=5 fail_timeout=10s weight=1; # 如果部署了多个该服务，可以接着写，nginx会实现负载均衡 weight可以配置权重 #server 127.0.0.1:8082 max_fails=5 fail_timeout=10s weight=1; } } \",\"执行如下命令启动nginx\",\"docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d -p 80:80 nginx \",\"猜想：使用docker compose同时编排后端和前端，就不需要执行上面的命令单独启动nginx容器了。\",\"最后的最后：如果都已经配置完毕，浏览器不能访问出现一直转圈的情况，重启服务器，重新启动服务\"]},\"496\":{\"h\":\"服务器的历史命令\",\"t\":[\"最后附上实操的历史命令，真的是经过一系列的踩坑总结出的。\",\"掌握的：\",\"数据库的迁移：flyway\",\"docker compose的使用\",\"docker上使用nginx部署前端的配资\",\"Dockerfile的编写构建springboot服务镜像\",\"历史命令：\",\"1 2023-07-11 14:54:16 2 2023-07-10 12:49:52 ls 3 2023-07-10 12:49:55 ls -a 4 2023-07-10 12:49:57 top 5 2023-07-10 12:50:05 yarn 6 2023-07-10 12:50:08 yun 7 2023-07-10 12:50:10 yum 8 2023-07-10 12:50:46 yum install docker 9 2023-07-10 12:52:08 docker 10 2023-07-10 12:52:14 docker images 11 2023-07-10 12:52:53 docker -v 12 2023-07-10 12:53:09 docker --version 13 2023-07-10 12:53:16 docker-compose -v 14 2023-07-10 12:53:43 yum install redis 15 2023-07-10 12:54:15 redis 16 2023-07-10 12:54:20 redis-server 17 2023-07-10 12:54:38 systemctl status redis 18 2023-07-10 12:54:47 systemctl start redis 19 2023-07-10 12:54:49 systemctl status redis 20 2023-07-10 12:54:56 redis-cli 21 2023-07-10 12:55:19 top 22 2023-07-10 13:00:26 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 23 2023-07-10 13:01:23 ls 24 2023-07-10 13:01:27 docker ps 25 2023-07-10 13:01:31 docker ps -a 26 2023-07-10 13:01:48 mkdir -r /my/own/datadir 27 2023-07-10 13:01:53 mkdir -R /my/own/datadir 28 2023-07-10 13:02:00 cd .. 29 2023-07-10 13:02:00 ls 30 2023-07-10 13:02:08 mkdir my 31 2023-07-10 13:02:09 ls 32 2023-07-10 13:02:11 cd my 33 2023-07-10 13:02:17 mkdir own 34 2023-07-10 13:02:19 cd own/ 35 2023-07-10 13:02:27 mkdir datadir 36 2023-07-10 13:02:28 ls 37 2023-07-10 13:02:37 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 38 2023-07-10 13:02:43 ls 39 2023-07-10 13:02:45 cd datadir/ 40 2023-07-10 13:02:46 ls 41 2023-07-10 13:02:51 cd 42 2023-07-10 13:02:56 docker ps -a 43 2023-07-10 13:10:19 ls 44 2023-07-10 13:10:33 ps -ef | group redis 45 2023-07-10 13:10:41 ps -ef 46 2023-07-10 13:15:58 ls 47 2023-07-10 13:16:15 mkdir bonfire-app 48 2023-07-10 13:16:17 cd bonfire-app/ 49 2023-07-10 13:16:25 vim Dockerfile 50 2023-07-10 13:16:40 ls 51 2023-07-10 13:21:24 ls 52 2023-07-10 13:21:26 ll 53 2023-07-10 13:21:33 ls -lh 54 2023-07-10 13:21:39 cd target/ 55 2023-07-10 13:21:42 ll -h 56 2023-07-10 13:21:47 cd .. 57 2023-07-10 13:21:48 ls 58 2023-07-10 13:22:08 docker build --help 59 2023-07-10 13:22:29 docker build -t bonfire:1.0 . 60 2023-07-10 13:23:27 docker images 61 2023-07-10 13:23:55 docker run -d -p 8088:8088 2d002dbd5b5c 62 2023-07-10 13:23:58 docker ps 63 2023-07-10 13:24:04 docker ps 64 2023-07-10 13:24:05 docker ps 65 2023-07-10 13:24:07 docker ps 66 2023-07-10 13:24:14 docker logs 00e808f448eb 67 2023-07-10 13:24:24 docker ps 68 2023-07-10 13:26:27 yum info redis 69 2023-07-10 13:26:49 ls 70 2023-07-10 13:26:50 cd 71 2023-07-10 13:26:51 ls 72 2023-07-10 13:26:53 cd .. 73 2023-07-10 13:26:53 ls 74 2023-07-10 13:26:55 cd etc/ 75 2023-07-10 13:26:56 ls 76 2023-07-10 13:27:01 cd redis 77 2023-07-10 13:27:15 vim redis.conf 78 2023-07-10 13:28:46 systemctl restart redis 79 2023-07-10 13:28:54 systemctl status redis 80 2023-07-10 13:28:59 redis-cli 81 2023-07-10 13:32:40 ls 82 2023-07-10 13:32:50 systemctl stop redis 83 2023-07-10 13:32:56 systemctl status redis 84 2023-07-10 13:33:13 redis-server redis.conf 85 2023-07-10 13:33:57 systemctl status redis 86 2023-07-10 13:35:56 vim redis.conf 87 2023-07-10 13:36:44 vim redis.conf 88 2023-07-10 13:37:27 redis-server redis.conf 89 2023-07-10 13:37:37 systemctl status redis 90 2023-07-10 13:37:49 redis-cli 91 2023-07-10 13:39:34 ls 92 2023-07-10 13:39:36 cd 93 2023-07-10 13:39:36 ls 94 2023-07-10 13:39:38 cd bonfire-app/ 95 2023-07-10 13:39:39 ls 96 2023-07-10 13:39:55 docker build -t bonfire:1.1 . 97 2023-07-10 13:40:02 docker images 98 2023-07-10 13:40:12 docker rmi -f 2d002dbd5b5c 99 2023-07-10 13:40:20 docker images 100 2023-07-10 13:40:22 docker ps 101 2023-07-10 13:40:38 docker run -d -p 8088:8088 688bae0a8257 102 2023-07-10 13:40:43 docker ps 103 2023-07-10 13:41:01 docker logs -f 46b501866f0f 104 2023-07-10 13:43:39 systemctl --help 105 2023-07-10 13:44:11 systemctl services --help 106 2023-07-10 13:44:19 systemctl services 107 2023-07-10 13:44:25 systemctl list 108 2023-07-10 13:44:40 systemctl status iptables 109 2023-07-10 13:44:49 systemctl status firewarn 110 2023-07-10 13:44:51 systemctl status firewarm 111 2023-07-10 13:45:27 systemctl status firewalld 112 2023-07-10 13:45:57 redis-cli 113 2023-07-10 13:46:14 cd 114 2023-07-10 13:46:15 cd / 115 2023-07-10 13:46:16 ls 116 2023-07-10 13:46:17 cd etc/ 117 2023-07-10 13:46:18 ls 118 2023-07-10 13:46:23 vim redis.conf 119 2023-07-10 13:47:35 docker run -d -p 8088:8088 --network host 688bae0a8257 120 2023-07-10 13:47:43 docker ps 121 2023-07-10 13:48:01 docker ps -a 122 2023-07-10 13:48:16 docker ps 123 2023-07-10 13:48:33 docker logs 46b501866f0f 124 2023-07-10 13:48:39 docker ps -a 125 2023-07-10 13:48:54 docker rm -f 46b501866f0f 638346b1cb4e 126 2023-07-10 13:49:04 docker ps 127 2023-07-10 13:50:19 rpm -q podman 128 2023-07-10 13:50:25 dnf remove podman 129 2023-07-10 13:50:46 docker ps 130 2023-07-10 13:51:35 yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine 131 2023-07-10 13:52:01 yum install -y yum-utils device-mapper-persistent-data \\\\ 132 2023-07-10 13:55:16 sudo yum install -y yum-utils 133 2023-07-10 13:55:27 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 134 2023-07-10 13:55:40 sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 135 2023-07-10 13:58:11 yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 136 2023-07-10 13:58:18 sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 137 2023-07-10 13:59:12 docker -v 138 2023-07-10 14:05:01 docker 139 2023-07-10 14:05:05 docker images 140 2023-07-10 14:05:14 systemctl start docker 141 2023-07-10 14:05:20 systemctl status docker 142 2023-07-10 14:05:36 docker images 143 2023-07-10 14:05:45 cd 144 2023-07-10 14:05:47 ls 145 2023-07-10 14:05:50 cd .. 146 2023-07-10 14:05:51 ls 147 2023-07-10 14:05:58 cd my/ 148 2023-07-10 14:05:59 ls 149 2023-07-10 14:06:01 cd w 150 2023-07-10 14:06:04 cd own/ 151 2023-07-10 14:06:05 ls 152 2023-07-10 14:06:07 cd datadir/ 153 2023-07-10 14:06:07 ls 154 2023-07-10 14:06:09 cd 155 2023-07-10 14:06:52 history | grep docker 156 2023-07-10 14:07:13 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 157 2023-07-10 14:08:17 ps -ef | grep 3306 158 2023-07-10 14:08:22 ps -ef | grep mysql 159 2023-07-10 14:08:33 docker ps 160 2023-07-10 14:08:44 kill -9 14117 161 2023-07-10 14:08:47 ps -ef | grep mysql 162 2023-07-10 14:08:57 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 163 2023-07-10 14:09:03 docker ps -a 164 2023-07-10 14:09:11 docker rm -f 942ca52b8eb6 165 2023-07-10 14:09:13 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 166 2023-07-10 14:09:18 docker ps 167 2023-07-10 14:10:02 ls 168 2023-07-10 14:10:04 docker ps 169 2023-07-10 14:10:14 docker exec -it ff4885cd81eb bash 170 2023-07-10 14:11:20 redis-cli 171 2023-07-10 14:11:47 redis-service --help 172 2023-07-10 14:11:55 redis-server --help 173 2023-07-10 14:12:34 redis-server /etc/redis.conf 174 2023-07-10 14:12:40 redis-cli 175 2023-07-10 14:13:12 vim /etc/redis.conf 176 2023-07-10 14:13:58 redis-server /etc/redis.conf 177 2023-07-10 14:15:52 ps aux|grep redis 178 2023-07-10 14:16:07 kill -9 23205 179 2023-07-10 14:16:14 vim /etc/redis.conf 180 2023-07-10 14:16:33 redis-cli 181 2023-07-10 14:17:06 redis-server /etc/redis.conf 182 2023-07-10 14:17:12 redis-cli 183 2023-07-10 14:17:44 ls 184 2023-07-10 14:17:46 cd bonfire-app/ 185 2023-07-10 14:17:47 ls 186 2023-07-10 14:18:03 docker build -t bonfire:1.0 . 187 2023-07-10 14:19:18 docker images 188 2023-07-10 14:19:40 docker run -d -p 8088:8088 77a993af29ad 189 2023-07-10 14:19:42 docker ps 190 2023-07-10 14:19:55 docker logs -f 6cd7733b5732 191 2023-07-10 14:20:29 docker ps 192 2023-07-10 14:25:09 docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx 193 2023-07-10 14:25:33 ls 194 2023-07-10 14:26:56 lscf nginx.conf/ 195 2023-07-10 14:27:01 cd nginx.conf/ 196 2023-07-10 14:27:02 ls 197 2023-07-10 14:27:04 cd .. 198 2023-07-10 14:27:07 ls 199 2023-07-10 14:27:12 rm -rf nginx.conf/ 200 2023-07-10 14:27:18 touch nginx.conf 201 2023-07-10 14:27:19 ls 202 2023-07-10 14:27:24 docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx 203 2023-07-10 14:27:38 docker ps -a 204 2023-07-10 14:27:48 docker rm -f 2652d0dcc163 205 2023-07-10 14:27:51 docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx 206 2023-07-10 14:27:53 docker ps 207 2023-07-10 14:27:59 docker ps -a 208 2023-07-10 14:28:08 docker logs 8fc0a4b3b3a8 209 2023-07-10 14:28:24 ls 210 2023-07-10 14:28:29 docker ps -a 211 2023-07-10 14:28:50 ls 212 2023-07-10 14:28:54 vim nginx.conf 213 2023-07-10 14:31:29 docker rm -f 8fc0a4b3b3a8 214 2023-07-10 14:31:35 docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx 215 2023-07-10 14:31:38 docker ps 216 2023-07-10 14:31:40 docker ps 217 2023-07-10 14:31:41 docker ps 218 2023-07-10 14:31:43 docker ps 219 2023-07-10 14:31:44 docker ps 220 2023-07-10 14:31:46 docker ps 221 2023-07-10 14:31:53 docker logs 9f13b2a470dc 222 2023-07-10 14:32:07 ls 223 2023-07-10 14:32:10 docker ps 224 2023-07-10 14:32:19 docker exec -it 9f13b2a470dc bash 225 2023-07-10 14:35:23 ls 226 2023-07-10 14:35:27 docker ps 227 2023-07-10 14:36:34 docker rm -f 9f13b2a470dc 228 2023-07-10 14:36:50 docker run --name bonfire-nginx -v /root/bonfire-app/html:/usr/share/nginx/html:ro -v /root/bonfire-app/nginx.conf:/etc/nginx/nginx.conf:ro -d -p 80:80 nginx 229 2023-07-10 14:36:53 docker ps 230 2023-07-10 14:37:42 ls 231 2023-07-10 14:37:48 vim nginx.conf 232 2023-07-10 14:38:51 docker ps 233 2023-07-10 14:39:01 docker logs 6cd7733b5732 234 2023-07-10 14:39:13 docker ps 235 2023-07-10 14:39:22 docker restart ad294e28d290 236 2023-07-10 14:39:54 vim nginx.conf 237 2023-07-10 14:40:39 docker restart ad294e28d290 238 2023-07-10 14:42:05 docker logs 6cd7733b5732 239 2023-07-10 14:44:19 docker logs 6cd7733b5732 240 2023-07-10 14:44:59 docker ps 241 2023-07-10 14:45:47 ls 242 2023-07-10 14:45:50 cd / 243 2023-07-10 14:45:51 ls 244 2023-07-10 14:45:53 cd my 245 2023-07-10 14:45:54 ls 246 2023-07-10 14:45:55 cd own/ 247 2023-07-10 14:45:56 ls 248 2023-07-10 14:45:59 cd datadir/ 249 2023-07-10 14:46:00 ls 250 2023-07-10 14:46:06 cd mysql 251 2023-07-10 14:46:07 ls 252 2023-07-10 14:46:09 cd .. 253 2023-07-10 14:46:25 cat auto.cnf 254 2023-07-10 14:49:30 docker ps 255 2023-07-10 14:51:13 docker inject ff4885cd81eb 256 2023-07-10 14:51:23 docker --help 257 2023-07-10 14:51:37 docker inspact ff4885cd81eb 258 2023-07-10 14:51:45 docker inspect ff4885cd81eb 259 2023-07-10 14:52:49 history | grep docker run 260 2023-07-10 14:53:04 history | grep 'docker run' 261 2023-07-10 14:54:11 docker ps 262 2023-07-10 14:54:19 docker rm -f ff4885cd81eb 263 2023-07-10 14:54:54 docker run --name bonfire-mysql -p 3306:3306 -v /my/own/datadir:/var/lib/mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d mysql:8.0.28 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci 264 2023-07-10 14:55:00 docker ps 265 2023-07-10 14:55:04 ;s 266 2023-07-10 14:55:07 ls 267 2023-07-10 14:55:08 cd . 268 2023-07-10 14:55:10 cd .. 269 2023-07-10 14:55:10 ls 270 2023-07-10 14:55:13 cd .. 271 2023-07-10 14:55:13 ls 272 2023-07-10 14:55:16 cd custom/ 273 2023-07-10 14:55:16 ls 274 2023-07-10 14:56:21 vim my.cnf 275 2023-07-10 14:57:17 docker ps 276 2023-07-10 14:57:26 docker restart d02e998ad8f9 277 2023-07-10 14:58:50 docker logs 6cd7733b5732 278 2023-07-10 15:01:25 mysql 279 2023-07-10 15:01:41 docker ps 280 2023-07-10 15:09:07 ls 281 2023-07-10 15:09:12 vim my.cnf 282 2023-07-10 15:09:23 rm -f my.cnf 283 2023-07-10 15:09:24 ls 284 2023-07-10 15:09:26 cd .. 285 2023-07-10 15:09:27 ls 286 2023-07-10 15:09:29 cd 287 2023-07-10 15:10:41 ls 288 2023-07-10 15:10:47 docker ps 289 2023-07-10 15:10:55 docker stop d02e998ad8f9 290 2023-07-10 15:11:11 docker rm -f 6cd7733b5732 291 2023-07-10 15:11:13 ls 292 2023-07-10 15:11:42 docker images 293 2023-07-10 15:11:45 cd bonfire-app/ 294 2023-07-10 15:11:46 ls 295 2023-07-10 15:11:56 docker build -t bonfire:2.0 . 296 2023-07-10 15:12:04 docker images 297 2023-07-10 15:12:32 docker run --name bonfire_server -p 8088:8088 -d 4c8b535e3b85 298 2023-07-10 15:12:37 docker ps 299 2023-07-10 15:12:45 docker logs ec626f3344d3 300 2023-07-10 15:12:51 docker logs -f ec626f3344d3 301 2023-07-10 20:08:41 ls 302 2023-07-10 20:08:56 docker build -t bonfire:2.2 . 303 2023-07-10 20:09:03 docker ps -a 304 2023-07-10 20:09:25 docker rm -f ec626f3344d3 305 2023-07-10 20:09:29 docker images 306 2023-07-10 20:10:36 docker run -d -p 8088:8088 --name bonfire_server -v /root/bonfire-app/images:/app/images/ bd6398b9717d 307 2023-07-10 20:10:38 ls 308 2023-07-10 20:10:41 cd images/ 309 2023-07-10 20:10:42 ls 310 2023-07-10 20:10:51 docker ps 311 2023-07-10 20:10:56 docker ps -a 312 2023-07-10 20:11:08 docker logs 70c1e15bc759 313 2023-07-10 20:11:56 redis-cli 314 2023-07-10 20:15:32 docker ps -a 315 2023-07-10 20:15:41 docker rm -f 70c1e15bc759 316 2023-07-10 20:15:45 docker images 317 2023-07-10 20:15:58 docker rmi bd6398b9717d 4c8b535e3b85 77a993af29ad 318 2023-07-10 20:16:01 ls 319 2023-07-10 20:16:03 cd .. 320 2023-07-10 20:16:04 ls 321 2023-07-10 20:16:41 docker build -t bonfire:3.0 . 322 2023-07-10 20:16:48 docker images 323 2023-07-10 20:17:06 docker run -d -p 8088:8088 --name bonfire_server -v /root/bonfire-app/images:/app/images/ a6342b4a171c 324 2023-07-10 20:17:10 docker ps -a 325 2023-07-10 20:17:15 docker ps -a 326 2023-07-10 20:17:25 docker logs -f ad7c841ad50e 327 2023-07-10 20:21:37 ls 328 2023-07-10 20:21:40 cd images/ 329 2023-07-10 20:21:41 ls 330 2023-07-10 20:21:43 cd .. 331 2023-07-10 20:21:44 ls 332 2023-07-10 20:21:53 cd .. 333 2023-07-10 20:21:54 ls 334 2023-07-11 11:20:45 ls 335 2023-07-11 11:30:20 ls 336 2023-07-11 11:30:24 cd / 337 2023-07-11 11:30:25 ls 338 2023-07-11 11:30:26 cd etc/ 339 2023-07-11 11:30:27 ls 340 2023-07-11 11:30:34 vim redis.conf 341 2023-07-11 11:31:39 docker ps 342 2023-07-11 11:31:50 docker inspect --help 343 2023-07-11 11:32:01 docker inspect ad7c841ad50e 344 2023-07-11 11:32:22 ls 345 2023-07-11 11:32:30 systemctl status redis 346 2023-07-11 11:33:41 ls 347 2023-07-11 11:33:56 cd systemd/ 348 2023-07-11 11:33:56 ls 349 2023-07-11 11:34:03 cd system 350 2023-07-11 11:34:04 ls 351 2023-07-11 11:34:21 cat redis.service 352 2023-07-11 11:34:31 cd redis.service.d/ 353 2023-07-11 11:34:32 ls 354 2023-07-11 11:34:36 cat limit.conf 355 2023-07-11 11:34:44 cd .. 356 2023-07-11 11:34:46 ls 357 2023-07-11 11:37:04 ps -ef | grep redis-server 358 2023-07-11 11:37:13 kill 36319 359 2023-07-11 11:37:19 ps -ef | grep redis-server 360 2023-07-11 11:37:27 docker ps 361 2023-07-11 11:37:38 systemctl start redis 362 2023-07-11 11:37:45 systemctl status redis 363 2023-07-11 11:38:09 systemctl start redis 364 2023-07-11 11:38:11 systemctl status redis 365 2023-07-11 11:38:50 cd .. 366 2023-07-11 11:38:51 cd .. 367 2023-07-11 11:38:52 ls 368 2023-07-11 11:38:57 vim redis.conf 369 2023-07-11 11:39:12 systemctl start redis 370 2023-07-11 11:39:16 systemctl status redis 371 2023-07-11 11:42:38 docker ps 372 2023-07-11 11:42:45 docker logs ad7c841ad50e 373 2023-07-11 11:43:17 docker ps 374 2023-07-11 11:44:12 docker logs ad7c841ad50e 375 2023-07-11 11:46:57 systemctl status redis 376 2023-07-11 11:47:11 vim redis.conf 377 2023-07-11 11:47:35 systemctl restart redis 378 2023-07-11 11:47:38 systemctl status redis 379 2023-07-11 11:47:45 systemctl status redis 380 2023-07-11 11:48:25 vim redis.conf 381 2023-07-11 11:54:41 systemctl stop redis 382 2023-07-11 11:54:52 systemctl status redis 383 2023-07-11 11:54:57 docker ps 384 2023-07-11 11:55:04 docker stop ad7c841ad50e 385 2023-07-11 12:01:08 ls 386 2023-07-11 12:01:20 docker images 387 2023-07-11 12:01:39 cd 388 2023-07-11 12:01:40 ls 389 2023-07-11 12:01:43 docker images 390 2023-07-11 12:01:56 ls 391 2023-07-11 12:01:58 cd bonfire-app/ 392 2023-07-11 12:01:59 ls 393 2023-07-11 12:02:12 vim docker-compose.yml 394 2023-07-11 12:13:33 ls 395 2023-07-11 12:13:36 docker ps 396 2023-07-11 12:13:38 docker ps -a 397 2023-07-11 12:13:52 docker rm ad7c841ad50e d02e998ad8f9 398 2023-07-11 12:13:53 ls 399 2023-07-11 12:14:01 docker ps -a 400 2023-07-11 12:14:29 ps -ef | grep mysql 401 2023-07-11 12:14:34 ps -ef | grep 3306 402 2023-07-11 12:14:38 ps -ef | grep redis 403 2023-07-11 12:14:40 ls 404 2023-07-11 12:15:05 dockerls 405 2023-07-11 12:15:09 vim docker-compose.yml 406 2023-07-11 12:15:54 docker-compose -v 407 2023-07-11 12:15:57 ls 408 2023-07-11 12:16:09 docker-compose up -d 409 2023-07-11 12:16:16 docker -v 410 2023-07-11 12:17:44 docker-compose --version 411 2023-07-11 12:18:56 sudo curl -L \\\"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose 412 2023-07-11 12:19:38 ls 413 2023-07-11 12:19:56 ls /usr/local/bin/ 414 2023-07-11 12:20:16 rm -f /usr/local/bin//docker-compose 415 2023-07-11 12:20:19 ls /usr/local/bin/ 416 2023-07-11 12:21:05 sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose 417 2023-07-11 12:21:32 sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose 418 2023-07-11 12:22:27 sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose 419 2023-07-11 12:22:46 sudo chmod +x /usr/local/bin/docker-compose 420 2023-07-11 12:23:06 docker-compose -v 421 2023-07-11 12:23:42 rm -f /usr/local/bin//docker-compose 422 2023-07-11 12:23:47 ls /usr/local/bin/ 423 2023-07-11 12:23:56 docker-compose -v 424 2023-07-11 12:24:56 yum update 425 2023-07-11 13:44:31 docker images 426 2023-07-11 13:46:08 ls 427 2023-07-11 13:46:10 ls 428 2023-07-11 13:46:19 ls -a 429 2023-07-11 13:46:42 ls 430 2023-07-11 13:46:59 docker build -t bonfire:4.0 . 431 2023-07-11 13:47:03 ls 432 2023-07-11 13:47:07 docker images 433 2023-07-11 13:47:15 vim docker-compose.yml 434 2023-07-11 13:48:40 docker-compose -v 435 2023-07-11 13:48:55 yum install docker-compose-plugin 436 2023-07-11 13:49:20 docker compose version 437 2023-07-11 13:49:28 ls 438 2023-07-11 13:50:44 docker compose up -d 439 2023-07-11 13:51:03 docker ps 440 2023-07-11 13:51:12 docker ps 441 2023-07-11 13:51:22 docker logs 48ef03bb2ecf 442 2023-07-11 13:51:50 docker ps 443 2023-07-11 13:52:02 docker exec -it dbaec7422f0c bash 444 2023-07-11 13:53:30 ls 445 2023-07-11 13:53:33 docker ps 446 2023-07-11 13:53:42 top 447 2023-07-11 13:53:48 docker ps 448 2023-07-11 13:53:58 docker logs 3da25c0a0b2a 449 2023-07-11 13:54:15 docker logs 48ef03bb2ecf 450 2023-07-11 13:57:39 docker ps 451 2023-07-11 13:57:42 ls 452 2023-07-11 13:57:54 cd images/ 453 2023-07-11 13:57:54 ls 454 2023-07-11 13:57:56 cd .. 455 2023-07-11 13:57:57 ls 456 2023-07-11 13:59:01 docker logs ad294e28d290 457 2023-07-11 14:00:19 docker logs ad294e28d290 458 2023-07-11 14:02:19 docker ps 459 2023-07-11 14:02:27 ls 460 2023-07-11 14:02:29 cd html/ 461 2023-07-11 14:02:30 ls 462 2023-07-11 14:02:31 cd .. 463 2023-07-11 14:02:32 ls 464 2023-07-11 14:02:37 vim nginx.conf 465 2023-07-11 14:06:19 docker ps 466 2023-07-11 14:06:22 ls 467 2023-07-11 14:06:50 cd mysql 468 2023-07-11 14:06:51 ls 469 2023-07-11 14:06:56 cd star_project/ 470 2023-07-11 14:06:56 ls 471 2023-07-11 14:07:02 cd .. 472 2023-07-11 14:07:04 cd .. 473 2023-07-11 14:07:04 ls 474 2023-07-11 14:07:12 docker compose ps 475 2023-07-11 14:07:23 docker compose --help 476 2023-07-11 14:07:58 docker compose top 477 2023-07-11 14:17:05 docker ps 478 2023-07-11 14:17:22 docker restart ad294e28d290 479 2023-07-11 14:17:40 docker ps 480 2023-07-11 14:17:54 docker images 481 2023-07-11 14:18:43 docker rmi a6342b4a171c 482 2023-07-11 14:18:47 docker images 483 2023-07-11 14:18:56 docker ps 484 2023-07-11 14:19:53 top 485 2023-07-11 14:20:56 docker network ps 486 2023-07-11 14:21:00 docker network ls 487 2023-07-11 14:21:19 docker network inspect 2526c192ec6e 488 2023-07-11 14:27:35 ls 489 2023-07-11 14:27:39 docker ps 490 2023-07-11 14:27:45 docker logs ad294e28d290 491 2023-07-11 14:30:09 ls 492 2023-07-11 14:30:24 ls 493 2023-07-11 14:30:26 docker ps 494 2023-07-11 14:43:21 docker logs ad294e28d290 495 2023-07-11 14:44:10 systemctl status firewall 496 2023-07-11 14:44:26 systemctl status firewalld 497 2023-07-11 14:45:28 ls 498 2023-07-11 14:45:31 docker ps 499 2023-07-11 14:45:43 docker exec -it ad294e28d290 bash 500 2023-07-11 14:54:27 docker ps 501 2023-07-11 14:54:35 systemctl start docker 502 2023-07-11 14:54:43 systemctl status docker 503 2023-07-11 14:54:51 docker ps 504 2023-07-11 14:54:55 docker ps -a 505 2023-07-11 14:55:05 docker start ad294e28d290 506 2023-07-11 14:55:24 cd bonfire-app/ 507 2023-07-11 14:55:24 ls 508 2023-07-11 14:55:30 docker compose up -d 509 2023-07-11 14:58:33 docker compose logs 510 2023-07-11 15:10:45 history \"]},\"497\":{\"h\":\"MySQL\"},\"498\":{\"h\":\"数据库相关概念\",\"t\":[\"image-20220813132000741\"]},\"499\":{\"h\":\"常见的关系型数据库管理系统\",\"t\":[\"image-20220813132058698\"]},\"500\":{\"h\":\"MySQL下载官网\",\"t\":[\"https://downloads.mysql.com/archives/community/\"]},\"501\":{\"h\":\"MySQL登陆参数\",\"t\":[\"mysql -u 用户名 -p 密码 [-h(ip地址) -P(端口号默认3306)] \"]},\"502\":{\"h\":\"MySQL数据模型\"},\"503\":{\"h\":\"关系型数据库\",\"t\":[\"image-20220813134023770\",\"image-20220813134216064\"]},\"504\":{\"h\":\"SQL\",\"t\":[\"SQL语句可以单行或多行书写，以分号结尾\",\"MySQL数据库的SQL语句部分大小写，关键字建议使用大写\",\"注释 \",\"单行注释：-- 注释内容或 **#**注释内容（SQL独有）\",\"多行注释：*/* 注释 /\",\"SHOW DATABASES; -- 查询所有数据库名称 SHOW DATABASES; #查询所有数据库名称 SHOW DATABASES;/*select all database*/ \"]},\"505\":{\"h\":\"SQL分类\",\"t\":[\"DDL 数据定义语言，用来定义数据库对象：数据库，表，列等\",\"DML 数据库操作语言，用来对数据库中的表进行增删改\",\"DQL 数据库查询语言，用来查询数据库中表的记录（数据）\",\"DCL 数据控制语言，用来定义数据库的访问权限和安全级别，及创建用户的\",\"image-20220813134639482\"]},\"506\":{\"h\":\"DDL\"},\"507\":{\"h\":\"DDL--操作数据库\",\"t\":[\"查询\",\"SHOW DATABASES; \",\"创建\",\"创建数据库\",\"CREATE DATABASE 数据库名称; \",\"创建数据库（判断，如果存在则不创建）\",\"CREATE DATABASE IF NOT EXISTS 数据库名称; \",\"删除\",\"删除数据库\",\"DROP DATABASE IF EXISTS 数据库名称; \",\"使用数据库\",\"查看当前使用的数据库\",\"SELECT DATABASE(); \",\"使用数据库\",\"USE 数据库名称; \",\"image-20220813135546408\"]},\"508\":{\"h\":\"DDL--操作表\",\"t\":[\"创建(Create)\",\"查询(Retrieve)\",\"修改(Update)\",\"删除(Delete)\"]},\"509\":{\"h\":\"查询表\",\"t\":[\"查询当前数据库下有哪些表的名称\",\"SHOW TABLES; \",\"查询表结构\",\"DESC 表名称; \"]},\"510\":{\"h\":\"创建表\",\"t\":[\"CREATE TABLE tb_user( id int, username VARCHAR(20), password VARCHAR(32) ); DESC tb_user; -- 查看表的结构 \"]},\"511\":{\"h\":\"数据类型\",\"t\":[\"MySQL支持多种类型，可以分为三类： \",\"数值\",\"日期\",\"字符串\",\"image-20220813135942300\",\"CREATE TABLE student ( id INT, NAME VARCHAR ( 10 ), gender CHAR ( 1 ), brithday DATE, score DOUBLE ( 5, 2 ), email VARCHAR ( 64 ), tel VARCHAR ( 15 ), STATUS TINYINT -- 最后一行没有逗号 ); DESC student; \"]},\"512\":{\"h\":\"修改\",\"t\":[\"修改表名\",\"ALTER TABLE 表名 RENAME TO 新的表名; \",\"添加一列\",\"ALTER TABLE 表名 ADD 列名 数据类型; \",\"修改数据类型\",\"ALTER TABLE 表名 MODIFY 列名 新的数据类型; \",\"修改列名和数据类型\",\"ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型; \",\"删除列\",\"ALTER TABLE 表名 DROP 列名; \",\"image-20220813142255313\"]},\"513\":{\"h\":\"删除\",\"t\":[\"删除表\",\"DROP TABLE 表名; \",\"删除表时判断表是否存在\",\"DROP TABLE IF EXISTS 表名; \"]},\"514\":{\"h\":\"DML\",\"t\":[\"添加(insert)\",\"修改(update)\",\"删除(delete)\",\"/*----------- insert----------*/ SELECT * FROM tb_user; INSERT INTO tb_user ( id, username ) VALUES ( 1, '张三' ); INSERT INTO tb_user ( id, username, PASSWORD ) VALUES ( 3, '王五', 123456 ); INSERT INTO tb_user -- 如果给所有的列添加数据，列名可以省略，不过不建议省略 VALUES ( 2, '李四', 123 ); /* 批量添加 */ INSERT INTO tb_user VALUES ( 2, '李四', 123 ),( 2, '李四', 123 ),( 2, '李四', 123 ); /*--------update-----------*/ UPDATE tb_user SET id = 4, username = 'lisi', PASSWORD = 222 WHERE id = 3; UPDATE tb_user SET PASSWORD = 123333 WHERE id = 1; SELECT * FROM tb_user; /*----删除数据------*/ DELETE FROM tb_user WHERE -- 如果不加where会删除所有的数据 id = 4; \"]},\"515\":{\"h\":\"DQL\"},\"516\":{\"h\":\"查询语法\",\"t\":[\"基础查询\",\"条件查询(WHERE)\",\"分组查询(GROUP BY)\",\"排序查询(ORDER BY)\",\"分页查询(LIMIT)\",\"SELECT 字段列表 FROM 表名列表 WHERE 条件列表 GROUP BY 分组字段 HAVING 分组后的条件 ORDER BY 排序字段 LIMIT 分页限定 \"]},\"517\":{\"h\":\"补充\",\"t\":[\"-- 去除重复 distinct SELECT DISTINCT 列名 FROM 表名; -- 起别名 as（as不写也可以，但是得有一个空格） SELECT 原列名 AS 别名,原列名 AS 别名 FROM 表名; \",\"image-20220813150012732\"]},\"518\":{\"h\":\"条件查询\",\"t\":[\"-- 查询age在20到30之间的 BETWEEN 20 and 30; SELECT * FROM tb_user WHERE age BETWEEN 20 and 30; -- 模糊查询 -- _代表一个占位符；%代表多个占位符 -- 查询性马的信息 SELECT * FROM tb_user WHERE name LIKE '马%'; -- 查询第二个字是花的信息 SELECT * FROM tb_user WHERE name LIKE '_花%'; -- 查询名字中包含德的信息(最常用的) SELECT * FROM tb_user WHERE name LIKE '%德%'; \",\"image-20220813150616143\"]},\"519\":{\"h\":\"排序查询\",\"t\":[\"排序查询语法\",\"SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1],排序字段名2 [排序方式2] ... ; \",\"排序方式：\",\"ASC：升序排列（默认值）\",\"DESC：降序排列\",\"-- 查询学生信息，按照年龄升序排序 SELECT * FROM tb_user ORDER BY age ASC; -- 查询数学成绩按照降序排列，如果数学成绩一样，按照英语成绩升序排列 select * from tb_user order by match desc,english asc; \",\"image-20220813151814709\"]},\"520\":{\"h\":\"分组查询\"},\"521\":{\"h\":\"聚合函数\",\"t\":[\"将一列作为一个整体，进行纵向计算\",\"聚合函数分类\",\"函数名\",\"功能\",\"count(列名)\",\"统计数量（一般选用不为null的列）\",\"max(列名)\",\"最大值\",\"min(列名)\",\"最小值\",\"sum(列名)\",\"求和\",\"avg(列名)\",\"平均值\",\"聚合函数语法：\",\"SELECT 聚合函数(列名) FROM 表 \",\"-- 统计班级一共有多少学生 SELECT COUNT(*) FROM tb_user; -- 查询数学成绩的最高分 select max(match) from tb_user; -- 查询英语成绩的最低分 select min(english) from tb_user; -- 查询数学成绩的总分 select sum(match) from tb_user; -- 查询数学成绩的平均分 select avg(match) from tb_user; -- 查询英语成绩的最低分（存在null） select min(english) for tb_user;-- 不是null值，聚合函数排除了null \"]},\"522\":{\"h\":\"分组查询\",\"t\":[\"分组查询语法\",\"select 字段列表 from 表名 [where 分组条件限定] group by 分组字段名 [having 分组后条件过滤] \",\"注意：分组后，查询的字段为聚合函数和分组字段，查询其他的字段无任何意义\",\"where和having区别：\",\"执行时机不一样：where是分组之前进行限定，不满足where条件，则不参与分组，而having是分组后对结果进行过滤\",\"可判断的条件不一样：where不能对聚合函数进行判断，having可以\",\"执行顺序：where > 聚合函数 > having\"]},\"523\":{\"h\":\"分页查询\",\"t\":[\"分页查询语法\",\"select 字段列表 from 表名 limit 起始索引,查询条目数; \",\"起始索引：从0开始\",\"计算公式：起始索引 = （当前页码 - 1）* 每页显示的条目数\"]},\"524\":{\"h\":\"约束\"},\"525\":{\"h\":\"概念\",\"t\":[\"约束概念\",\"约束是作用于表中列上的规则，用于限制加入表的数据\",\"约束的存在保证了数据库中数据的正确性、有效性和完整性\",\"约束的分类\",\"约束名称\",\"描述\",\"关键字\",\"非空约束\",\"保证列中的所有数据不能有null值\",\"NOT NULL\",\"唯一约束\",\"保证列中所有数据各不相同\",\"UNIQUE\",\"主键约束\",\"主键是一行数据的唯一标识，要求非空且唯一\",\"PRIMARY KEY\",\"检查约束\",\"保证列中的值满足某一条件\",\"CHECK\",\"默认约束\",\"保存数据时，未指定值采用某人值\",\"DEFAULT\",\"外键约束\",\"外键用来让两个表的数据之间建立连接，保证数据的一致性和完整性\",\"FOREIGN KEY\",\"drop table if exists emp; -- 员工表 create table emp( id int primary key auto_increment,-- 员工id，主键且自增长 ename varchar(50) not null unique,-- 员工姓名，非空且唯一 joindate date not null,-- 入职日期，非空 salary double(7,2) not null,-- 工资，非空 bonus double(7,2) default 0 -- 奖金，如果没有奖金，默认为0 ); insert into emp values(1,'张三','2020-1-1',3500,1000); insert into emp values(3,'张三sa','2020-1-1',3500,1000); -- 演示自动增长 auto_increment insert into emp(ename,joindate,salary,bonus) values('张珊珊1','2022-2-2',5000,200); insert into emp values(null,'张珊珊','2022-2-2',5000,200); select * from emp; \"]},\"526\":{\"h\":\"外键约束\",\"t\":[\"概念\",\"外键用来让两个表之间建立连接的，保证数据的一致性和完整性\",\"语法\",\"添加约束\",\"-- 部门表 drop table if exists dept; create table dept( id int primary key auto_increment, dep_name varchar(20), addr varchar(20) ); -- 员工表 drop table if exists emp; create table emp( id int primary key auto_increment, name varchar(20), age int, dep_id int, -- 添加外键，关联dept表的主键 -- 外键：foreign key(这个表中要作为外键的列，id) -- 关联：references 关联的表(id) constraint fk_emp_dept foreign key(dep_id) references dept(id) ); -- 添加部门 insert into dept (dep_name,addr) values ('研发部','广州'), ('销售部','深圳'); -- 添加员工，dep_id 表示员工所在的部门 insert into emp (name,age,dep_id) values ('张三',20,1), ('李四',20,1), ('王五',20,1), ('赵六',20,2), ('小明',20,2), ('小白',20,2); -- ------------- select * from emp; select * from dept; delete from dept where id = 1; alter table db1.emp drop foreign key fk_emp_dept; alter table db1.emp add constraint fk_emp_dept foreign key (dep_id) references dept(id); \",\"image-20220813161441371\"]},\"527\":{\"h\":\"数据库设计\"},\"528\":{\"h\":\"数据库设计步骤\",\"t\":[\"需求分析（数据是什么？数据具体有哪些属性？数据与属性的特点是什么？）\",\"逻辑分析（通过ER图对数据库进行逻辑建模，不需要考虑我们所选用的数据库管理系统）\",\"物理设计（根据数据库自身的特点把逻辑设计转换为物理设计）\",\"维护设计（1. 对新的需求进行建模；2.表的优化）\",\"image-20220813161930018\"]},\"529\":{\"h\":\"表的关系\",\"t\":[\"一对一：\",\"如：用户 和 用户详情\",\"一对一多用于表的拆分，将一个实体中经常使用的字段放在一张表中，不经常使用的放在另一张表中，用于提升查询的性能\",\"实现方式：在任意一方建立外键，关联对方主键，并设置外键唯一(unique)\",\"image-20220813164434292\",\" create table tb_user( id int primary key auto_increment, avant varchar(50) not null , age int check ( age between 0 and 200), gender char(1), desc_id int unique ); create table tb_user_desc( id int primary key auto_increment, city varchar(50), status tinyint, `desc` varchar(100) ); alter table tb_user add constraint fk_desc_id foreign key (desc_id) references tb_user_desc(id); \",\"image-20220813165009465\",\"一对多（多对一）：\",\"如：部门和员工\",\"一个部门对应多个员工，一个员工对应一个部门\",\"实现方式：在多的一方建立外键关联一的一方主键\",\"image-20220813162312378\",\"多对多：\",\"如：商品和订单\",\"一个商品对应多个订单，一个订单包含多个商品\",\"实现方式：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\",\"image-20220813162242368\",\"create table tb_order( id int primary key auto_increment, payment double, payment_type tinyint, status tinyint ); create table tb_goods( id int primary key auto_increment, title varchar(50), price double ); create table tb_order_goods( id int primary key auto_increment, order_id int, goods_id int, count int ); # 在中间表中添加外键 alter table tb_order_goods add constraint fk_order_id foreign key (order_id) references tb_order(id); alter table tb_order_goods add constraint fk_goods_id foreign key (goods_id) references tb_goods(id); \",\"image-20220813163251421\"]},\"530\":{\"h\":\"多表查询\"},\"531\":{\"h\":\"内连接-显示(inner join 表名 on 条件)\",\"t\":[\"image-20220813170024222\",\"内连接查询语法\",\"-- 隐式内连接 select 字段列表 from 表1，表2... where 条件; select * from emp , dept where emp.dep_id = dept.id; select emp.name,emp.gender,dept.name from emp,dept where emp.dep_id = dept.id; -- 显示内连接 select 字段列表 from 表1 [inner] join 表2 on 条件; select * from emp inner join dep on emp.dep_id = dept.id; \",\"image-20220813170314141\"]},\"532\":{\"h\":\"外连接-左[右]外连接(表1 left[right] join 表2 on 条件)\",\"t\":[\"外连接查询语法\",\"-- 左外连接 select 字段列表 from 表1 left join 表2 on 条件; -- 右外连接 select 字段列表 from 表1 right join 表2 on 条件; \"]},\"533\":{\"h\":\"子查询\",\"t\":[\"子查询根据查询结果不同，作用不同：\",\"-- 单行单列：作为条件值，使用 = != > < 等进行条件判断 select 字段列表 from 表 where 字段名 = (子查询); -- 多行单列：作为条件值，使用in等关键字进行条件判断 select 字段列表 from 表 where 字段名 in (子查询); -- 多行多列：作为虚拟表 select 字段列表 from (子查询) where 条件; \",\"image-20220813172807566\"]},\"534\":{\"h\":\"事务\"},\"535\":{\"h\":\"简介\",\"t\":[\"数据库的事务是一种机制、一个操作序列，包含了一组数据库操作命令\",\"事务把所有的命令作为一个整体一起向系统提交或撤销操作的请求，即这一组数据库命令要么同时成功，要么同时失败\",\"事务是一个不可分割的工作逻辑单元\",\"-- 开启事务 start transaction; -- 或者 begin; -- 提交事务 commit; -- 出异常回滚事务 rollback; \"]},\"536\":{\"h\":\"事务的四大特征\",\"t\":[\"原子性（Atomicity）：事务是不可分割的最小操作单位，要么同时成功，要么同时失败\",\"一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态\",\"隔离性（Isolation）：多个事务之间，操作的可见性\",\"持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\",\"MySQL事务默认自动提交\",\"-- 查看事务的默认提交方式 select @@autocommit; -- 1 自动提交 0 手动提交 -- 修改事务的提交方式 set @@autocommit = 0; \"]},\"537\":{\"h\":\"基础项目-瑞吉外卖\",\"t\":[\"提示\",\"该项目可以在学习完Spring、SpringMVC、SpringBoot之后适合缺少项目经验的小伙伴来练手\"]},\"538\":{\"h\":\"精选项目推荐\",\"t\":[\"提示\",\"项目要有自己的一些创意才不会”烂大街“\"]},\"539\":{\"h\":\"Maven进阶\",\"t\":[\"image.png\"]},\"540\":{\"h\":\"依赖的传递性\"},\"541\":{\"h\":\"聚合\"},\"542\":{\"h\":\"继承\"},\"543\":{\"h\":\"版本管理\",\"t\":[\"image.png\"]},\"544\":{\"h\":\"MyBatisPlus\",\"t\":[\"<dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.4.1</version> </dependency> \",\"image.png\",\"package com.red.config; import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor; import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Configuration public class MpConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor(){ //1.定义MP拦截器 MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor(); //2.添加具体拦截器 //添加分页拦截器 mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor()); return mybatisPlusInterceptor; } } \",\"image.png\",\"@Test void testGetByPage(){ IPage page = new Page(1,2); userMapper.selectPage(page,null); System.out.println(\\\"当前页码值:\\\"+page.getCurrent()); System.out.println(\\\"每页显示数:\\\"+page.getSize()); System.out.println(\\\"一共多少页\\\"+page.getPages()); System.out.println(\\\"一共多少条数据\\\"+page.getTotal()); System.out.println(\\\"数据\\\"+page.getRecords()); } \",\"image.png\",\"# enable mybatis-plus log mybatis-plus: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl \",\"image.png\"]},\"545\":{\"h\":\"条件查询null判断\"},\"546\":{\"h\":\"查询投影\",\"t\":[\"image.png\"]},\"547\":{\"h\":\"条件查询\",\"t\":[\" 官方文档: https://baomidou.com/pages/10c804/#abstractwrapper\"]},\"548\":{\"h\":\"字段映射与表名映射\"},\"549\":{\"h\":\"id生成策略控制\"},\"550\":{\"h\":\"表名前缀&id生成策略全局配置\"},\"551\":{\"h\":\"多数据操作\",\"t\":[\"image.png\"]},\"552\":{\"h\":\"逻辑删除\",\"t\":[\" @TableLogic(value = \\\"0\\\",delval = \\\"1\\\") private Integer deleted; \",\"image.png\",\"mybatis-plus: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: table-prefix: id-type: assign_id logic-delete-field: deleted logic-not-delete-value: 0 logic-delete-value: 1 \"]},\"553\":{\"h\":\"乐观锁-处理并发问题@Version\",\"t\":[\"\\n官网教程:\\thttps://baomidou.com/pages/d357af/\"]},\"554\":{\"h\":\"SpringMVC\"},\"555\":{\"h\":\"SpringMVC简介\"},\"556\":{\"h\":\"SpringMVC概述\",\"t\":[\"springMVC技术与Servlet技术功能相同，均属于web层开发技术\"]},\"557\":{\"h\":\"SpringMVC入门案例\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.red</groupId> <artifactId>springmvc_01_quickstart</artifactId> <version>1.0-SNAPSHOT</version> <packaging>war</packaging> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <maven.compiler.source>1.8</maven.compiler.source> <maven.compiler.target>1.8</maven.compiler.target> </properties> <dependencies> <!-- 导入springmvc坐标和Servlet坐标--> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <!-- 注意版本要使用5.3.0以下的版本 否则会出现500错误 --> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.10.RELEASE</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> </project> \",\"package com.red.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; //2.定义controller @Controller//定义bean public class UserController { //2.2设置当前操作访问路径 @RequestMapping(\\\"/save\\\") @ResponseBody public String save(){ System.out.println(\\\"user module save is running...\\\"); return \\\"{'module': 'springmvc'}\\\"; } } \",\"package com.red.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; //3.创建springmvc的配置类，加载controller对应的bean @Configuration @ComponentScan(\\\"com.red\\\") public class SpringMvcConfig { } \",\"package com.red.config; import org.springframework.web.context.WebApplicationContext; import org.springframework.web.context.support.AnnotationConfigWebApplicationContext; import org.springframework.web.servlet.support.AbstractDispatcherServletInitializer; //4.定义一个Servlet容器启动的配置类，在里面加载spring的配置 public class ServletContainersInitConfig extends AbstractDispatcherServletInitializer { /** * 加载springmvc配置的 * @return */ @Override protected WebApplicationContext createServletApplicationContext() { // AnnotationConfigApplicationContext 注意区别 // springmvc需要加载对应的AnnotationConfigWebApplicationContext AnnotationConfigWebApplicationContext webApplicationContext = new AnnotationConfigWebApplicationContext(); webApplicationContext.register(SpringMvcConfig.class); return webApplicationContext; } /** * 用来设置哪些请求归属springmvc处理 * @return */ @Override protected String[] getServletMappings() { //所有请求归springmvc处理 return new String[]{\\\"/\\\"}; } /** * 加载spring容器配置 * @return */ @Override protected WebApplicationContext createRootApplicationContext() { return null; } } \"]},\"558\":{\"h\":\"流程分析\",\"t\":[\"image.png\"]},\"559\":{\"h\":\"bean加载控制\"},\"560\":{\"h\":\"请求与响应\"},\"561\":{\"h\":\"请求映射路径\",\"t\":[\"image.png\"]},\"562\":{\"h\":\"请求参数\",\"t\":[\"package com.red.config; import org.springframework.web.filter.CharacterEncodingFilter; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; import javax.servlet.Filter; public class ServletContainersInitConfig extends AbstractAnnotationConfigDispatcherServletInitializer { @Override protected Class<?>[] getRootConfigClasses() { return new Class[0]; } @Override protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } /** * 设置过滤器 * 处理字符乱码 * @return */ @Override protected Filter[] getServletFilters() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(\\\"utf-8\\\"); return new Filter[]{filter}; } } \"]},\"563\":{\"h\":\"5种类型参数传参\"},\"564\":{\"h\":\"JSON数据传递参数\"},\"565\":{\"h\":\"日期类型参数传递\"},\"566\":{\"h\":\"响应JSON数据\",\"t\":[\"下面这些功能都是基于在pom中导入jackson-databind以及在SpringMvcConfig中开启注解@EnableWebMvc如下：\",\"<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.13.3</version> </dependency> \",\"@Configuration @ComponentScan(\\\"com.red.controller\\\") @EnableWebMvc//功能非常多，这里是开启json数据转对象 public class SpringMvcConfig { } \",\" 依靠这个接口下的实现类\"]},\"567\":{\"h\":\"REST风格\"},\"568\":{\"h\":\"最后注意：\",\"t\":[\"处理ServletContainerInitConfig类中拦截的所有路径都归于SpringMVC管理，导致静态页面资源访问不到的问题（被误当做controller）\"]},\"569\":{\"h\":\"SSM整合\"},\"570\":{\"h\":\"代码区\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.red</groupId> <artifactId>springmvc_08_ssm</artifactId> <version>1.0-SNAPSHOT</version> <packaging>war</packaging> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-webmvc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.2.10.RELEASE</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.2</version> <scope>test</scope> </dependency> <dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> <version>2.13.3</version> </dependency> <dependency> <groupId>javax.servlet</groupId> <artifactId>javax.servlet-api</artifactId> <version>3.1.0</version> <scope>provided</scope> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.10</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>1.3.2</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> <version>2.2</version> <configuration> <port>80</port> <path>/</path> </configuration> </plugin> </plugins> </build> </project> \",\"package com.red.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import org.springframework.context.annotation.PropertySource; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @ComponentScan({\\\"com.red.service\\\",\\\"com.red.dao\\\"}) @PropertySource(\\\"classpath:jdbc.properties\\\") @Import({JdbcConfig.class,MybatisConfig.class}) @EnableTransactionManagement//开启事务注解 public class SpringConfig { } \",\"jdbc.driver=com.mysql.cj.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/spring_db jdbc.username=root jdbc.password=12345678 \",\"package com.red.config; import com.alibaba.druid.pool.DruidDataSource; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.jdbc.datasource.DataSourceTransactionManager; import org.springframework.transaction.PlatformTransactionManager; import javax.sql.DataSource; public class JdbcConfig { @Value(\\\"${jdbc.driver}\\\") private String driver; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.username}\\\") private String username; @Value(\\\"${jdbc.password}\\\") private String password; @Bean public DataSource dataSource(){ DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driver); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; } @Bean public PlatformTransactionManager transactionManager(DataSource dataSource){ DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager(); dataSourceTransactionManager.setDataSource(dataSource); return dataSourceTransactionManager; } } \",\"package com.red.config; import org.mybatis.spring.SqlSessionFactoryBean; import org.mybatis.spring.mapper.MapperScannerConfigurer; import org.springframework.context.annotation.Bean; import javax.sql.DataSource; public class MybatisConfig { @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource){ SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setTypeAliasesPackage(\\\"com.red.pojo\\\"); sqlSessionFactoryBean.setDataSource(dataSource); return sqlSessionFactoryBean; } @Bean public MapperScannerConfigurer mapperScannerConfigurer(){ MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); mapperScannerConfigurer.setBasePackage(\\\"com.red.dao\\\"); return mapperScannerConfigurer; } } \",\"package com.red.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.EnableWebMvc; @Configuration @ComponentScan(\\\"com.red.controller\\\") @EnableWebMvc public class SpringMvcConfig { } \",\"package com.red.config; import org.springframework.web.filter.CharacterEncodingFilter; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; import javax.servlet.Filter; public class ServletConfig extends AbstractAnnotationConfigDispatcherServletInitializer { @Override protected Class<?>[] getRootConfigClasses() { return new Class[]{SpringConfig.class}; } @Override protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } /** * 表单提交 中文乱码处理 - 过滤器 * 提交的json数据直接在jackson工具中进行了数据处理 * @return */ @Override protected Filter[] getServletFilters() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(\\\"utf-8\\\"); return new Filter[]{filter}; } } \",\"package com.red.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class Book { private Integer id; private String type; private String name; private String description; } \",\"package com.red.dao; import com.red.pojo.Book; import org.apache.ibatis.annotations.*; import org.springframework.stereotype.Repository; import java.util.List; @Repository public interface BookDao { /** * 如果查询参数返回值的名称与实体类的属性名称不匹配，可以使用注解定义映射关系 * */ // @Results(id = \\\"bookResultMap\\\",value = { // @Result(column = \\\"name\\\",property = \\\"name\\\"), // @Result(column = \\\"description\\\",property = \\\"description\\\") // }) @Insert(\\\"insert into tbl_book (type, name, description) values (#{type},#{name},#{description});\\\") void save(Book book); @Update(\\\"update tbl_book set type = #{type}, name = #{name}, description = #{description} where id = #{id} ;\\\") void update(Book book); @Delete(\\\"delete from tbl_book where id = #{id};\\\") void delete(Integer id); //使用ResultMap定义返回值映射类型 // @ResultMap(\\\"bookResultMap\\\") @Select(\\\"select * from tbl_book where id = #{id};\\\") Book getById(Integer id); // @ResultMap(\\\"bookResultMap\\\") @Select(\\\"select * from tbl_book;\\\") List<Book> getAll(); } \",\"package com.red.service; import com.red.pojo.Book; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Transactional public interface BookService { /** * 保存 * @param book * @return */ boolean save(Book book); /** * 更新 * @param book * @return */ boolean update(Book book); /** * 删除 * @param id * @return */ boolean delete(Integer id); /** * 根据id查询 * @param id * @return */ Book getById(Integer id); /** * 查询全部 * @return */ List<Book> getAll(); } \",\"package com.red.service.impl; import com.red.dao.BookDao; import com.red.pojo.Book; import com.red.service.BookService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class BookServiceImpl implements BookService { @Autowired private BookDao bookDao; @Override public boolean save(Book book) { bookDao.save(book); return true; } @Override public boolean update(Book book) { bookDao.update(book); return true; } @Override public boolean delete(Integer id) { bookDao.delete(id); return true; } @Override public Book getById(Integer id) { return bookDao.getById(id); } @Override public List<Book> getAll() { return bookDao.getAll(); } } \",\"package com.red.controller; import com.red.pojo.Book; import com.red.service.BookService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import java.util.List; @RestController @RequestMapping(\\\"/books\\\") public class BookController { @Autowired private BookService bookService; @PostMapping public boolean save(@RequestBody Book book) { return bookService.save(book); } @PutMapping public boolean update(@RequestBody Book book) { return bookService.update(book); } @DeleteMapping(\\\"/{id}\\\") public boolean delete(@PathVariable(\\\"id\\\") Integer id) { return bookService.delete(id); } @GetMapping(\\\"/{id}\\\") public Book getById(@PathVariable Integer id) { return bookService.getById(id); } @GetMapping public List<Book> getAll() { return bookService.getAll(); } } \",\"package com.red.service; import com.red.config.SpringConfig; import com.red.pojo.Book; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import java.util.List; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = SpringConfig.class) public class BookServiceTest { @Autowired private BookService bookService; @Test public void testGetById(){ Book book = bookService.getById(1); System.out.println(book); } @Test public void testGetAll(){ List<Book> all = bookService.getAll(); System.out.println(all); } } \"]},\"571\":{\"h\":\"表现层数据封装\",\"t\":[\" 统一格式\",\"package com.red.controller; public class Result { private Object data; private Integer code; private String msg; public Result() { } public Result(Integer code, Object data, String msg) { this.data = data; this.code = code; this.msg = msg; } public Result(Integer code,Object data) { this.data = data; this.code = code; } public Object getData() { return data; } public void setData(Object data) { this.data = data; } public Integer getCode() { return code; } public void setCode(Integer code) { this.code = code; } public String getMsg() { return msg; } public void setMsg(String msg) { this.msg = msg; } } \",\"package com.red.controller; /** * 响应状态码 */ public class Code { public static final Integer SAVE_OK = 20011; public static final Integer DELETE_OK = 20021; public static final Integer UPDATE_OK = 20031; public static final Integer GET_OK = 20041; public static final Integer SAVE_ERR = 20010; public static final Integer DELETE_ERR = 20020; public static final Integer UPDATE_ERR = 20030; public static final Integer GET_ERR = 20040; } \"]},\"572\":{\"h\":\"异常处理器\",\"t\":[\"各个层级均出现异常，异常处理代码书写在哪一层? \",\"所有的异常均抛出到表现层进行处理\",\"表现层处理异常，每个方法中单独书写，代码书写量巨大且意义不强，如何解决 \",\"AOP思想\",\"其实SpringMVC已经替我们想到了:\"]},\"573\":{\"h\":\"项目异常处理方案\",\"t\":[\"package com.red.controller; import com.red.exception.BusinessException; import com.red.exception.SystemException; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RestControllerAdvice; @RestControllerAdvice//声明这个类是处理REST风格开发的异常处理类 public class ProjectExceptionAdvice { @ExceptionHandler(BusinessException.class) public Result doBusinessException(BusinessException exception){ return new Result(exception.getCode(),null,exception.getMessage()); } @ExceptionHandler(SystemException.class) public Result doSystemException(SystemException exception){ //记录日志 //发送邮件通知开发人员 //发送短信给运维人员 return new Result(exception.getCode(),null,exception.getMessage()); } @ExceptionHandler(Exception.class) public Result doException(Exception exception){ //记录日志 //发送邮件通知开发人员 //发送短信给运维人员 return new Result(666,null,\\\"出现异常了\\\"+exception.getMessage()); } } \"]},\"574\":{\"h\":\"拦截器\"},\"575\":{\"h\":\"入门案例\"},\"576\":{\"h\":\"执行流程\",\"t\":[\"image.png\"]},\"577\":{\"h\":\"拦截器参数\"},\"578\":{\"h\":\"多拦截器执行顺序\",\"t\":[\"image.png\"]},\"579\":{\"h\":\"代码\",\"t\":[\"package com.red.config; import org.springframework.web.filter.CharacterEncodingFilter; import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; import javax.servlet.Filter; public class ServletContainersInitConfig extends AbstractAnnotationConfigDispatcherServletInitializer { @Override protected Class<?>[] getRootConfigClasses() { return new Class[0]; } @Override protected Class<?>[] getServletConfigClasses() { return new Class[]{SpringMvcConfig.class}; } @Override protected String[] getServletMappings() { return new String[]{\\\"/\\\"}; } @Override protected Filter[] getServletFilters() { CharacterEncodingFilter filter = new CharacterEncodingFilter(); filter.setEncoding(\\\"UTF-8\\\"); return new Filter[]{filter}; } } \",\"package com.red.controller.interceptor; import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import org.springframework.web.servlet.ModelAndView; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; @Component public class ProjectInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\\\"preHandle\\\"); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception { System.out.println(\\\"postHandle\\\"); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\\\"afterCompletion\\\"); } } \",\"package com.red.config; import com.red.controller.interceptor.ProjectInterceptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; @Configuration public class SpringMvcSupport extends WebMvcConfigurationSupport { @Autowired private ProjectInterceptor projectInterceptor; @Override protected void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\"); } /** * 对应的静态资源的映射 * @param registry */ @Override protected void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/pages/**\\\").addResourceLocations(\\\"/pages/\\\"); } } \",\"package com.red.config; import com.red.controller.interceptor.ProjectInterceptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.EnableWebMvc; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration @ComponentScan({\\\"com.red.controller\\\",\\\"com.red.config\\\"}) @EnableWebMvc public class SpringMvcConfig implements WebMvcConfigurer { } \",\"或者上面两块代码更改为下面一块\",\"package com.red.config; import com.red.controller.interceptor.ProjectInterceptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.EnableWebMvc; import org.springframework.web.servlet.config.annotation.InterceptorRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration @ComponentScan({\\\"com.red.controller\\\"}) @EnableWebMvc public class SpringMvcConfig implements WebMvcConfigurer { @Autowired private ProjectInterceptor projectInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(projectInterceptor).addPathPatterns(\\\"/books\\\",\\\"/books/*\\\"); } } \",\"package com.red.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\\\"/books\\\") public class BookController { @GetMapping public String getAll(){ return \\\"{'books':'all'}\\\"; } @GetMapping(\\\"/{id}\\\") public String getById(@PathVariable Integer id){ return \\\"{'books':'\\\"+id+\\\"'}\\\"; } } \"]},\"580\":{\"h\":\"Spring框架\"},\"581\":{\"h\":\"Spring Framework 系统架构图\",\"t\":[\"image.png\"]},\"582\":{\"h\":\"IOC(Inversion of control)控制反转*\",\"t\":[\"对象的创建权由程序转交给外部，这种思想就是控制反转\",\"Spring提供了一个IoC容器，来充当IoC思想的外部--->Core Container 核心容器\",\"IoC容器负责对象的创建、初始化等一系列操作，被创建或者被管理的对象在IoC容器中称为_Bean_\"]},\"583\":{\"h\":\"DI(Dependency Injection)依赖注入\",\"t\":[\"在容器中建立bean与bean之间的依赖关系的整个过程\"]},\"584\":{\"h\":\"Bean基础配置\"},\"585\":{\"h\":\"Bean别名配置(name属性)\",\"t\":[\"image.png\"]},\"586\":{\"h\":\"Bean作用范围(scope属性)\",\"t\":[\"image.png\",\"image.png\"]},\"587\":{\"h\":\"Bean的实例化\"},\"588\":{\"h\":\"构造方法(无参构造)\",\"t\":[\"image.png\"]},\"589\":{\"h\":\"静态工厂(factory-method)\",\"t\":[\"image.png\"]},\"590\":{\"h\":\"实例工厂(factory-method+factory-bean)\",\"t\":[\"image.png\"]},\"591\":{\"h\":\"实用(implements FactoryBean)\",\"t\":[\"image.png\"]},\"592\":{\"h\":\"Bean的生命周期\"},\"593\":{\"h\":\"Bean的生命周期控制\"},\"594\":{\"h\":\"1(属性：init-method destory-method)\",\"t\":[\"image.png\"]},\"595\":{\"h\":\"2(实现接口)\",\"t\":[\"image.png\"]},\"596\":{\"h\":\"Bean的生命周期\",\"t\":[\"image.png\",\"image.png\"]},\"597\":{\"h\":\"依赖注入\"},\"598\":{\"h\":\"普通方法\",\"t\":[\"image.png\",\"image.png\"]},\"599\":{\"h\":\"构造方法\",\"t\":[\"image.png\",\"image.png\"]},\"600\":{\"h\":\"自动装配\",\"t\":[\"image.png\",\"image.png\"]},\"601\":{\"h\":\"注入集合\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <bean id=\\\"bookDao\\\" class=\\\"com.red.dao.impl.BookDaoImpl\\\"> <property name=\\\"array\\\"> <array> <value>100</value> <value>200</value> <value>300</value> </array> </property> <property name=\\\"list\\\"> <list> <value>itit</value> <value>itit</value> <value>i11</value> </list> </property> <property name=\\\"set\\\"> <set> <value>hello</value> <value>world</value> <value>hello</value> <value>boy</value> </set> </property> <property name=\\\"map\\\"> <map> <entry key=\\\"con\\\" value=\\\"cha\\\"/> <entry key=\\\"con1\\\" value=\\\"cha1\\\"/> <entry key=\\\"con\\\" value=\\\"cha1\\\"/> <entry key=\\\"con22\\\" value=\\\"cha22\\\"/> </map> </property> <property name=\\\"properties\\\"> <props> <prop key=\\\"ccc\\\">ccc</prop> <prop key=\\\"ccc1\\\">ccc1</prop> <prop key=\\\"ccc\\\">ccc2</prop> <prop key=\\\"ccc\\\">ccc</prop> </props> </property> </bean> </beans> \"]},\"602\":{\"h\":\"加载Properties文件\",\"t\":[\"开启context命名空间\",\"使用context空间加载properties文件\",\"使用属性占位符${}读取properties中的属性\",\"image.png\",\"image.png\"]},\"603\":{\"h\":\"容器总结\",\"t\":[\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\"]},\"604\":{\"h\":\"注解开发*\"},\"605\":{\"h\":\"注解开发定义bean\",\"t\":[\"image.png\",\"image.png\"]},\"606\":{\"h\":\"纯注解开发\",\"t\":[\"image.png\",\"image.png\"]},\"607\":{\"h\":\"bean作用范围与生命周期管理\",\"t\":[\"image.png\",\"image.png\"]},\"608\":{\"h\":\"依赖注入\",\"t\":[\"image.png\",\"image.png\",\"image.png\",\"image.png\"]},\"609\":{\"h\":\"第三方Bean管理\",\"t\":[\"image.png\",\"image.png\"]},\"610\":{\"h\":\"第三方bean依赖注入\",\"t\":[\"注意需要在主配置类上引入这个第三方配置类@Import(JdbcConfig.class)并且 引入properties文件@PropertySource(\\\"classpath:jdbc.properties\\\")\",\"image.png\",\"image.png\"]},\"611\":{\"h\":\"注解开发总结\",\"t\":[\"image.png\"]},\"612\":{\"h\":\"Spring整合MyBatis\",\"t\":[\"image.png\",\"image.png\"]},\"613\":{\"h\":\"补充\",\"t\":[\"package com.red.dao; import com.red.pojo.Book; import org.apache.ibatis.annotations.*; import java.util.List; public interface BookDao { /** * 如果查询参数返回值的名称与实体类的属性名称不匹配，可以使用注解定义映射关系 * */ @Results(id = \\\"bookResultMap\\\",value = { @Result(column = \\\"name\\\",property = \\\"name\\\"), @Result(column = \\\"description\\\",property = \\\"description\\\") }) @Insert(\\\"insert into tbl_book (type, name, description) values (#{type},#{name},#{description});\\\") void save(Book book); @Update(\\\"update tbl_book set type = #{type}, name = #{name}, description = #{description} where id = #{id} ;\\\") void update(Book book); @Delete(\\\"delete from tbl_book where id = #{id};\\\") void delete(Integer id); //使用ResultMap定义返回值映射类型 @ResultMap(\\\"bookResultMap\\\") @Select(\\\"select * from tbl_book where id = #{id};\\\") Book getById(Integer id); @ResultMap(\\\"bookResultMap\\\") @Select(\\\"select * from tbl_book;\\\") List<Book> getAll(); } \"]},\"614\":{\"h\":\"Spring整合Junit\",\"t\":[\"image.png\"]},\"615\":{\"h\":\"AOP\",\"t\":[\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"引入依赖\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>org.example</groupId> <artifactId>spring_21_case_interface_run_speed</artifactId> <version>1.0-SNAPSHOT</version> <properties> <maven.compiler.source>8</maven.compiler.source> <maven.compiler.target>8</maven.compiler.target> </properties> <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context</artifactId> <version>5.3.20</version> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-jdbc</artifactId> <version>5.3.17</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.28</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <version>1.2.8</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis</artifactId> <version>3.5.9</version> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>1.3.2</version> </dependency> <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.13.2</version> <scope>test</scope> </dependency> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-test</artifactId> <version>5.3.20</version> </dependency> <dependency> <groupId>org.aspectj</groupId> <artifactId>aspectjweaver</artifactId> <version>1.9.7</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <version>1.18.24</version> </dependency> </dependencies> </project> \",\"pojo\",\"package com.red.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @NoArgsConstructor @AllArgsConstructor public class Account { private Integer id; private String name; private Double money; } \",\"config\",\"package com.red.config; import org.springframework.context.annotation.*; @Configuration @PropertySource(\\\"classpath:jdbc.properties\\\") @ComponentScan(\\\"com.red\\\") @Import({JdbcConfig.class, MybatisConfig.class}) @EnableAspectJAutoProxy public class SpringConfig { } \",\"package com.red.config; import com.alibaba.druid.pool.DruidDataSource; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import javax.sql.DataSource; public class JdbcConfig { @Value(\\\"${jdbc.driver}\\\") private String driver; @Value(\\\"${jdbc.url}\\\") private String url; @Value(\\\"${jdbc.username}\\\") private String username; @Value(\\\"${jdbc.password}\\\") private String password; @Bean public DataSource dataSource() { DruidDataSource druidDataSource = new DruidDataSource(); druidDataSource.setDriverClassName(driver); druidDataSource.setUrl(url); druidDataSource.setUsername(username); druidDataSource.setPassword(password); return druidDataSource; } } \",\"package com.red.config; import org.mybatis.spring.SqlSessionFactoryBean; import org.mybatis.spring.mapper.MapperScannerConfigurer; import org.springframework.context.annotation.Bean; import javax.sql.DataSource; public class MybatisConfig { @Bean public SqlSessionFactoryBean sqlSessionFactoryBean(DataSource dataSource) { SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean(); sqlSessionFactoryBean.setTypeAliasesPackage(\\\"com.red.pojo\\\"); sqlSessionFactoryBean.setDataSource(dataSource); return sqlSessionFactoryBean; } @Bean public MapperScannerConfigurer mapperScannerConfigurer() { MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer(); mapperScannerConfigurer.setBasePackage(\\\"com.red.dao\\\"); return mapperScannerConfigurer; } } \",\"service\",\"package com.red.service; import com.red.pojo.Account; import java.util.List; public interface AccountService { void save(Account account); void delete(Integer id); void update(Account account); List<Account> findAll(); Account findById(Integer id); } \",\"package com.red.service.impl; import com.red.dao.AccountDao; import com.red.pojo.Account; import com.red.service.AccountService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class AccountServiceImpl implements AccountService { @Autowired private AccountDao accountDao; @Override public void save(Account account) { accountDao.save(account); } @Override public void delete(Integer id) { accountDao.delete(id); } @Override public void update(Account account) { accountDao.update(account); } @Override public List<Account> findAll() { return accountDao.findAll(); } @Override public Account findById(Integer id) { return accountDao.findById(id); } } \",\"aop\",\"package com.red.aop; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.Signature; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.stereotype.Component; @Component @Aspect public class ProjectAdvice { /** * 匹配业务层的所有方法 */ @Pointcut(\\\"execution(* com.red.service.*Service.*(..))\\\") private void servicePt() { } @Around(\\\"servicePt()\\\") public void runSpeed(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { Signature signature = proceedingJoinPoint.getSignature(); String className = signature.getDeclaringTypeName(); String methodName = signature.getName(); long beforeTime = System.currentTimeMillis(); for (int i = 0; i < 10000; i++) { proceedingJoinPoint.proceed(); } long afterTime = System.currentTimeMillis(); long time = afterTime - beforeTime; System.out.println(\\\"万次执行\\\" + className + \\\".\\\" + methodName + \\\"方法耗时\\\" + time + \\\"ms\\\"); } } \",\"test\",\"package com.red.service; import com.red.config.SpringConfig; import com.red.pojo.Account; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import java.util.List; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = SpringConfig.class) public class AccountServiceTest { @Autowired private AccountService accountService; @Test public void testFindById() { Account account = accountService.findById(1); // System.out.println(account); } @Test public void testFindAll() { List<Account> accounts = accountService.findAll(); // System.out.println(accounts); } } \",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\"]},\"616\":{\"h\":\"Spring事务\",\"t\":[\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"image.png\",\"事务管理员负责协调所有对数据库的操作，并确保事务的原子性。默认情况下，在该事务中的所有数据库操作都是由事务协调员管理的，要么同时成功，要么同时失败。\\n但是，如果方法上配置了@Transactional(propagation = Propagation.REQUIRES_NEW)注解，则该事务协调员将不再加入事务管理员的管理，而是自己成为事务管理员，拥有自己的事务协调。这意味着该方法中的数据库操作将不会受到外部事务的影响，并且可以独立回滚。\\n所以上面的转账案例需要在转账业务方法上单独配置@Transactional(propagation = Propagation.REQUIRES_NEW)注解注解。\"]},\"617\":{\"h\":\"SpringBoot框架\",\"t\":[\"image.png\"]},\"618\":{\"h\":\"起步依赖-starter\"},\"619\":{\"h\":\"yaml格式\",\"t\":[\"image.png\"]},\"620\":{\"h\":\"yaml版\",\"t\":[\"spring: profiles: active: pro --- #开发环境 spring: config: activate: on-profile: dev server: port: 81 --- #生产环境 spring: config: activate: on-profile: pro server: port: 80 --- #测试环境 spring: config: activate: on-profile: test server: port: 82 \"]},\"621\":{\"h\":\"properties版(了解)\",\"t\":[\"image.png\"]},\"622\":{\"h\":\"多环境开发启动命令\"},\"623\":{\"h\":\"常见问题(坑)\",\"t\":[\"执行package之前建议执行clean 字符编码的问题\"]},\"624\":{\"h\":\"Maven与SpringBoot多环境兼容\"},\"625\":{\"h\":\"整合Junit\"},\"626\":{\"h\":\"整合MyBatis(主要)\"},\"627\":{\"h\":\"注意\",\"t\":[\"在SpringBoot2.4.2版本及以前使用mysql8以上会报错：时区错误 处理方法:\",\"url: jdbc:mysql://localhost:3306/db1?serverTimezone=UTC \"]},\"628\":{\"h\":\"装饰模式\",\"t\":[\"image-20220813115051888\",\"package day09.DecoratorPattern; /** * 共同父类 */ public abstract class InputStream { public abstract int read(); public abstract int read(byte[] buffer); } \",\"package day09.DecoratorPattern; import java.util.Arrays; /** * 原始类 */ public class FileInputStream extends InputStream { @Override public int read() { System.out.println(\\\"低性能读取了一个字节a\\\"); return 97; } @Override public int read(byte[] buffer) { buffer[0] = 97; buffer[1] = 98; buffer[2] = 99; System.out.println(\\\"低性能的读取了\\\" + Arrays.toString(buffer)); return 3; } } \",\"package day09.DecoratorPattern; /** * 装饰类：继承InputStream拓展原始类的功能 */ public class BufferedInputStream extends InputStream { private InputStream inputStream; public BufferedInputStream(InputStream inputStream) { this.inputStream = inputStream; } @Override public int read() { System.out.println(\\\"提供8kb缓冲区\\\"); return inputStream.read(); } @Override public int read(byte[] buffer) { System.out.println(\\\"提供8kb缓冲区\\\"); return inputStream.read(buffer); } } \",\"package day09.DecoratorPattern; /** * 运行测试类 */ public class Demo { public static void main(String[] args) { FileInputStream fileInputStream = new FileInputStream(); BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream); int read = bufferedInputStream.read(); System.out.println(read); int read1 = bufferedInputStream.read(new byte[3]); System.out.println(read1); } } \",\"image-20220813123046809\"]},\"629\":{\"h\":\"动态代理\",\"t\":[\"基于接口设计的！\",\"image-20220812163847532\",\"明星类 必须实现接口\",\"package day08.d4_proxy; /** * 明星类 必须实现接口 */ public class Star implements Skill { private String name; public Star() { } public Star(String name) { this.name = name; } @Override public void jump() { System.out.println(this.name + \\\"开始跳舞\\\"); } @Override public void sing() { System.out.println(this.name + \\\"开始唱歌\\\"); } } \",\"接口\",\"package day08.d4_proxy; public interface Skill { void jump(); void sing(); } \",\"代理对象\",\"package day08.d4_proxy; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class StarAgentProxy { /** * 设计一个方法来返回一个明星对象的代理对象 */ public static Skill getProxy(Star star) { //为明星生成代理对象 return (Skill) Proxy.newProxyInstance(star.getClass().getClassLoader(), star.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"收首款\\\"); //让明星(被代理对象)跳舞唱歌 //method 正在调用的方法对象 //args 代表这个方法的参数 Object rs = method.invoke(star, args); System.out.println(\\\"收尾款\\\"); return rs; } }); } } \",\"找代理让明星表演\",\"package day08.d4_proxy; /** * 开发出一个动态代理对象出来，理解动态代理的执行流程 */ public class Test { public static void main(String[] args) { // 1.创建一个类对象，对象的类必须实现接口 Star star = new Star(\\\"明星\\\"); // 为明星对象生成一个代理对象 Skill star2 = StarAgentProxy.getProxy(star); star2.jump();//走代理 star2.sing(); } } \",\"image-20220812172709522\",\"image-20220812172844277\",\"image-20220812173211516\",\"package day08.d5_proxy_demo; public interface UserService { String login(String name, String password); boolean delete(int id); String select(String query); } \",\"package day08.d5_proxy_demo; public class UserServiceImpl implements UserService { @Override public String login(String name, String password) { System.out.println(\\\"登陆中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } if (\\\"admin\\\".equals(name) && \\\"123456\\\".equals(password)) { System.out.println(\\\"账户密码正确\\\"); return \\\"登陆成功\\\"; } return \\\"账户/密码错误，登陆失败\\\"; } @Override public boolean delete(int id) { System.out.println(\\\"正在删除\\\" + id + \\\"中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } if (id > 0 && id < 10) { System.out.println(\\\"删除成功\\\"); return true; } System.out.println(\\\"删除失败\\\"); return false; } @Override public String select(String query) { System.out.println(\\\"正在为你查询\\\" + query + \\\"中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return query; } } \",\"package day08.d5_proxy_demo; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class UserServiceProxy { public static UserService getProxy(UserService userService) { return (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { long before = System.currentTimeMillis(); Object rs = method.invoke(userService, args); long after = System.currentTimeMillis(); long time = after - before; System.out.println(\\\"执行\\\" + method.getName() + \\\"方法花费了\\\" + time + \\\"ms\\\"); return rs; } }); } } \",\"package day08.d5_proxy_demo; public class Test { public static void main(String[] args) { long l = System.currentTimeMillis(); UserServiceImpl userService = new UserServiceImpl(); UserService proxy = UserServiceProxy.getProxy(userService); // 登陆 String loginResult = proxy.login(\\\"admin\\\", \\\"123456\\\"); System.out.println(loginResult); // 删除 boolean deleteResult = proxy.delete(2); System.out.println(deleteResult); // 查询 String selectResult = proxy.select(\\\"张三\\\"); System.out.println(selectResult); long l1 = System.currentTimeMillis(); System.out.println(l1 - l); } } \",\"image-20220812175931701\",\"image-20220812180107353\",\"package day08.d5_proxy_demo; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class UserServiceProxy { public static <T> T getProxy(T obj) { return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { long before = System.currentTimeMillis(); Object rs = method.invoke(obj, args); long after = System.currentTimeMillis(); long time = after - before; System.out.println(\\\"执行\\\" + method.getName() + \\\"方法花费了\\\" + time + \\\"ms\\\"); return rs; } }); } } \"]},\"630\":{\"h\":\"异常的破解\"},\"631\":{\"h\":\"什么是异常？\",\"t\":[\"异常是在程序在编译或者运行的过程中可能出现的问题，注意：语法错误不算异常体系\",\"比如：数组索引越界，空指针异常，日期格式化异常，......\",\"异常一旦出现，如果没有提前处理异常，程序就会退出JVM虚拟机而终止\"]},\"632\":{\"h\":\"异常体系\",\"t\":[\"image-20220810135605293\",\"编译异常：在编译的时候会出现的异常\",\"运行异常：在运行的时候会出现的异常\",\"image-20220810135731947\"]},\"633\":{\"h\":\"编译时异常的处理形式：\",\"t\":[\"出现异常直接抛出去给调用者，调用者也继续抛出去\",\"出现异常自己捕获处理，不麻烦别人\",\"前两者结合，出现异常直接抛出去给调用者，调用者处理异常\",\"image-20220810140233954\"]},\"634\":{\"h\":\"处理方式1--throws\",\"t\":[\"throws:用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理\",\"这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将会引起程序的死亡\",\"抛出异常格式：\",\"方法 throws 异常1，异常2，异常3...{ } \",\"规范做法：\",\"方法 throws Exception{ } \"]},\"635\":{\"h\":\"处理方式2--try...catch...\",\"t\":[\"监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理\",\"这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行\",\"格式：\",\"package com.meng; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStream; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class ExceptionDemo2 { public static void main(String[] args) { System.out.println(\\\"程序开始。。。\\\"); parseTime(\\\"2020-1-1 11:11:11\\\"); System.out.println(\\\"程序结束。。。\\\"); } public static void parseTime(String date){ try { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); Date d = sdf.parse(date); System.out.println(d); InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); } catch (Exception e) { e.printStackTrace(); } // try { // SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); // Date d = sdf.parse(date); // System.out.println(d); // InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); // } catch (ParseException e) { // e.printStackTrace(); // } catch (FileNotFoundException e) { // e.printStackTrace(); // } // try { // SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); // Date d = sdf.parse(date); // System.out.println(d); // } catch (ParseException e) { // e.printStackTrace(); // } // // try { // InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); // } catch (FileNotFoundException e) { // e.printStackTrace(); // } } } \"]},\"636\":{\"h\":\"处理方式3--前两者结合\",\"t\":[\"方法直接将异常通过throws抛出去给调用者\",\"调用者收到异常后直接捕获处理\",\"package com.meng; import java.io.FileInputStream; import java.io.InputStream; import java.text.SimpleDateFormat; import java.util.Date; public class ExceptionDemo3 { public static void main(String[] args) { System.out.println(\\\"程序开始。。。\\\"); try { parseTime(\\\"2020-1-1 11:11:11\\\");//如果出现异常，下面的就不会执行，而直接跳到catch System.out.println(\\\"操作成功\\\"); } catch (Exception e) { e.printStackTrace(); System.out.println(\\\"操作失败\\\"); } System.out.println(\\\"程序结束。。。\\\"); } public static void parseTime(String date) throws Exception { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); Date d = sdf.parse(date); System.out.println(d); InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); } } \"]},\"637\":{\"h\":\"运行时异常处理形式\",\"t\":[\"运行时异常编译阶段不报错，是运行时才可能出错的，使用编译阶段不处理也可以\",\"按照规范建议：建议在最外层调用处集中捕获处理即可\",\"package com.meng; /** * 运行时的异常处理 */ public class ExceptionDemo4 { public static void main(String[] args) { System.out.println(\\\"程序开始\\\"); try { div(10,0); } catch (Exception e) { e.printStackTrace(); } System.out.println(\\\"程序结束\\\"); } public static void div(int a,int b){ System.out.println(a); System.out.println(b); int c = a / b; System.out.println(c); } } \"]},\"638\":{\"h\":\"自定义异常\",\"t\":[\"java无法为这个世界上所有的问题提供异常类\",\"如果企业想要通过异常方式管理自己的某个业务问题，就需要自定义异常类\",\"package com.meng; //自定义编译时异常 //继承Exception并重写构造器 public class MyException extends Exception{ public MyException(){ } public MyException(String message){ super(message); } } \",\"package com.meng; public class ExceptionDemo5 { public static void main(String[] args) { try { checkAge(23); } catch (MyException e) { e.printStackTrace(); } } public static void checkAge(int age) throws MyException { if (age < 0 || age > 200){ //抛出一个异常给对象调用者 //throw:在方法内部直接创建一个异常对象，并在此点抛出 //throws:在方法申明上的，抛出方法内部的异常 throw new MyException(age+\\\" is false\\\"); }else { System.out.println(\\\"年龄合法\\\"); } } } \",\"image-20220810142240642\",\"image-20220810142329260\"]},\"639\":{\"c\":[\"Java异常\"]},\"640\":{\"c\":[\"异常的破解\"]},\"641\":{\"h\":\"工厂模式\",\"t\":[\"image-20220813113550510\",\"package day09; public abstract class Computer { private String name; private double price; public abstract void start(); public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } } \",\"package day09; import day09.FactoryPattern.Computer; public class Huawei extends Computer { @Override public void start() { System.out.println(getName() + \\\"开机了\\\"); } } \",\"package day09; import day09.FactoryPattern.Computer; public class Mac extends Computer { @Override public void start() { System.out.println(getName() + \\\"开机了\\\"); } } \",\"package day09; import day09.FactoryPattern.Computer; import day09.FactoryPattern.Huawei; import day09.FactoryPattern.Mac; public class FactoryPattern { /** * 定义一个方法，创建对象返回 * * @param info * @return */ public static Computer createComputer(String info) { switch (info) { case \\\"Mac\\\": Computer computer1 = new Mac(); computer1.setName(\\\"MacBook Air\\\"); computer1.setPrice(9999); return computer1; case \\\"Huawei\\\": Computer computer2 = new Huawei(); computer2.setName(\\\"华为\\\"); computer2.setPrice(9980); return computer2; default: return null; } } } \",\"package day09; import day09.FactoryPattern.Computer; import day09.FactoryPattern.FactoryPattern; public class FactoryDemo { public static void main(String[] args) { Computer mac = FactoryPattern.createComputer(\\\"Mac\\\"); mac.start(); Computer huawei = FactoryPattern.createComputer(\\\"Huawei\\\"); huawei.start(); } } \",\"image-20220813114627864\",\"image-20220813114820905\"]},\"642\":{\"h\":\"Java基础第一幕\",\"t\":[\"第一幕\",\"语法之谜\"]},\"643\":{\"h\":\"标识符\",\"t\":[\"Java中的所有组成部分都需要名字，类名，变量名，方法名都被称为标识符\",\"Java中的关键字不能作为标识符（就是关键字不能作为名字）\",\"img\"]},\"644\":{\"h\":\"数据类型\"},\"645\":{\"h\":\"Java是强类型语言\",\"t\":[\"要求变量的使用严格符合类型规定，所有的变量必须先定义后才能使用\"]},\"646\":{\"h\":\"数据类型\",\"t\":[\"Java的数据类型分为两大类：基本类型和引用类型\",\"Java语言类型：\",\"基本类型：\",\"数值类型：整数型，浮点型\",\"boolean类型：占一位其值只有ture和false两个\",\"引用数据类型：类，接口，数组（注意：字符串类型也是一个类，也属于引用数据类型）\"]},\"647\":{\"h\":\"整型拓展\",\"t\":[\"十进制整数，如：99,-500,0。 八进制整数，要求以 0开头，如：015。 十六进制数，要求 0x或 0X开头，如：0x15 。 //整型 int i=10; int i2=010; int i3=0x10; System.out.println(i); //10 System.out.println(i2); //8 System.out.println(i3); //16 \"]},\"648\":{\"h\":\"字符型拓展\",\"t\":[\"单引号用来表示字符常量。例如'A'是一个字符，他与\\\"A\\\"是不同的，\\\"A\\\"表示的是一个字符串。\",\"//代码1 String sa=new String(\\\"Hello world\\\"); String sb=new String(\\\"Hello world\\\");System.out.println(sa==sb); // false,因为sa与sb是通过String对象new出来的,创建了两个对象，而且sa和sb的地址也不一样，所以返回false //代码2 String sc=\\\"Hello world\\\"; String sd=\\\"Hello world\\\";System.out.println(sc==sd); // true，因为创建的都是同一个对象，地址一样，内容也一样，所以返回true \"]},\"649\":{\"h\":\"布尔类型拓展\",\"t\":[\"boolean类型：一位，不是一个字节，就是0或1\",\"boolean类型有两个值，true和false，不可以用0或1代替true或false，这点和c语言不同\",\"if(is==true&&un==false){ } if(is&&!un){ //是一样的，熟练的人应该使用下面的方式，代码要精简易读！ } \"]},\"650\":{\"h\":\"类型转换\",\"t\":[\"因为Java是强类型的语言，所以有时候进行运算的时候，需要类型转换。\",\"低 ------------------------------------> 高\",\"byte,short,char—> int —> long—> float —> double\",\"类型转换满足的规则：\",\"不能对boolean类型进行类型转换\",\"不能把对象类型转换成不相关类的对象\",\"在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\",\"转换过程中可能导致溢出或损失精度\",\"浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入\"]},\"651\":{\"h\":\"自动类型转换\",\"t\":[\"自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型\",\"byte,short,char是直接转换成int类型进行运算的\"]},\"652\":{\"h\":\"强制类型转换\",\"t\":[\"public static void main(String[]args){ double x=3.14; int nx=(int)x; //值为3 char c='a'; int d=c+1; System.out.println(d); //98 System.out.println((char)d); //b } \"]},\"653\":{\"h\":\"java的switch参数与case匹配规则的本质\",\"t\":[\"switch语句中的执行过程是，表达式里面的值可以直接匹配到case里面的值，因为编译器有一套算法，这也是switch语句执行起来高效的原因。\",\"编译器对switch语句有两套算法，\",\"第一种情况，如果case里面的值都是比较接近的。\",\"例如是这样的代码：\",\" switch（num）{ case 1: 执行语句； break; case 2: 执行语句； break； ...... } \",\"编译器会把case值装到一个类似数组的容器里，然后通过索引直接找到具体的值。数组遍历是不用挨个遍历的，通过索引可以锁定具体的值。\",\"第二种情况，case里面的值间距比较大，比如第一个case里面的值是1，第二个case里面的值是2，第三个case里面的值是1000，这会儿编译器的算法是通过二分查找法，来找到具体case值。\"]},\"654\":{\"h\":\"方法参数传递机制：值传递\",\"t\":[\"基本类型的参数传输存储的：数据值 引用类型的参数传输存储的：地址值 主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址 \",\"package day01; //方法参数传递机制：值传递 //基本类型的参数传输存储的：数据值 //引用类型的参数传输存储的：地址值 //主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址 public class D11_method { public static void main(String[] args) { // 基本类型 int num = 22; changeNum(num);//传递的是num的值：22 System.out.println(num); System.out.println(\\\"----------------------------\\\"); // 引用类型 int[] arr = new int[]{11, 22, 33}; System.out.println(\\\"地址为\\\" + arr); change(arr);//传递的是地址值：[I@75b84c92 System.out.println(arr[1]);//222 System.out.println(\\\"地址为\\\" + arr); } public static void changeNum(int num) { System.out.println(num); num = 222; System.out.println(num); } public static void change(int[] arr) { System.out.println(\\\"地址为\\\" + arr); System.out.println(arr[1]);//22 arr[1] = 222; System.out.println(arr[1]);//222 System.out.println(\\\"地址为\\\" + arr); } } \"]},\"655\":{\"c\":[\"Java基础\"]},\"656\":{\"c\":[\"Java语法\"]},\"657\":{\"h\":\"Java基础第二幕\",\"t\":[\"提示\",\"面向对象的力量\"]},\"658\":{\"h\":\"面向对象的思想\",\"t\":[\"把现实中的事物全部看成一个个的对象来解决问题，就使得代码看起来很像人的语言。\",\"Java中需要先定义类，才能创建对象。\",\"类是相同事物共同特征的描述，对象是具体存在的实例\"]},\"659\":{\"h\":\"定义类的注意事项\",\"t\":[\"类名注意首字母大写，满足驼峰命名法。例如（Student ；Person；Book；Movie）\",\"一个Java文件中可以定义多个类，但是只能有一个类是用public修饰符，而且public的修饰符的类也必须是Java文件名相同\",\"规范：建议一个Java文件只定义一个类\"]},\"660\":{\"h\":\"类中成分\",\"t\":[\"类中可以定义的5大成分：成员变量，构造器（无参，有参），成员方法（getter，setter，toString...），代码块，内部类\",\"package com.meng; public class Student { //1、成员变量 private String name; private int age; //2、构造器 分为有参和无参构造器，如果不写构造器，在类内会默认存在一个无参构造器，如果需要写有参构造器，无参构造器会被重载，最好再把无参构造器写出来，否则可能出现new一个无参对象报错。 public Student() { } public Student(String name, int age) { this.name = name; this.age = age; } //3、成员方法 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } \"]},\"661\":{\"h\":\"this关键字\",\"t\":[\"作用：出现在成员方法，构造器中代表当前对象的地址，用于指定访问当前对象的成员变量，成员方法。\",\"this出现在构造器或者方法中，哪个对象调用它，this就代表哪个对象。\"]},\"662\":{\"h\":\"面向对象:内存机制\",\"t\":[\"首先准备一个汽车类\",\"package day02; public class Car { // 成员变量(属性) String name; double price; // 方法(行为) public void start() { System.out.println(name + \\\"启动了\\\"); } public void run() { System.out.println(\\\"价格是\\\" + price + \\\"的\\\" + name + \\\"跑的贼快！\\\"); } } \",\"学生类\",\"package day02; public class Student { String name; char gender; String hobby; public void study() { System.out.println(\\\"名称:\\\" + name + \\\"性别:\\\" + gender + \\\"爱好:\\\" + hobby + \\\"的学生开始学习了\\\"); } } \"]},\"663\":{\"h\":\"两个对象内存分析\",\"t\":[\"package day02; import day02.d1OOPArrayList.Car; //两个对象内存分析 public class Test01 { public static void main(String[] args) { Car car1 = new Car(); car1.name = \\\"宝马\\\"; car1.price = 50.88; System.out.println(car1.name); System.out.println(car1.price); car1.start(); car1.run(); Car car2 = new Car(); car2.name = \\\"奔驰\\\"; car2.price = 60; System.out.println(car2.name); System.out.println(car2.price); car2.start(); car2.run(); } } \",\"image-20220807093237996\",\"首先方法区加载Test.class文件以及执行main方法\",\"发现main方法中需要创建Car对象于是方法区中加载Car.class文件(成员变量、成员方法)\",\"在堆内存中开辟一块内存用于存储new Car()产生的对象(包含成员变量以及成员方法的引用地址)，再把对象的地址交给c1实例存储\",\"......\"]},\"664\":{\"h\":\"两个变量指向同一个对象内存图\",\"t\":[\"package day02; import day02.d1OOPArrayList.Student; public class Test02 { public static void main(String[] args) { Student s1 = new Student(); s1.name = \\\"小明\\\"; s1.gender = '男'; s1.hobby = \\\"打篮球\\\"; s1.study(); Student s2 = s1; s2.hobby = \\\"爱提问\\\"; System.out.println(s2.name); System.out.println(s2.gender); System.out.println(s1.hobby); s2.study(); } } \",\"image-20220807094538111\"]},\"665\":{\"h\":\"垃圾回收\",\"t\":[\"注意：当我们堆内存中的对象，没有被任何变量引用(指向)时，就会被判定为内存中的\\\"垃圾\\\"。\",\"Java存在自动垃圾回收器，会定期自动清理 堆内存中没人引用的对象\"]},\"666\":{\"h\":\"面向对象的三大特征\"},\"667\":{\"h\":\"面向对象的三大特征：封装、继承、多态。\"},\"668\":{\"h\":\"封装 标准JavaBean\",\"t\":[\"封装的基本思想：合理隐藏（隐藏细节），合理暴露（提供访问入口）\",\"封装步骤：通常将成员变量私有、提供方法进行暴露。\",\"封装作用：提高业务功能的设计的安全性，提高组件化。\"]},\"669\":{\"h\":\"特征的含义：\"},\"670\":{\"h\":\"所谓特征就是已经成为Java设计代码的特点，即使毫无意义，通常也需要满足这样的设计要求来编写代码。\"},\"671\":{\"h\":\"JavaBean\"},\"672\":{\"h\":\"也可以理解为实体类，其对象可以用于在程序中封装数据。\",\"t\":[\"成员变量使用private修饰，提供每一个成员变量的setter/getter方法，必须提供一个无参构造器。\",\"package com.meng; import java.util.Arrays; public class User { private String name; private int age; private String[] hobbies; private String mail; public User() { } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String[] getHobbies() { return hobbies; } public void setHobbies(String[] hobbies) { this.hobbies = hobbies; } public String getMail() { return mail; } public void setMail(String mail) { this.mail = mail; } @Override public String toString() { return \\\"User{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", hobbies=\\\" + Arrays.toString(hobbies) + \\\", mail='\\\" + mail + '\\\\'' + '}'; } } \"]},\"673\":{\"h\":\"面向对象进阶\"},\"674\":{\"h\":\"static关键字\"},\"675\":{\"h\":\"static关键字的作用，和修饰成员变量的用法\",\"t\":[\"static是静态的意思，可以修饰成员变量，表示该成员变量只在内存中存储一份，可以被共享访问、修改。（例如在线人数）\",\"静态成员变量（有static修饰，属于类，堆内存中加载一次）\",\"实例成员变量（无static修饰，存在于每个对象中）\"]},\"676\":{\"h\":\"static修饰成员变量的内存原理\",\"t\":[\"image-20220807155545218\",\"首先user.class文件加载到方法区，加载类的同时会加载静态成员变量，因为静态成员变量属于类（加载一次，被共享访问，而且在堆内存中）。\",\"在栈内存中加载执行main方法\"]},\"677\":{\"h\":\"成员方法的分类\",\"t\":[\"静态成员方法：有static关键字修饰，属于类，推荐使用类名访问，也可以使用对象访问\",\"实例成员方法：无static关键字修饰，属于对象，只能用于对象触发访问。\",\"image-20220807160857697\"]},\"678\":{\"h\":\"static的应用：工具类，工具类的案例\",\"t\":[\"验证码工具静态类\",\"package com.meng; import java.util.Random; public class VerifyTool { /** * 静态方法 * @param n * @return */ public static String createCode(int n){ //1、使用String开发一个验证码 String chars = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\\\"; //2、定义一个变量用于存储验证码 String code = \\\"\\\"; //3、循环 Random random = new Random(); for (int i = 0; i < n; i++) { int index = random.nextInt(chars.length()); code += chars.charAt(index); } return code; } } \",\"测试类\",\"package com.meng; public class Test01 { public static void main(String[] args) { //直接调用静态方法，提高代码的复用，减少代码的重复 System.out.println(VerifyTool.createCode(4)); } } \"]},\"679\":{\"h\":\"工具类原理和延伸\",\"t\":[\"一次编写处处可用；\",\"建议将工具类的构造器私有，不让工具类对外产生对象（节约内存）\",\"package com.meng; import java.util.Random; public class VerifyTool { /** * 私有构造器！！！！！！！！！！！！！！（建议）因为可以节约内存，详细原因见下面的思考 */ private VerifyTool(){ } /** * 静态方法 * @param n * @return */ public static String createCode(int n){ //1、使用String开发一个验证码 String chars = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\\\"; //2、定义一个变量用于存储验证码 String code = \\\"\\\"; //3、循环 Random random = new Random(); for (int i = 0; i < n; i++) { int index = random.nextInt(chars.length()); code += chars.charAt(index); } return code; } } \",\"思考：为什么工具类中的方法不用实例方法去做？\",\"答：实例方法需要创建对象调用，此时我们用对象仅仅只是要调用方法，这样只会浪费内存！\"]},\"680\":{\"h\":\"static注意事项（面试常考）\",\"t\":[\"静态方法（static）只能访问静态成员，不可以直接访问实例的成员\",\"实例方法可以访问静态的成员，也可以访问实例的成员\",\"静态方法中是不可以出现static关键字的\"]},\"681\":{\"h\":\"static应用知识（代码块）\"},\"682\":{\"h\":\"代码块分为：\",\"t\":[\"静态代码块：\",\"格式：static\",\"特点：需要使用static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次\",\"使用场景：在类的加载的时候，做一些静态数据的初始化的操作，以便后续使用。\",\"构造代码块（了解，用的少）：\",\"格式\",\"特点：每次创建对象，调用构造器时执行，都会执行该代码块中的代码，并且在构造器执行前执行。\",\"使用场景：初始化实例资源。\"]},\"683\":{\"h\":\"设计模式（面试）\"},\"684\":{\"h\":\"设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式\",\"t\":[\"单例模式：可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。\",\"应用场景：例如任务管理器，我们只需要一个就可以解决问题了，可以节约内存空间。\"]},\"685\":{\"h\":\"饿汉单例：\",\"t\":[\"在类获取对象的时候，对象已经提前为你创建好了。\"]},\"686\":{\"h\":\"设计步骤：\",\"t\":[\"定义一个类，把构造器私有\",\"定义一个静态变量存储这个类的一个对象\",\"package com.meng; /** * 1、定义一个单例类 */ public class SingleInstance { //3、定义一个静态变量，存储一个对象即可：属于类，与类一起加载一次 public static SingleInstance instance = new SingleInstance(); //2、单例必须私有构造器 private SingleInstance(){ System.out.println(\\\"创建了一个对象\\\"); } } \"]},\"687\":{\"h\":\"懒汉单例\",\"t\":[\"真正需要该对象的时候，才去创建一个对象。（延迟加载对象）\"]},\"688\":{\"h\":\"设计步骤\",\"t\":[\"定义一个类，把构造器私有。\",\"定义一个静态变量，存储一个对象。\",\"提供一个返回单例的方法。\",\"package com.meng; /** * 1、懒汉单例模式 */ public class SingleInstance2 { //3、定义一个静态变量,属于类，与类一起加载一次,(不能初始化对象，因为它懒） // public static SingleInstance2 instance; //把静态成员变量设为私有，防止别人调用这个啥都没有的静态变量，会坑到人的 private static SingleInstance2 instance; //2、私有构造器 private SingleInstance2(){ System.out.println(\\\"创建了一个对象\\\"); } //3、定义一个方法，让其他地方可以调用获取一个对象 public static SingleInstance2 getInstance(){ //首先判断是不是已经创建了一个对象，如果没有创建（第一次）就创建一个对象给静态变量，后续就有对象了，就不会再次创建对象了，保障多次创建的是同一个对象 if (instance == null){ instance = new SingleInstance2(); } return instance; } } \"]},\"689\":{\"h\":\"继承（面向对象三大特征之一）\"},\"690\":{\"h\":\"继承的基本介绍\",\"t\":[\"什么是继承？\",\"继承就是类与类之间的关系。\",\"多个类可以单独继承某个类（就是一个类可以被多个类继承）\",\"多个类称为子类（派生类），单独的类称为父类（或者基类，超类）\",\"注意：Java不存在多继承（通俗的讲就是：一个类只能有一个父类）\",\"为什么用继承？\",\"继承的好处：提高代码的复用性，减少代码的重复性。\",\"image-20220807183350757\"]},\"691\":{\"h\":\"继承设计规范\",\"t\":[\"子类的共同特征放到父类中定义（比如学生和老师都可以继承人类，人类中有学生和老师共有的特征：姓名，年龄，身高，体重...），子类独有的方法要放在子类中单独定义（比如老师有工资，而大部分学生没有工资）\",\"这时候可能会有人想：如果我们把子类所有的方法和属性都定义到人类里面，那子类里面是不是就可以什么都不定义了？\",\"如果我们把子类所有的属性方法定义到父类，那么继承自父类的其他子类都会有这些属性方法，比如老师的工资定义到父类中，而学生继承父类，那么学生也就有工资了，这不符合逻辑！\"]},\"692\":{\"h\":\"继承的内存运行原理\",\"t\":[\"image-20220808075119129\"]},\"693\":{\"h\":\"继承的特点\",\"t\":[\"子类可以继承父类的属性和行为，但是子类不能继承父类的构造器\",\"Java是单继承模式：一个类只能继承一个直接父类\",\"Java不支持多继承（这点和C++不一样），但是支持多层继承。\",\"Java中所有的类都是Object类的子类。（Object是祖宗）\"]},\"694\":{\"h\":\"子类是否可以继承父类的私有成员?\",\"t\":[\"注意:是可以继承父类的私有成员的，只是不能直接访问\",\"当我们new了一个子类构造器，在堆内存中会产生一个对象，而这个对象中是包含了父类成员空间(super)以及子类成员空间(this)，只是父类成员空间中的私有方法不能直接访问(从内存的角度来看是子类可以继承父类的所有属性和方法，只是能不能直接访问，后面我们可以通过反射暴力获取到子类对象的父类的私有方法)\"]},\"695\":{\"h\":\"子类是否可以继承父类静态成员?\",\"t\":[\"不能 ---> 虽然子类可以直接使用父类的静态成员(这是共享的)，共享并非继承关系，在内存中只有一份\"]},\"696\":{\"h\":\"在子类方法中访问成员（成员变量、成员方法）满足：就近原则\",\"t\":[\"先在子类局部范围找\",\"然后子类成员范围找\",\"然后父类成员范围找，如果父类范围还没有找到就会报错\"]},\"697\":{\"h\":\"重写\",\"t\":[\"如果父类中的方法不能够满足子类的方法，在子类中可以对父类中的方法进行重写\"]},\"698\":{\"h\":\"@Override重写注解\",\"t\":[\"@override是放在重写后的方法上的，作为重写是否正确的校验注解。\",\"加上该注解后如果重写错误，编译阶段会出现错误提示\",\"建议重写方法都加上@override注解，代码安全，优雅！\"]},\"699\":{\"h\":\"注意事项：\",\"t\":[\"重写方法的名称、形参列表必须与被重写的方法名称和参数列表一致。\",\"私有方法不能被重写。\",\"子类重写父类方法时，访问权限必须大于或者等于父类\",\"子类也不能重写父类的静态方法。\"]},\"700\":{\"h\":\"子类继承父类后构造器的特点：\",\"t\":[\"子类中的构造器会默认先访问父类中的无参构造器，然后再执行自己\",\"子类构造器的第一行语句默认都是：super()，不写也存在。\"]},\"701\":{\"h\":\"包、权限修饰符\",\"t\":[\"包是用来分门别类管理各种不同的文件的，类似于文件夹，建包有利于项目管理和维护。\",\"package 公司域名（com）.技术名称(springboot).javabean\",\"包名建议全部小写，且具备意义\",\"建包语句一般在第一行，IDEA工具会自动生成创建。\",\"导包格式：包名.类名\"]},\"702\":{\"h\":\"权限修饰符\",\"t\":[\"控制一个对象能够被访问的范围\",\"由小到大：private --->缺省 --->protect --->public\",\"image-20220808090917489\"]},\"703\":{\"h\":\"final修饰符\",\"t\":[\"含有final修饰的类不能被继承，final修饰方法，不能被重写，\",\"final修饰变量，变量有且只能被赋值一次(基本类型 数据值不能改变，引用类型 地址值不能改变 但是内容可以改变)\",\"变量有几种：\",\"局部变量；\",\"成员变量：\",\"--静态成员变量\",\"--实例成员变量\"]},\"704\":{\"h\":\"常量\",\"t\":[\"常量是使用了public static final 修饰的成员变量，必须有初始化值，而且初始化之后不能被改变。\",\"常量的作用和好处：可以用于做系统的配置信息，方便系统维护，同时也提高可读性。\",\"常量命名规范：英文单词全部大写，多个单词下划线连接起来\",\"这种方法在编译阶段会把常量名改为字面意思，在运行时提高一些性能。而且便于维护，改一个就可以修改全部\",\"package com.meng; public class FinalTest { public static final String SCHOOL_NAME = \\\"安徽大学\\\"; public static final String LOGIN_NAME = \\\"admin\\\"; public static final String PASSWORD = \\\"123456\\\"; public static void main(String[] args) { System.out.println(FinalTest.SCHOOL_NAME); System.out.println(LOGIN_NAME); System.out.println(PASSWORD); } } \"]},\"705\":{\"h\":\"枚举\"},\"706\":{\"h\":\"枚举的概述\",\"t\":[\"枚举是Java中的一种特殊类型\",\"枚举的作用：做信息的标志和信息的分类\"]},\"707\":{\"h\":\"枚举的格式\",\"t\":[\"package com.meng; /** * 枚举类 enum */ public enum Season { //枚举第一列必须罗列枚举类的 对象 名称，建议全部大写 SPRING,SUMMER,AUTUMN,WINTER; } /* 反编译后的class文件 */ public final class day02.d2OOP.d5_enum.Season extends java.lang.Enum<day02.d2OOP.d5_enum.Season> { public static final day02.d2OOP.d5_enum.Season SPRING; public static final day02.d2OOP.d5_enum.Season SUMMER; public static final day02.d2OOP.d5_enum.Season AUTUMN; public static final day02.d2OOP.d5_enum.Season WINTER; public static day02.d2OOP.d5_enum.Season[] values(); public static day02.d2OOP.d5_enum.Season valueOf(java.lang.String); static {}; } \"]},\"708\":{\"h\":\"枚举的特征：\",\"t\":[\"枚举类都是继承了java.lang.Enum类\",\"枚举类都是最终类，不能被继承\",\"枚举类的构造器时私有的，不能对外创建对象\",\"package com.meng; import static com.meng.Season.SUMMER; public class Test02 { public static void main(String[] args) { Test02 test02 = new Test02(); test02.test(SUMMER); } public void test(Season season) { switch (season) { case SPRING: System.out.println(\\\"万物复苏\\\"); break; case SUMMER: System.out.println(\\\"夏日炎炎\\\"); break; case AUTUMN: System.out.println(\\\"落霞与孤鹜齐飞，秋水共长天一色\\\"); break; case WINTER: System.out.println(\\\"冬天到了，春天的脚步近了\\\"); break; } } } \"]},\"709\":{\"h\":\"抽象类\",\"t\":[\"某个父类知道其所有的子类要完成某个功能，但是每个子类完成的情况不一样，父类就只定义该功能的基本要求，具体实现由子类完成，这个类就可以是一个抽象类，抽象类其实是一种不完全的设计图\",\"抽象类必须使用abstract修饰：\",\"修饰符 abstract class 类名(){}\",\"抽象方法：就是抽象类中定义的子类中必须完成的功能的具体要求。\",\"修饰符 abstract 返回值类型 方法名称（形参列表）；\",\"没有方法体，只有方法签名，必须用abstract修饰。\",\"package com.meng.abstractDemo; public abstract class Animal { private String name; public abstract void cry(); public String getName() { return name; } public void setName(String name) { this.name = name; } } \",\"package com.meng.abstractDemo; public class Tiger extends Animal { @Override public void cry() { System.out.println(\\\"喵呜喵呜\\\"); } } \",\"package com.meng.abstractDemo; public class Dog extends Animal{ @Override public void cry() { System.out.println(\\\"汪汪汪\\\"); } } \"]},\"710\":{\"h\":\"抽象类特征：\",\"t\":[\"**有得有失：**得到了抽象方法，失去了创建对象的能力。\",\"抽象类为什么不能创建对象？因为抽象类如果能创建对象，那么我们用这个对象调用抽象类中的抽象方法，抽象方法没有方法体！所以抽象类不能创建对象！抽象类存在构造器而且还是公有的！因为子类继承抽象类就要首先调用抽象类的构造器，并** 不是**因为抽象类的构造器私有化而导致抽象类不能创建对象的。\",\"类有的成员（成员变量，方法，构造器），抽象类都具备。\",\"抽象类中不一定有抽象方法，但是有抽象方法的一定是抽象类。\",\"一个类继承了这个抽象类，那么这个类必须重写完抽象类中的所有方法，否则这个类也应该定义成为抽象类！\",\"不能用abstract修饰变量、代码块、构造器。\"]},\"711\":{\"h\":\"final和abstract是什么关系？\"},\"712\":{\"h\":\"互斥关系\"},\"713\":{\"h\":\"接口Interface\",\"t\":[\"什么是接口？\",\"接口就是体现规范的，期中用抽象方法定义的一组行为规范，接口是更加彻底的抽象。\",\"接口的定义和特点：\",\"public interface 接口名{\",\"//常量\",\"//抽象方法\",\"}\"]},\"714\":{\"h\":\"接口的定义：\",\"t\":[\"package com.meng.interfaceTest; /** * 定义一个电脑接口 */ public interface ComputerInterface { //JDK1.8之前接口中的成员只有 常量 和 抽象方法 // public static final String COMPUTER_NAME = \\\"MacBook\\\"; //在接口中定义的默认就是静态常量 String COMPUTER_NAME = \\\"MacBook\\\"; // public abstract 可以省略不写 void USB();//USB接口 void HDMI();//高清接口 void DP();//数字式视频接口 void type_c();//type-c接口 } \"]},\"715\":{\"h\":\"接口的实现：\",\"t\":[\"接口是用来被实现的（implements）的，实现接口的类成为实现类，实现类可以理解为所谓的子类。\",\"修饰符 class 实现类 implements 接口1,接口2,接口3...{\",\"}\",\"实现的关键字implements\",\"接口可以被类单实现，也可以被类多实现。\",\"package com.meng.interfaceTest; /** * 外设 */ public class Peripherals implements ComputerInterface{ @Override public void USB() { System.out.println(\\\"没有USB接口 -_-!\\\"); } @Override public void HDMI() { System.out.println(\\\"也没有\\\"); } @Override public void DP() { System.out.println(\\\"还是没有\\\"); } @Override public void type_c() { System.out.println(\\\"嘿嘿，有两个，一个电源线接口，另一个空着~\\\"); } public static void main(String[] args) { System.out.println(ComputerInterface.COMPUTER_NAME); Peripherals peripherals = new Peripherals(); peripherals.USB(); peripherals.HDMI(); peripherals.DP(); peripherals.type_c(); } } \"]},\"716\":{\"h\":\"接口可以多继承\",\"t\":[\"规范整合，整合多个接口为同一个接口，便于子类实现\"]},\"717\":{\"h\":\"接口新增方法、注意事项（了解）\",\"t\":[\"注意：\",\"接口不能创建对象！\",\"一个类可以实现多个接口，多个接口中有同样的静态方法不冲突(原因接口的静态方法只能接口自己调用)\",\"一个类继承了父类，同时又实现接口，父类中和接口中有同名的方法，默认使用父类的\",\"一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可\",\"一个接口继承了多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承\"]},\"718\":{\"h\":\"JDK8开始接口新增了一些方法：\"},\"719\":{\"h\":\"默认方法\",\"t\":[\"类似之前写的普通实例方法:必须使用default修饰\",\"默认会public修饰。需要使用接口的实现类的对象来调用\"]},\"720\":{\"h\":\"静态方法\",\"t\":[\"默认会public修饰，必须用static修饰\",\"接口的静态方法必须使用本身接口名来调用\"]},\"721\":{\"h\":\"私有方法\",\"t\":[\"就是私有的实例方法；必须使用private修饰，从JDK1.9才开始有的\",\"只能在本类中其他的默认方法或者私有方法访问\",\"package com.meng.interfaceTest; /** * 定义一个电脑接口 */ public interface ComputerInterface01 { //JDK1.8之前接口中的成员只有 常量 和 抽象方法 // public static final String COMPUTER_NAME = \\\"MacBook\\\"; //在接口中定义的默认就是静态常量 //String COMPUTER_NAME = \\\"MacBook\\\"; // public abstract 可以省略不写 // void USB();//USB接口 // void HDMI();//高清接口 // void DP();//数字式视频接口 // void type_c();//type-c接口 //---------JDK1.8新增方法---------- //1、实例方法 // 接口不能创建对象，必须通过实现类来创建对象调用方法 default void add(){ System.out.println(\\\"在接口中新增一个接口的时候，会牵一发而动全身，所以用default修饰可以在接口中进行添加方法体\\\"); } //2、静态方法 //必须使用static修饰，默认使用public //接口的静态方法只能用接口名自己调用 static void add1(){ System.out.println(\\\"Java源码自己会用到\\\"); } //3、私有方法 JDK1.9才支持的(了解即可)切换JDK模块版本：在项目结构中切换，这个语法JDK8不支持 //必须在接口内部才能被访问 // private void go(){ // // } } class Add implements ComputerInterface01{ } class test{ public static void main(String[] args) { Add add = new Add(); add.add(); ComputerInterface01.add1(); } } \"]},\"722\":{\"h\":\"多态（面向对象三大特征之一，重点）\"},\"723\":{\"h\":\"概述、形式\"},\"724\":{\"h\":\"多态是同类型的对象，执行不同的行为，表现出不同的行为特征。\",\"t\":[\"多态的常见形式：\",\"父类类型 对象名称 = new 子类构造器\",\"接口 对象名称 = new 实现类构造器（接口也是一种父类，可以理解为干爹）\"]},\"725\":{\"h\":\"多态中成员访问的特点\",\"t\":[\"方法调用：编译看左边，运行看右边\",\"变量调用：编译看左边，运行也看左边（多态侧重行为多态）\"]},\"726\":{\"h\":\"优势：\",\"t\":[\"在多态的形势下右边的对象可以实现解耦合，便于扩展和维护。\",\"比如说： Animal a = new Cat(); 如果我们有一天不想用这个猫对象，我们就可以把猫换成狗对象： Animal a = new Dog(); 。然后后续的业务行为随对象而改变，后续的代码无需修改，例如（ a.cry(); ) 。解耦合在框架中非常常见，解耦合就是降低两个类之间的联系的紧密程度。\",\"定义方法的时候，使用父类类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展与便利。\",\"public void game（Animal animal）;这样就可以让所有的动物都被game方法接收。\"]},\"727\":{\"h\":\"多态产生的一个问题：\",\"t\":[\"多态情况下不能使用子类独有的功能，不过我们可以通过引用类型的转换来调用子类独有的功能。（把大类（动物类）转成小类（猫类），大转小就需要强制类型转换）\"]},\"728\":{\"h\":\"引用类型的转换\"},\"729\":{\"h\":\"自动类型转换：从子类到父类，子类对象赋值给父类类型的变量指向。\"},\"730\":{\"h\":\"强制类型转换：从父类到子类，子类 对象变量 = （子类）父类类型的变量\",\"t\":[\"作用：可以解决多态下的劣势，实现调用子类独有的功能。\",\"例如：Animal a = new Dog(); 因为a此时的类型是Animal，所以我们不知道 a 到底是哪一类具体的动物，如果我们想调用Dog中独有的吃骨头方法（eat），我们就需要对 a 对象进行强制类型转换：Dog d = ( Dog) a; 然后再 d.eat();才能调用子类中独有的方法\"]},\"731\":{\"h\":\"至于为什么多态的父类不能调用子类的独有方法？例如：Animal a = new Dog(); 此时 a对象 的 引用类型 是 Animal动物，但是吃骨头是狗独有的行为方法，而Animal都不会吃骨头，如果用没有强转的a对象能调用到狗的吃骨头，这是不符合逻辑的。所以只能狗吃骨头，我们就得把a对象的Animal类型强转成Dog类型（Dog d = (Dog) a;)，这个时候原来的动物对象就被确认确确实实是狗，我们才可以让 d 调用吃骨头。注意强转的时候一定要复合逻辑！不能把猫转换成狗！！！Java在强制类型转换的时候有一个建议：如下\"},\"732\":{\"h\":\"建议\",\"t\":[\"Java建议强转转换前使用 instanceof 判断当前对象的真实类型，再进行强制类型转换\",\"变量名 instanceof 真实类型\",\"判断关键字（instanceof）左边的变量指向的对象的真实类型，是否是右边的类型或者是其子类型，是就返回true，反之false；\",\"package com.meng.instanceofDemo; /** * 定义一个抽象类的动物 * 定义一个'叫'的方法体 */ public abstract class Animal { public abstract void cry(); } \",\"package com.meng.instanceofDemo; public class Cat extends Animal{ @Override public void cry() { System.out.println(\\\"喵喵喵\\\"); } //猫独有的方法抓老鼠 public void catchMice(){ System.out.println(\\\"猫在抓老鼠\\\"); } } \",\"package com.meng.instanceofDemo; public class Dog extends Animal{ @Override public void cry() { System.out.println(\\\"汪汪汪\\\"); } public void eat(){ System.out.println(\\\"狗在吃骨头\\\"); } } \",\"package com.meng.instanceofDemo; public class Test { public static void main(String[] args) { Animal animal = new Dog();//我们以后只需要把Cat修改为Dog，就可以把猫换成狗，而且下面的什么都不用动 animal.cry();//我们不强转成子类类型就只能调用父类中的通用方法 test(animal);//我们调用下面的test方法对animal进行类型的判断然后调用独有的方法 } public static void test(Animal animal){ //这时候我们不能知道传进来的到底是猫是狗，所以我们需要对Animal进行判断 if (animal instanceof Dog){ Dog dog = (Dog) animal; dog.eat(); }else if (animal instanceof Cat){ Cat cat = (Cat) animal; cat.catchMice(); } } } \"]},\"733\":{\"h\":\"补充知识\"},\"734\":{\"h\":\"内部类\",\"t\":[\"内部类就是一个定义在一个类里面的类，里面的类可以理解成寄生，外部类可以理解成宿主。（与现实世界进行对接）\"]},\"735\":{\"h\":\"匿名内部类\",\"t\":[\"本质上是一个没有名字的局部内部类，定义在方法中，代码块中，等。\"]},\"736\":{\"h\":\"作用：\",\"t\":[\"方便创建子类对象，最终的目的为了简化代码编写。\"]},\"737\":{\"h\":\"格式：\",\"t\":[\"Animal animal1 = new Animal() { @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } };\"]},\"738\":{\"h\":\"特点：\",\"t\":[\"匿名内部类是一个没有名字的内部类\",\"匿名内部类写出来就会产生一个匿名内部类的对象\",\"相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的\",\"我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法\",\"package com.meng.anonymous; public class Test { public static void main(String[] args) { //普通写法（抽象类不能被创建对象） Animal animal = new Tiger(); animal.run(); //匿名内部类： //匿名内部类是一个没有名字的内部类 //匿名内部类写出来就会产生一个匿名内部类的对象 //相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的 //我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法 Animal animal1 = new Animal() { @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } }; animal1.run(); } } class Tiger extends Animal{ @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } } abstract class Animal{ public abstract void run(); } \",\"使用形式：\",\"package com.meng.anonymous; public class Test2 { public static void main(String[] args) { //匿名内部类：创建一个接口的子类学生对象， // 以后用到Lambda表达式就一行代码就ok了 Swimming s1 = new Swimming() { @Override public void swimming() { System.out.println(\\\"学生在游泳\\\"); } }; go(s1); Swimming s2 = new Swimming() { @Override public void swimming() { System.out.println(\\\"老师在游泳\\\"); } }; go(s2); //我们还可以直接把匿名内部类直接作为方法的入参传送给方法 go(new Swimming() { @Override public void swimming() { System.out.println(\\\"我在游泳\\\"); } }); //Lambda表达式就一行代码就ok了,这个以后讲述 Swimming s3 = () -> System.out.println(\\\"Lambda在游泳\\\"); go(s3); go(() -> System.out.println(\\\"Lambda在游泳!!\\\")); } public static void go(Swimming swimming){ System.out.println(\\\"开始...\\\"); swimming.swimming(); System.out.println(\\\"结束...\\\"); } } /** * 定义一个接口：游泳 */ interface Swimming{ void swimming(); } \",\"开发中不是我们主动定义匿名内部类，而是别人需要我们写或者我们可以写的时候才会使用。\",\"匿名内部类的代码可以实现代码的进一步简化！\"]},\"739\":{\"c\":[\"Java基础\"]},\"740\":{\"c\":[\"Java语法\"]},\"741\":{\"h\":\"Java基础第三幕\",\"t\":[\"提示\",\"常用API的魔力\"]},\"742\":{\"h\":\"String类\",\"t\":[\"String类定义的变量可以存储字符串，同时String类提供了很多操作字符串的功能，我们可以直接使用\"]},\"743\":{\"h\":\"不同方式定义字符串的内存原理\",\"t\":[\"image-20220807110326351\",\"image-20220807110534539\",\"String类常见的面试题\",\"下面代码运行的结果是？\",\"package com.meng; import java.lang.String; public class StringDemo01 { public static void main(String[] args) { //通过这种方法创建了两个对象，一个是在字符串常量池中的\\\"abc\\\"，还有一个是在堆内存中new出来的s1。其中s1是在堆内存中的 String s1 = new String(\\\"abc\\\"); //这句代码实际上创建了0个对象！ 因为字符串常量池中已经有\\\"abc\\\"，所以s2并没有在字符串常量池中再创建一个同样的\\\"abc\\\"对象 String s2 = \\\"abc\\\"; System.out.println(s1 == s2);//s1是在堆内存中的，s2是在字符串常量池中的， System.out.println(s1.equals(s2));// ==号比较的实际上是地址 // （equals若没有重写，比较的其实也是地址，重写equals是为了让它比较内容是否一样,equals在Object里面被重写了，所以s1.equals(s2)为true） //因为s1和s2的地址不同，所以是false！ } } \",\"package com.meng; public class StringDemo02 { public static void main(String[] args) { String s1 = \\\"abc\\\";//字符串常量池 String s2 = \\\"ab\\\";//字符串常量池 String s3 = s2 + \\\"c\\\";//运算得到的结果是放在 堆内存 中的 //这个为什么没有在编译时进行优化呢？因为s2是一个变量，只有在运行时s2才能确定时“ab” System.out.println(s1 == s3);//地址不一样，false } } \",\"package com.meng; public class StringDemo03 { public static void main(String[] args) { String s1 = \\\"abc\\\";//字符串常量池 String s2 = \\\"a\\\"+\\\"b\\\"+\\\"c\\\";//字符串常量池 //Java存在编译优化机制，也就是在编译时（值是确定的，就是\\\"abc\\\"）会把 \\\"a\\\"+\\\"b\\\"+\\\"c\\\" 直接转为 \\\"abc\\\" ，在运行时常量池中就只有一个对象\\\"abc\\\" （可以通过class文件中查看到） System.out.println(s1 == s2);//true } } //把class文件反编译后，如下 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by FernFlower decompiler) // package com.meng; public class StringDemo03 { public StringDemo03() { } public static void main(String[] args) { String s1 = \\\"abc\\\"; String s2 = \\\"abc\\\";//运行时s2就已经是abc，说明编译时进行了编译优化 System.out.println(s1 == s2); } } \",\"字符串内容比较（equals）\",\"package com.meng; import java.util.Scanner; public class StringEqualsDemo04 { public static void main(String[] args) { //正确的用户名和密码 String OkName = \\\"admin\\\";//常量池 String OkPassword = \\\"123456\\\";//常量池 //提示用户输入 Scanner scanner = new Scanner(System.in); System.out.println(\\\"username：\\\"); String name = scanner.next();//用户输入过来的不是以双引号接收的，是放在堆内存中的 System.out.println(\\\"password：\\\"); String password = scanner.next();//堆内存 //判断 // == 比较的是地址 常量池地址 != 堆内存地址 所以不能使用双等号比较内容是否一样 if (OkName == name && OkPassword == password){ System.out.println(\\\"success (==)\\\"); }else { System.out.println(\\\"username or password is error (==)\\\"); } //equals 精确比较内容是否一致 if (name.equals(OkName) && password.equals(OkPassword)){ System.out.println(\\\"success (equals)\\\"); }else { System.out.println(\\\"username or password is error (equals)\\\"); } //equalsIgnoreCase 忽略大小写比较 if (name.equalsIgnoreCase(OkName) && password.equalsIgnoreCase(OkPassword)){ System.out.println(\\\"success (equalsIgnoreCase)\\\"); }else{ System.out.println(\\\"username or password is error (equalsIgnoreCase)\\\"); } } } //----------------输出内容--------------------- /* username： Admin password： 123456 username or password is error (==) username or password is error (equals) success (equalsIgnoreCase) 进程已结束,退出代码0 */ \",\"String常用API\",\"package com.meng; /** * 掌握String其他常用的API */ public class StringOtherDemo05 { public static void main(String[] args) { //1、public int length(); 获取字符串长度 (包含空格） String name = \\\"I love you China\\\"; System.out.println(name.length()); //2、public char charAt(int index); 获取某个索引位置处的字符 (从0开始） char wordInName = name.charAt(0); System.out.println(wordInName); System.out.println(\\\"------遍历字符串中的每个字符-------\\\"); for (int i = 0; i < name.length(); i++) { System.out.print(name.charAt(i));//print 不换行 } System.out.println(); //3、public char[] toCharArray(); 把字符串转换成字符数组 char[] chars = name.toCharArray(); for (int i = 0; i < chars.length; i++) { System.out.println(chars[i]); } //4、pubic String substring(int beginIndex, int endIndex); 截取内容，包括前面，不包括后面 String name2 = \\\"Java是最厉害的语言\\\"; System.out.println(name2.substring(0, 4));//Java //5、pubic String substring(int beginIndex）; 从当前位置 一直截取到末尾 System.out.println(name2.substring(4)); //6、public String replace(CharSequence target,CharSequence replacement); 替换关键字 String name3 = \\\"你在玩什么东西呢？一直送,垃圾\\\"; String rs = name3.replace(\\\"什么东西\\\", \\\"**\\\").replace(\\\"送\\\", \\\"**\\\").replace(\\\"垃圾\\\", \\\"**\\\"); System.out.println(rs); //7、public boolean contains(CharSequence s); 判断字符串中是否包含 if (name3.contains(\\\"垃圾\\\")){ System.out.println(\\\"违规！！！\\\"); }else { System.out.println(\\\"未发现\\\"); } //8、public boolean startsWith(String prefix); 判断是以什么开始 System.out.println(name3.startsWith(\\\"你在\\\")); //9、public String[] split(String regex);以什么分割成字符串数组 String name4 = \\\"唱歌，跳舞，rap，篮球\\\"; String[] hobbies = name4.split(\\\"，\\\"); for (String hobby : hobbies) { System.out.println(hobby); } } } \"]},\"744\":{\"h\":\"ArrayList\",\"t\":[\"集合与数组类似，也是一种容器，用于装数据的。\",\"数组的特点：数组定义完，并启动后，类型确定，长度固定！在我们进行CRUD（增删改查）时候，数组的缺陷就暴漏出来了。所以我们就需要利用集合。\",\"集合的特点：集合大小不固定，启动后可以动态变化，类型也可以选择不固定的。集合就非常合适做元素个数不确定，且进行CRUD的业务场景。同时集合也提供了非常多且好用的API～\"]},\"745\":{\"h\":\"快速入门：\"},\"746\":{\"h\":\"对象集合获取：\",\"t\":[\"public ArrayList(); 创建一个空的集合对象\"]},\"747\":{\"h\":\"添加数据：\",\"t\":[\"public boolean add(E e);添加一个指定的元素到此集合末尾\",\"public void add(int index,E element);在指定位置添加指定元素\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo01 { public static void main(String[] args) { //1、创建ArrayList对象 ArrayList list = new ArrayList(); //2、添加数据 list.add(\\\"JavaSE\\\"); list.add(\\\"HTML\\\"); list.add(\\\"CSS\\\"); list.add(\\\"JS\\\"); list.add(\\\"Vue\\\"); list.add(\\\"JavaWeb\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Maven\\\"); list.add(\\\"MyBatis\\\"); list.add(\\\"MyBatis-Plus\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Spring-MVC\\\"); list.add(\\\"SpringBoot\\\"); list.add(\\\"SpringCloud\\\"); list.add(\\\"设计模式\\\"); list.add(\\\"数据结构\\\"); list.add(\\\"算法设计\\\"); //3、打印输出 System.out.println(list);//打印出的是内容，说明ArrayList重写了toString方法 //4、给指定位置添加元素 list.add(1,\\\"注解，反射，多线程，网络编程\\\");//0 1(add) 2(1) 3(2)... System.out.println(list); } } \"]},\"748\":{\"h\":\"ArrayList对于泛型的支持\",\"t\":[\"Java认为我们这样ArrayList list = new ArrayList();创建ArrayList对象没有约定泛型并不规范，所以要约定一个泛型。\"]},\"749\":{\"h\":\"泛型概述：\",\"t\":[\"ArrayList< E >:其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种类型的数（E）\",\"例举：\",\"ArrayList< String >;只能操作字符串类型的元素；\",\"ArrayList< Integer >;只能操作整数类型的元素；\",\"注意：集合中只能存储引用类型，不支持基本数据类型！！！\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo02 { public static void main(String[] args) { ArrayList<String> list = new ArrayList<>(); list.add(\\\"字符串\\\"); list.add(\\\"dadada~\\\"); // list.add(2);整型和其他泛型不能添加到String的ArrayList集合中 ArrayList<Integer> list1 = new ArrayList<>(); list1.add(100); ArrayList<Object> list2 = new ArrayList<>(); list2.add(100); list2.add(\\\"hello\\\"); } } \"]},\"750\":{\"h\":\"ArrayList常用API\",\"t\":[\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo03 { public static void main(String[] args) { //1、创建ArrayList对象 ArrayList<String> list = new ArrayList<>(); //2、添加数据 list.add(\\\"Spring\\\"); list.add(\\\"Spring-MVC\\\"); list.add(\\\"SpringBoot\\\"); list.add(\\\"SpringCloud\\\"); list.add(\\\"设计模式\\\"); list.add(\\\"数据结构\\\"); list.add(\\\"算法设计\\\"); //常用API //1、public E get(int index) 获取某个索引位置处的元素值（从0开始） String s1 = list.get(1); System.out.println(s1); //2、public int size() 获取集合大小（元素个数） int size = list.size(); System.out.println(size); //3、完成集合的遍历 list.fori for (int i = 0; i < list.size(); i++) { System.out.println(\\\"遍历结果：\\\"+list.get(i)); } //4、public E remove(int index) 删除某个索引位置处的元素，并返回被删除的元素 String remove = list.remove(3); System.out.println(remove); System.out.println(list); //5、public boolean remove(Object o) 直接删除元素，删除成功返回true，否则返回false //注意：只会删除第一个出现的元素（存在元素相同的情况下） boolean b = list.remove(\\\"算法设计\\\"); System.out.println(b); System.out.println(list); //6、public E set(int index, E element) 修改指定位置的元素，并返回oldValue String set = list.set(4, \\\"从入门到如土\\\"); System.out.println(\\\"被修改的：\\\"+set); System.out.println(\\\"修改后的内容：\\\"+list); } } \"]},\"751\":{\"h\":\"案例：\",\"t\":[\"遍历并删除元素\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListTest01 { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(100); list.add(90); list.add(70); list.add(88); list.add(78); list.add(79); list.add(66); list.add(33); //删除80分以下的元素 //[100, 90, 70, 88, 78, 79, 66, 33] //[100, 90, 88, 78, 79, 66, 33] //[100, 90, 88, 79, 66, 33] //[100, 90, 88, 79, 33] 我们发现最后结果还是有80分以下的元素！ 这就是非常经典的bug， // i // 因为要删除时，如果后面的元素元素也是小于80分，这时候删除了本位置的元素，然后下一步就是i++，没有继续判断这个位置是不是小于80， // 所以出现了bug。解决方案： //一：在判断如果要删除的时候，我们让它删除后i--；也就是让它回到上一个位置，然后再进行循环判断下一个位置是否小于80，不过效率低 //二：倒序删除！！！ System.out.println(\\\"方法一：\\\"); System.out.println(list); for (int i = 0; i < list.size(); i++) { if (list.get(i)<80){ list.remove(i); i--;//方法一，效率低 } } System.out.println(list); //方法二 ArrayList<Integer> list2 = new ArrayList<>(); list2.add(100); list2.add(90); list2.add(70); list2.add(88); list2.add(78); list2.add(79); list2.add(66); list2.add(33); //[100, 90, 70, 88, 78, 79, 66, 33] //[100, 90, 70, 88, 78, 79, 66] //[100, 90, 88] // i System.out.println(\\\"方法二：\\\"); System.out.println(list2); for (int i = list2.size()-1; i>=0; i--){ if (list2.get(i)<80){ list2.remove(i); } } System.out.println(list2); } } \",\"存储自定义类型（开发中使用最多）\",\"package com.meng.arrayList; public class Movie { private String name;//电影名称 private double score;//电影评分 private String actor;//演员 public Movie() { } public Movie(String name, double score, String actor) { this.name = name; this.score = score; this.actor = actor; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getScore() { return score; } public void setScore(double score) { this.score = score; } public String getActor() { return actor; } public void setActor(String actor) { this.actor = actor; } @Override public String toString() { return \\\"Movie{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", score=\\\" + score + \\\", actor='\\\" + actor + '\\\\'' + '}'; } } \",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListTest02 { public static void main(String[] args) { //1、创建一个自定义电影Movie类 //2、定义一个ArrayList类存储这些影片 ArrayList<Movie> movies = new ArrayList<>(); //3、创建影片对象，封装电影数据，把对象加入到集合中 Movie m1 = new Movie(\\\"长津湖\\\", 9.6, \\\"吴京,易烊千玺\\\"); Movie m2 = new Movie(\\\"奇迹·笨小孩\\\", 9.5, \\\"易烊千玺\\\"); movies.add(m1); movies.add(m2); //4、遍历集合中的影片对象，并展示处理 for (int i = 0; i < movies.size(); i++) { Movie movie = movies.get(i); System.out.println(movie); } //迭代器遍历；增强 'for' for (Movie movie : movies) { System.out.println(movie); } } } \",\"元素搜索🔍\",\"package com.meng.arrayList; public class Student { private String sId; private String name; private int age; private String className; public Student() { } public Student(String sId, String name, int age, String className) { this.sId = sId; this.name = name; this.age = age; this.className = className; } public String getsId() { return sId; } public void setsId(String sId) { this.sId = sId; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getClassName() { return className; } public void setClassName(String className) { this.className = className; } @Override public String toString() { return \\\"Student{\\\" + \\\"sId='\\\" + sId + '\\\\'' + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", className='\\\" + className + '\\\\'' + '}'; } } \",\"package com.meng.arrayList; import java.util.ArrayList; public class Seek { /** * 根据学号，再学生集合中找出学生对象 * @param students * @param id * @return */ public Student getStudentById(ArrayList<Student> students, String id){ for (Student student : students) { if (id.equals(student.getsId())){ return student; } } return null;//查无此人 } } \",\"package com.meng.arrayList; import java.util.ArrayList; import java.util.Scanner; public class ArrayListTest03 { public static void main(String[] args) { //1、创建一个自定义Student学生类 //2、定义一个ArrayList类存储学生对象 ArrayList<Student> students = new ArrayList<>(); //3、创建学生对象，封装学生数据，把学生对象加入到集合中 Student student1 = new Student(\\\"20220101\\\", \\\"小胡\\\", 19,\\\"计算机\\\"); Student student2 = new Student(\\\"20220102\\\", \\\"小王\\\", 19,\\\"网络\\\"); students.add(student1); students.add(student2); //4、遍历集合 for (Student student : students) { System.out.println(student); } //5、让用户不断输入学号，可以搜索出学生的信息（独立成方法） Seek seek = new Seek(); Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请输入学号：\\\"); String id = scanner.next(); Student s = seek.getStudentById(students, id); if (s == null){ System.out.println(\\\"查无此人\\\"); }else { System.out.println(s); } } } } \"]},\"752\":{\"h\":\"Object、Objects类\"},\"753\":{\"h\":\"Object类的作用\",\"t\":[\"一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的祖宗类。\",\"Object类的方法是一切子类都可以直接使用的，所以我们需要学习Object类中的方法。\"]},\"754\":{\"h\":\"Object类中的常用方法\",\"t\":[\"方法名\",\"说明\",\"public String toString()\",\"默认是返回当前对象在堆内存中的地址信息：类的权限名@内存地址\",\"public Boolean equals(Object o)\",\"默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false\"]},\"755\":{\"h\":\"toString\",\"t\":[\"package com.toString; public class Student {//extends Object private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.toString; public class Test1 { public static void main(String[] args) { Student student = new Student(\\\"胖虎\\\", 18, '男'); /*String s = student.toString(); System.out.println(s);*/ System.out.println(student.toString()); //直接输出对象变量，默认可以省略toString System.out.println(student); //在开发中直接输出对象，默认输出对象的地址，其实是毫无意义的 //开发中输出对象变量，我们更多希望的是看到对象的内容是什么，而不是对象的地址 //所以我们就需要在Student类中重写toString让它可以输出内容 System.out.println(student); } } \"]},\"756\":{\"h\":\"equals\",\"t\":[\"package com.toString; import java.util.Objects; public class Student {//extends Object private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } //先尝试自己重写equals /*@Override public boolean equals(Object o){ //1、判断o是不是学生类型 if (o instanceof Student){ //2、判断2个对象的内容是否一样 //this是主调的对象 //字符串的比较还是要用equals，字符串本身就重写了equals，比较本身内容 //o是Object类型，我们需要强转为学生 // if (this.name.equals(((Student) o).name) && this.age == ((Student) o).age && this.gender == ((Student) o).gender){ // return true; // }else { // return false; // } return this.name.equals(((Student) o).name) && this.age == ((Student) o).age && this.gender == ((Student) o).gender; }else { //学生只能和学生比较，否则返回false return false; } }*/ //IDEA自动生成，重写equals也会重写hashCode @Override public boolean equals(Object o) { if (this == o) return true;//先判断了是不是自己和自己比较 if (o == null || getClass() != o.getClass()) return false;//如果o是null，就是传进来一个空进来，或，判断类型是否一样 //如果通过了上面的层层判断，就进行正式的内容比较啦(因为此时的o就是学生类型且不为空) //首先把Object类型的o强转为Student类型的student，如果进行一一比较 //注意，这时候进行字符串比较，调用的是Objects里面的equals，而不是直接调用name字符串里面的equals，可以防止空指针异常（就是怕我们传进去一个空值进去比较） Student student = (Student) o; return age == student.age && gender == student.gender && Objects.equals(name, student.name); } //重写equals也会重写hashCode @Override public int hashCode() { return Objects.hash(name, age, gender); } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.toString; public class Test2 { public static void main(String[] args) { Student student1 = new Student(\\\"胖虎\\\", 18, '男'); Student student2 = new Student(\\\"胖虎\\\", 18, '男'); //不重写equals会调用Object里面的equals，默认比较地址是否相同,我们完全可以使用 == 号比较 System.out.println(student1.equals(student2));//不重写equals就是比较地址，false System.out.println(student1 == student2);//false //但是我们大多数都是想要比较内容是否相同，所以我们就需要在子类中重写equals System.out.println(student1.equals(student2)); } } \"]},\"757\":{\"h\":\"Objects\",\"t\":[\"Objects类与Object还是继承关系，Object是自从JDK1.7才有的\"]},\"758\":{\"h\":\"equals\",\"t\":[\"官方进行字符串比较的时候没有用对象自己的equals方法，而是调用Objects的equals的方法来比较两个对象\",\"Objects的equals比较更安全\",\"Objects.equals(name, student.name); 和 name.equals(student.name);\",\"因为后面的一种name可能为空( 就变成了null.equals() )，会报空指针异常，而前面的一种更加安全。\",\"Object.equals\",\"直接比较地址\",\"public boolean equals(Object obj) { return (this == obj); } \",\"String name;\",\"name.equals\",\"比较字符串内容\",\" /** * Compares this string to the specified object. The result is {@code * true} if and only if the argument is not {@code null} and is a {@code * String} object that represents the same sequence of characters as this * object. * * @param anObject * The object to compare this {@code String} against * * @return {@code true} if the given object represents a {@code String} * equivalent to this string, {@code false} otherwise * 将此字符串与指定对象进行比较。当且仅当参数不为null并且是表示与此对象相同的字符序列的String对象时，结果才为true 。 参形： anObject - 与此String进行比较的对象 返回值：true给定对象表示与此String等效的字符串，则为 true，否则为false */ public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) { char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) { if (v1[i] != v2[i]) return false; i++; } return true; } } return false; } \",\"Objects.equals\",\"进行非空判断，更安全。\",\"注意：需要在子类中重写equals才是比较内容，否则它会找父类Object中的equals比较地址\",\"public static boolean equals(Object a, Object b) { return (a == b) || (a != null && a.equals(b)); } \"]},\"759\":{\"h\":\"isNull\",\"t\":[\"判断变量是否为null，为null返回true，反之false\",\"和 == 号判断是否为null一毛一样，不过调用API判断逼格更高。（专业）\",\"package com.toString; import java.util.Objects; public class Test2 { public static void main(String[] args) { Student student2 = new Student(\\\"胖虎\\\", 18, '男'); Student student3 = null; System.out.println(Objects.isNull(student1)); System.out.println(student1 == null); System.out.println(Objects.isNull(student3)); System.out.println(student3 == null); } } \"]},\"760\":{\"h\":\"注意点：\",\"t\":[\"//调用Objects的equals比较内容需要重写equals，否则比较的就是地址 System.out.println(Objects.equals(student1,student2)); \"]},\"761\":{\"h\":\"StringBuilder\",\"t\":[\"StringBuilder是一个可变字符串类，我们可以把它看成一个对象容器\",\"作用：提高字符串的操作效率，如拼接、修改等。\"]},\"762\":{\"h\":\"StringBuilder构造器\",\"t\":[\"名称\",\"说明\",\"public StringBuilder()\",\"创建一个空白的可变的字符串对象，不包含任何内容\",\"public StringBuilder(String str)\",\"创建一个指定字符串内容的可变字符串对象\"]},\"763\":{\"h\":\"StringBuilder常用方法\",\"t\":[\"方法名称\",\"说明\",\"public StringBuilder append(任意类型)\",\"添加数据并返回StringBuilder对象本身\",\"public StringBuilder reverse()\",\"将对象内容反转\",\"public int length()\",\"返回对象内容长度\",\"public String toString()\",\"通过toString()就可以实现把StringBuilder转换为String\",\"package com.stringbuilder; /** * 目标：学会StringBuilder操作字符串，最终还需要知道StringBuilder性能好的原因 */ public class Demo01 { public static void main(String[] args) { StringBuilder stringBuilder = new StringBuilder();//\\\"\\\" stringBuilder.append(\\\"a\\\"); System.out.println(stringBuilder); stringBuilder.append(\\\"b\\\"); stringBuilder.append(1); stringBuilder.append(false); stringBuilder.append(3.33); stringBuilder.append(\\\"abc\\\"); stringBuilder.append(2.4f); System.out.println(stringBuilder); //支持链式编程 StringBuilder stringBuilder1 = new StringBuilder(); stringBuilder1.append(\\\"https://\\\").append(\\\"www.\\\").append(\\\"apple\\\").append(\\\".com\\\"); System.out.println(stringBuilder1); //反转内容 stringBuilder1.reverse().append(\\\"反转\\\"); System.out.println(stringBuilder1); //长度 //insert插入 stringBuilder1.insert(0,\\\"22\\\"); System.out.println(stringBuilder1); System.out.println(stringBuilder1.length()); //注意：StringBuilder只是拼接字符串的手段，效率好 //最终的目的还是要恢复成String类型。才能复合方法的参数 String s = stringBuilder1.toString(); test(s); } public static void test(String s){ System.out.println(\\\"方法中的\\\"); System.out.println(s); } } \"]},\"764\":{\"h\":\"StringBuilder性能好的原因：\",\"t\":[\"与String相比，StringBuilder在拼接字符串的时候，堆内存中只有一个我们new出来的对象，而String在运算拼接字符串的时候，（String底层拼接字符串的原理就是：每次进行运算拼接都会new 一个StringBuilder对象进行拼接，然后toString返回String类型的对象）会在堆内存中创建多个StringBuilder对象，所以效率低。\",\"String内容不可变、拼接字符串性能差\",\"StringBuilder内容可变、拼接字符串性能好，代码优雅\",\"定义字符串使用String\",\"拼接、修改等操作字符串使用StringBuilder，最终一定要toString把StringBuilder转为String类型。\",\"image-20220808162154769\"]},\"765\":{\"h\":\"Math\"},\"766\":{\"h\":\"概述：\",\"t\":[\"见名知意，即包含了基本的数学运算方法的类，Math没有提供公开的构造器。\",\"Math的构造器是被私有的，不能对外创建对象，但是Math中的方法都是静态的，可以直接通过类名进行访问。\"]},\"767\":{\"h\":\"Math中的常用方法\",\"t\":[\"方法名\",\"说明\",\"public static int abs(int a)\",\"获取参数绝对值\",\"public static double ceil(double a)\",\"向上取整\",\"public static double floor(double a)\",\"向下取整\",\"public static int round(float a)\",\"四舍五入\",\"public static int max(int a,int b)\",\"获取两个int值中较大的值\",\"public static double pow(double a,double b)\",\"返回a的b次幂的值\",\"public static double random()\",\"返回值为double的随机值，范围[ 0.0,1.0 )\"]},\"768\":{\"h\":\"System\",\"t\":[\"System的功能是通用的，都是直接用类名调用即可，所以System不能被实例化。\"]},\"769\":{\"h\":\"System中常用方法\",\"t\":[\"方法名\",\"说明\",\"public static void exit(int status)\",\"终止当前运行的Java虚拟机，非零表示异常终止\",\"public static long currentTimeMillis()\",\"返回当前系统的时间毫秒值的形式。1970-1-1到目前的时间毫秒值（C语言的生日）\",\"public static void arraycopy(数组源数组，起始索引，目的地数组，起始索引，拷贝个数)\",\"数组拷贝\",\"测试电脑执行十万次循环所需要的时间\",\"package com.time; public class test1 { public static void main(String[] args) { //循环开始的时候时间 long startTime = System.currentTimeMillis(); System.out.println(startTime); //十万次循环 for (int i = 0; i < 1e5; i++) { System.out.println(\\\"输出\\\"+i); } //循环结束的时候的时间 long endTime = System.currentTimeMillis(); System.out.println(endTime); //把毫秒值转换成秒 System.out.println((endTime - startTime)/1000.0); } } //0.192s \"]},\"770\":{\"h\":\"BigDecimal\"},\"771\":{\"h\":\"BigDecimal作用\",\"t\":[\"用于解决浮点型运算精度失真的问题\",\"package com; public class Test01 { public static void main(String[] args) { System.out.println(0.09+0.01);//0.09999999999999999 System.out.println(1.0-0.32);//0.6799999999999999 System.out.println(1.015*100);//101.49999999999999 System.out.println(1.301/100);//0.013009999999999999 System.out.println(\\\"---------------\\\"); double c = 0.1+0.2; System.out.println(c);//0.30000000000000004 } } \"]},\"772\":{\"h\":\"使用步骤\",\"t\":[\"创建对象BigDecimal封装浮点型数据（最好的方式是调用方法）\",\"public static BigDecimal valueOf (double val):包装浮点型成为BigDecimal对象\"]},\"773\":{\"h\":\"Java开发手册中(嵩山版）：\",\"t\":[\"禁止使用构造方法 BigDecimal(double) 的方式把double值转化为BigDecimal对象。\",\"说明：BigDecimal(double)存在精度损失风险，在精度计算或值比较的场景中可能会导致业务功能逻辑异常。\",\"如：BigDecimal b = new BigDecimal(0.1F);实际的存储值为：0.10000000149\",\"正例：优先推荐入参为String的构造方法，或使用BigDecimal的valueOf 方法，此方法内部起始执行了Double的toString，而Double的toString按double的实际能表达的精度对尾数进行了截断。\",\"BigDecimal recommend1 = new BigDecimal(\\\"0.1\\\");\",\"BigDecimal recommend2 = BigDecimal.valueOf(0.1);\"]},\"774\":{\"h\":\"BigDecimal常用API\",\"t\":[\"方法名\",\"说明\",\"public BigDecimal add(BigDecimal b)\",\"加法\",\"public BigDecimal subtract(BigDecimal b)\",\"减法\",\"public BigDecimal multiply(BigDecimal b)\",\"乘法\",\"public BigDecimal divide(BigDecimal b)\",\"除法\",\"public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)\",\"除法\",\"package com; import java.math.BigDecimal; import java.math.RoundingMode; public class Test01 { public static void main(String[] args) { System.out.println(0.09+0.01);//0.09999999999999999 System.out.println(1.0-0.32);//0.6799999999999999 System.out.println(1.015*100);//101.49999999999999 System.out.println(1.301/100);//0.013009999999999999 System.out.println(\\\"---------------\\\"); double a = 0.1; double b = 0.2; double c = a+b; System.out.println(c);//0.30000000000000004 System.out.println(\\\"----------------\\\"); //包装浮点型对象成为大数据对象 BigDecimal BigDecimal a1 = BigDecimal.valueOf(a); BigDecimal b1 = BigDecimal.valueOf(b); // BigDecimal c1 = a1.add(b1); // BigDecimal c1 = a1.subtract(b1); // BigDecimal c1 = a1.multiply(b1); BigDecimal c1 = a1.divide(b1); System.out.println(c1);//BigDecimal内重写了toString方法 //BigDecimal只是一个手段，我们最终还是要用double类型去接收结果 double rs = c1.doubleValue(); System.out.println(rs);//这个时候就可以传给double类型的参数了 //注意事项：BigDecimal一定是要精度运算的 BigDecimal a11 = BigDecimal.valueOf(10); BigDecimal b11 = BigDecimal.valueOf(3); // BigDecimal c11 = a11.divide(b11);报异常 ArithmeticException // System.out.println(c11); // c11 = a11/b11 除数 保留几位小数 一半上升（四舍五入） BigDecimal c11 = a11.divide(b11, 2, RoundingMode.HALF_UP); System.out.println(c11); } } \"]},\"775\":{\"h\":\"总结：\",\"t\":[\"BigDecimal的作用是什么？\",\"解决浮点型运算精度失真问题\",\"BigDecimal的对象如何获取？\",\"BigDecimal b = BigDecimal.valueOf(0.1);\"]},\"776\":{\"h\":\"Date\",\"t\":[\"Date类的对象在Java中代表的是当前所在系统的此刻日期时间。\",\"package com.date; import java.util.Date; public class DateDemo { public static void main(String[] args) { //创建一个Date对象，代表当前系统此刻的时间对象 Date date = new Date(); System.out.println(date); //获取时间毫秒值 System.out.println(date.getTime());//date.getTime() System.out.println(System.currentTimeMillis());//通过系统获得 //计算出当前时间往后走1小时100秒的的时间 Date date1 = new Date();//创建一个日期对象 System.out.println(date1);//先输出一下 long date2 = date1.getTime() + (60 * 60 + 100) * 1000;//把date1转为时间毫秒值再加上1小时100秒 Date date3 = new Date(date2);//把date2的毫秒值转成日期对象，有两种方式：1、Date date3 = new Date(date2); 2、date3.setTime(date2) System.out.println(date3);//输出date3 } } \"]},\"777\":{\"h\":\"总结：\",\"t\":[\"日期对象如何创建，如何获取时间毫秒值？\",\"Date date = new Date();//创建日期对象\",\"Long time = date.getTime();//获取日期对象的时间毫秒值\",\"时间毫秒值怎么恢复成日期对象？\",\"Date d = new Date(time);\",\"d.setTime(time);\"]},\"778\":{\"h\":\"SimpleDateFormat（简单日期格式化类）\"},\"779\":{\"h\":\"SimpleDateFormat类的作用：\",\"t\":[\"可以对Date对象或时间毫秒值格式化成我们喜欢的时间形式。\",\"也可以把字符串的时间形式解析成日期对象。\"]},\"780\":{\"h\":\"SimpleDateFormat的构造器\",\"t\":[\"构造器\",\"说明\",\"public SimpleDateFormat()\",\"构造一个SimpleDateFormat，使用默认格式\",\"public SimpleDateFormat(String pattern)\",\"构造一个SimpleDateFormat，使用指定的格式\"]},\"781\":{\"h\":\"SimpleDateFormat的格式化方法\",\"t\":[\"格式化方法\",\"说明\",\"public final String format(Date date)\",\"将日期格式化成日期/时间字符串\",\"public final String format(Object time)\",\"将时间毫秒值转化成日期/时间字符串\",\"package com.simpleDateFormat; import java.text.SimpleDateFormat; import java.util.Date; public class SimpleDateFormatDemo1 { public static void main(String[] args) { //1、日期对象 Date date = new Date(); System.out.println(date); //2、格式化这个日期对象（指定最终格式化的形式） 年 月 日 时 分 秒 星期 上下午 SimpleDateFormat dateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss EEE a\\\"); //3、开始格式化日期对象成为喜欢的字符串形式 String rs = dateFormat.format(date); System.out.println(rs); System.out.println(\\\"----------格式化毫秒值-------------\\\"); //4、格式化时间毫秒值 //需求：请问100后的时间是 Date date1 = new Date(); long time = date1.getTime() + 100 * 1000; String s = dateFormat.format(time); System.out.println(s); System.out.println(\\\"-----------解析字符串时间，下一部分:Test1------------\\\"); } } \",\"package com.simpleDateFormat; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class Test1 { public static void main(String[] args) throws ParseException { //使用SimpleDateFormat解析字符串时间成为日期对象 String dateStr = \\\"2021年08月06日 11:11:11\\\"; System.out.println(dateStr); //把字符串时间解析成时间对象：形式务必和字符串中的形式一毛一样，否则会出现bug SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); //然后解析 Date date = sdf.parse(dateStr); //往后走2天14小时49分22秒 为了保险起见在第一个2后面加L，变成long类型，防止毫秒值过大越界 long time = date.getTime() + (2L*24*60*60+14*60*60+49*60+22)*1000; //格式化这个时间毫秒值 String format = sdf.format(time); System.out.println(format); } } \"]},\"782\":{\"h\":\"总结：\",\"t\":[\"SimpleDateFormat可以格式化哪些时间形式？\",\"SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); sdf.format(date); sdf.format(time); \",\"SimpleDateFormat如何进行字符串时间的解析？\",\"mpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); Date d = sdf.parse(\\\"2022年2月28日 14:23:30\\\");//解析格式必须要一样 \"]},\"783\":{\"h\":\"Calendar\"},\"784\":{\"h\":\"Calendar概述\",\"t\":[\"Calendar代表了系统此刻日期对应的日历对象。\",\"Calendar是一个抽象类，不能直接创建对象。\",\"方法\",\"说明\",\"public int get(int field)\",\"获取日期中的某个字段信息\",\"public void set(int field, int value)\",\"修改日历的某个字段信息\",\"public void add(int field, int amount)\",\"为某个字段增加或者减少指定的值\",\"public final Date getTime()\",\"获取此刻日期对象\",\"public long getTimeInMillis()\",\"获取此刻的毫秒值\",\"package com.calendar; import java.util.Calendar; import java.util.Date; public class CalendarDemo1 { public static void main(String[] args) { //1、拿到系统此时的日历对象 Calendar cal = Calendar.getInstance(); System.out.println(cal); //2、获取日历信息 int year = cal.get(Calendar.YEAR); System.out.println(year); int month = cal.get(Calendar.MONTH); System.out.println(month); int weekOfYear = cal.get(Calendar.WEEK_OF_YEAR); System.out.println(weekOfYear); //3、修改日历中的某个字段信息(我们一般不会去修改日历中的时间，因为牵一发而动全身，后面的日历时间就会全都改变） //cal.set(Calendar.HOUR,10); //System.out.println(cal); //4、增加减少指定的值 //64天,59分后 cal.add(Calendar.DAY_OF_YEAR,64); cal.add(Calendar.MINUTE,59); //5、拿到此刻的日期对象 Date time = cal.getTime(); System.out.println(time); //6、拿到时间毫秒值 long timeInMillis = cal.getTimeInMillis(); System.out.println(timeInMillis); } } \",\"注意：Calendar是一个可变日期对象，一旦修改后其对象本身表示的时间将会产生变化\"]},\"785\":{\"h\":\"JDK8新增的日期API\",\"t\":[\"JDK8新增的日期类，API非常多建议查阅JDK文档\",\"类\",\"说明\",\"LocalDate\",\"不包含具体时间的日期\",\"LocalTime\",\"不包含日期的时间\",\"LocalDateTime\",\"包含了日期以及时间\",\"Instant\",\"代表的是时间戳\",\"DateTimeFormatter\",\"用于做时间的格式化和解析的\",\"Duration\",\"用于计算两个”时间“的间隔\",\"Period\",\"用于计算两个”日期“的间隔\",\"其次，新的API的类型几乎全部都是不变类型（和String的使用类似），可以放心使用，不必担心被修改发生牵一发而动全身。\"]},\"786\":{\"h\":\"LocalDate、LocalTime、LocalDateTime\",\"t\":[\"他们分别代表日期、时间、日期时间对象，他们类的实例是不可变对象\",\"他们三者构建对象和API都是通用的\",\"image-20220809104348616\",\"image-20220809105047333\",\"image-20220809134847701\",\"image-20220809134957404\",\"image-20220809135057623\",\"package com.time; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; public class Test1 { public static void main(String[] args) { //1、获取本地的日期对象 LocalDate now = LocalDate.now(); System.out.println(\\\"今天的日期：\\\"+now);//今天的日期：2022-02-28 int year = now.getYear(); System.out.println(\\\"year:\\\"+year); int month = now.getMonthValue(); System.out.println(\\\"month:\\\"+month); int dayOfYear = now.getDayOfYear(); System.out.println(\\\"dayOfYear:\\\"+dayOfYear); //-------------------- LocalTime now1 = LocalTime.now(); System.out.println(now1); //--------------------最全的，综合了LocalDate和LocalTime LocalDateTime now2 = LocalDateTime.now(); System.out.println(now2); System.out.println(now2.getYear()); } } \"]},\"787\":{\"h\":\"包装类\"},\"788\":{\"h\":\"概述\",\"t\":[\"包装类其实就是八种基本数据类型对应的引用类型。（Java为了实现万物皆对象）\",\"基本数据类型\",\"引用数据类型\",\"byte\",\"Byte\",\"short\",\"Short\",\"int\",\"Integer\",\"long\",\"Long\",\"char\",\"Character\",\"float\",\"Float\",\"double\",\"Double\",\"boolean\",\"Boolean\",\"集合和泛型其实也只能支持包装类，不支持基本数据类型。（ArrayList< Integer >)\",\"自动装箱：基本数据类型的数据和变量可以直接赋值给包装类型的变量\",\"自动拆箱：包装类型的变量可以直接赋值给基本数据类型的变量\"]},\"789\":{\"h\":\"包装类的特有的功能\",\"t\":[\"包装类的变量的默认值可以是null，容错率高。\",\"包装类可以把基本数据类型转换成字符串形式toString（用的不多 ，其实我们完全可以这样：num = num1 + \\\"\\\" ;让他加一个空字符串）\"]},\"790\":{\"h\":\"可以把字符串类型转换成真实的数据类型（非常有用）\",\"t\":[\"Integer.parseInt(\\\"字符串类型的整数\\\")\",\" String age = \\\"20\\\"; //转换真实类型（int） int age1 = Integer.parseInt(age); System.out.println(age1); \",\"不过我们发现还是不方便，我们可以用这个：Integer.valueOf(\\\"字符串类型的整数\\\"); Double.valueOf(\\\"字符串类型的小数\\\")\"]},\"791\":{\"h\":\"Arrays类\"},\"792\":{\"h\":\"Arrays类概述\",\"t\":[\"数组操作工具类，专门用于数组操作元素的。\"]},\"793\":{\"h\":\"Arrays类常用的API\",\"t\":[\"方法名\",\"public static String toString(类型[] a)\",\"对数组进行排序\",\"public static void sort(类型[] a)\",\"对数组进行默认升序排序\",\"public static < T > void sort(类型[] a,Comparator< ? super T > c)\",\"使用比较器对象自定义排序\",\"public static int binarySearch(int[] a, int[] key)\",\"二分搜索数组中的数据，存在返回 索引 ，不存在返回 -1\",\"image-20220809142249247\",\"package com.arrays; import java.util.Arrays; public class ArraysDemo1 { public static void main(String[] args) { int[] arr = {10,2,55,23,24,100}; System.out.println(arr);//打印地址 //String rs = Arrays.toString(arr); //System.out.println(rs); System.out.println(Arrays.toString(arr));//打印数组内容 //排序（默认升序） Arrays.sort(arr); System.out.println(Arrays.toString(arr));//API调用 //二分搜索技术（前提数组必须排好序才支持，否则出bug）数据结构中的内容：就是从中间开始先比较大小然后选择是在前半段还是在后半段，然后再和中间的比较... int index = Arrays.binarySearch(arr, 55);//查找到返回索引，查找不到返回 负数（规律 ： -（应该插入的位置的索引+1） ） System.out.println(index); } } \",\"image-20220809143211150\",\"package day03.d7_arrays; public class Student { private String name; private int age; private double height; public Student() { } public Student(String name, int age, double height) { this.name = name; this.age = age; this.height = height; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", height=\\\" + height + '}'; } } \",\"package day03.d7_arrays; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.List; /** * 自定义数组排序规则Comparator比较器 */ public class ArrayDemo2 { public static void main(String[] args) { Integer[] ages = {20, 18, 30, 11, 21, 55, 33}; Arrays.sort(ages); System.out.println(Arrays.toString(ages)); // Arrays.sort(ages, new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return o2 - o1; } }); System.out.println(Arrays.toString(ages)); // 学生数组对象 Student[] students = { new Student(\\\"1\\\", 20, 189.0), new Student(\\\"2\\\", 22, 185.0), new Student(\\\"3\\\", 19, 177.0), new Student(\\\"4\\\", 21, 182.0) }; Arrays.sort(students, new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { // 比较浮点型可以这样写 return Double.compare(o1.getHeight(), o2.getHeight()); } }); System.out.println(Arrays.toString(students)); // 学生集合对象 List<Student> list = new ArrayList<>(); list.add(new Student(\\\"1\\\", 20, 189.0)); list.add(new Student(\\\"2\\\", 22, 185.0)); list.add(new Student(\\\"3\\\", 19, 177.0)); list.add(new Student(\\\"4\\\", 21, 182.0)); list.sort(new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { return o1.getAge() - o2.getAge(); } }); System.out.println(list); } } \"]},\"794\":{\"h\":\"选择排序和二分查找\",\"t\":[\"image-20220809153449345\",\"package day03.d8_sort_binarysearch; import java.util.Arrays; /** * 选择排序 */ public class Test1 { public static void main(String[] args) { int[] arr = {6, 1, 5, 2, 3, 7, 4}; for (int i = 0; i < arr.length - 1; i++) { for (int j = i + 1; j < arr.length; j++) { if (arr[i] > arr[j]) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } System.out.println(Arrays.toString(arr)); } } \",\"image-20220809153403483\",\"package day03.d8_sort_binarysearch; import java.util.Arrays; import java.util.Objects; /** * 二分查找 */ public class Test2 { public static void main(String[] args) { int[] arr = {22, 11, 44, 55, 88, 33, 99}; Arrays.sort(arr); System.out.println(Arrays.toString(arr)); System.out.println(binarySearch(arr, 33)); } /** * 二分查找 * * @param arr * @param data * @return 索引值 */ public static int binarySearch(int[] arr, int data) { if (Objects.isNull(arr)) return -1; // 定义左右位置 int left = 0; int right = arr.length - 1; while (left <= right) { // 取中间索引 int middleIndex = (left + right) / 2; // 判断当前中间位置的元素和要找的大小情况 if (data > arr[middleIndex]) { // 右查找 left = middleIndex + 1; } else if (data < arr[middleIndex]) { // 左查找 right = middleIndex - 1; } else { return middleIndex; } } // 没有这个元素 return -1; } } \"]},\"795\":{\"c\":[\"Java基础\"]},\"796\":{\"c\":[\"Java语法\"]},\"797\":{\"h\":\"反射\"},\"798\":{\"h\":\"反射概述\",\"t\":[\"反射是指对于任何一个Class类，在\\\"运行的时候\\\"：都可以直接得到这个类全部成分\",\"在运行时，可以直接得到这个类的构造器对象：Constructor\",\"在运行时，可以直接得到这个类的成员变量对象：Field\",\"在运行时，可以直接得到这个类的成员方法对象：Method\",\"这种运行时动态获取类信息以及动态调用类中的成分的能力称为java语言的反射机制\"]},\"799\":{\"h\":\"反射的关键\",\"t\":[\"反射第一步都是先得到编译后的Class类对象，然后就可以得到Class的全部成分\"]},\"800\":{\"h\":\"总结\",\"t\":[\"反射的基本作用、关键？ \",\"反射是在运行的时候获取字节码文件对象：然后可以解析类中的全部成分\",\"反射的核心思想和关键就是：得到编译后的Class文件对象\"]},\"801\":{\"h\":\"反射获取类对象\"},\"802\":{\"h\":\"反射第一步：获取Class文件对象\",\"t\":[\"Class类中的静态方法：forName(String className)\",\"类名.Class\",\"package com.meng.d2_reflect; public class Student { } \",\"package com.meng.d2_reflect; /** * 目标：反射的第一步：获取Class对象（类对象） */ public class Test { public static void main(String[] args) throws Exception { //1、调用Class类中的一个静态方法:forName（全限名：包名+类名） Class c = Class.forName(\\\"com.meng.d2_reflect.Student\\\"); System.out.println(c); //2、直接通过类名.Class（常用） Class<Student> c1 = Student.class; System.out.println(c1); //3、通过 对象.getClass() 获取对象对应类的Class对象（常用） Student student = new Student(); Class<? extends Student> c2 = student.getClass(); System.out.println(c2); } } \"]},\"803\":{\"h\":\"总结\",\"t\":[\"反射的第一步是什么？\",\"获取Class类对象，如此才可以解析类中的全部成分\",\"获取Class类对象的三种方式\",\"Class c1 = Class.forName(\\\"全类名\\\");\",\"Class c2 = 类名.Class;\",\"Class c3 = 对象.getClass();\"]},\"804\":{\"h\":\"反射获取构造器对象\",\"t\":[\"反射的第一步是先得到类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取构造器的方法\",\"方法\",\"说明\",\"Constructor< ? >[] getConstructors()\",\"返回所有构造器对象的数组（只能拿public的）\",\"Constructor< ? >[] getDeclaredConstructors()\",\"返回所有构造器对象的数组，存在就能拿到\",\"Constructor< T >[] getConstructor(Class< ? >...parameterTypes)\",\"返回单个构造器对象（只能拿public的）\",\"Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes)\",\"返回单个构造器对象，存在就能拿到\",\"image-20220812153232036\",\"package com.meng.d3_reflect_constructor; public class Student { private String name; private int age; private Student() { System.out.println(\\\"无参数构造器执行\\\"); } public Student(String name, int age) { System.out.println(\\\"有参构造器执行\\\"); this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \",\"package com.meng.d3_reflect_constructor; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; public class TestStudent01 { /** * 1、getConstructors： * 获取全部的构造器，只能获取public修饰的构造器 * Constructor[] getConstructors() */ @Test public void getConstructors() { //第一步获取类对象 Class c = Student.class; //提取类中全部的构造器对象(public) Constructor[] constructors = c.getConstructors(); //遍历构造器 for (Constructor constructor : constructors) { System.out.println(constructor.getName() + \\\"===>\\\" + constructor.getParameterCount()); } } /** * Constructor< ? >[] getDeclaredConstructors() * 返回所有构造器对象的数组，存在就能拿到 */ @Test public void getDeclaredConstructors() { Class<Student> c = Student.class; //全部 Constructor<?>[] declaredConstructors = c.getDeclaredConstructors(); for (Constructor<?> declaredConstructor : declaredConstructors) { System.out.println(declaredConstructor.getName() + \\\"===>\\\" + declaredConstructor.getParameterCount()); } } /** * 3、Constructor< T >[] getConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象（只能拿public的） */ @Test public void getConstructor() throws NoSuchMethodException { Class<Student> c = Student.class; //只能取出public的构造器 Constructor<Student> constructor = c.getConstructor(String.class, int.class); System.out.println(constructor); } /** * Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象，存在就能拿到 */ @Test public void getDeclaredConstructor() throws NoSuchMethodException { Class<Student> c = Student.class; //按照参数类型取出一个构造器，不管公有还是私有 Constructor<Student> declaredConstructor = c.getDeclaredConstructor(); System.out.println(declaredConstructor); //定位某个有参构造器 Constructor<Student> declaredConstructor1 = c.getDeclaredConstructor(String.class, int.class); System.out.println(declaredConstructor1); } } \"]},\"805\":{\"h\":\"使用反射技术获取构造器对象并使用\",\"t\":[\"获取构造器的作用依然是初始化一个对象返回\"]},\"806\":{\"h\":\"Constructor类中用于创建对象的方法\",\"t\":[\"方法\",\"说明\",\"T newInstance(Object...initargs)\",\"根据指定的构造器创建对象\",\"public void setAccessible(boolean flag)\",\"设置为true，表示取消访问检查，进行暴力反射\",\"package com.meng.d3_reflect_constructor; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; public class TestStudent02 { /** * Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象，存在就能拿到 */ @Test public void getDeclaredConstructor() throws Exception { Class<Student> c = Student.class; //按照参数类型取出一个构造器，不管公有还是私有 Constructor<Student> cons = c.getDeclaredConstructor(); System.out.println(cons); //如果遇到私有的构造器，可以暴力反射 cons.setAccessible(true); Student student = cons.newInstance(); student.setName(\\\"hi\\\"); student.setAge(1000); System.out.println(student); /** * private com.meng.d3_reflect_constructor.Student() * 无参数构造器执行 * Student{name='hi', age=1000} */ //定位某个有参构造器 Constructor<Student> cons1 = c.getDeclaredConstructor(String.class, int.class);//获取一个私有的有参的构造器 System.out.println(cons1); cons1.setAccessible(true);//暴力反射，让它可以创建对象，仅仅这一次 Student s = cons1.newInstance(\\\"小明\\\", 18); System.out.println(s); /** * private com.meng.d3_reflect_constructor.Student(java.lang.String,int) * 有参构造器执行 * Student{name='小明', age=18} */ } } \"]},\"807\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取构造器对象 \",\"getDeclaredConstructors()\",\"getDeclaredConstructor(Class< ? >...parameterTypes)\",\"反射得到构造器可以做什么？ \",\"依然是创建对象的 \",\"public newInstance(Object...initargs)\",\"如果是非public的构造器，需要打开权限（暴力反射），然后创建对象 \",\"setAccessible(boolean)\",\"反射可以破坏封装性，私有的也可以执行了\"]},\"808\":{\"h\":\"反射获取成员变量对象\",\"t\":[\"反射的第一步是获取类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取成员变量的方法\",\"方法\",\"说明\",\"Field[] getFields()\",\"返回所有成员变量对象的数组（只能那public的）\",\"Field[] getDeclaredFields()\",\"返回所有成员变量对象的数组，存在就能拿到\",\"Field[] getField(String name)\",\"返回单个成员变量对象（只能那public的）\",\"Field[] getDeclaredField(String name)\",\"返回单个成员变量对象，存在就能拿到\",\"package com.meng.d4_reflect_field; import org.junit.jupiter.api.Test; import java.lang.reflect.Field; public class TestFieldDemo1 { @Test public void getDeclaredFields() { Class<Student> studentClass = Student.class; Field[] declaredFields = studentClass.getDeclaredFields(); for (Field declaredField : declaredFields) { System.out.println(declaredField.getName() + \\\"===>\\\" + declaredField.getType()); } } @Test public void getDeclaredField() throws Exception { Class<Student> studentClass = Student.class; Field name = studentClass.getDeclaredField(\\\"name\\\"); System.out.println(name.getName() + \\\"===>\\\" + name.getType()); } } \",\"package com.meng.d4_reflect_field; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; import java.lang.reflect.Field; public class TestFieldDemo2 { /** * 给成员变量赋值 * * @throws Exception */ @Test public void setField() throws Exception { //1、获取类对象 Class<Student> studentClass = Student.class; //利用反射机制创建对象（类中的所有的构造器，和属性都是私有的） //2、获取私有的有参构造器 Constructor<Student> declaredConstructor = studentClass.getDeclaredConstructor(String.class, int.class); //3、暴力反射，打开私有权限 declaredConstructor.setAccessible(true); //4、然后用私有的构造器进行新实例化一个对象student Student student = declaredConstructor.newInstance(\\\"小明\\\", 10); //5、获取类对象中的私有的属性（成员变量） Field age = studentClass.getDeclaredField(\\\"age\\\"); //6、暴力反射、打开属性的私有权限 age.setAccessible(true); //7、然后对student中的age属性进行注入赋值（更改student对象的年龄） age.set(student, 100); //取值 int nowAge = (int) age.get(student); System.out.println(nowAge); //8、输出student发现私有属性已经被修改 System.out.println(student); } } \"]},\"809\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取成员变量的方式 \",\"获取类中成员变量对象的方法 \",\"getDeclaredFields()\",\"getDeclaredField(String name)\",\"反射得到成员变量可以做什么？ \",\"依然是在某个对象中取值和赋值 \",\"void set(Object obj,Object value);\",\"Object get(Object obj);\",\"如果某个成员变量是非public的，需要打开权限（暴力反射），然后再取值、赋值 \",\"setAccessible(boolean)\"]},\"810\":{\"h\":\"反射获取方法对象\",\"t\":[\"反射的第一步是先得到类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取成员方法的方法\",\"方法\",\"说明\",\"Method[] getMethods()\",\"返回所有成员方法对象的数组（只能那public的）\",\"Method[] getDeclaredMethods()\",\"返回所有成员方法对象的数组，存在就可以拿到\",\"Method getMethod(String name,Class<?>...parameterTypes)\",\"返回单个成员方法对象（只能拿public的）\",\"Method getDeclaredMethods(String name,Class<?>...parameterTypes)\",\"返回单个成员方法对象，存在就可以拿到\"]},\"811\":{\"h\":\"使用反射技术获取方法对象并使用\",\"t\":[\"获取成员方法的作用依然是在某个对象中执行此方法\"]},\"812\":{\"h\":\"Method类中用于触发执行的方法\",\"t\":[\"方法\",\"说明\",\"Object invoke(Object obj,Object...args)\",\"运行方法：参数一：用obj对象调用调用该方法参数二：调用方法的传递的参数（如果没有就不写）返回值：方法的返回值（如果没有就不写）\",\"package com.meng.d5_reflect_method; public class Dog { private String name; public Dog() { } public Dog(String name) { this.name = name; } public void run() { System.out.println(\\\"狗跑的贼快~~\\\"); } private void eat() { System.out.println(\\\"狗吃骨头\\\"); } private String eat(String name) { System.out.print(\\\"狗吃\\\" + name); return \\\"吃的很开心\\\"; } public static void inAddr() { System.out.println(\\\"在世界上有很多单身狗\\\"); } public void setName(String name) { this.name = name; } public String getName() { return name; } } \",\"package com.meng.d5_reflect_method; import org.junit.jupiter.api.Test; import java.lang.reflect.Method; public class TestMethod1 { @Test public void getDeclaredMethods() { //1、获取类对象 Class<Dog> dogClass = Dog.class; //2、提取全部方法 Method[] declaredMethods = dogClass.getDeclaredMethods(); //3、遍历全部方法 for (Method declaredMethod : declaredMethods) { System.out.println(\\\" 方法名称 \\\" + declaredMethod.getName() + \\\" 返回值类型 \\\" + declaredMethod.getReturnType() + \\\" 参数个数 \\\" + declaredMethod.getParameterCount()); } } @Test public void getDeclaredMethod() throws Exception { //1、获取类对象 Class<Dog> dogClass = Dog.class; //2、获取类对象中的run方法 Method run = dogClass.getDeclaredMethod(\\\"run\\\"); //3、创建一个dog对象 Dog dog = new Dog(); //4、使用类对象中的run方法告诉这个dog应该跑（没有返回值） run.invoke(dog); //5、使用类对象获取eat的方法 Method eat = dogClass.getDeclaredMethod(\\\"eat\\\", String.class); //6、暴力反射，打开权限 eat.setAccessible(true); //7、使用eat方法告诉这个狗：狗你应该吃骨头 String rs = (String) eat.invoke(dog, \\\"骨头\\\"); System.out.println(rs); } } \"]},\"813\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取成员方法对象的方式 \",\"获取类中的成员方法对象 \",\"getDeclaredMethods()\",\"getDeclaredMethod(String name,Class<?>...parameterTypes)\",\"反射得到成员方法可以做什么？ \",\"依然是在某个对象中触发该方法执行 \",\"Object invoke(Object obj,Object...args)\",\"如果某个成员方法是非public的，需要打开权限（暴力反射），然后再触发执行 \",\"setAccessible(boolean)\"]},\"814\":{\"h\":\"反射的作用-绕过编译阶段为集合添加数据\",\"t\":[\"反射是作用在运行时的技术，此时集合的泛型将不能产生约束了，此时是可以为集合存入其他任意类型的元素的\",\"泛型只是在编译的阶段可以约束集合只能操作某种数据类型，在编译成Class文件进入运行阶段的时候，其真实类型都是ArrayList了，泛型相当于被擦出了。\",\"package com.meng.d6_reflect_genericity; import java.lang.reflect.Method; import java.util.ArrayList; public class ReflectDemo { public static void main(String[] args) throws Exception { ArrayList<String> list1 = new ArrayList<>(); ArrayList<Integer> list2 = new ArrayList<>(); System.out.println(list1.getClass()); System.out.println(list2.getClass()); System.out.println(list1.getClass() == list2.getClass());//true /** * class java.util.ArrayList * class java.util.ArrayList * 虽然在编译阶段对ArrayList的泛型进行了约束，但是我们看到运用反射得到在运行阶段的时候list1和list2的类型都是ArrayList的，没有泛型进行约束 * 所以我们就可以利用反射绕过编译阶段对集合添加其他泛型的数据 */ System.out.println(\\\"=======================\\\"); list2.add(33); // list2.add(\\\"hello\\\"); Class<? extends ArrayList> list2Class = list2.getClass(); //先获取ArrayList.class文件中所有的方法 Method[] declaredMethods = list2Class.getDeclaredMethods(); //遍历 for (Method declaredMethod : declaredMethods) { System.out.println(declaredMethod); } //获取add方法 Method add = list2Class.getDeclaredMethod(\\\"add\\\", Object.class); //执行add方法，向list2中注入\\\"hello\\\"字符串类型的值 add.invoke(list2, \\\"hello\\\"); System.out.println(list2);//[33, hello] System.out.println(\\\"------------------\\\"); ArrayList list3 = list2; list3.add(\\\"另一种方式突破泛型\\\"); list3.add(true); System.out.println(list3); } } \"]},\"815\":{\"h\":\"总结\",\"t\":[\"反射为何可以给约定了泛型的集合存入其他类型的元素？ \",\"编译成class文件进入运行阶段的时候，泛型会自动擦除\",\"反射是作用在运行的时候的技术，此时已近不存在泛型了\"]},\"816\":{\"h\":\"反射的作用-通用框架的底层原理\",\"t\":[\"设计一个框架可以保存所有类型对象的属性和值\",\"package com.meng.d7_reflect_framework; public class Student { private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.meng.d7_reflect_framework; public class Teacher { private String name; private int age; private char gender; private double salary; public Teacher() { } public Teacher(String name, int age, char gender, double salary) { this.name = name; this.age = age; this.gender = gender; this.salary = salary; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } @Override public String toString() { return \\\"Teacher{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + \\\", salary=\\\" + salary + '}'; } } \",\"package com.meng.d7_reflect_framework; import java.io.FileOutputStream; import java.io.PrintStream; import java.lang.reflect.Field; public class MybatisUtil { public static void save(Object obj) { try ( PrintStream ps = new PrintStream(new FileOutputStream(\\\"src/data.txt\\\", true)); ) { //1、提取这个变量的全部成员变量 Class<?> objClass = obj.getClass(); ps.println(\\\"=========\\\" + objClass.getSimpleName() + \\\"===========\\\");//objClass.getSimpleName()获取这个类的简单类名，例如Student类获取的就是Student //2、提取这个类的成员变量 Field[] declaredFields = objClass.getDeclaredFields(); for (Field declaredField : declaredFields) { String name = declaredField.getName();//成员变量的名字 declaredField.setAccessible(true);//暴力反射 String value = declaredField.get(obj) + \\\"\\\";//通过成员变量得到成员变量的值 ps.println(name + \\\"=\\\" + value); } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.meng.d7_reflect_framework; import org.junit.jupiter.api.Test; public class TestReflectDemo { @Test public void testAddAllClass() { Student student = new Student(\\\"小明\\\", 10, '男'); MybatisUtil.save(student); Teacher teacher = new Teacher(\\\"小猴\\\", 28, '男', 10000); MybatisUtil.save(teacher); } } \"]},\"817\":{\"h\":\"总结\",\"t\":[\"反射的作用？ \",\"可以在运行时得到一个类的全部成分然后操作\",\"可以破坏封装线（很突出）\",\"也可以破坏泛型的约束性（很突出）\",\"更重要的用途是适合做Java的高级框架\"]},\"818\":{\"h\":\"正则表达式\",\"t\":[\"正则表达式可以用一些规定的字符类指定规则，并用来校验数据格式的合法性。\",\"image-20220809140425155\",\"package com.regex; public class Test1 { public static void main(String[] args) { //校验QQ号，5-10位 System.out.println(checkQQ(\\\"11111111111\\\")); System.out.println(checkQQ(\\\"11111\\\")); System.out.println(checkQQ(\\\"1111144\\\")); //正则表达式 System.out.println(checkQQ2(\\\"1\\\")); } public static boolean checkQQ2(String qq){ return qq !=null && qq.matches(\\\"\\\\\\\\d{5,10}\\\");// \\\\d 表示全是数字 { 5 , 10 } 表示5到10位 } public static boolean checkQQ(String qq){ if (qq == null || qq.length() < 5 || qq.length() > 10) { return false; } for (int i = 0; i < qq.length(); i++) { char c = qq.charAt(i); if (c < '0' || c > '9'){ return false; } } return true; } } \",\"正则表达式的规则：查阅JDK文档中的 Pattern\",\"部分文档\"]},\"819\":{\"h\":\"正则表达式结构摘要\",\"t\":[\"构造\",\"匹配\",\"字符\",\"十\",\"字符x\",\"\\\\\\\\\",\"反斜杠字符\",\"\\\\0n\",\"八进制值为0n（0 <= n<= 7）的字符\",\"\\\\0nn\",\"八进制值为0nn（0 <= n<= 7）的字符\",\"\\\\0mnn\",\"八进制值为0mnn（0 <= m<= 3, 0 <= n<= 7）的字符\",\"\\\\xhh\",\"十六进制值0xhh的字符\",\"\\\\uhhhhh\",\"十六进制值0xhhhhhh的字符\",\"\\\\x{h...h}\",\"The character with hexadecimal value 0xh...h (Character.MIN_CODE_POINT <= 0xh...h <= Character.MAX_CODE_POINT)\",\"\\\\t\",\"标签字符 ('\\\\u0009')\",\"\\\\n\",\"换行符（换行符）字符（“\\\\u000A”）\",\"\\\\r\",\"回车字符（“\\\\u000D”）\",\"\\\\f\",\"表单提要字符（'\\\\u000C'）\",\"\\\\a\",\"警告（铃铛）字符（“\\\\u0007”）\",\"\\\\e\",\"转义字符（'\\\\u001B'）\",\"\\\\cx\",\"与x对应的控制字符\",\"字符类\",\"[abc]\",\"a、b或c（简单类）\",\"[^abc]\",\"除a、b或c以外的任何字符（否定）\",\"[a-zA-Z]\",\"a通过z或A到Z，包括（范围）\",\"[a-d[m-p]]\",\"a通过d，或m通过p：[a-dm-p]（工会）\",\"[a-z&&[def]]\",\"d、e或f（交叉）\",\"[a-z&&[^bc]]\",\"a通过z，b和c除外：[ad-z]（减法）\",\"[a-z&&[^m-p]]\",\"a通过z，而不是m通过p：[a-lq-z]（减法）\",\"预定义字符类\",\"。\",\"任何字符（可能匹配也可能不匹配行终止符）\",\"\\\\d\",\"一个数字：[0-9]\",\"\\\\D\",\"非数字：[^0-9]\",\"\\\\h\",\"水平空白字符：[ \\\\t\\\\xA0\\\\u1680\\\\u180e\\\\u2000-\\\\u200a\\\\u202f\\\\u205f\\\\u3000]\",\"\\\\H\",\"非水平空格字符：[^\\\\h]\",\"\\\\s\",\"空格字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\",\"\\\\S\",\"非空格字符：[^\\\\s]\",\"\\\\v\",\"垂直空格字符：[\\\\n\\\\x0B\\\\f\\\\r\\\\x85\\\\u2028\\\\u2029]\",\"\\\\V\",\"非垂直空格字符：[^\\\\v]\",\"\\\\w\",\"单词字符：[a-zA-Z_0-9]\",\"\\\\W\",\"非单词字符：[^\\\\w]\",\"POSIX字符类（仅限US-ASCII）\",\"\\\\p{Lower}\",\"小写字母字符：[a-z]\",\"\\\\p{Upper}\",\"大写字母字符：[A-Z]\",\"\\\\p{ASCII}\",\"所有ASCII：[\\\\x00-\\\\x7F]\",\"\\\\p{Alpha}\",\"按字母顺序排列的字符：[\\\\p{Lower}\\\\p{Upper}]\",\"\\\\p{Digit}\",\"小数位数：[0-9]\",\"\\\\p{Alnum}\",\"字母数字字符：[\\\\p{Alpha}\\\\p{Digit}]\",\"\\\\p{Punct}\",\"标点符号：其中一个!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_{\",\"\\\\p{Graph}\",\"可见字符：[\\\\p{Alnum}\\\\p{Punct}]\",\"\\\\p{Print}\",\"可打印字符：[\\\\p{Graph}\\\\x20]\",\"\\\\p{Blank}\",\"空格或标签页：[ \\\\t]\",\"\\\\p{Cntrl}\",\"控制字符：[\\\\x00-\\\\x1F\\\\x7F]\",\"\\\\p{XDigit}\",\"十六进制数字：[0-9a-fA-F]\",\"\\\\p{Space}\",\"空格字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\",\"java.lang.字符类（简单的java字符类型）\",\"\\\\p{javaLowerCase}\",\"相当于java.lang.Character.isLowerCase()\",\"\\\\p{javaUpperCase}\",\"相当于java.lang.Character.isUpperCase()\",\"\\\\p{javaWhitespace}\",\"相当于java.lang.Character.isWhitespace()\",\"\\\\p{javaMirrored}\",\"相当于java.lang.Character.isMirrored()\",\"Unicode脚本、块、类别和二进制属性的类\",\"\\\\p{IsLatin}\",\"拉丁字母字符（脚本）\",\"\\\\p{InGreek}\",\"希腊区块（区块）中的一个字符\",\"\\\\p{Lu}\",\"大写字母（类别）\",\"\\\\p{IsAlphabetic}\",\"按字母顺序排列的字符（二进制属性）\",\"\\\\p{Sc}\",\"货币符号\",\"\\\\P{InGreek}\",\"除希腊语区块中的一个字符外的任何字符（否定）\",\"[\\\\p{L}&&[^\\\\p{Lu}]]\",\"除大写字母（减法）以外的任何字母\",\"边界匹配器\",\"^\",\"行的开头\",\"¥\",\"行的末尾\",\"\\\\b\",\"单词边界\",\"\\\\B\",\"非字边界\",\"\\\\A\",\"输入的开头\",\"\\\\G\",\"上场比赛结束\",\"\\\\Z\",\"输入的结尾，但对于最终终止者，如果有的话\",\"\\\\z\",\"输入的结尾\",\"越线匹配者\",\"\\\\R\",\"任何Unicode换行序列都相当于`\\\\u000D\\\\u000A\",\"贪婪的量词\",\"X？\",\"X，一次或根本不一次\",\"X*\",\"X、零次或更多次\",\"X+\",\"X，一次或多次\",\"X{n}\",\"X，正好是n次\",\"X{n，}\",\"X，至少n次\",\"X{n,m}\",\"X，至少n次，但不超过m次\",\"不愿意的量词\",\"X??\",\"X，一次或根本不一次\",\"X*？\",\"X、零次或更多次\",\"X+？\",\"X，一次或多次\",\"X{n}？\",\"X，正好是n次\",\"X{n,}？\",\"X，至少n次\",\"X{n,m}？\",\"X，至少n次，但不超过m次\",\"拥有量词\",\"X？+\",\"X，一次或根本不一次\",\"X*+\",\"X、零次或更多次\",\"X++\",\"X，一次或多次\",\"X{n}+\",\"X，正好是n次\",\"X{n,}+\",\"X，至少n次\",\"X{n,m}+\",\"X，至少n次，但不超过m次\",\"逻辑运算符\",\"XY\",\"X 后跟 Y\",\"X`\",\"`Y\",\"（十）\",\"X，作为一个捕获组\",\"背面参考\",\"\\\\n\",\"无论第n个捕获组匹配什么\",\"\\\\k<name>\",\"无论命名捕获组的“名称”匹配什么\",\"报价\",\"\\\\\",\"没什么，但引用以下字符\",\"\\\\Q\",\"没什么，而是引用所有字符，直到\\\\E\",\"\\\\E\",\"没什么，但以\\\\Q开头的结束引用\",\"特殊构造（命名捕获和非捕获）\",\"（？<name>X）\",\"X，作为一个命名捕获组\",\"(?:X)\",\"X，作为一个非捕获组\",\"（？idmsuxU-idmsuxU）\",\"没什么，但打开火柴的旗帜，我打开-关闭\",\"（？idmsux-idmsux:X）\",\"X，作为一个带有给定标志的非捕获组，i d m s u x on - off\",\"（？=X）\",\"X，通过零宽度正向往前看\",\"（？！十）\",\"X，通过零宽度负展望\",\"（？<=X)\",\"X，通过零宽度正向后看\",\"（？<！十）\",\"X，通过零宽度负视角\",\"（？>X）\",\"X，作为一个独立的、非俘获的团体\"]},\"820\":{\"h\":\"Stream流\"},\"821\":{\"h\":\"概述\",\"t\":[\"什么是Stream流？\",\"在Java 8 中，得益于Lambda表达式所带来的函数式编程，引入了一个全新的Stream流的概念\",\"目的：用于简化集合和数组操作的API\",\"image-20220810133948555\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.Collections; import java.util.List; /** * 初步体验Stream流的快捷 */ public class StreamTest { public static void main(String[] args) { List<String> name = new ArrayList<>(); Collections.addAll(name,\\\"刘备\\\",\\\"张飞\\\",\\\"关羽\\\",\\\"张三\\\",\\\"张无忌\\\"); System.out.println(name); //从name集合中取出姓张的放到新的集合 // List<String> zhangList = new ArrayList<>(); // for (String s : name) { // if (s.startsWith(\\\"张\\\")){ // zhangList.add(s); // } // } // System.out.println(zhangList); // // //找名称长度是3的姓名 // List<String> zhangThree = new ArrayList<>(); // for (String s : zhangList) { // if (s.length() == 3){ // zhangThree.add(s); // } // } // System.out.println(zhangThree); //使用Stream实现 /** * 先得到集合的Stream流（类似于传送带），然后经过一层一层的过滤，最终得到的就是我们想要的结果 */ //得到Stream流。过滤不是姓张的元素 。 过滤长度不是3的元素 。forEach遍历流 name.stream().filter(s -> s.startsWith(\\\"张\\\")).filter(s -> s.length() == 3).forEach(s -> System.out.println(s)); } } \"]},\"822\":{\"h\":\"Stream流的获取\",\"t\":[\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Stream; public class StreamTest2 { public static void main(String[] args) { /**-----------------Collection集合获取流-----------------------*/ Collection<String> list = new ArrayList<>(); Stream<String> s = list.stream();//拿到Collection的Stream流 /**-----------------Map集合获取流-----------------------*/ Map<String,Integer> maps = new HashMap<>(); //键流 Stream<String> keyStream = maps.keySet().stream(); //值流 Stream<Integer> valueStream = maps.values().stream(); //或者键值对 Stream<Map.Entry<String, Integer>> kvStream = maps.entrySet().stream(); /**-----------------数组获取流-----------------------*/ String[] name = {\\\"小王\\\",\\\"小杜\\\",\\\"小李\\\"}; Stream<String> nameStream = Arrays.stream(name); } } \"]},\"823\":{\"h\":\"Stream常用API\",\"t\":[\"image-20220810134701065\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.List; import java.util.stream.Stream; public class StreamTest3 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); //Stream<T> filter(Predicate<? super T> predicate); // list.stream().filter(new Predicate<String>() { // @Override // public boolean test(String s) { // return s.startsWith(\\\"张\\\"); // } // }); //使用Lambda表达式，我们认为s是list中的每一个元素 //注意过滤的不是filter形参的元素，filter中的形参是要保留的元素，过滤的是不符合形参的元素 list.stream().filter( s-> s.startsWith(\\\"张\\\")).forEach(s -> System.out.println(s)); //只会过滤，而不会改变原本的，list集合中的内容 System.out.println(list); long size = list.stream().filter(s -> s.length() == 3).count(); System.out.println(size); //limit取前几个元素 //扩展，我们认为在Lambda表达式中，我们发现如果入参和后面的方法参数一样的话，我们可以使用方法引用，例如 // s -> System.out.println(s) 可以变成这样 System.out::println 方法引用 list.stream().filter(s -> s.startsWith(\\\"张\\\")).limit(2).forEach(System.out::println); //skip是跳过前几个元素 list.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2).forEach(System.out::println); //Map加工 //给集合元素的前面都加上\\\"黑马的\\\" // list.stream().map(new Function<String, String>() { // @Override // public String apply(String s) { // return \\\"黑马的\\\"+s; // } // }); //简化： s：原材料 -> 加工后的 list.stream().map(s -> \\\"黑马的\\\"+s).forEach(System.out::println); //需求：把所有的名称，都加工为一个学生对象 // list.stream().map(s -> new Student(s)).forEach(student -> System.out.println(student)); list.stream().map(Student::new).forEach(System.out::println);//构造器引用 方法引用 //合并流 Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); Stream<String> s2 = Stream.of(\\\"java1\\\",\\\"java2\\\"); Stream<String> s3 = Stream.concat(s1,s2); s3.forEach(s -> System.out.println(s)); } } \"]},\"824\":{\"h\":\"Stream流的收集操作\",\"t\":[\"image-20220810135140321\",\"就是把Stream流操作后的结果数据转回到集合或数组中去\",\"Stream流：方便操作集合/数组的手段\",\"集合/数组:才是开发中的目的\",\"流只能被收集一次\",\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; public class StreamTest4 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); List<String> zhangList = s1.collect(Collectors.toList()); System.out.println(zhangList); } } \",\"image-20220810135243897\"]},\"825\":{\"c\":[\"Java8\"]},\"826\":{\"c\":[\"Stream\"]},\"827\":{\"h\":\"XML\"},\"828\":{\"h\":\"XML的概述\",\"t\":[\"image-20220812181457115\"]},\"829\":{\"h\":\"XML的创建、语法规则\",\"t\":[\"image-20220813103031843\",\"image-20220813103624311\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!--注释：根标签有且只有一个--> <student> <name>小王</name> <age>20</age> <friend> <name>小李</name> <age>22</age> </friend> <sql> select * from tb_user where age &lt; 18; select * from tb_user where age &lt; 18 &amp;&amp; age > 10; <!--CDATA区中可以按照原来的方式解析--> <![CDATA[ select * from tb_user where age < 10; ]]> </sql> </student> \",\"image-20220813104327660\",\"image-20220813105114797\",\"<!ELEMENT books (book+)> <!ELEMENT book (bookName,author,price)> <!ELEMENT bookName (#PCDATA)> <!ELEMENT author (#PCDATA)> <!ELEMENT price (#PCDATA)> \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE books SYSTEM \\\"data.dtd\\\"> <books> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> </books> \",\"image-20220813105237548\",\"image-20220813105331038\",\"image-20220813105410833\",\"image-20220813105655574\",\"image-20220813105959987\",\"image-20220813110045653\",\"image-20220813110215014\",\"image-20220813110303201\",\"image-20220813110747061\",\"image-20220813110810494\",\"image-20220813111355648\",\"image-20220813111410216\",\"image-20220813111732708\"]},\"830\":{\"h\":\"ArrayList源码深入\"},\"831\":{\"h\":\"ArrayList扩容原理\",\"t\":[\"当我们写下了如下代码ArrayList<Integer> list = new ArrayList<>(); 调用了ArrayList类的无参构造方法创建了一个ArrayList对象实例。\",\"public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } \",\"并且给Object[] elementData（用于存储数组列表元素的数组）一个初始的空数组。\",\"当我们调用了add方法将指定的元素添加到elementData末尾的时候 add方法如下\",\"/** * 将指定的元素追加到此列表的末尾。 */ public boolean add(E e) { //添加元素之前，先调用ensureCapacityInternal方法 ensureCapacityInternal(size + 1); // Increments modCount!! //这里看到ArrayList添加元素的实质就相当于为数组赋值 elementData[size++] = e; return true; } \",\"简单来说在添加第一个元素之前先进行扩容，具体调用了ensureCapacityInternal(size + 1)方法得到最小扩容量 在接着看上面👆🏻的方法\",\"//得到最小扩容量 private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { // 获取默认的容量和传入参数的较大值 minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \",\"该方法的参数minCapacity为1，调用Math.max(DEFAULT_CAPACITY, minCapacity);方法之后minCapacity为10。\",\"接着调用ensureExplicitCapacity(minCapacity);方法判断是否需要扩容\",\"//判断是否需要扩容 private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) //调用grow方法进行扩容，调用此方法代表已经开始扩容了 grow(minCapacity); } \",\"因为第一次这个时候minCapacity=10，elementData.length=0；所以肯定需要扩容，继续调用grow(minCapacity)方法进行扩容\",\"/** * 要分配的最大数组大小 */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; /** * ArrayList扩容的核心方法。 */ private void grow(int minCapacity) { // oldCapacity为旧容量，newCapacity为新容量 int oldCapacity = elementData.length; //将oldCapacity 右移一位，其效果相当于oldCapacity /2， //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍， int newCapacity = oldCapacity + (oldCapacity >> 1); //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量， if (newCapacity - minCapacity < 0) newCapacity = minCapacity; // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE， //如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。 if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } \",\"int newCapacity = oldCapacity + (oldCapacity >> 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！ 奇偶不同，比如 ：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数.\",\"当 add 第 1 个元素时，oldCapacity 为 0，经比较后第一个 if 判断成立，newCapacity = minCapacity(为 10)。但是第二个 if 判断不会成立，即 newCapacity 不比 MAX_ARRAY_SIZE 大，则不会进入 hugeCapacity 方法。数组容量为 10，add 方法中 return true,size 增为 1。\",\"当 add 第 11 个元素进入 grow 方法时，newCapacity 为 15，比 minCapacity（为 11）大，第一个 if 判断不成立。新容量没有大于数组最大 size，不会进入 hugeCapacity 方法。数组容量扩为 15，add 方法中 return true,size 增为 11。\",\"以此类推···\",\"总结：\",\"Q：说一说ArrayList的扩容机制吧。\\nA：当我们创建一个ArrayList对象的时候，底层其实是一个Object数组并且在我们创建的时候进行了初始化为空数组；\\n当我们第一次调用add方法进行添加元素的时候，首先会调用Arrays.copyOf方法对数组进行一个长度为10的扩容，扩容完毕之后再进行size++和元素的添加。\\n然后第二次调用add方法进行添加元素的时候，因为当前所需容量小于10所以不需要扩容。\\n当添加到第11个元素的时候，因为超过数组的长度10，所以会按照原先的1.5倍左右进行扩容，扩容完毕之后再进行size++和元素的添加。\\n······\"]},\"832\":{\"h\":\"集合\"},\"833\":{\"h\":\"集合概述\",\"t\":[\"集合和数组都是容器。\",\"数组的特点：\",\"数组定义完成并启动后，类型确定，长度固定。\",\"进行增删操作的时候，数组是不太合适的，增删数据都需要放弃原有的数组或者位移。\",\"集合是Java中存储对象数据的一种容器\",\"集合的特点：\",\"集合大小不固定，启动后可以动态变化，类型也可以选择不固定。集合更想一个气球。\",\"集合非常适合做元素增删操作。\",\"注意：集合只能存储引用类型的数据，如果要存储基本数据类型的数据可以选用包装类。\",\"image-20220809155725450\"]},\"834\":{\"h\":\"Collection集合的体系特点\"},\"835\":{\"h\":\"集合类体系结构\",\"t\":[\"image-20220809155829876\",\"集合分为Collection（单列）和Map（双列）\",\"Collection单例集合，每个元素（数据）只包含一个值\",\"Map双列集合，每个元素包含两个值（键值对：key : value）\",\"首先我们先了解单列集合\"]},\"836\":{\"h\":\"Collection集合体系\",\"t\":[\"Collection集合是一个接口，是单列集合的祖宗类。\",\"Collection又分了一个List接口和Set接口。\",\"List下有ArrayList和LinkedList两个常用的实现类。\",\"Set下有HashSet和TreeSet常用实现类。\",\"HashSet下有LinkedHashSet实现类。\",\"image-20220809161431474\"]},\"837\":{\"h\":\"Collection集合的特点\"},\"838\":{\"h\":\"List系列集合：添加元素是有序的、可重复的、有索引。\",\"t\":[\"ArrayList、LinkedList：有序、可重复、有索引\"]},\"839\":{\"h\":\"Set系列集合：添加元素是无序的、不重复、无索引。\",\"t\":[\"HashSet：无序、不重复、无索引；LinkedHashSet：有序、不重复、无索引\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.HashSet; /** * 明确Collection集合体系的特点 */ public class CollectionDemo1 { public static void main(String[] args) { //List 有序、可重复、有索引 Collection list = new ArrayList(); list.add(\\\"java\\\"); list.add(123); list.add(true); list.add(\\\"java\\\"); list.add(123); list.add(true); System.out.print(\\\"List:\\\");//有序、可重复、有索引 :[java, 123, true, java, 123, true] System.out.println(list);//可以直接打印出内容，说明重写了toString方法 //Object[] array = list.toArray(); toArray方法可以把集合转换成数组 //System.out.println(Arrays.toString(array)); 调用Arrays类的toString方法快速打印出数组 //Set 无序 不重复 无索引 Collection hashSet = new HashSet(); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); System.out.print(\\\"Set:\\\"); System.out.println(hashSet);// 无序、不重复、无索引：[java, 123, true] } } \"]},\"840\":{\"h\":\"集合对泛型的支持\",\"t\":[\"集合都是支持泛型的，所谓泛型就是类，八种基本数据类型必须用他们的包装类（例如Integer，Double，Boolean...)，集合添加泛型可以在编译阶段约束集合只能操作某种数据类型。\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; import java.util.HashSet; /** * 明确Collection集合体系的特点 */ public class CollectionDemo1 { public static void main(String[] args) { //List 有序、可重复、有索引 Collection list = new ArrayList(); list.add(\\\"java\\\"); list.add(123); list.add(true); list.add(\\\"java\\\"); list.add(123); list.add(true); System.out.print(\\\"List:\\\");//有序、可重复、有索引 :[java, 123, true, java, 123, true] System.out.println(list);//可以直接打印出内容，说明重写了toString方法 //Object[] array = list.toArray(); toArray方法可以把集合转换成数组 //System.out.println(Arrays.toString(array)); 调用Arrays类的toString方法快速打印出数组 //Set 无序 不重复 无索引 Collection hashSet = new HashSet(); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); System.out.print(\\\"Set:\\\"); System.out.println(hashSet);// 无序、不重复、无索引：[java, 123, true] System.out.println(\\\"----------分割线-----------\\\"); //集合对泛型的支持,不支持基本数据类型 Collection<String> list1 = new ArrayList<>(); list1.add(\\\"java\\\"); // list1.add(1);编译阶段报错 Collection<Integer> integers = new ArrayList<>(); integers.add(23);//这个时候23会自动装箱成为Integer对象 System.out.println(integers); } } \"]},\"841\":{\"h\":\"Conllection API\",\"t\":[\"Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用。\"]},\"842\":{\"h\":\"Collection API :\",\"t\":[\"方法名\",\"public boolean add(E e)\",\"把给定的对象添加到当前集合中\",\"public void clear()\",\"清空当前集合中的所有元素\",\"public boolean remove(E e)\",\"把给定的对象在当前集合中删除\",\"public boolean contains(Object o)\",\"判断当前集合中是否包含指定的对象\",\"public boolean isEmpty()\",\"判断当前集合是否为空\",\"public int size()\",\"返回集合中的元素个数\",\"public Objetc[] toArray()\",\"把集合中的元素，存储到数组中\",\"package com.meng.collection; import com.sun.istack.internal.NotNull; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; public class CollectionDemo2 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //2、清空元素 //list.clear();清空所以的元素 //3、判断集合是否为空，是空返回true，反之false System.out.println(list.isEmpty());//false //4、获取元素大小 System.out.println(list.size()); //5、判断集合中是否包含某个元素 System.out.println(list.contains(\\\"Java\\\")); System.out.println(list.contains(\\\"java\\\"));//false 精确匹配 //6、删除某个元素，如果有多个重复的元素，会默认删除第一个 System.out.println(list.remove(\\\"java\\\"));//false System.out.println(list); System.out.println(list.remove(\\\"Java\\\"));//true System.out.println(list); //7、把集合转换为数组 这里转换为Object是因为，以后有一种技术可以强行向String的集合中添加其他的元素，所以转成了Object Object[] array = list.toArray(); System.out.println(Arrays.toString(array)); System.out.println(\\\"-------------拓展-----------\\\"); Collection<String> list2 = new ArrayList<>(); list2.add(\\\"HTML\\\"); list2.add(\\\"CSS\\\"); list2.add(\\\"JS\\\"); list2.add(\\\"vue\\\"); list.addAll(list2);//把list2中的元素拷贝到list中 System.out.println(list); } } \"]},\"843\":{\"h\":\"Collection集合常用的遍历\"},\"844\":{\"h\":\"迭代器遍历概述\",\"t\":[\"遍历就是一个一个的把容器中的元素访问一遍。\",\"迭代器在java中的代表是iterator，迭代器是集合专用的遍历方式\",\"image-20220809164400430\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; public class CollectionDemo3 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //得到当前集合的迭代器对象 Iterator<String> iterator = list.iterator();//定义这个的时候就会得到一个该集合的迭代器，在第一个位置！！！ // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//出现无此元素异常，越界！！ //定义while循环 while (iterator.hasNext()){//hasNext 问一问iterator里面该位置也没有元素，有元素就返回true并且移到下一个元素，反之false System.out.println(iterator.next()); } } } \",\"迭代器的默认位置在第一个元素的位置（当前集合索引为0）\",\"如果迭代器越界了会出现NoSuchElementException异常\"]},\"845\":{\"h\":\"foreach/增强for循环\",\"t\":[\"增强for循环：既可以遍历集合也可以遍历数组\",\"它是JDK5之后出现的，其内部原来是一个iterator迭代器，遍历集合相当于是迭代器的简化写法\",\"实现iterator接口的类才可以使用迭代器和增强for，Collection接口已经实现了iterator接口\",\"格式：\",\"for(元素数据类型 变量名 : 数组或Collection集合){\",\"​ //在此处使用变量名就是该元素\",\"}\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; public class CollectionDemo4 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //foreach for (String s : list) { System.out.println(s); } System.out.println(\\\"----------------\\\"); double[] scores = {100,99,59.5}; for (double score : scores) { System.out.println(score); } } } \"]},\"846\":{\"h\":\"Lambda 表达式\",\"t\":[\"package com.meng.collection; import java.math.BigDecimal; import java.util.ArrayList; import java.util.Collection; import java.util.function.Consumer; public class CollectionDemo5 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //forEach list.forEach(new Consumer<String>() { @Override public void accept(String s) { System.out.println(s); } }); //简化 list.forEach(s -> { System.out.println(s); }); //更简化 list.forEach(System.out::println); } } \"]},\"847\":{\"h\":\"Collection集合存储自定义类型的对象\",\"t\":[\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; public class CollectionDemo6 { public static void main(String[] args) { //定义一个电影类 //定义一个集合对象存储电影 Collection<Movie> movies = new ArrayList<>(); movies.add(new Movie(\\\"唐人街探案1\\\",9.8,\\\"王宝强，刘昊然\\\")); movies.add(new Movie(\\\"唐人街探案2\\\",9.8,\\\"王宝强，刘昊然\\\")); movies.add(new Movie(\\\"唐人街探案3\\\",9.8,\\\"王宝强，刘昊然\\\")); //遍历集合中的每一个元素 for (Movie movie : movies) { System.out.println(movie); } } } \",\"注意：集合中存储的是对象的地址。\"]},\"848\":{\"h\":\"常见数据结构\",\"t\":[\"数据结构概述、栈、队列\",\"数组\",\"链表\",\"二叉树、二叉查找树\",\"平衡二叉树\",\"红黑树\"]},\"849\":{\"h\":\"数据结构概述\",\"t\":[\"数据结构是计算机底层存储、组织数据的方式。是指数据相互之间是以什么方式排列在一起的。\",\"通常情况下，精心选择的数据结构可以带来更高的运行或存储效率\"]},\"850\":{\"h\":\"栈\",\"t\":[\"栈的特点：后进先出，先进后出（薯片桶类型的）\",\"数据进入栈称为：进栈\",\"数据离开栈称为：出栈\",\"应用：游戏中手枪弹夹中的子弹威力的大小（例如第一枪可以打多少血量，第二枪打多少血量...）\",\"image-20220809172231598\"]},\"851\":{\"h\":\"队列\",\"t\":[\"队列的特点：先进先出，后进后出（排队）\",\"数据从后端进入队列称为：入队列\",\"数据从前端离开队列称为：出队列\",\"应用：医院或餐厅叫号系统\",\"image-20220809172259302\"]},\"852\":{\"h\":\"数组\",\"t\":[\"特点：内存中的一段连续空间、查询速度快（根据索引） 、删除效率低（删除数据后，再把后面的数据一个一个移过来）、增加效率极低\",\"image-20220809172438463\"]},\"853\":{\"h\":\"链表\",\"t\":[\"链表中的元素是在内存中不连续存储的，每个元素结点包含数据值和下一个元素的地址。\",\"链表查询慢，无论查询哪个数据都要从头开始找。\",\"增删比较快，只需要把链（数据指向的下一个的地址）给改一改就行了\",\"单链表：只能向后查找\",\"双链表：向前向后都可以查找\",\"image-20220809174949079\",\"image-20220809175052880\"]},\"854\":{\"h\":\"二叉树，二叉查找树\",\"t\":[\"二叉树：就是包含一个父节点，一个父节点产生一个左节点和右节点，每个结点最多有两个结点。\",\"二叉查找树：又称为二叉排序树或者二叉搜索树\",\"image-20220809175404361\"]},\"855\":{\"h\":\"平衡二叉树\",\"t\":[\"优化二叉树可能出现的瘸子现象（一边非常长，一边很短）\",\"image-20220809175546477\",\"image-20220809175738079\",\"平衡二叉树是在满足查找的二叉树的大小规则下，让树尽可能矮小，以此提高查找数据的性能。\",\"平衡二叉树在添加元素后导致不平衡后：基本策略是进行左旋或者右旋，保证平衡。\",\"推荐观看黑马视频解析：https://www.bilibili.com/video/BV1Cv411372m?p=130&t=1826.1\"]},\"856\":{\"h\":\"红黑树\",\"t\":[\"基于红黑规则实现了自平衡的排序二叉树\"]},\"857\":{\"h\":\"红黑树概述\",\"t\":[\"红黑树是一种自平衡的二叉树，是计算机科学中用到的一种数据结构。\",\"1972年出现，当时被称为平衡二叉B树。1978年被修改为如今的”红黑树“\",\"每一个结点可以是红或黑；红黑树不是通过高度平衡的，他的平衡是通过红黑规则进行实现的。\"]},\"858\":{\"h\":\"红黑规则\",\"t\":[\"每一个节点或是红色的，或是黑色的，根节点必须是黑色的\",\"如果一个节点没有子节点或者父节点，则该节点对应节点相应的指针属性值为Nill,这些Nill视为叶节点，叶节点是黑色的。\",\"如果某一个节点是红色的，那么它的子节点必须是黑色的（不能出现两个红色的节点相连的情况）\",\"对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。\",\"红黑树增删查改的性能都很好\",\"image-20220809181657857\",\"image-20220809181620271\",\"image-20220809181736575\"]},\"859\":{\"h\":\"List系列集合\"},\"860\":{\"h\":\"List集合特点：\",\"t\":[\"ArrayList、LinkedList：有序、可重复、有索引\",\"有序：存储和去除的元素顺序一致\",\"有索引：可通过索引操作元素\",\"可重复：存储的元素可以重复\"]},\"861\":{\"h\":\"List集合特有的方法\",\"t\":[\"List集合因为支持索引，所以多了很多索引操作的独特api，其他Collection的功能List也继承了。\",\"方法名\",\"说明\",\"void add(int index,E element)\",\"在此集合中的指定位置插入指定元素\",\"E remove(int index)\",\"删除指定索引处的元素，返回被删除的元素\",\"E set(int index,E element)\",\"修改指定索引处的元素，返回被修改的元素\",\"E get(int index)\",\"返回指定索引处的元素\",\"package com.meng.list; import java.util.ArrayList; import java.util.List; public class ListDemo1 { public static void main(String[] args) { //创建一个ArrayList集合对象 //List：有序、可重复、有索引 List<String> list = new ArrayList<>();//多态写法，经典 list.add(\\\"Java\\\"); list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"MySQL\\\"); //插入数据 list.add(2,\\\"HTML\\\"); System.out.println(list);//[Java, Java, HTML, MySQL, MySQL] //根据索引删除元素 System.out.println(list.remove(2)); System.out.println(list); //根据索引取元素 System.out.println(list.get(2)); //根据索引修改元素，返回修改前的数据 System.out.println(\\\"被修改的数据\\\"+list.set(0, \\\"JavaSE\\\")); System.out.println(list); } } \",\"List的实现类底层原理\",\"ArrayList底层是基于数组实现的，根据查询元素块，增删元素相对慢。\",\"LinkedList底层是基于双链表实现的，查询元素慢，增删首位元素是非常快的。\"]},\"862\":{\"h\":\"List集合的遍历方式\",\"t\":[\"迭代器\",\"增强for循环\",\"Lambda表达式\",\"for循环（因为List集合存在索引，Collection不存在索引不能使用for循环）\"]},\"863\":{\"h\":\"ArrayList集合底层原理（面试热点）\",\"t\":[\"ArrayList底层是基于数组实现的：根据索引定位元素快，增删需要做元素位移操作。\",\"第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。\",\"创建ArrayList集合后，首先会向集合中加入一个大小为10的数组，然后添加一个元素size加一，当元素的size等于10，会按照当前的1.5倍扩容(变为了15)，当插入的时候，会遍历插入的元素后面的元素然后后移一位，size加一；当删除元素的时候会把后面的元素全部迁移过来，size减一\"]},\"864\":{\"h\":\"LinkedList集合底层原理\",\"t\":[\"LinkedList的特点\",\"底层是数据结构中的双链表，查询慢，首尾操作的速度是极快的，所以多了很多首尾操作的特有API\"]},\"865\":{\"h\":\"LinkedList集合特有的功能\",\"t\":[\"方法名称\",\"说明\",\"public void addFirst(E e)\",\"在该列表开头插入指定的元素\",\"public void addLast(E e)\",\"在该列表末尾插入指定的元素\",\"public E getFirst()\",\"从列表中获取第一个元素\",\"public E getLast()\",\"从列表中获取最后一个元素\",\"public E removeFirst()\",\"从列表中删除第一个元素并返回第一个元素\",\"public E removeLast()\",\"从列表中删除最后一个元素并返回第一个元素\",\"package com.meng.list; import java.util.LinkedList; public class ListDemo2 { public static void main(String[] args) { //LinkedList 可以完成队列结构，和栈结构（双链表） //栈 //我们想调用LinkedList的独有方法，这个时候就不需要用多态了 LinkedList<String> stack = new LinkedList<>(); //压栈，入栈 // stack.addFirst(\\\"\\\"); // stack.push(\\\"\\\");内的方法就是这个： // public void push(E e) { // addFirst(e); // } stack.push(\\\"第1颗子弹\\\"); stack.push(\\\"第2颗子弹\\\"); stack.push(\\\"第3颗子弹\\\"); stack.push(\\\"第4颗子弹\\\"); System.out.println(\\\"弹夹：\\\"+stack); //出栈 弹栈 //System.out.println(stack.getFirst()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"弹夹：\\\"+stack); //队列 LinkedList<String> queue = new LinkedList<>(); //入队 queue.offerLast(\\\"1\\\");//排队是排在最后一个位置；入队的专业英语：offerLast queue.addLast(\\\"2\\\"); queue.addLast(\\\"3\\\"); queue.addLast(\\\"4\\\"); queue.addLast(\\\"5\\\"); System.out.println(\\\"当前队伍：\\\"+queue); //出队 // System.out.println(queue.getFirst()); queue.removeFirst(); queue.removeFirst(); queue.removeFirst(); System.out.println(\\\"出队3个后\\\"+queue); } } \"]},\"866\":{\"h\":\"集合的并发修改异常问题\",\"t\":[\"我们之前发现：边遍历边删除元素的时候可能有BUG\",\"迭代器遍历集合且直接用集合删除元素的时候可能出现问题\",\"增强for循环遍历集合且直接用集合删除元素的时候可能出现问题\",\"package com.meng.deleteQuestion; import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.Objects; public class Test1 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"C++\\\"); list.add(\\\"Java\\\"); list.add(\\\"Java\\\"); list.add(\\\"PHP\\\"); list.add(\\\"Python\\\"); list.add(\\\"HTML\\\"); System.out.println(list); //[C++, Java, Java, PHP, Python, HTML] //需求：删除list集合中的Java //a、迭代器遍历删除 // Iterator<String> it = list.iterator(); // while (it.hasNext()){ // String ele = it.next(); // if (\\\"Java\\\".equals(ele)){ // //list.remove(\\\"Java\\\");//不要使用这个删除 因为删除后就元素会前移，但是就不检测这个移动过来的元素了，直接后移 // it.remove();//利用迭代器删除当前所在元素，并且不会后移!!! // } // } // System.out.println(list); //b、foreach删除。有bug // for (String s : list) { // if (\\\"Java\\\".equals(s)){ // list.remove(\\\"Java\\\");//并发异常 // } // } //c、lambda表达式。有bug // list.forEach(s -> { // if (\\\"Java\\\".equals(s)){ // list.remove(\\\"Java\\\");//也有BUG // } // }); //d、for循环。会漏删除，不过我们可以倒着删除 for (int i = list.size()-1; i >= 0; i--) { String s = list.get(i); if (\\\"Java\\\".equals(s)){ list.remove(\\\"Java\\\"); } } System.out.println(list);//[C++, Java, PHP, Python, HTML] } } \"]},\"867\":{\"h\":\"泛型深入\"},\"868\":{\"h\":\"泛型概述和优势\",\"t\":[\"泛型：是JDK5中引入的新特性，可以在编译阶段约束操作的数据类型，并进行检查\",\"泛型的格式：< 数据类型 >；注意：泛型只能支持引用数据类型\",\"集合体系的全部接口和实现类都是支持泛型的使用\"]},\"869\":{\"h\":\"泛型的好处\",\"t\":[\"统一数据类型\",\"把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，因为编译阶段类型就确定下来。\"]},\"870\":{\"h\":\"自定义泛型类\",\"t\":[\"定义类时 同时定义了泛型的类就是泛型类\",\"泛型类的格式：修饰符 class 类名 < 泛型变量 >\",\"public class MyArrayList<T>{} \",\"此处泛型变量T可以随便写为任意的标志，常见的比如：E、T、K、V等。不过我们常用T\",\"作用：编译阶段可以指定数据类型，类似于集合的作用。\"]},\"871\":{\"h\":\"案例\",\"t\":[\"模拟ArrayList集合自定义一个MyArrayList集合，完成添加和删除功能的泛型设计即可。\",\"package com.meng.genericity; import java.util.ArrayList; public class MyArrayList<T> { private ArrayList<T> lists = new ArrayList<>();//装饰模式的一种思想，外部类中可以再包一个内部对象 public void add(T t){ lists.add(t); } public void remove(T t){ lists.remove(t); } @Override public String toString() { return lists.toString(); } } \",\"package com.meng.genericity; public class Test { public static void main(String[] args) { MyArrayList<String> list = new MyArrayList<>(); list.add(\\\"Java\\\"); list.add(\\\"JavaWeb\\\"); list.add(\\\"MySQL\\\"); list.remove(\\\"Java\\\"); System.out.println(list); } } \"]},\"872\":{\"h\":\"自定义泛型方法\",\"t\":[\"定义方法的同时定义了泛型方法就是泛型方法\",\"泛型方法的格式：修饰符 < 泛型变量 > 方法返回值 方法名称(形参列表)\",\"public <T> void show(T t){ } \",\"方法中可以使用泛型接收一切实际类型的参数，方法更具有通用性\"]},\"873\":{\"h\":\"案例\",\"t\":[\"给任意一个类型的数组，都能返回特点内容，也就是实现Arrays.toString(数组)的功能\",\"package com.meng.genericity; public class Demo1 { public static void main(String[] args) { String[] name = {\\\"张三\\\",\\\"李四\\\",\\\"王五\\\"}; printArray(name); Integer[] ages = {10,20,30}; printArray(ages); Integer[] array = getArray(ages); System.out.println(array); String[] array1 = getArray(name); System.out.println(array1); } //泛型方法 public static <T> T[] getArray(T[] arr){ return arr; } public static <T> void printArray(T[] arr){ if (arr != null){ StringBuffer stringBuffer = new StringBuffer(\\\"[\\\"); for (int i = 0; i<arr.length; i++) { stringBuffer.append(i).append(i == arr.length - 1 ? \\\"\\\" : \\\", \\\"); } stringBuffer.append(\\\"]\\\"); System.out.println(stringBuffer); }else { System.out.println(arr); } } } \"]},\"874\":{\"h\":\"自定义泛型接口\",\"t\":[\"使用了泛型定义的接口就是泛型接口\",\"泛型接口格式：修饰符 interface 接口名称< 泛型变量 >\",\"作用：泛型接口可以让实现类选择当前功能操作的数据类型\"]},\"875\":{\"h\":\"案例\",\"t\":[\"教务系统：提供一个案例可以约束一定要完成数据（老师、学生）的增删改查操作。\",\"package com.meng.genericity_interface; public interface Data<T> { void add (T t); void remove(int id); void update(T t); T getById(int id); } \",\"package com.meng.genericity_interface; public class Teacher { } \",\"package com.meng.genericity_interface; public class Student { } \",\"package com.meng.genericity_interface; public class TeacherData implements Data<Teacher>{ @Override public void add(Teacher teacher) { } @Override public void remove(int id) { } @Override public void update(Teacher teacher) { } @Override public Teacher getById(int id) { return null; } } \",\"package com.meng.genericity_interface; //由实现类决定操作哪些信息 泛型接口传入的是学生，下面泛型就会表示成为学生 public class StudentData implements Data<Student>{ @Override public void add(Student student) { } @Override public void remove(int id) { } @Override public void update(Student student) { } @Override public Student getById(int id) { return null; } } \"]},\"876\":{\"h\":\"泛型接口的作用\",\"t\":[\"泛型接口可以约束实现类，实现类可以在实现接口的时候传入自己的操作的数据类型，这样重写的方法都是针对与该类型的操作。\"]},\"877\":{\"h\":\"泛型通配符、上下限\",\"t\":[\"通配符：？\",\"可以在使用泛型的时候代表一切类型\",\"ETKV是在定义泛型的时候使用的\",\"泛型的上下限：\",\"? extends Car: ？必须是Car或者是其子类 泛型上限\",\"? super Car : ？必须是Car或者其父类 泛型下限\"]},\"878\":{\"h\":\"案例\",\"t\":[\"开发一个极品飞车的游戏，所有的汽车都能一起参加比赛\",\"package com.meng.game; import java.util.ArrayList; public class GenericDemo { public static void main(String[] args) { ArrayList<BMW> bmws = new ArrayList<>(); bmws.add(new BMW()); bmws.add(new BMW()); bmws.add(new BMW()); go(bmws); ArrayList<SUV> suvs = new ArrayList<>(); suvs.add(new SUV()); suvs.add(new SUV()); suvs.add(new SUV()); go(suvs); ArrayList<Dog> dogs = new ArrayList<>(); dogs.add(new Dog()); dogs.add(new Dog()); dogs.add(new Dog()); //go(dogs);//这是赛车游戏，狗不能进来的！！！达咩！使用泛型上下限 } /** * 所有车参加比赛,泛型通配符：? 可以 * @param cars */ public static void go(ArrayList<? extends Car> cars){ } } class Dog{ } class SUV extends Car{ } class BMW extends Car{ } //父类汽车 class Car{ } \"]},\"879\":{\"h\":\"Set集合体系\"},\"880\":{\"h\":\"Set集合的特点\",\"t\":[\"image-20220809161431474\",\"无序：存储顺序不一致\",\"不重复：可以去重复\",\"无索引：没有带索引的一些方法，所以不能使用普通的for循环遍历，也不能通过索引获取元素\"]},\"881\":{\"h\":\"Set集合实现类的特点\",\"t\":[\"HashSet：无序、不重复、无索引\",\"LinkedHashSet：有序、不重复、无索引\",\"TreeSet：排序（天然对元素大小做升序排序）、不重复、无索引\",\"Set集合的功能其实和Collection集合的API一致\",\"package com.meng.collection_map; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.Set; public class SetDemo1 { public static void main(String[] args) { //Set集合体系的特点 Set<String> sets = new HashSet<>();//经典的代码：多态；以后我们如果HashSet不想使用，可以直接修改后面的HashSet，不用修改下面的元素了 sets.add(\\\"MySQL\\\"); sets.add(\\\"MySQL\\\"); sets.add(\\\"Java\\\"); sets.add(\\\"Java\\\"); sets.add(\\\"HTML\\\"); sets.add(\\\"HTML\\\"); sets.add(\\\"SpringBoot\\\"); sets.add(\\\"SpringBoot\\\"); System.out.println(sets);//[Java, MySQL, HTML, SpringBoot] 无序、不重复、无索引。无序：第一次是无序的，后面是有规律的 Set<String> linked = new LinkedHashSet<>();//多态；以后我们如果HashSet不想使用，可以直接修改后面的HashSet，不用修改下面的元素了 linked.add(\\\"MySQL\\\"); linked.add(\\\"MySQL\\\"); linked.add(\\\"Java\\\"); linked.add(\\\"Java\\\"); linked.add(\\\"HTML\\\"); linked.add(\\\"HTML\\\"); linked.add(\\\"SpringBoot\\\"); linked.add(\\\"SpringBoot\\\"); System.out.println(linked);//[MySQL, Java, HTML, SpringBoot]有序、不重复、无索引。无索引：只是没有提供索引的方法，底层还是有索引的 } } \"]},\"882\":{\"h\":\"HashSet元素无序的底层原理：哈希表\"},\"883\":{\"h\":\"HashSet底层原理\",\"t\":[\"HashSet底层采用哈希表存储的数据\",\"哈希表是一种对应增删改查数据性能都较好的结构\"]},\"884\":{\"h\":\"哈希表的组成\",\"t\":[\"JDK8之前，底层采用数组+链表组成\",\"JDK8开始后，底层采用数组+链表+红黑树组成\"]},\"885\":{\"h\":\"哈希值\",\"t\":[\"JDK根据对象的地址，按照某种规则算出来的int类型的数值\"]},\"886\":{\"h\":\"Object类的API\",\"t\":[\"**public int hashCode();**返回对象的哈希值\"]},\"887\":{\"h\":\"对象的哈希值特点\",\"t\":[\"同一个对象多次调用hashCode()方法返回的哈希值是相同的\",\"默认情况下，不同对象的哈希值是不同的\",\"package com.meng.collection_map; import java.util.Objects; /** * 目标：获取对象的哈希值，并确认 */ public class SetDemo2 { public static void main(String[] args) { String name = \\\"小胡\\\"; System.out.println(name.hashCode()); System.out.println(name.hashCode()); String name1 = \\\"小虎\\\"; System.out.println(name1.hashCode()); System.out.println(name1.hashCode()); } } \"]},\"888\":{\"h\":\"哈希表原理\",\"t\":[\"JDK1.7:https://www.bilibili.com/video/BV1Cv411372m?p=134&spm_id_from=pageDriver&vd_source=51ea6336b76b9ea01f2d5cad2110fe0a&t=1095.8\",\"image-20220810103158118\",\"创建一个默认长度为16的数组，数组名为table\",\"根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法）\",\"判断当前位置是否为null，如果是null直接存入\",\"如果位置不为null，表示有元素，则调用equals方法比较哈希值\",\"如果哈希值一样，则不存，如果不一样，则存入数组\",\"JDK7新元素会占据老元素的位置，指向老元素\",\"JDK8中的新元素会挂在老元素的下面\",\"JDK1.8\",\"image-20220810103529523\",\"底层结构：哈希表（数组、链表、红黑树）\",\"当挂在元素下面的数据过多时，查询性能降低，从JDK8后当链表长度超过8的时候，自动转换为红黑树（根据哈希值比较）\",\"image-20220810104015476\",\"package com.meng.collection_map; import java.util.Objects; public class Student { private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } } \",\"package com.meng.collection_map; import java.util.HashSet; import java.util.Set; public class SetDemo3 { public static void main(String[] args) { //Set集合去重复的原因是先判断哈希值，在判断equals。重写hashCode和equals去重复 Set<Student> students = new HashSet<>(); students.add(new Student(\\\"小胡\\\",18,'男')); students.add(new Student(\\\"小胡\\\",18,'男')); students.add(new Student(\\\"小王\\\",18,'男')); students.add(new Student(\\\"小张\\\",18,'男')); System.out.println(students); } } \",\"image-20220810104318377\"]},\"889\":{\"h\":\"LinkedHashSet集合\",\"t\":[\"有序、不重复、无索引\",\"这里的有序指的是保证存储和取出的元素顺序一致\",\"原理：底层数据结构依然是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序\",\"image-20220810104528185\"]},\"890\":{\"h\":\"TreeSet集合\",\"t\":[\"不重复、无索引、可排序\",\"可排序：按照元素大小默认升序（由小到大)排序\",\"TreeSet集合底层是基于红黑树的数据结构实现排序的，增删改查性能都较好\"]},\"891\":{\"h\":\"TreeSet集合默认的排序规则\",\"t\":[\"对于数值类型：Integer、Double，官方默认按照大小进行升序排序\",\"对于字符串类型：默认按照首字符的编号升序排序。\",\"对于自定义的类型如Student对象，TreeSet无法直接排序\",\"如果想使用TreeSet存储自定义类型，需要制定排序规则\",\"image-20220810105035042\",\"image-20220810105424559\",\"package com.meng.collection_map; import java.util.Objects; public class Student implements Comparable<Student>{ private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } /** * 方式一：类自定义比较规则 * @param o * @return */ @Override public int compareTo(Student o) { //按照年龄比较 // return this.age - o.age;//取掉年龄重复的元素 return this.age - o.age >= 0 ? 1 : -1;//把等于零的情况取掉了，保留元素重复的元素，避免了少元素的情况 } } \",\"package com.meng.collection_map; import java.util.Comparator; import java.util.Set; import java.util.TreeSet; public class SetDemo4 { public static void main(String[] args) { Set<Integer> set = new TreeSet<>(); set.add(23); set.add(80); set.add(21); set.add(25); System.out.println(set); Set<String> strings = new TreeSet<>(); strings.add(\\\"Java\\\"); strings.add(\\\"Java\\\"); strings.add(\\\"A\\\"); strings.add(\\\"Z\\\"); strings.add(\\\"b\\\"); strings.add(\\\"小黑\\\"); System.out.println(strings);//按照首字符编号从小到大排序 System.out.println(\\\"----------------------\\\"); //优先使用集合自带的比较器 // Set<Student> students = new TreeSet<>(new Comparator<Student>() { // @Override // public int compare(Student o1, Student o2) { // return o1.getAge() - o2.getAge(); // } // }); Set<Student> students = new TreeSet<>(Comparator.comparingInt(Student::getAge)); students.add(new Student(\\\"xx\\\",11,'男')); students.add(new Student(\\\"xx\\\",11,'男')); students.add(new Student(\\\"xx\\\",13,'男')); students.add(new Student(\\\"xx\\\",1,'男')); System.out.println(students); } } \",\"总结：\",\"TreeSet集合特点： \",\"可排序、不重复、无索引\",\"底层基于红黑树实现的、增删改查性能好\",\"TreeSet集合自定义排序规则有几种方式 \",\"2种\",\"类实现Comparable接口，重写比较规则\",\"集合自定义Comparable比较器，重写比较规则\"]},\"892\":{\"h\":\"总结\",\"t\":[\"如果希望元素可以重复，有索引，索引查询要快\",\"用ArrayList集合，基于数组的（用的最多）\",\"如果希望元素可以重复，有索引，增删首尾操作快\",\"用LinkedList集合，基于链表\",\"如果希望增删改查都快，但是元素不重复、无序、无索引\",\"用HashSet集合，基于哈希表\",\"如果希望增删改查都快，但是元素不重复、有序、无索引\",\"用LinkedHashSet集合，基于哈希表和双链表\",\"如果要对对象进行排序\",\"用TreeSet集合，基于红黑树。后续也可以用List集合实现排序\"]},\"893\":{\"h\":\"可变参数\",\"t\":[\"可变参数用在形参中可以接收多个数据\",\"可变参数的格式：数据类型 ... 参数名称\",\"可变参数的作用\",\"传输参数非常灵活，方便。可以不穿参数，可以传一个参数或多个，甚至也可以传一个数组\",\"可变参数在方法内部本身就是一个数组\",\"可变参数的注意事项：\",\"一个形参列表中的可变参数只能有一个\",\"可变参数必须放在形参列表的最后面\",\"package com.meng.params; import java.util.Arrays; public class MethodDemo { public static void main(String[] args) { sum(1); sum(10); sum(10,20,30); sum(1,new int[]{10,20,30}); } public static void sum(int a,int...nums){ //注意nums在方法内部其实就是数组 System.out.println(\\\"参数个数\\\"+nums.length); System.out.println(\\\"元素内容\\\"+ Arrays.toString(nums)); } } \"]},\"894\":{\"h\":\"集合工具类\",\"t\":[\"java.utils.Collections:是集合工具类\",\"作用：Collections并不属于集合，是用来操作集合的工具类\"]},\"895\":{\"h\":\"Collections常用的API\",\"t\":[\"方法名称\",\"说明\",\"public static < T > boolean addAll(Collection < ? super T > c ,T ... elements)\",\"给集合对象批量添加元素\",\"public static void shuffle ( List < ? > list)\",\"打乱List集合元素的顺序\"]},\"896\":{\"h\":\"Collections常用的排序的API\",\"t\":[\"方法\",\"说明\",\"public static < T > void sort(LIst< T > list)\",\"将集合中的元素按照默认规则排序，注意：本方式不可以直接对自定义类型的List排序，除非自定义类实现了比较规则的Comparable接口\",\"public static < T > void sort(List< T > list , Comparator< ? super T > c)\",\"将集合中的元素按照指定规则排序\",\"package com.meng.collections; import java.util.Objects; public class Student implements Comparable<Student>{ private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } /** * 方式一：类自定义比较规则 * @param o * @return */ @Override public int compareTo(Student o) { return this.age - o.age; } } \",\"package com.meng.collections; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class CollectionDemo2 { public static void main(String[] args) { List<Student> students = new ArrayList<>(); Collections.addAll(students,new Student(\\\"xx\\\",10,'男'), new Student(\\\"xx\\\",9,'男'), new Student(\\\"xx\\\",8,'男'), new Student(\\\"xx\\\",10,'男')); System.out.println(students); Collections.sort(students);//学生类已经实现类Comparable接口（implements） System.out.println(students); } } \"]},\"897\":{\"h\":\"案例：斗地主游戏\",\"t\":[\"package com.meng.games; public class Card { private String size;//点数 private String color;//花色 private int index;//牌的大小，解决排序中J Q K A 大小王排序的问题 public Card() { } public Card(String size, String color,int index) { this.size = size; this.color = color; this.index = index; } public String getSize() { return size; } public void setSize(String size) { this.size = size; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } public int getIndex() { return index; } public void setIndex(int index) { this.index = index; } @Override public String toString() { return color + size; } } \",\"package com.meng.games; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List; /** * 1、做牌 * 2、洗牌 * 3、定义三个玩家 * 4、发牌 * 5、排序 * 6、看牌 */ public class GameDemo { /** *1、定义一个静态的集合存储54张牌 */ public static ArrayList<Card> allCards = new ArrayList<>(); /** *2、定义静态代码块，加载数据 */ static { String[] sizes = {\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\",\\\"10\\\",\\\"J\\\",\\\"Q\\\",\\\"K\\\",\\\"A\\\",\\\"2\\\"}; String[] colors = {\\\"♠\\\",\\\"♥\\\",\\\"♣\\\",\\\"♦\\\"}; //组合点数和花色 int index = 0;//记录牌的大小 for (String size : sizes) { index++; for (String color : colors) { //封装成牌对象 Card card = new Card(size, color,index); //存入到集合容器 allCards.add(card); } } Card c1 = new Card(\\\"\\\", \\\"小王\\\",++index); Card c2 = new Card(\\\"\\\", \\\"大王\\\",++index); Collections.addAll(allCards,c1,c2);//把大小王放到牌中 System.out.println(\\\"新牌：\\\"+allCards); } public static void main(String[] args) { //9、洗牌 Collections.shuffle(allCards); //洗牌后 System.out.println(\\\"洗牌：\\\"+allCards); //10、发牌、定义3个玩家 List<Card> play1 = new ArrayList<>(); List<Card> play2 = new ArrayList<>(); List<Card> play3 = new ArrayList<>(); //发牌,剩余3张牌作为底牌 for (int i = 0; i < allCards.size() - 3; i++) { //先拿到当前循环一次的牌对象 Card card = allCards.get(i); if (i%3 == 0){ //play1 play1.add(card); }else if ( i%3 == 1){ play2.add(card); }else if (i%3 == 2){ play3.add(card); } } //12、拿到底牌 List<Card> lastThreeCards = allCards.subList(allCards.size() - 3, allCards.size()); //13、给玩家的牌排序 sortCards(play1); sortCards(play2); sortCards(play3); sortCards(lastThreeCards); //14、输出 System.out.println(\\\"play1:\\\"+play1); System.out.println(\\\"play2:\\\"+play2); System.out.println(\\\"play3:\\\"+play3); System.out.println(\\\"底牌:\\\"+lastThreeCards); } private static void sortCards(List<Card> cards) { //给牌排序 Collections.sort(cards, (o1, o2) -> o2.getIndex() - o1.getIndex()); } } \"]},\"898\":{\"h\":\"Map集合\"},\"899\":{\"h\":\"Map集合概述和使用\",\"t\":[\"Map集合是一种双列集合，每个元素包含两个元素\",\"Map集合的每个元素的格式：key=value（键值对元素）\",\"Map集合也被称为”键值对集合“\"]},\"900\":{\"h\":\"Map集合整体格式\",\"t\":[\"Collection集合的格式：[元素1，元素2，元素3]\",\"Map集合完整的格式：\",\"key1 ==========value1\",\"key2 ==========value2\",\"key3 ==========value3\"]},\"901\":{\"h\":\"Map集合体系\",\"t\":[\"image-20220810131346237\",\"image-20220810132212721\",\"image-20220810132414102\",\"Map集合的键无序、不重复的；Map集合的值不做要求可以重复\"]},\"902\":{\"h\":\"Map集合的特点\",\"t\":[\"Map集合的特点都是由键决定的\",\"Map集合的键是无序的、不重复、无索引，值不做要求（可以重复）\",\"Map集合后面的重复的键会覆盖前面的重复的键\",\"Map集合的键值对都可以为null\"]},\"903\":{\"h\":\"Map集合实现类的特点\",\"t\":[\"HashMap：元素按照键是无序的，不重复，无索引，值不做要求（与Map体系一致）\",\"LinkedHashMap：元素按照键是有序的，不重复，无索引，值不做要求\",\"TreeMap：元素按照键是排序的，不重复，无索引，值不做要求\",\"package com.meng.map; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo1 { public static void main(String[] args) { // Map<String,Integer> maps = new HashMap<>();//一行经典代码！！多态 Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 maps.put(\\\"NIKE\\\",1); maps.put(\\\"鸿星尔克\\\",1); maps.put(\\\"Java\\\",1); maps.put(\\\"Java\\\",10);//覆盖了上面的Java maps.put(null,null); System.out.println(maps); } } \"]},\"904\":{\"h\":\"Map集合常用API\",\"t\":[\"方法\",\"说明\",\"V put (K key, V value)\",\"添加元素\",\"V remove (Object key)\",\"根据键删除集合中的元素\",\"void clear()\",\"清空集合中所有的元素\",\"boolean containsKey(Object key)\",\"判断集合中是否包含指定的键\",\"boolean containsValue(Object value)\",\"判断集合中是否包含指定的值\",\"boolean isEmpty()\",\"判断集合是否为空\",\"int size()\",\"集合的长度，也就是集合中键值对的个数\",\"V get(Object key)\",\"根据键取出值对应的元素\",\"package com.meng.map; import java.util.*; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo1 { public static void main(String[] args) { Map<String,Integer> maps = new HashMap<>();//一行经典代码！！多态 // Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 //1、添加元素 maps.put(\\\"NIKE\\\",1); maps.put(\\\"鸿星尔克\\\",1); maps.put(\\\"Java\\\",1); maps.put(\\\"Java\\\",10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\",1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\",2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} //2、清空集合 //maps.clear();//{} System.out.println(maps); //3、判断集合是否为空 //System.out.println(maps.isEmpty());//true //4、根据键获取对应的值 Integer nike = maps.get(\\\"NIKE\\\"); System.out.println(nike); System.out.println(maps.get(\\\"Java\\\")); System.out.println(maps.get(\\\"Java2\\\"));//null //5、根据键删除整个元素,删除键会返回对应的值 Integer java = maps.remove(\\\"Java\\\"); System.out.println(java); System.out.println(maps); //6、判断是否包含某个键 System.out.println(maps.containsKey(\\\"Java\\\")); //7、判断是否包含某个值 System.out.println(maps.containsValue(1)); //8、获取全部键的集合，返回一个Set集合，因为Map集合和Set集合的特点是一样的 Set<String> keys = maps.keySet(); System.out.println(keys); //9、获取所有值的集合,返回的是Collection集合不是Set集合，因为怕值出现一样的时候用Set会出现值的丢失,所以使用Collection集合 Collection<Integer> values = maps.values(); System.out.println(values); //10、集合大小 System.out.println(maps.size());//4 //11、合并集合 Map<String,Integer> map1 = new HashMap<>(); map1.put(\\\"java1\\\",1); map1.put(\\\"java2\\\",100); Map<String,Integer> map2 = new HashMap<>(); map2.put(\\\"java2\\\",1); map2.put(\\\"java3\\\",100); map1.putAll(map2);//把map2中的集合拷贝到map1中 System.out.println(map1); } } \"]},\"905\":{\"h\":\"Map集合的遍历\"},\"906\":{\"h\":\"键找值\",\"t\":[\"先获取Map集合的全部键的Set集合\",\"遍历Set集合，然后通过键提取对应的值\",\"package com.meng.map; import java.util.Collection; import java.util.HashMap; import java.util.Map; import java.util.Set; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo2 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 // Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); //1、把键转为Set集合 Set<String> keySet = maps.keySet(); //2、遍历每个键，根据键找值 for (String s : keySet) { System.out.println(s+\\\"=====>\\\"+maps.get(s)); } } } \"]},\"907\":{\"h\":\"键值对\",\"t\":[\"先把Map集合装换成Set集合，Set集合中的每个元素都是键值对实体类型了\",\"遍历Set集合，然后提取键以及值\",\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Set; public class MapDemo3 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); /** * 此时 maps = {NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} * 使用foreach遍历map集合，发现map集合的键值对元素直接是没有类型的。所以不可以直接使用foreach遍历集合 * 不过我们可以通过Map的方法 entrySet() 的方法，把Map转换成Set集合的形式 * Set<Map.Entry<String, Integer>> entries = [ (NIKE=1), (Java=10), (iPhone13=1), (HuaWei=2), (鸿星尔克=1) ] * 然后我们就可以直接遍历Set集合得到Map集合了 * */ Set<Map.Entry<String, Integer>> entries = maps.entrySet(); for (Map.Entry<String, Integer> entry : entries) { System.out.println(entry); // String key = entry.getKey(); // Integer value = entry.getValue(); // System.out.println(key+\\\"----->\\\"+value); } } } \"]},\"908\":{\"h\":\"Lambda表达式\",\"t\":[\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Set; import java.util.function.BiConsumer; public class MapDemo4 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); // maps.forEach(new BiConsumer<String, Integer>() { // @Override // public void accept(String s, Integer integer) { // System.out.println(s+\\\"---->\\\"+integer); // } // }); //lambda表达式,一行直接解决Map集合遍历 maps.forEach((k,v) -> { System.out.println(k+\\\"--->\\\"+v); }); } } \",\"map集合的foeEach底层源码：其实就是在调用第二种的键值对方法，把键和值封装成一个类型整体给Set集合，然后再回调BiConsumer函数型接口\",\"案例\",\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Random; public class MapCase { public static void main(String[] args) { //80个学生的选择 String[] selects = {\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\"}; StringBuilder sb = new StringBuilder(); Random random = new Random(); for (int i = 0; i < 80; i++) { sb.append(selects[random.nextInt(selects.length)]); } System.out.println(sb); //定义一个Map集合 Map<Character,Integer> infos = new HashMap<>(); for (int i = 0; i < 80; i++) { char c = sb.charAt(i); if (infos.containsKey(c)){ //让值加一 infos.put(c,infos.get(c)+1); }else { //第一次被选 infos.put(c,1); } } System.out.println(infos); } } \"]},\"909\":{\"h\":\"不可变集合\",\"t\":[\"什么是不可变集合？\",\"不可以被修改的集合\",\"集合的数据在创建的时候就已经提供，并且在整个生命周期中都不可改变。否则报错\",\"如何创建不可变集合？\",\"在List、Set、Map接口中，都存在of方法，可以创建一个不可变集合\",\"package com.meng.unchange_collection; import java.util.List; import java.util.Map; import java.util.Set; public class CollectionDemo1 { public static void main(String[] args) { //不可变的List集合，注意JDK1.8不支持 List<Double> lists = List.of(569.5,600.5,599.3); // lists.add(500.4); System.out.println(lists); //不可变的Set集合 Set<String> sets = Set.of(\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"); System.out.println(sets); //不可变的Map集合 Map<String,Integer> maps = Map.of(\\\"huawei\\\",2,\\\"java\\\",3); System.out.println(maps); } } \"]},\"910\":{\"h\":\"总结：\",\"t\":[\"定义完成之后不可修改、添加、删除\",\"List、Set、Map接口中都存在of方法可以创建不可变集合\",\"image-20220810132436936\"]},\"911\":{\"h\":\"多线程\"},\"912\":{\"h\":\"多线程\",\"t\":[\"image-20220811094813259\",\"多线程是什么？\",\"多线程是指从硬件上实现多条执行流程的技术\",\"多线程用在哪？有什么好处\",\"购票系统\",\"百度网盘的下载和上传\",\"消息通信(收发消息)，淘宝，京东...\"]},\"913\":{\"h\":\"多线程的创建\"},\"914\":{\"h\":\"方式一：继承Thread类\",\"t\":[\"定义一个子类MyThread继承线程类java.lang.Thread，重写run()方法\",\"创建MyThread类对象\",\"调用线程对象的start()方法启动线程\",\"package com.demo1; /** * 掌握多线程的创建方式一：继承Thread类 */ public class Demo1 { public static void main(String[] args) { //1、new一个新线程对象，代表线程 Thread t = new MyThread(); //2、调用start方法执行线程中的run方法 t.start();//实现了多线程 //写一个主线程 for (int i = 0; i < 5; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } /** * 定义一个线程类继承Thread类 */ class MyThread extends Thread{ /** * 重写run方法，里面是定义线程以后要干啥 */ @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(\\\"子线程执行输出\\\" + i); } } } \"]},\"915\":{\"h\":\"优缺点：\",\"t\":[\"优点：编码简单\",\"缺点：线程类已经继承Thread，无法继承其他类，不利于扩展\"]},\"916\":{\"h\":\"疑问：\",\"t\":[\"为什么不是调用run方法启动多线程，而是调用start方法呢？\",\"如果直接调用run方法会当成普通方法执行，此时相当于还是单线程执行\"]},\"917\":{\"h\":\"注意点：\",\"t\":[\"不要把主线程的任务放到子线程任务之前，否则主线程一直是先跑完的，相当于是一个单线程的效果了。\",\"image-20220811100852340\"]},\"918\":{\"h\":\"方式二：实现Runnable接口\",\"t\":[\"定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法\",\"创建MyRunnable任务对象\",\"把MyRunnable任务对象交给Thread处理\",\"调用线程对象的start()方法启动线程\",\"image-20220811101703243\",\"package com.demo1; public class Demo2 { public static void main(String[] args) { //创建一个任务对象 Runnable target = new MyRunnable(); //把任务对象交给Thread对象处理 Thread t = new Thread(target); //启动线程 t.start(); //定义主线程（在main中） for (int i = 0; i < 10; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } /** * 定义一个线程任务类，实现Runnable接口 */ class MyRunnable implements Runnable{ /** * 实现run方法 */ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程执行输出\\\" + i); } } } \"]},\"919\":{\"h\":\"优缺点：\",\"t\":[\"优点：线程任务只是实现接口，可以继续继承和实现接口，扩展性强\",\"缺点：编程多一层对象包装，如果线程有执行结果，是不可以直接返回的\",\"image-20220811102046877\"]},\"920\":{\"h\":\"实现Runnable接口（匿名内部类形式）\",\"t\":[\"package com.demo1; public class Demo2 { public static void main(String[] args) { //匿名内部类形式 Runnable target = new Runnable(){ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程1执行输出\\\" + i); } } }; Thread thread = new Thread(target); thread.start(); //简化 new Thread(new Runnable() { @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程2执行输出\\\" + i); } } }).start(); //简化 new Thread(()->{ for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程3执行输出\\\" + i); } }).start(); //定义主线程（在main中） for (int i = 0; i < 10; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } \"]},\"921\":{\"h\":\"方式三：JDK5.0新增：实现Callable接口\",\"t\":[\"前两种线程创建的方式都存在一个问题： \",\"他们重写的run方法不能返回结果\",\"不适合需要返回线程执行结果的业务场景\",\"于是JDK5.0提供了Callable和FutureTask，可以解决这个问题\",\"得到任务对象 \",\"定义类实现Callable接口，重写call方法，封装要做的事情\",\"用FutureTask把Callable对象封装成线程任务对象\",\"把线程任务对象交给Thread处理\",\"调用Thread的start方法启动线程，执行任务\",\"线程执行完毕后，通过FutureTask的get方法区获取任务执行的结果\",\"package com.demo1; import java.util.concurrent.Callable; import java.util.concurrent.FutureTask; public class Demo3 { public static void main(String[] args) { //创建任务对象 Callable<String> call = new MyCallable(100); //把Callable任务对象交给FutureTask对象 //FutureTask对象的作用1：是Runnable的对象（实现了Runnable接口），可以交给Thread了 //FutureTask对象的作用2：可以在线程执行完毕后通过调用其get方法得到线程执行完毕的结果 FutureTask<String> task = new FutureTask<>(call); //交给线程处理 Thread thread = new Thread(task); //启动线程 thread.start(); //获取结果（主线程） try { //如果task任务没有执行完，这里的代码会等待，直到线程跑完才取出结果 String rs1 = task.get(); System.out.println(\\\"第一个结果：\\\"+rs1); } catch (Exception e) { e.printStackTrace(); } Callable<String> call2 = new MyCallable(200); FutureTask<String> task2 = new FutureTask<>(call2); Thread thread2 = new Thread(task2); thread2.start(); try { String rs2 = task2.get(); System.out.println(\\\"第二个结果：\\\"+rs2); } catch (Exception e) { e.printStackTrace(); } } } /** * 定义一个任务类，实现Callable接口，应该声明线程任务执行完毕后的结果数据类型 */ class MyCallable implements Callable<String>{ //计算1到n的和 private int n; public MyCallable(int n) { this.n = n; } /** * 重写call方法 * @return * @throws Exception */ @Override public String call() throws Exception { int sum = 0; for (int i = 0; i <= n; i++) { sum += i; } return \\\"子线程执行的结果为：\\\" + sum; } } \",\"image-20220811104734651\"]},\"922\":{\"h\":\"优缺点：\",\"t\":[\"优点：线程任务类只是实现接口，可以继续继承和实现接口，扩展性强\",\"优点：可以在线程执行完毕后通过FutureTask的get方法获取执行结果，如果没有执行完毕会等待执行完毕后，获取结果\",\"缺点：编码复杂一些\"]},\"923\":{\"h\":\"总结\",\"t\":[\"方式\",\"优点\",\"缺点\",\"继承Thread类\",\"编码简单，可以直接使用Thread类中的start方法启动线程\",\"扩展性较差，不能在继续继承其他的类，不能返回线程执行的结果\",\"实现Runnable接口\",\"扩展性强，实现该接口的同时还可以继承其他的类\",\"编程相对复杂，不能返回线程执行的结果\",\"实现Callable接口\",\"扩展性强，实现该接口的同时还可以继承其他的类，可以得到线程执行的结果\",\"编程相对复杂\"]},\"924\":{\"h\":\"Thread的常用方法\",\"t\":[\"Thread常用方法：获取线程名称getName()、设置名称setName()、获取当前线程对象currentThread()\",\"当有很多线程执行的时候，我们怎么区分这些线程？\",\"可以使用Thread的常用方法：getName()、setName()、currentThread()等\",\"package com.api; public class MyThread extends Thread{ public MyThread() { } public MyThread(String name) { //为当前线程对象设置名字，送给父类的有参构造器初始化名称 super(name); } @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName()+\\\"子线程输出\\\"); } } } \",\"package com.api; public class Demo1 { public static void main(String[] args) { Thread t1 = new MyThread(\\\"1号\\\"); // t1.setName(\\\"1号\\\"); t1.start(); // System.out.println(t1.getName()); Thread t2 = new MyThread(\\\"2号\\\"); // t2.setName(\\\"2号\\\"); t2.start(); // System.out.println(t2.getName()); /** * 哪个线程执行它，它就代表哪个多线程对象（当前线程对象） * 主线程的默认名称就叫main */ Thread m = Thread.currentThread(); System.out.println(m.getName()); for (int i = 0; i < 5; i++) { System.out.println(\\\"main线程输出\\\"); } } } \"]},\"925\":{\"h\":\"Thread类的线程休眠方法\",\"t\":[\"方法名称\",\"说明\",\"public static void sleep(long time)\",\"让当前线程休眠指定的时间后再继续执行，单位为毫秒\",\"package com.api; public class Demo2 { public static void main(String[] args) throws Exception { for (int i = 0; i < 5; i++) { System.out.println(\\\"输出\\\"+i); if (i == 2){ System.out.println(\\\"睡3秒休息一下~~\\\"); //让当前线程进入休眠状态 Thread.sleep(3000); } } } } \"]},\"926\":{\"h\":\"总结\",\"t\":[\"Thread常用方法、构造器\",\"方法名称\",\"说明\",\"String getName()\",\"获取线程当前的名称，默认线程名称为Thread-索引\",\"void setName(String name)\",\"设置线程名称\",\"public static Thread currentThread() 例如：如果在main方法中写：Thread m = Thread.currentThread(); m就代表main方法的线程\",\"返回对当前正在执行的线程对象的引用。返回值：当前正在执行的线程。\",\"public static void sleep(long time)\",\"让线程休眠指定的时间，单位毫秒\",\"public void run()\",\"线程任务方法\",\"punlic void start()\",\"线程启动方法\",\"构造器\",\"说明\",\"public Thread(String name)\",\"可以设置当前线程指定的名称\",\"public Thread(Runnable target)\",\"把Runnable对象交给线程对象\",\"public Thread(Runnable target,String name)\",\"把Runnable对象交给线程对象，并指定线程名称\"]},\"927\":{\"h\":\"线程安全\"},\"928\":{\"h\":\"线程安全是什么、方式的原因\",\"t\":[\"多个线程同时操作同一个共享资源的时候，可能会出现**业务（比如修改数据）**安全问题，称为线程安全问题\"]},\"929\":{\"h\":\"取钱模型\",\"t\":[\"需求：小明和小红是一对夫妻，他们有一个共同的账户，余额是10万元\",\"如果小明和小红同时来取钱，而且2人都需要取钱10万元，可能出现什么问题？\"]},\"930\":{\"h\":\"模拟线程安全问题：\",\"t\":[\"package com.thread_safe; public class Account { private String cardId; private double money; public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 小明 小红 取钱 * @param money */ public void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"package com.thread_safe; /** * 取钱的线程类 */ public class DrawThread extends Thread{ private Account account; public DrawThread(Account account,String name){ super(name); this.account = account; } @Override public void run() { //取钱 account.drawMoney(100000); } } \",\"package com.thread_safe; /** * 模拟取钱案例 */ public class Demo1 { public static void main(String[] args) { //1、定义线程类，创建一个共享的账户对象 Account account = new Account(\\\"001\\\",100000); //2、创建两个线程对象，代表小明和小红同时进来了 new DrawThread(account,\\\"小明\\\").start(); new DrawThread(account,\\\"小红\\\").start(); } } \",\"输出结果：\",\"小红取钱成功：100000.0 小红取钱后剩余：0.0 小明取钱成功：100000.0 小明取钱后剩余：-100000.0\",\"线程安全问题发生的原因是什么？\",\"多个线程同时访问同一个共享资源且存在修改资源的时候，可能会出现线程安全问题\"]},\"931\":{\"h\":\"线程同步\",\"t\":[\"为了解决线程安全问题\",\"取钱案例出现的问题原因\",\"多个线程同时执行，发现账户余额是足够的\",\"如何解决？\",\"让多个线程实现先后依次访问共享资源，这样就解决了安全问题（一起进入账户，然后依次访问，排队）\"]},\"932\":{\"h\":\"线程同步核心思想\",\"t\":[\"加锁，把共享资源进行上锁，每次只能一个人进入访问，完毕以后进行解锁，然后其他线程才能进来\"]},\"933\":{\"h\":\"方式一：同步代码块\",\"t\":[\"作用：把出现线程安全问题的核心代码给上锁\",\"原理：每次只能一个线程进入，执行完毕后自动解锁，其他线程才可以进来执行\",\"synchronized (\\\"lock\\\") { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \"]},\"934\":{\"h\":\"锁对象要求\",\"t\":[\"理论上：锁对象只要对于当前同时执行的线程来说是同一个对象即可\"]},\"935\":{\"h\":\"锁对象用任意唯一的对象好不好呢？\",\"t\":[\"不好，因为会影响到其他无关线程的执行\"]},\"936\":{\"h\":\"锁对象的规范要求\",\"t\":[\"规范：建议使用共享资源作为锁对象\",\"对于实例方法建议使用this作为锁对象\",\"对于静态方法建议使用字节码（类名.class）对象作为锁对象\",\"synchronized (this) { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \",\"image-20220811124659879\"]},\"937\":{\"h\":\"方式二：同步方法\",\"t\":[\"作用：把出现线程安全问题的核心方法给上锁\",\"原理：每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行\",\"/** * 小明 小红 取钱 * @param money */ public synchronized void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \",\"格式：\",\"public synchronized void run(){//实例方法：同步方法默认用this作为锁的对象。但是代码要高度面向对象 } public synchronized static void run1(){//静态方法，同步方法默认用类名.class作为锁对象 } \"]},\"938\":{\"h\":\"同步方法底层原理\",\"t\":[\"同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码块\",\"如果方法是实例方法：同步方法默认用this作为锁的对象。但是代码要高度面向对象\",\"如果方法是静态方法：同步方法默认用类名.class作为锁对象\",\"是同步代码块好还是同步方法好？\",\"同步代码块锁的范围更小，同步方法锁的范围更大\",\"同步方法可读性方便\",\"image-20220811125740602\"]},\"939\":{\"h\":\"Lock锁\",\"t\":[\"为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock，更加灵活、方便\",\"Lock锁实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作\",\"Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock对象\",\"方法名称\",\"说明\",\"Public ReentrantLock()\",\"获得Lock锁的实现类对象\",\"Lock的API\",\"方法\",\"说明\",\"void lock()\",\"获得锁\",\"void unlock()\",\"释放锁\",\"private final Lock lock = new ReentrantLock();//final修饰后：锁对象是唯一不可替换的，非常专业 \",\" lock.lock();//上锁 try { //上锁的内容 } finally { lock.unlock();//解锁，写在finally中，防止出现bug然后被锁死！！！ } \",\"package com.thread_lock; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class Account { private String cardId; private double money; private final Lock lock = new ReentrantLock();//final修饰后：锁对象是唯一不可替换的，非常专业 public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 小明 小红 取钱 * @param money */ public void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); lock.lock();//上锁 try { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } finally { lock.unlock();//解锁，写在finally中，防止出现bug然后被锁死！！！ } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"什么是线程通信、如何实现？\",\"所谓线程通信就是线程间互相发送数据\",\"线程通信常见的形式\",\"通过共享一个数据的方式实现\",\"根据共享数据的情况决定自己改怎么做，以及通知其他线程怎么做\",\"image-20220811130657310\",\"image-20220811132950606\",\"image-20220811141019403\",\"package day06.thread_comunication; public class Account { private String cardId; private double money; public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 父亲们存钱 同步方法 * 亲爹 干爹 岳父 存钱 * * @param money */ public synchronized void depositMoney(double money) { try { String name = Thread.currentThread().getName(); if (this.money == 0) { // 存钱 this.money += money; System.out.println(name + \\\"存钱\\\" + money + \\\"成功！余额是:\\\" + this.money); this.notifyAll(); this.wait(); } else { this.notifyAll(); this.wait(); } } catch (Exception e) { e.printStackTrace(); } } /** * 孩子们取钱 同步方法 * 小明和小红取钱 * * @param money */ public synchronized void drawMoney(double money) { try { String name = Thread.currentThread().getName(); if (this.money >= money) { // 取钱 this.money -= money; System.out.println(name + \\\"来取钱\\\" + money + \\\"成功！余额是:\\\" + this.money); // 唤醒正在此对象的监视器上等待的所有线程 this.notifyAll();//唤醒所有线程 this.wait();//让当前线程进入等待，并且释放占用的锁，直到另一个线程调用notify方法或者notifyAll方法 } else { // 钱不够,唤醒其他线程(期望唤醒父亲们存钱) this.notifyAll(); this.wait();//让当前线程进入等待，并且释放占用的锁，直到另一个线程调用notify方法或者notifyAll方法 } } catch (Exception e) { e.printStackTrace(); } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"package day06.thread_comunication; /** * 存钱线程 */ public class DepositThread extends Thread { private Account account; public DepositThread(Account account, String name) { super(name); this.account = account; } @Override public void run() { while (true) { account.depositMoney(100000); try { Thread.sleep(2000); } catch (Exception e) { e.printStackTrace(); } } } } \",\"package day06.thread_comunication; /** * 取钱线程 */ public class DrawThread extends Thread { private Account account; public DrawThread(Account account, String name) { super(name); this.account = account; } @Override public void run() { while (true) { account.drawMoney(100000); try { Thread.sleep(3000); } catch (Exception e) { e.printStackTrace(); } } } } \",\"package day06.thread_comunication; /** * 了解线程通信 */ public class ThreadDemo { public static void main(String[] args) { Account account = new Account(\\\"ICBC-111\\\", 0); new DrawThread(account, \\\"小明\\\").start(); new DrawThread(account, \\\"小红\\\").start(); new DepositThread(account, \\\"亲爹\\\").start(); new DepositThread(account, \\\"干爹\\\").start(); new DepositThread(account, \\\"岳父\\\").start(); } } \"]},\"940\":{\"h\":\"概述\",\"t\":[\"线程池就是一个可以复用线程的技术\",\"不使用线程池的问题\",\"如果用户每发起一个请求，后台就创建一个新的线程来处理，下次新任务来了又要创建新线程，而创建新线程的开销是很大的，这样会严重影响系统的性能\",\"image-20220811141640927\"]},\"941\":{\"h\":\"线程池实现的API、参数说明\"},\"942\":{\"h\":\"谁代表线程池？\",\"t\":[\"JDK5.0起提供了代表线程池的接口：ExecutorService\",\"image-20220811141756349\"]},\"943\":{\"h\":\"如何得到线程对象？\",\"t\":[\"方式一：使用ExecutorService的实现类ThreadPoolExecutor自己创建一个线程对象【重要】\",\"方式二：使用Executor（线程池工具类）调用方法返回不同特点的线程池对象\"]},\"944\":{\"h\":\"ThreadPoolExecutor构造器的参数说明\",\"t\":[\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) \",\"参数一：指定线程池的线程数量（核心线程）：corePoolSize-------------------------》不能小于0\",\"参数二：指定线程池可以支持的最大线程数量：maximumPoolSize-----------------》最大数量>=核心数量\",\"参数三：指定临时线程的最大存活时间：keepAliveTime--------------------------------》不能小于0\",\"参数四：指定存活时间的单位（秒、分、时、天）：unit--------------------------------》时间单位\",\"参数五：指定任务队列：workQueue----------------------------------------------------------》不能为null\",\"参数六：指定用哪个线程工厂创建线程：threadFactory---------------------------------》不能为null\",\"参数七：指定线程忙、任务慢的时候，新任务来了怎么办：handler-----------------》不能为null\"]},\"945\":{\"h\":\"线程池常见面试题\"},\"946\":{\"h\":\"临时线程什么时候创建？\",\"t\":[\"新任务提交时发现核心线程都在忙，而且任务队列也排满了！并且还可以创建临时线程，此时才会创建临时线程\"]},\"947\":{\"h\":\"什么时候会开始拒绝任务？\",\"t\":[\"核心线程和临时线程都在忙，而且任务队列也满了！！新任务过来的时候才会开始任务拒绝\"]},\"948\":{\"h\":\"线程池处理Runnable任务\",\"t\":[\"ThreadPoolExecutor创建线程池对象实例\",\"ExecutorService pools = new ThreadPoolExecutor(3,//指定线程池的线程数量（核心线程） 5,//指定线程池可以支持的最大线程数量 8,//指定临时线程的最大存活时间 TimeUnit.SECONDS,//指定存活时间的单位 new ArrayBlockingQueue<>(6),//指定任务队列 Executor.defaultThreadFactory(),//指定用哪个线程工厂创建线程 new ThreadPoolExecutor.AbortPolicy());//指定线程忙、任务慢的时候，新任务来了怎么办 \",\"ExecutorService的常用方法\",\"方法名称\",\"说明\",\"void execute(Runnable command)\",\"执行任务/命令，没有返回值，一般用来执行Runnable任务\",\"Future< T > submit(Callable< T > task)\",\"执行任务，返回未来任务对象获取线程结果，一般拿来执行 Callable 任务\",\"void shutdown()\",\"等待任务执行完毕后关闭线程池\",\"List < Runnable > shutdownNow()\",\"立刻关闭，停止正在执行的任务，并返回队列中未执行的任务\",\"image-20220811145535092\",\"package com.threadpool; public class MyRunnable implements Runnable{ @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName()+\\\"输出了：HelloWorld==》\\\"+i); } try { System.out.println(Thread.currentThread().getName()+\\\"本任务与线程绑定了，线程进入休眠了。。。\\\"); Thread.sleep(1000000); } catch (InterruptedException e) { e.printStackTrace(); } } } \",\"package com.threadpool; import java.util.concurrent.*; /** * 自定义一个线程池对象，并且测试其特性 */ public class ThreadPoolDemo1 { public static void main(String[] args) { //1、创建线程池对象 /** * public ThreadPoolExecutor(int corePoolSize, * int maximumPoolSize, * long keepAliveTime, * TimeUnit unit, * BlockingQueue<Runnable> workQueue, * ThreadFactory threadFactory,//默认线程工厂：Executors.defaultThreadFactory() * RejectedExecutionHandler handler) */ ExecutorService pool = new ThreadPoolExecutor(3,5, 6, TimeUnit.SECONDS,new ArrayBlockingQueue<>(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); //2、给任务，线程池处理 Runnable target = new MyRunnable(); pool.execute(target);//线程1 pool.execute(target);//线程2 pool.execute(target);//线程3 //核心线程执行上面的任务，下面的任务进入队列等待，（5个任务队列，当等待的线程超过5的时候，才会启动临时线程） pool.execute(target);//队列线程1 pool.execute(target);//队列线程2 pool.execute(target);//3 pool.execute(target);//4 pool.execute(target);//5（队列线程满了而且核心线程还被占用着！） //启动临时线程！！！ pool.execute(target);//临时线程1（线程4） pool.execute(target);//临时线程2（线程5）达到最大线程数量 //满了，不创建，拒绝策略被触发 //pool.execute(target); /** * 异常： * RejectedExecutionException: * [Running, pool size = 5, active threads = 5, queued tasks = 5, completed tasks = 0] * 执行， 池子数量 = 5 ， 执行的线程 = 5 ， 队列任务 = 5 ， 完成的任务 = 0 */ //关闭线程池（开发中一般不会使用） //pool.shutdownNow();//立即关闭，即使任务没有完成，会丢失任务的 pool.shutdown();//会等待全部任务执行完毕之后再关闭 } } \"]},\"949\":{\"h\":\"线程处理Callable任务\",\"t\":[\"package com.threadpool; import java.util.concurrent.*; /** * 自定义一个线程池对象，并且测试其特性 */ public class ThreadPoolDemo2 { public static void main(String[] args) { //1、创建线程池对象 /** * public ThreadPoolExecutor(int corePoolSize, * int maximumPoolSize, * long keepAliveTime, * TimeUnit unit, * BlockingQueue<Runnable> workQueue, * ThreadFactory threadFactory,//默认线程工厂：Executors.defaultThreadFactory() * RejectedExecutionHandler handler) */ ExecutorService pool = new ThreadPoolExecutor(3,5, 6, TimeUnit.SECONDS,new ArrayBlockingQueue<>(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); Future<String> submit1 = pool.submit(new MyCallable(100)); Future<String> submit2 = pool.submit(new MyCallable(200)); Future<String> submit3 = pool.submit(new MyCallable(300)); Future<String> submit4 = pool.submit(new MyCallable(400)); Future<String> submit5 = pool.submit(new MyCallable(500)); try { System.out.println(submit1.get()); System.out.println(submit2.get()); System.out.println(submit3.get()); System.out.println(submit4.get()); System.out.println(submit5.get()); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } } } \"]},\"950\":{\"h\":\"Executors工具类实现线程池\"},\"951\":{\"h\":\"Executors得到线程对象的常用方法\",\"t\":[\"Executor：线程池工具类通过调用方法返回不同类型的线程池对象\",\"方法名称\",\"public static ExecutorService newCachedThreadPool()\",\"线程数量随着任务的增加而增加，如果线程任务执行完毕且空闲了一段时间则会被回收掉\",\"public static ExecutorService newFixedThreadPool(int nThreads)\",\"创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池就会补充一个新的线程代替他\",\"public static ExecutorService newSingleThreadExecutor()\",\"创建只有一个线程的线程对象，如果该线程出现异常而结束，那么线程池会补充一个新的线程池\",\"public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务\",\"注意：Executors的底层也是基于线程池的实现类ThreadPoolExecutor创建线程池对象的\",\"package com.executors; import com.threadpool.MyRunnable; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * 使用Executors的工具方法直接得到一个线程池对象 */ public class ThreadPoolDemo1 { public static void main(String[] args) { ExecutorService pool = Executors.newFixedThreadPool(3); /** * ExecutorService pool = Executors.newFixedThreadPool(3); * 源码的做法：就是在内部new了一个ThreadPoolExecutor给了一些参数 * 核心线程3个，最大线程3个（没有临时线程），没有空闲时间（都是不死线程，没有临时线程，不需要配置空闲时间），任务队列没有限制任务数量 * public static ExecutorService newFixedThreadPool(int nThreads) { * return new ThreadPoolExecutor(nThreads, nThreads, * 0L, TimeUnit.MILLISECONDS, * new LinkedBlockingQueue<Runnable>()); * } */ pool.execute(new MyRunnable()); pool.execute(new MyRunnable()); pool.execute(new MyRunnable()); //任务队列不受控制 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 } } \"]},\"952\":{\"h\":\"Executors使用可能存在的陷阱\",\"t\":[\"大型并发系统环境中使用Executors如果不注意可能会出现系统风险\",\"方法名称\",\"存在问题\",\"public static ExecutorService newFixedThreadPool(int nThreads)\",\"允许请求的任务队列长度是Integer.MAX_VALUE，可能出现OOM错误（java.lang.OutOfMemoryError)\",\"public static ExecutorService newSingleThreadExecutor()\",\"同上\",\"public static ExecutorService newCachedThreadPool()\",\"创建的线程数量最大上限是Integer.MAX_VALUE，线程数可能会随着任务1:1增长，也可能出现OOM错误（java.lang.OutOfMemoryError)\",\"public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"同上\",\"image-20220811151604202\",\"定时器是一种控制任务延时调用，或者周期调用的技术\",\"作用：闹钟、定时邮件发送\"]},\"953\":{\"h\":\"定时器的实现方式\",\"t\":[\"方式一：Timer\",\"方式二：ScheduledExecutorService\"]},\"954\":{\"h\":\"Timer定时器(不推荐使用)\",\"t\":[\"构造器\",\"说明\",\"public Timer()\",\"创建Timer定时器对象\",\"方法\",\"说明\",\"public void schedule(TimerTask task,long delay,long period)\",\"开启一个定时器，按照计划处理TimerTask任务\",\"package com.timer; import java.util.Timer; import java.util.TimerTask; /** * Timer定时器的使用和了解 */ public class TimerDemo1 { public static void main(String[] args) { //1、创建Timer定时器 Timer timer = new Timer();//定时器本身就是一个单线程 //2、调用方法来处理定时任务 timer.schedule(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行一次~~~\\\"); } },3000,2000); } } \",\"Timer定时器的特点和存在的问题\",\"Timer是单线程，处理多个任务按照顺序执行，存在延时与设置定时器的时间有出入\",\"可能因为其中某个任务的异常使Timer线程死掉，从而影响后续任务执行\"]},\"955\":{\"h\":\"ScheduledExecutorService定时器\",\"t\":[\"ScheduledExecutorService是JDK1.5中引入的并发包，目的是为了弥补Timer的缺陷，ScheduledExecutorService内部为线程池\",\"Executors的方法\",\"说明\",\"public staitc ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"得到线程池对象\",\"ScheduledExecutorService的方法\",\"说明\",\"public ScheduledFuture<?> scheduledAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)\",\"周期调度方法\"]},\"956\":{\"h\":\"ScheduledExecutorService的优点\",\"t\":[\"基于线程池，某个任务的执行情况下不会影响其他定时任务的执行\",\"package com.timer; import java.util.Date; import java.util.TimerTask; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class TimerDemo2 { public static void main(String[] args) { //1、创建ScheduledExecutorService线程池，做定时器 ScheduledExecutorService pool = Executors.newScheduledThreadPool(3); //2、开启定时器任务 pool.scheduleAtFixedRate(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行输出：AAA\\\"+\\\"====>\\\"+new Date()); try { Thread.sleep(10000); } catch (InterruptedException e) { e.printStackTrace(); } } },0,2, TimeUnit.SECONDS); //2、开启定时器任务 pool.scheduleAtFixedRate(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行输出：BBB\\\"+\\\"====>\\\"+new Date()); } },0,2, TimeUnit.SECONDS); } } \",\"image-20220811153337574\"]},\"957\":{\"h\":\"线程的并发与并行\"},\"958\":{\"h\":\"并发与并行\",\"t\":[\"正在运行的程序（软件）就是一个独立的进程，线程是属于进程的，多个线程其实是并发与并行同时进行的\"]},\"959\":{\"h\":\"并发的理解\",\"t\":[\"CPU同时处理线程的数量有限\",\"CPU会轮询为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发\"]},\"960\":{\"h\":\"并行的理解\",\"t\":[\"在同一时刻上，同时有多个线程在被CPU处理并执行\",\"image-20220811153946533\"]},\"961\":{\"h\":\"线程的生命周期\"},\"962\":{\"h\":\"状态\",\"t\":[\"线程的状态：也就是线程从生到死的过程，以及中间经历的各种状态及状态转换\",\"理解线程的状态有利于提升并发编程的理解能力\"]},\"963\":{\"h\":\"Java线程的状态\",\"t\":[\"Java总共定义了6种状态\",\"6种状态都定义在Thread类的内部枚举类中\",\"public enum State { NEW,//新建状态 RUNNABLE,//可运行状态 BLOCKED,//阻塞状态（锁被占用） WAITING,//无限等待状态 TIMED_WAITING,//计时等待 TERMINATED;//死亡状态 } \",\"image-20220811155157442\",\"image-20220811155235160\",\"image-20220811155328547\"]},\"964\":{\"h\":\"文件操作的奥秘\"},\"965\":{\"h\":\"学习思路\",\"t\":[\"先要定位文件 \",\"File类可以定位文件：进行删除、获取文本本身信息等操作\",\"但是不能读写文件\",\"读写文件数据 \",\"IO流技术可以对硬盘中的文件进行读写\",\"总体学习思路 \",\"先学会使用File类定位文件以及操作文件本身\",\"然后学习IO流读写文件数据\",\"File类在包java.io.File下、代表操作系统的文件对象（文件、文件夹）\",\"File类提供了诸如：定位文件，获取文件本身的信息、删除文件、创建文件（文件夹）等功能。\",\"方法\",\"说明\",\"public File (String pathname)\",\"根据文件路径创建文件对象\",\"public File (String parent,String child)\",\"从父路径名 字符串和 子路径 字符串 创建对象\",\"public File (File parent,String child)\",\"根据父路径对应的文件对象和子路径名 字符串创建文件对象\",\"package com.memg; import java.io.File; /** * 学会创建File对象，定位操作系统的文件对象 */ public class FileDemo1 { public static void main(String[] args) { //创建File对象 File f = new File(\\\"/Users/red/Pictures/2022.03.01.10.14.jpg\\\"); long length = f.length(); System.out.println(length); System.out.println(f.getName()); //file创建对象，支持绝对路径，支持相对路径 //相对路径：一般是定位我们模块中的文件 File f2 = new File(\\\"src/data.txt\\\"); System.out.println(f2.length()); //判断路径是否存在 File f3 = new File(\\\"/Users/red/Downloads\\\"); System.out.println(f3.isDirectory());//判断文件夹是否存在 System.out.println(f3.exists());//判断路径是否存在 } } \"]},\"966\":{\"h\":\"判断文件类型、获取文件信息\",\"t\":[\"方法\",\"说明\",\"public boolean isDirectory()\",\"测试此抽象路径表示的是File是否问文件夹\",\"public boolean isFile()\",\"测试此抽象路径表示的是File是否问文件\",\"public boolean exists()\",\"测试此抽象路径表示的是File是否存在\",\"public String getAbsolutePath()\",\"返回此抽象路径名的绝对路径名字符串\",\"public String getPath()\",\"将此抽象路径名装换为路径名字符串\",\"public String getName()\",\"返回由此抽象路径名表示的文件或文件夹名称\",\"public long lastModified()\",\"返回文件最后修改的时间毫秒值\",\"package com.memg; import java.io.File; import java.text.SimpleDateFormat; public class FileDemo2 { public static void main(String[] args) { //1、绝对路径创建一个文件对象 File file = new File(\\\"src/data.txt\\\"); //2、获取它的绝对路径 System.out.println(file.getAbsolutePath()); //3、获取文件定义的时候使用的路径 System.out.println(file.getPath()); //4、获取文件名称，带后缀 System.out.println(file.getName()); //5、获取文件大小：字节个数 System.out.println(file.length()); //6、获取文件最后修改时间；时间毫秒值 long time = file.lastModified(); System.out.println(\\\"最后修改时间：\\\"+new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\").format(time));//格式化时间 //7、判断文件是文件还是文件夹 System.out.println(file.isFile()); System.out.println(file.isDirectory()); } } \"]},\"967\":{\"h\":\"创建文件、删除文件功能\"},\"968\":{\"h\":\"File创建文件的功能\",\"t\":[\"方法\",\"说明\",\"public boolean createNewFile()\",\"创建一个新的空的文件夹\",\"public boolean mkdir()\",\"只能创建一级文件夹\",\"public boolean mkdirs()\",\"可以创建多级文件夹\"]},\"969\":{\"h\":\"File类删除文件夹的功能\",\"t\":[\"方法\",\"说明\",\"public boolean delete()\",\"删除由此抽象路径名表示的文件或空文件夹\",\"delete方法直接删除不走回收站；如果删除的是一个文件，且文件没有被占用则直接被删除\",\"delete方法默认只能删除空文件夹\",\"package com.memg; import java.io.File; import java.io.IOException; /** * 学会创建File对象，定位操作系统的文件对象 */ public class FileDemo3 { public static void main(String[] args) throws IOException { //创建File对象 File f = new File(\\\"src/data.txt\\\"); //创建文件 System.out.println(f.createNewFile());//已存在文件，返回false // File f2 = new File(\\\"src/data2.txt\\\"); System.out.println(f2.createNewFile());//创建文件几乎不用，因为后面文件都是自动创建的，IO流写文件自动创建 //mkdir 创建一级目录 File file = new File(\\\"/Users/humeng/aaa\\\"); //System.out.println(file.mkdir()); //mkdirs创建多级目录 //File file1 = new File(\\\"/Users/humeng/aaa/bbb/ccc\\\"); //System.out.println(file1.mkdirs()); //删除,只能删除空文件夹或文件 System.out.println(\\\"--------\\\"); System.out.println(f2.delete()); System.out.println(file.delete()); File f3 = new File(\\\"/Users/humeng/aaa\\\"); System.out.println(f3.delete()); } } \"]},\"970\":{\"h\":\"遍历文件夹\",\"t\":[\"方法\",\"说明\",\"public String[] list()\",\"获取当前目录下的所有的”一级文件夹名称“到一个字符串数组中去返回\",\"public File[] listFile() 常用\",\"获取当前目录下的所有的”一级文件夹对象“到一个文件对象数组中去返回（重点）\"]},\"971\":{\"h\":\"注意事项\",\"t\":[\"当调用者不存在时，返回null\",\"当调用者是一个文件时，返回null\",\"当调用者是一个空文件夹时，返回一个长度为0的数组\",\"当调用者是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回\",\"当调用者是一个有隐藏文件的文件夹时，将里面的所有文件和文件夹的路径放在File数组中返回，包含隐藏内容\",\"当调用者是一个需要权限才能进入的文件夹时，返回null\",\"package com.memg; import java.io.File; public class FileDemo4 { public static void main(String[] args) { File file = new File(\\\"/Users/humeng/Pictures\\\"); String[] names = file.list(); for (String name : names) { System.out.println(name); } File[] files = file.listFiles(); for (File file1 : files) { System.out.println(file1.getAbsolutePath()); // file1.delete();会删除照片下的一级文件对象的，不要打开！！ } } } \"]},\"972\":{\"h\":\"递归的形式和特点\",\"t\":[\"什么是方法递归？\",\"方法直接调用自己或者简介调用自己的形式成为方法递归（recursion）\",\"递归作为一种算法在程序设计语言中广泛应用\"]},\"973\":{\"h\":\"递归的形式\",\"t\":[\"直接递归：方法自己调用自己\",\"简介递归：方法调用其他方法，其他方法又回调方法自己\"]},\"974\":{\"h\":\"方法递归存在的问题\",\"t\":[\"递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出现象\",\"package com.recursion; public class RecursionDemo1 { public static void main(String[] args) { test(); } public static void test(){ System.out.println(\\\"=========test被执行========\\\"); test();//方法递归 直接递归形式 } } \",\"package com.recursion; public class RecursionDemo1 { public static void main(String[] args) { test2(); } public static void test2(){ System.out.println(\\\"=========test2被执行========\\\"); test3();//方法递归 间接递归形式 } public static void test3(){ System.out.println(\\\"=========test3被执行========\\\"); test2();//方法递归 间接递归形式 } } \"]},\"975\":{\"h\":\"递归的算法流程、核心要素\"},\"976\":{\"h\":\"案例：计算1 - n的阶乘\",\"t\":[\"package com.recursion; /** * 递归算法 */ public class Demo2 { public static void main(String[] args) { System.out.println(f(5)); } public static int f(int n){ if (n == 1){ return 1; }else { return f(n-1) * n; } } } \"]},\"977\":{\"h\":\"递归算法三要素大体可以总结为：\",\"t\":[\"递归的公式：f(n) = f(n-1) * n;\",\"递归的终点：f(1);\",\"递归的方向必须走向终结点\"]},\"978\":{\"h\":\"案例：计算1-n的和\",\"t\":[\"f(n) = 1+2+3+4+5+...+(n-1)+n;\",\"那么这个公式就等价于：f(n)=f(n-1)+n;\",\"终结点：f(1) = 1;\",\"package com.recursion; public class Demo3 { public static void main(String[] args) { System.out.println(f(100)); } public static int f(int n){ if (n == 1){ return 1; }else { return f(n-1) + n; } } } \"]},\"979\":{\"h\":\"案例：猴子吃桃问题（经典问题）\",\"t\":[\"package com.recursion; /** * 公式： * 第x天的桃子吃掉二分之一再吃掉一个 = 下一天的桃子 * f(x) - f(x)/2 - 1 = f(x+1) * 2f(x) - f(x) -2 = 2f(x+1) * f(x) = 2f(x+1) + 2 * * f(1) = ? * 终结点：f(10) = 1; * */ public class Demo4 { public static void main(String[] args) { System.out.println(f(1)); } public static int f(int x){ if (x == 10){ return 1; }else { return 2*f(x+1)+2; } } } \"]},\"980\":{\"h\":\"非规律化递归案例-文件搜索\"},\"981\":{\"h\":\"案例：文件搜索\",\"t\":[\"先定位出的应该是一级文件对象\",\"遍历全部一级文件对象，判断是否是文件\",\"如果是文件，判断是否是自己想要的\",\"如果是文件夹，需要继续递归进去重复上述过程\",\"package com.recursion; import java.io.File; /** * 去humeng中搜索\\\"Java入门.md\\\"文件 */ public class Demo5 { public static void main(String[] args) { File file = new File(\\\"/Users/humeng\\\"); searchFile(file,\\\"Java入门.md\\\"); } /** * 搜索某个目录下的全部文件，找到我们想要的文件 * @param dir 被搜索的原目录 * @param fileName 被搜索的文件名称 */ public static void searchFile(File dir,String fileName){ //3、判断dir是否是目录 if (dir != null && dir.isDirectory()){ //4、提取当前目录下的一级文件对象 File[] files = dir.listFiles(); //5、判断是否存在一级文件对象，存在才可以遍历 if (files != null && files.length > 0){ //6、遍历一级文件夹 for (File file : files) { //7、如果是文件 if (file.isFile()){ //8、判断文件名是否一样 if (file.getName().contains(fileName)){ //9、找到文件 System.out.println(\\\"查找到了\\\"+file.getAbsolutePath()); } }else { //是文件夹，需要继续递归寻找 searchFile(file,fileName); } } } } } } \"]},\"982\":{\"h\":\"常见字符集\"},\"983\":{\"h\":\"字符集基础知识\",\"t\":[\"计算机底层不可以直接存储字符的，计算机中底层只能存储二进制（0、1）\",\"二进制是可以转换成十进制的\",\"结论：计算机底层可以表示十进制编号，计算机可以给人类字符进行编号存储，这套编号规则就是字符集\"]},\"984\":{\"h\":\"ASCII字符集\",\"t\":[\"ASCII：包括了数字、英文、符号\",\"ASCII使用1个字节存储一个字符，一个字节是8位（2的8次方），总共可以表示256个字符信息，对于英文，数字来说是够用的。\"]},\"985\":{\"h\":\"GBK：\",\"t\":[\"window系统默认的码表。兼容ASCII码表，也包含了几万个汉字，并支持繁体汉字以及部分日韩文字。\",\"注意：GBK是中国的码表，一个中文以两个字节（16位，2的16次方）的形式存储。但不包含世界上所有国家的文字。\"]},\"986\":{\"h\":\"Unicode码表\",\"t\":[\"Unicode是计算机科学领域里的一项业界字符编码标准\",\"容纳世界上大多数国家的所有常见文字和符号\",\"Unicode会先通过UTF-8，UTF-16，以及UTF-32的编码成二进制后再存储到计算机，其中最常见的是UTF-8\",\"注意：\",\"Unicode是万国码，以UTF-8编码后一个中文一般以三个字节的形式存储\",\"UTF-8也要兼容ASCII编码表\",\"技术人员都应该使用UTF-8的字符集编码\",\"编码前和编码后的字符集需要一致，否则会出现中文乱码\"]},\"987\":{\"h\":\"总结\",\"t\":[\"英文和数字等在任何国家的字符集中都占1个字节\",\"GBK字符中一个中文字符占2个字节\",\"UTF-8编码中一个中文占3个字节\",\"编码前和编码后的字符集必须一致，否则乱码\",\"英文和数组在任何国家的编码中都不会乱码\"]},\"988\":{\"h\":\"字符集的编码、解码\",\"t\":[\"package com.recursion; import java.util.Arrays; public class Demo6 { public static void main(String[] args) throws Exception { String name = \\\"小胡\\\"; byte[] bytes = name.getBytes();//以当前代码的默认字符集进行编码 System.out.println(Arrays.toString(bytes)); //解码 String s = new String(bytes); System.out.println(s); } } \"]},\"989\":{\"h\":\"IO流概述\",\"t\":[\"I表示input，是数据从硬盘文件读入到内存的过程，称之为输入，负责读\",\"O表示output，是内存程序的数据从内存写出到硬盘文件的过程，称之输出，负责写\"]},\"990\":{\"h\":\"IO流的分类\",\"t\":[\"按照流的方向分：IO流分为输入流和输出流\",\"按照流中的数据最小单位分：IO流分为字节流（音视频）和字符流（字符文件）\"]},\"991\":{\"h\":\"总结流的四大类\",\"t\":[\"字节输入流\",\"字节输出流\",\"字符输入流\",\"字符输出流\",\"image-20220810150205017\",\"image-20220810150254975\"]},\"992\":{\"h\":\"字节流的使用\"},\"993\":{\"h\":\"文件字节输入流\",\"t\":[\"image-20220810150344088\"]},\"994\":{\"h\":\"每次读取一个字节\",\"t\":[\"作用：以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去\",\"构造器\",\"说明\",\"public FileInputStream(File file)\",\"创建字节输入流管道与源文件对象接通\",\"public FileInputStream(String pathname)\",\"创建字节输入流管道与源文件路径接通\",\"方法名称\",\"说明\",\"public int read()\",\"每次读取一个字节返回，如果字节已经没有可读的返回-1\",\"public int read(byte[] buffer)\",\"每次读取一个字节数组返回，如果字节已经没有可读的返回-1\",\"package com.io; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStream; public class Demo1 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流 管道 与源文件接通 InputStream fileInputStream = new FileInputStream(\\\"src/data.txt\\\"); //2、读取一个字节返回（每次读一滴水） // int read = fileInputStream.read();//读取一个字节，int是4个字节，所以读取中文也可以（中文UTF-8占3个字节） // System.out.println((char) read);//a // // int read1 = fileInputStream.read(); // System.out.println((char) read1);//b // // int read2 = fileInputStream.read();//c // System.out.println((char) read2); // // int read3 = fileInputStream.read();//读取完毕返回：-1 // System.out.println((char) read3); //3、使用循环读 //定义一个变量，每次读取一个字节,但是中文是三个字节，所以永远无法避免中文乱码问题 // int b; // while (( b = fileInputStream.read() ) != -1){ // System.out.print((char) b); // } } } \"]},\"995\":{\"h\":\"每次读取一个字节数组\",\"t\":[\"作用：以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去\",\"package com.io; import java.io.FileInputStream; import java.io.InputStream; import java.util.Arrays; /** * 使用文件字节输入流每次读取一个字节数组数据 */ public class Demo2 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流管道与源文件接通 InputStream fileInputStream = new FileInputStream(\\\"src/data.txt\\\"); //2、定义一个字节数组(桶），读取数据，注意：字节数据都是装在buffer桶中的！！！！！！！！！！ // byte[] buffer = new byte[3];//3B(三个字节的桶）buffer:[0,0,0] // // int read = fileInputStream.read(buffer);// buffer:[97, 98, 99] // System.out.println(\\\"读了几个字节\\\"+read);// read:3 // String s = new String(buffer);// 对buffer桶进行解码 // System.out.println(s);// buffer:[97, 98, 99] ——>[a,b,c] // // int read1 = fileInputStream.read(buffer);// buffer:[97, 98, 99] // System.out.println(\\\"读了几个字节\\\"+read1);// read:3 // String s1 = new String(buffer);// 对buffer桶进行解码 // System.out.println(s1);// buffer:[97, 98, 99] ——>[a,b,c] // //// int read2 = fileInputStream.read(buffer);// buffer:[99, 100, 99] //// System.out.println(\\\"读了几个字节\\\"+ read2);// read:3 //// String s2 = new String(buffer);// 对buffer桶进行解码 //// System.out.println(s2);// buffer:[99, 100, 99] ——>[c,d,c]:为什么最后只有两滴水，却还是三滴水？ //// // 因为是前面的桶中剩余的水是[a,b,c], //// //而这桶水只有两滴水[c,d],但是上一桶水最后一个位置还有一滴水c,所以[c,d,c] // // int read2 = fileInputStream.read(buffer);// buffer:[99, 100, 99] // System.out.println(\\\"读了几个字节\\\"+ read2);// read:3 // String s2 = new String(buffer,0,read2);// 对buffer桶进行解码,从0(桶的底部开始),到读了几个字节read2 // System.out.println(s2);// buffer:[99, 100] ——>[c,d] // // // int read3 = fileInputStream.read(buffer); // System.out.println(\\\"读取完毕\\\"+read3); //3、使用循环 /** * 注意：依然无法避免乱码 * 文本内容：abc abc cd * 定义一个只能装3滴水的桶 * 定义len记录每次读取的字节数 * 使用while循环：每次读取的字节数不等于-1（也就是没有读取完）就进入while循环体： * 使用String的一个解码构造器：new String(buffer,0,len)； * 这个buffer是桶中的字节数据，0是从第0滴水开始，len是到第几滴水结束（有几滴水就读几滴水，不要读多，否则会出现上一桶水的残留） */ byte[] buffer = new byte[3]; int len;//记录每次读取的字节数 while ( ( len = fileInputStream.read(buffer) ) != -1){ //读多少倒多少！！！这个String的API非常重要！！ System.out.print(new String(buffer,0,len)); } } } \"]},\"996\":{\"h\":\"一次读取完全部字节（避免乱码）\",\"t\":[\"定义一个与文件大小一样的字节数组，一次性读取完文件的全部字节\",\"如果文件过大会引起内存溢出（例如一个16GB的内存去读一个100GB的文件，就会造成内存溢出）\",\"package com.io; import java.io.File; import java.io.FileInputStream; import java.io.InputStream; /** * 使用文件字节输入流一次读取字节数组数据 */ public class Demo3 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流管道与源文件接通 File file = new File(\\\"src/data1.txt\\\"); InputStream fileInputStream = new FileInputStream(file); //2、定义一个字节数组，与文件大小一样大 //自己实现 // long length = file.length();//获取文件大小 // byte[] buffer = new byte[(int) length];//定义一个和文件大小相同的桶buffer // int len = fileInputStream.read(buffer);//读取桶这么大小的文件返回字节的长度 // System.out.println(\\\"读取了多少个字节\\\"+len);//字节长度 // System.out.println(\\\"文件大小\\\"+length);//文件大小 = 字节长度 // String s = new String(buffer);//字节解码 // System.out.println(s); //JDK9 提供的API byte[] bytes = fileInputStream.readAllBytes(); System.out.println(new String(bytes)); } } \"]},\"997\":{\"h\":\"文件字节输出流\",\"t\":[\"image-20220810154117721\",\"package com.io; import java.io.FileOutputStream; import java.io.OutputStream; import java.nio.charset.Charset; import java.nio.charset.StandardCharsets; public class Demo4 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输出流管道与目标文件接通 // OutputStream outputStream = new FileOutputStream(\\\"src/data2.txt\\\");//先清空之前的数据，写入新数据 OutputStream outputStream = new FileOutputStream(\\\"src/data2.txt\\\",true);//true:追加数据 //2、写入数据 outputStream.write('a'); outputStream.write(98); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); // outputStream.write('胡'); //写数据一定要刷新数据！！ //写一个字节数组出去 byte[] buffer = {98,'a',99}; outputStream.write(buffer); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); //写中文 byte[] buffer2 = \\\"我是中国人\\\".getBytes(); outputStream.write(buffer2); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); //写一个字节数组的一部分 byte[] buffer3 = {98,'a',99,100}; outputStream.write(buffer3,0,3); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); // outputStream.flush(); outputStream.close();//释放资源，包含了刷新，关闭后流就不能使用了 } } \"]},\"998\":{\"h\":\"文件拷贝\",\"t\":[\"image-20220810155021245\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class CopyDemo5 { public static void main(String[] args) { try { //1、创建字节输入流管道与原图片接通 InputStream fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 OutputStream fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); //关闭流 fileOutputStream.close(); fileInputStream.close(); } catch (Exception e) { e.printStackTrace(); } } } \",\"image-20220810155059730\"]},\"999\":{\"h\":\"资源释放的方式\"},\"1000\":{\"h\":\"try-catch-finally\",\"t\":[\"finally :在异常处理的时候提供finally块来执行所有清除操作，比如说IO流中的资源释放\",\"特点：被finally控制的语句最终一定会被执行，除非JVM退出\",\"异常处理标准格式：try...catch...finally\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class Demo6 { public static void main(String[] args) { InputStream fileInputStream = null; OutputStream fileOutputStream = null; try { //1、创建字节输入流管道与原图片接通 fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); } catch (Exception e) { e.printStackTrace(); }finally { //关闭流 try { if (fileOutputStream != null)fileOutputStream.close();//防止还没有创建流对象的时候就出现异常出现空指针异常 } catch (IOException e) { e.printStackTrace(); } try { if (fileInputStream != null)fileInputStream.close();//防止还没有创建流对象的时候就出现异常出现空指针异常 } catch (IOException e) { e.printStackTrace(); } } } } \"]},\"1001\":{\"h\":\"try-with-resource\",\"t\":[\"资源就是实现了AutoCloseable接口的对象\",\"image-20220810155503910\",\"image-20220810155531840\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class Demo7 { public static void main(String[] args) { try( //这里只能放置资源对象，用完会自动关闭，自动调用资源对象的close方法关闭资源 //1、创建字节输入流管道与原图片接通 InputStream fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 OutputStream fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); ) { //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1002\":{\"h\":\"一次读取一个字符\",\"t\":[\"image-20220810155828636\",\"image-20220810160313348\",\"因为字节流读取中文会出现乱码或者内存溢出\",\"读取中文输入使用字符流更合适，最小单位是按照单个字符读取的\",\"package com.io; import java.io.FileReader; import java.io.Reader; public class ReadDemo1 { public static void main(String[] args) throws Exception { //1、创建一个字符输入流管道与文件接通 Reader fileReader = new FileReader(\\\"src/data2.txt\\\"); //2、读取一个字符返回，如果没有可读的字符返回-1 // int code = fileReader.read(); // System.out.println((char) code); //3、使用循环读取字符 int code; while((code = fileReader.read()) != -1){ System.out.print((char) code); } } } \"]},\"1003\":{\"h\":\"一次读取一个字符数组\",\"t\":[\"package com.io; import java.io.FileReader; import java.io.Reader; public class ReadDemo2 { public static void main(String[] args) throws Exception { //1、创建一个字符输入流管道与文件接通 Reader fileReader = new FileReader(\\\"src/data2.txt\\\"); char[] buffer = new char[1024];//1kb int len; while ((len = fileReader.read(buffer))!=-1){ String s = new String(buffer, 0, len); System.out.print(s); } } } \"]},\"1004\":{\"h\":\"文件字符输入流\",\"t\":[\"image-20220810160819067\",\"package com.io; import java.io.FileWriter; import java.io.Writer; public class WriterDemo { public static void main(String[] args) throws Exception { Writer fileWriter = new FileWriter(\\\"src/data1.txt\\\",true); fileWriter.write(99); fileWriter.write('\\\\n'); fileWriter.write(\\\"小胡\\\"); char[] buffer = \\\"我们的\\\".toCharArray(); fileWriter.write(buffer); fileWriter.write(\\\"abc我是中国人\\\",0,3);//abc fileWriter.close(); } } \",\"image-20220810161002221\"]},\"1005\":{\"h\":\"缓冲流\"},\"1006\":{\"h\":\"缓冲流概述\",\"t\":[\"缓冲流也称为高效流、或者高级流。之前学习的字节流可以称为原始流\",\"作用：缓冲流自带缓冲区、可以提高原始字节流、字符流读写数据的性能\",\"image-20220810161245496\",\"image-20220810161337830\"]},\"1007\":{\"h\":\"字节缓冲流\",\"t\":[\"image-20220810161510193\",\"字节缓冲输入流：BufferedInputStream,提高字节输入流读取数据的性能，读写功能上并无变化\",\"字节缓冲输出流：BufferedOutputStream，提高字节输出流写数据的性能，读写功能上并无变化\",\"构造器\",\"说明\",\"public BufferedInputStream (InputStream is)\",\"可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能\",\"public BufferedOutputStream(OutputStrean os)\",\"可以把低级的字节输出流包装成一个高级的缓冲字节输出流管道，从而提高字节输出流写数据的性能\",\"package com.io2; import java.io.*; public class Demo1 { public static void main(String[] args) { try ( //创建字节输入流管道 InputStream is = new FileInputStream(\\\"src/data2.txt\\\"); //把原始的字节输入流管道包装成高级的缓冲字节输入流 InputStream bis = new BufferedInputStream(is); //创建字节输出流管道 OutputStream os = new FileOutputStream(\\\"src/data3.txt\\\"); OutputStream bos = new BufferedOutputStream(os) ) { byte[] buffer = new byte[1024]; int len; while ((len = bis.read(buffer)) != -1) { bos.write(buffer, 0, len); } System.out.println(\\\"完成了复制\\\"); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1008\":{\"h\":\"字符缓冲流\",\"t\":[\"输入流\",\"image-20220810162655785\",\"package com.io2; import java.io.BufferedReader; import java.io.FileReader; import java.io.Reader; /** * 经典代码：按照行读 */ public class BufferedReaderDemo1 { public static void main(String[] args) { try ( Reader fr = new FileReader(\\\"src/data2.txt\\\"); //把低级的字符输入流包装成高级的字符缓冲输入流 BufferedReader br = new BufferedReader(fr); ) { // char[] buffer = new char[1024]; // int len; // while ((len = fr.read(buffer)) != -1) { // String s = new String(buffer, 0, len); // System.out.println(s); // } // System.out.println(br.readLine()); String line; while ((line = br.readLine()) != null) { System.out.println(line); } } catch (Exception e) { e.printStackTrace(); } } } \",\"输出流\",\"image-20220810162924092\",\"package com.io2; import java.io.BufferedWriter; import java.io.FileWriter; import java.io.Writer; public class Demo2 { public static void main(String[] args) throws Exception { Writer fw = new FileWriter(\\\"src/data1.txt\\\", true); BufferedWriter bw = new BufferedWriter(fw); bw.write(99); bw.newLine();//换行 bw.write('\\\\n'); bw.write(\\\"小胡\\\"); char[] buffer = \\\"我们的\\\".toCharArray(); bw.write(buffer); bw.newLine();//换行 bw.write(\\\"abc我是中国人\\\", 0, 3);//abc bw.close(); } } \",\"image-20220810164319416\"]},\"1009\":{\"h\":\"对象序列化和反序列化\",\"t\":[\"image-20220810164659455\",\"image-20220810165525879\",\"注意：\",\"对象如果要序列化必须要实现Serializable接口\",\"transient修饰的成员变量不参与序列化，可以防止敏感信息暴露\",\" private static final long serialVersionUID = 1;申请序列化的版本号，序列化的版本号必须和反序列化的版本号必须一致才不会出错\",\"package day05; import java.io.Serializable; /** * 对象如果要序列化必须要实现Serializable接口 */ public class Student implements Serializable { // 申请序列化的版本号 // 序列化的版本号必须和反序列化的版本号必须一致才不会出错 private static final long serialVersionUID = 1; private String name; // transient修饰的成员变量不参与序列化，可以防止敏感信息暴露 private transient Integer age; private Character gender; public Student() { } public Student(String name, Integer age, Character gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public Character getGender() { return gender; } public void setGender(Character gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package day05; import java.io.FileOutputStream; import java.io.ObjectOutputStream; /** * 对象序列化 */ public class Demo4 { public static void main(String[] args) throws Exception { // 创建对象 Student student = new Student(\\\"小张\\\", 20, '男'); // 创建普通字节输出流 FileOutputStream os = new FileOutputStream(\\\"src/obj.txt\\\"); // 对象序列化:创建对象字节输出流 ObjectOutputStream oos = new ObjectOutputStream(os); oos.writeObject(student); oos.close(); os.close(); } } \",\"最终输出的对象序列化文件(并不是乱码而是java的一种存储机制)\",\"���\\u0005sr� day05.Student�\\u0016��c>;\\u0002�\\u0003L�\\u0003aget�\\u0013Ljava/lang/Integer;L�\\u0006gendert�\\u0015Ljava/lang/Character;L�\\u0004namet�\\u0012Ljava/lang/String;xpsr�\\u0011java.lang.Integer\\u0012⠤���8\\u0002�\\u0001I�\\u0005valuexr�\\u0010java.lang.Number���\\u001d ���\\u0002��xp���\\u0014sr�\\u0013java.lang.Character4�G�k\\u001a&x\\u0002�\\u0001C�\\u0005valuexpu7t�\\u0006小张 \",\"image-20220810165721366\",\"image-20220810170015030\",\"package day05; import java.io.FileInputStream; import java.io.ObjectInputStream; /** * 对象的反序列化 */ public class Demo5 { public static void main(String[] args) throws Exception { ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\\\"src/obj.txt\\\")); Student student = (Student) ois.readObject(); System.out.println(student); } } \",\"Student{name='小张', age=null, gender=男} \"]},\"1010\":{\"h\":\"打印流\",\"t\":[\"作用：打印流可以实现方便、高效的打印数据到文件中去。打印流一般是指：PrintStream,和PrintWriter两个类\",\"可以实现打印什么就是什么数据，例如打印整数97写出去就是97，打印boolean的true，写出去就是true\"]},\"1011\":{\"h\":\"PrintStream、PrintWriter\",\"t\":[\"image-20220810171121584\",\"构造器\",\"说明\",\"public PrintStream(OutputStream os)\",\"打印流直接通向字节输出流管道\",\"public PrintStream(File f)\",\"打印流直接通向文件对象\",\"public PrintStream(String filepath)\",\"打印流直接通向文件路径\",\"方法\",\"说明\",\"public void print(Xxx xx)\",\"打印任意类型的数据出去\",\"package com.printStream; import java.io.FileOutputStream; import java.io.PrintStream; public class PrintDemo1 { public static void main(String[] args) throws Exception { //1、创建一个打印流对象 PrintStream ps = new PrintStream(new FileOutputStream(\\\"src/data4.txt\\\", true)); // PrintWriter ps = new PrintWriter(\\\"src/data4.txt\\\");//打印功能与PrintStream的使用没有区别 //2、打印 ps.println(97); ps.println('a'); ps.println(true); ps.println(\\\"xiaohu\\\"); ps.println(\\\"我是打印流输出的，我是啥就打印啥\\\"); ps.close(); } } \",\"image-20220810171331840\",\"image-20220810171606026\"]},\"1012\":{\"h\":\"Properties\",\"t\":[\"image-20220810173917264\",\"image-20220810174009175\",\"package day05; import java.io.FileWriter; import java.util.Properties; public class Demo6 { public static void main(String[] args) throws Exception { Properties properties = new Properties(); properties.setProperty(\\\"admin\\\", \\\"root\\\"); properties.setProperty(\\\"password\\\", \\\"123456\\\"); // System.out.println(properties); /** * 参数一：保存管道 * 参数二：保存心得注释 */ properties.store(new FileWriter(\\\"src/application.properties\\\"), \\\"this is user\\\"); } } \",\"package day05; import java.io.FileReader; import java.util.Properties; public class Demo7 { public static void main(String[] args) throws Exception { Properties properties = new Properties(); System.out.println(properties); properties.load(new FileReader(\\\"src/application.properties\\\")); System.out.println(properties); String admin = properties.getProperty(\\\"admin\\\"); System.out.println(admin); } } \"]},\"1013\":{\"h\":\"commons-io\",\"t\":[\"commons-io是Apache开源基金组织提供的一组有关IO操作的类库，可以提高IO功能开发效率\",\"官网：https://commons.apache.org/proper/commons-io/\",\"commons-io工具包提供了很多io操作的类。有两个主要的类FileUtils、IOUtils\"]},\"1014\":{\"h\":\"FileUtils主要方法如下：\",\"t\":[\"方法\",\"说明\",\"String readFileToString(File file,String encoding)\",\"读取文件中的数据，返回字符串\",\"void copyFile(File srcFile,File destFile)\",\"复制文件\",\"void copyDirectoryToDirectory(File srcDir,File destDir)\",\"复制文件夹\",\"package com.io3; import org.apache.commons.io.FileUtils; import org.apache.commons.io.IOUtils; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; public class IODemo1 { public static void main(String[] args) throws Exception { //完成文件拷贝 IOUtils.copy(new FileInputStream(\\\"/Users/humeng/Pictures/IMG_8484(20220301-105418).JPG\\\"), new FileOutputStream(\\\"/Users/humeng/Pictures/new2.JPG\\\")); //完成文件夹复制到某个文件夹下 FileUtils.copyDirectoryToDirectory(new File(\\\"/Users/humeng/Gitee\\\"), new File(\\\"/Users/humeng/Gitee2\\\")); //删除文件夹 FileUtils.deleteDirectory(new File(\\\"/Users/humeng/Gitee2\\\")); } } \"]},\"1015\":{\"c\":[\"Java文件\"]},\"1016\":{\"c\":[\"文件操作\"]},\"1017\":{\"h\":\"Java8特性的科技\"},\"1018\":{\"h\":\"Lambda概述\",\"t\":[\"Lambda表达式是JDK8开始后的一种新语法形式。\",\"作用：简化 匿名内部类（面向对象中的内容）的代码写法\",\"Lambda表达式的简化格式：\",\"(匿名内部类被重写方法的形参列表) ->{\",\"被重写方法的方法体代码。\",\"}\",\"注：->是语法形式，无实际含义。\",\"**注意：**Lambda表达式只能简化函数式接口的匿名内部类的写法形式。\",\"什么是函数式接口？\",\"首先必须是接口、其次接口中有且仅有一个抽象方法的形式；\",\"通常我们会在接口上加一个@FunctionalInterface注解，标记该接口必须满足函数式接口。\",\"image-20220809154042123\",\"package com.lambda; public class LambdaDemo1 { public static void main(String[] args) { //目标：学会使用Lambda表达式简化匿名内部类 //Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式 //普通的匿名内部类 Swimming s1 = new Swimming() { @Override public void swim() { System.out.println(\\\"老师游的很快\\\"); } }; go(s1); //简化（因为这个Swimming接口中只有一个抽象方法，所以不会产生二义性） Swimming s2 = ()->{ System.out.println(\\\"老师游泳很很很块\\\"); }; go(s2); //再进一步简化 go(()->{ System.out.println(\\\"老师游泳游得超过了光速！！\\\"); }); } public static void go(Swimming s){ System.out.println(\\\"开始。。。\\\"); s.swim(); System.out.println(\\\"结束。。。\\\"); } } @FunctionalInterface//一旦加上这个注解，这个接口就必须是函数式接口，里面只能有一个抽象方法。 interface Swimming{ void swim(); } \"]},\"1019\":{\"h\":\"总结：\",\"t\":[\"Lambda表达式的基本作用\",\"简化函数式接口的匿名内部类的写法\",\"Lambda表达式有什么使用前提？\",\"必须是接口的匿名内部类，接口中只能有一个抽象方法\",\"Lambda的好处\",\"Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可传递的代码，它可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。\",\"Lambda表达式省略写法（在Lambda基础上继续简化）\",\"参数类型可以省略不写\",\"如果只有一个参数，参数类型可以省略，同时（）也可以省略\",\"如果Lambda方法体重只有一行代码，可以省略大括号不写，同时也要省略分号\",\"如果Lambda方法体重只有一行代码，可以省略大括号不写，如果这行代码是return语句，必须省略return不写，同时也要省略；不写\",\"package com.lambda; import java.util.Arrays; import java.util.Comparator; public class LambdaDemo2 { public static void main(String[] args) { Integer[] ages1 = {34,12,42,23}; // Arrays.sort(ages1, new Comparator<Integer>() { // @Override // public int compare(Integer o1, Integer o2) { // return o2-o1;//降序：o2 - o1; 升序：o1 - o2; // } // }); //简化 // Arrays.sort(ages1,(Integer o1,Integer o2) -> { // return o2 - o1; // }); // 再简化！！ // Arrays.sort(ages1,((o1, o2) -> { // return o2 - o1; // })); //再再再简化！！！ Arrays.sort(ages1,(o1, o2) -> o2 - o1); System.out.println(Arrays.toString(ages1)); } } \"]},\"1020\":{\"h\":\"Stream流\",\"t\":[\"什么是Stream流？\",\"在Java 8 中，得益于Lambda表达式所带来的函数式编程，引入了一个全新的Stream流的概念\",\"目的：用于简化集合和数组操作的API\",\"image-20220810133948555\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.Collections; import java.util.List; /** * 初步体验Stream流的快捷 */ public class StreamTest { public static void main(String[] args) { List<String> name = new ArrayList<>(); Collections.addAll(name,\\\"刘备\\\",\\\"张飞\\\",\\\"关羽\\\",\\\"张三\\\",\\\"张无忌\\\"); System.out.println(name); //从name集合中取出姓张的放到新的集合 // List<String> zhangList = new ArrayList<>(); // for (String s : name) { // if (s.startsWith(\\\"张\\\")){ // zhangList.add(s); // } // } // System.out.println(zhangList); // // //找名称长度是3的姓名 // List<String> zhangThree = new ArrayList<>(); // for (String s : zhangList) { // if (s.length() == 3){ // zhangThree.add(s); // } // } // System.out.println(zhangThree); //使用Stream实现 /** * 先得到集合的Stream流（类似于传送带），然后经过一层一层的过滤，最终得到的就是我们想要的结果 */ //得到Stream流。过滤不是姓张的元素 。 过滤长度不是3的元素 。forEach遍历流 name.stream().filter(s -> s.startsWith(\\\"张\\\")).filter(s -> s.length() == 3).forEach(s -> System.out.println(s)); } } \"]},\"1021\":{\"h\":\"Stream流的获取\",\"t\":[\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Stream; public class StreamTest2 { public static void main(String[] args) { /**-----------------Collection集合获取流-----------------------*/ Collection<String> list = new ArrayList<>(); Stream<String> s = list.stream();//拿到Collection的Stream流 /**-----------------Map集合获取流-----------------------*/ Map<String,Integer> maps = new HashMap<>(); //键流 Stream<String> keyStream = maps.keySet().stream(); //值流 Stream<Integer> valueStream = maps.values().stream(); //或者键值对 Stream<Map.Entry<String, Integer>> kvStream = maps.entrySet().stream(); /**-----------------数组获取流-----------------------*/ String[] name = {\\\"小王\\\",\\\"小杜\\\",\\\"小李\\\"}; Stream<String> nameStream = Arrays.stream(name); } } \"]},\"1022\":{\"h\":\"Stream常用API\",\"t\":[\"image-20220810134701065\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.List; import java.util.stream.Stream; public class StreamTest3 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); //Stream<T> filter(Predicate<? super T> predicate); // list.stream().filter(new Predicate<String>() { // @Override // public boolean test(String s) { // return s.startsWith(\\\"张\\\"); // } // }); //使用Lambda表达式，我们认为s是list中的每一个元素 //注意过滤的不是filter形参的元素，filter中的形参是要保留的元素，过滤的是不符合形参的元素 list.stream().filter( s-> s.startsWith(\\\"张\\\")).forEach(s -> System.out.println(s)); //只会过滤，而不会改变原本的，list集合中的内容 System.out.println(list); long size = list.stream().filter(s -> s.length() == 3).count(); System.out.println(size); //limit取前几个元素 //扩展，我们认为在Lambda表达式中，我们发现如果入参和后面的方法参数一样的话，我们可以使用方法引用，例如 // s -> System.out.println(s) 可以变成这样 System.out::println 方法引用 list.stream().filter(s -> s.startsWith(\\\"张\\\")).limit(2).forEach(System.out::println); //skip是跳过前几个元素 list.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2).forEach(System.out::println); //Map加工 //给集合元素的前面都加上\\\"黑马的\\\" // list.stream().map(new Function<String, String>() { // @Override // public String apply(String s) { // return \\\"黑马的\\\"+s; // } // }); //简化： s：原材料 -> 加工后的 list.stream().map(s -> \\\"黑马的\\\"+s).forEach(System.out::println); //需求：把所有的名称，都加工为一个学生对象 // list.stream().map(s -> new Student(s)).forEach(student -> System.out.println(student)); list.stream().map(Student::new).forEach(System.out::println);//构造器引用 方法引用 //合并流 Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); Stream<String> s2 = Stream.of(\\\"java1\\\",\\\"java2\\\"); Stream<String> s3 = Stream.concat(s1,s2); s3.forEach(s -> System.out.println(s)); } } \"]},\"1023\":{\"h\":\"Stream流的收集操作\",\"t\":[\"image-20220810135140321\",\"就是把Stream流操作后的结果数据转回到集合或数组中去\",\"Stream流：方便操作集合/数组的手段\",\"集合/数组:才是开发中的目的\",\"流只能被收集一次\",\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; public class StreamTest4 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); List<String> zhangList = s1.collect(Collectors.toList()); System.out.println(zhangList); } } \",\"image-20220810135243897\"]},\"1024\":{\"h\":\"函数式接口定义\",\"t\":[\"函数式接口（Functional Interface）：有且仅有一个抽象方法的接口，但可以有多个非抽象方法的接口\",\"函数式接口，即适用于函数式编程场景的接口，可以被隐式转换为Lambda表达式来表示接口的一个实现；jdk8以前是使用匿名类实现的。\",\"示例：jdk1.8 使用注解@FunctionalInterface注解表示一个函数式接口\",\"@FunctionalInterface public interface IHello { public void sayHello(String name); } \",\"示例: jdk1.8 之前使用匿名内部类方式来调用函数式接口\",\"@Test void test1() { IHello hello = new IHello() { @Override public void sayHello(String name) { System.out.println(\\\"hello \\\" + name); } }; hello.sayHello(\\\"张三\\\"); } \",\"示例: jdk1.8 之后可以使用lambda表达式隐式的实现函数式接口\",\"@Test void test2() { IHello hello = name -> System.out.println(\\\"hello \\\" + name); hello.sayHello(\\\"李四\\\"); } \"]},\"1025\":{\"h\":\"jdk1.8 新增的函数式接口\",\"t\":[\"jdk1.8之前,已有的函数式接口有很多：\",\"java.lang.Runnable java.util.concurrent.Callable java.security.PrivilegedAction java.util.Comparator java.io.FileFilter java.nio.file.PathMatcher java.lang.reflect.InvocationHandler java.beans.PropertyChangeListener java.awt.event.ActionListener javax.swing.event.ChangeListener\",\"jdk1.8之后新增的一个重要的函数接口:\",\"java.util.function\",\"此包下有很多类来支持java的函数式编程, 现在就讲到本篇文章的重点, 其中重要的四个接口Function、Consumer、Predicate、Supplier。\",\"接口\",\"参数\",\"返回值\",\"说明\",\"Supplier<T>\",\"无\",\"T\",\"供给型；无参，返回一个指定泛型的对象\",\"Consumer<T>\",\"T\",\"无\",\"消费型；传入一个指定泛型的参数，无返回值\",\"Predicate<T>\",\"T\",\"Boolean\",\"断言型；判断函数，返回判断结果true/false\",\"Function<T,R>\",\"T\",\"R\",\"方法型；输入一个参数，得到一个结果\"]},\"1026\":{\"h\":\"Supplier：供给型函数式接口\",\"t\":[\"使用场景：提前定义可能返回的一个指定类型结果，等需要调用的时候再获取结果。\",\" @Test void test3(){ // 示例1 int num1 = 100; int num2 = 200; // 提前定义好需要返回的指定类型结果，但不运行 Supplier supplier= () -> num1 + num2; // 调取get()方法获取一个结果 System.out.println(supplier.get()); // 示例2 String str = \\\"abcdefghijklmn\\\"; String s = getValue(()->str.substring(1,5)); System.out.println(s); } // 定义一个方法，返回一个结果，参数使用Supplier，具体返回内容由调用者决定 public static String getValue(Supplier supplier){ return supplier.get(); } \",\"注意：此示例中返回的结果引用的对象num1和num2其实是不能更改的，如果我们在supplier定义后，suppliser.get()调用前将num1或num更改了，则编译会报错！\"]},\"1027\":{\"h\":\"Consumer：消费型函数式接口\",\"t\":[\"使用场景：处理一些结果或数据，不需要返回的消费型，例如打印、发送通知等操作。 方法：\",\"void accept(T t); 给参数T执行指定的操作 default Consumer andThen(Consumer<? super T> after) 给参数T执行指定操作后，再执行after方法\",\"@Test void test4(){ // 传入一个加法并打印结果 modify(10,x->System.out.println(x+20)); // 传入一个减法并打印结果 modify(10,x->System.out.println(x-20)); } // 定义一个方法，第二个参数为一个Consumer public static void modify(int num,Consumer consumer){ // 执行accept()方法，方法的具体实现不关心，调用的时候才关心 consumer.accept(num); } \",\"示例：将一批用户里面的“李四”整理出来。\",\"@Test void test4(){ List lisiList = new ArrayList<>(); // 定义一个消费方法，将李四筛选出来存入lisiList Consumer consumer = x -> { if (x.getName().equals(\\\"李四\\\")){ lisiList.add(x); } }; List list = new ArrayList<>(); list.add(new Person(21,\\\"张三\\\")); list.add(new Person(22,\\\"李四\\\")); list.add(new Person(23,\\\"张三\\\")); list.add(new Person(16,\\\"李四\\\")); list.add(new Person(30,\\\"王五\\\")); list.add(new Person(52,\\\"李四\\\")); // 传入一个消费方法 list.forEach(consumer); // 打印消费方法处理后的lisiList System.out.println(lisiList); } \",\"Consumer接口还有一个方法andThen(Consumer<? super T> after)，表示对给定参数执行定义操作后，再继续执行after定义的操作。\",\"示例：将李四整理出来后将年龄大于25的李四整理出来\",\"@Test void test4(){ List lisiList = new ArrayList<>(); // 定义一个消费方法，将李四筛选出来存入lisiList Consumer consumer = x -> { if (x.getName().equals(\\\"李四\\\")){ lisiList.add(x); } }; // 整理出李四后，继续将年龄大于25的筛选出来 consumer = consumer.andThen(x->{ // removeIf方法里传入了一个Predicate断言接口实例，下面示例中将要讲到 lisiList.removeIf(y->y.getAge()<25); }); List list = new ArrayList<>(); list.add(new Person(21,\\\"张三\\\")); list.add(new Person(22,\\\"李四\\\")); list.add(new Person(23,\\\"张三\\\")); list.add(new Person(16,\\\"李四\\\")); list.add(new Person(30,\\\"王五\\\")); list.add(new Person(52,\\\"李四\\\")); // 传入一个消费方法 list.forEach(consumer); // 打印消费方法处理后的lisiList System.out.println(lisiList); } \"]},\"1028\":{\"h\":\"Predicate：断言型函数式接口\",\"t\":[\"使用场景：对一个数据进行判断，并返回boolean 方法：\",\"boolean test(T t) 判断指定值是否符合条件 Predicate and(Predicate<? super T> other) 与操作 Predicate or(Predicate<? super T> other) 或操作 static Predicate isEqual(Object targetRef) 静态方法，equals判断第一个test与第二个test方法相同\",\"@Test public void test5(){ Predicate predicate = (x)-> x==10; System.out.println(predicate.test(10)); } \",\"在上例中我们有使用到List集合里的一个方法removeIf(Predicate<? super E> filter) 他的方法参数就是一个Predicate，用来判断list值并移除\",\"示例：将list集合里面小于20的数据移除\",\"@Test public void test5(){ List list = new ArrayList<>(); list.add(9); list.add(12); list.add(21); list.add(60); // 使用lambda表达式Predicate，判断list里数是否满足条件，并删除 list.removeIf(x->x<20); System.out.println(list); } \",\"查看list.removeIf()方法源码，我们发现他实现的方式就是遍历集合并对每个集合元素调用Predicate.test()方法，验证结果并移除元素。\",\"Predicate其他方法的使用类似 示例：1.移除集合中大于20的元素。2.然后移除小于50的元素。3.或者移除值等于60的元素。4.前面整个结果取反\",\"@Test public void test5(){ // 1.断言 值大于20 Predicate<Integer> predicate2 = (x)-> x>20; // 2.断言 并且值小于50 predicate2 = predicate2.and(y->y<50); // 3.断言 或者值等于60 predicate2 = predicate2.or(y->y==60); // 4.断言 逻辑取反 predicate2 = predicate2.negate(); List<Integer> list = new ArrayList<>(); list.add(9); list.add(12); list.add(21); list.add(60); // 使用lambda表达式Predicate，判断list里数是否满足条件，并删除 list.removeIf(predicate2); System.out.println(list); } \",\"结果：[21, 60]\",\"示例：使用isEqual() 统计集合中与设定相等的元素个数\",\"@Test public void test5(){ // 示例3 统计集合中相等的对象的个数 Person p = new Person(22, \\\"李四\\\"); // 使用isEqual生成一个断言 Predicate<Person> predicate3 = Predicate.isEqual(p); Long count = Stream.of( new Person(21,\\\"张三\\\"), new Person(22,\\\"李四\\\"), new Person(23,\\\"王五\\\"), new Person(24,\\\"王五\\\"), new Person(22,\\\"李四\\\"), new Person(26,\\\"张三\\\") ).filter(predicate3).count(); System.out.println(count); } \",\"结果：2\"]},\"1029\":{\"h\":\"Function：函数型函数式接口\",\"t\":[\"使用场景：根据一个数据类型得到另一个数据类型。\",\"方法：\",\"R apply(T t); 根据一个数据类型T加工得到一个数据类型R Function<V, R> compose(Function<? super V, ? extends T> before) 组合函数，调用当前function之前调用 Function<T, V> andThen(Function<? super R, ? extends V> after) 组合函数，调用当前function之后调用 static Function<T, T> identity() 静态方法，返回与原函数参数一致的结果。x=y;\",\"apply() 示例：实现一个function将String转换为Integer\",\"@Test public void test6(){ //示例1：定义一个funciton,实现将String转换为Integer Function<String,Integer> function = x->Integer.parseInt(x); Integer a = function.apply(\\\"100\\\"); System.out.println(a.getClass()); // 结果：class java.lang.Integer } \",\"andThen() 示例：使用andThen()方法实现一个函数：y=10x + 10\",\"@Test public void test6(){ //示例3：使用andThen() 实现一个函数 y=10x + 10; Function<Integer,Integer> function2 = x->10*x; function2 = function2.andThen(x->x+10); System.out.println(function2.apply(2)); //结果：30 } \",\"compose() 示例：使用compose() 实现一个函数 y=(10+x)2\",\"@Test public void test6(){ //示例4：使用compose() 实现一个函数 y=(10+x)2; Function<Integer,Integer> function3 = x->x*2; function3 = function3.compose(x->x+10); System.out.println(function3.apply(3)); //结果：26 } \",\"联合使用 示例：使用使用andThen()、compose() 方法实现一个函数 y=(10+x)2+10;\",\"@Test public void test6(){ //示例5：使用使用compose()、andThen()实现一个函数 y=(10+x)2+10; Function<Integer,Integer> function4 = x->x*2; function4 = function4.compose(x->x+10); function4 = function4.andThen(x->x+10); System.out.println(function4.apply(3)); //结果：36 } \"]},\"1030\":{\"h\":\"总结\",\"t\":[\"这些函数式接口用的最多的地方就是方法参数，向参数中传递一个函数，只有函数的定义，函数的具体实现则由调用者来实现。这就是函数式接口的意义所在。\"]},\"1031\":{\"c\":[\"Java8\"]},\"1032\":{\"c\":[\"lambda\",\"stream\"]},\"1033\":{\"h\":\"装饰模式\",\"t\":[\"image-20220813115051888\",\"package day09.DecoratorPattern; /** * 共同父类 */ public abstract class InputStream { public abstract int read(); public abstract int read(byte[] buffer); } \",\"package day09.DecoratorPattern; import java.util.Arrays; /** * 原始类 */ public class FileInputStream extends InputStream { @Override public int read() { System.out.println(\\\"低性能读取了一个字节a\\\"); return 97; } @Override public int read(byte[] buffer) { buffer[0] = 97; buffer[1] = 98; buffer[2] = 99; System.out.println(\\\"低性能的读取了\\\" + Arrays.toString(buffer)); return 3; } } \",\"package day09.DecoratorPattern; /** * 装饰类：继承InputStream拓展原始类的功能 */ public class BufferedInputStream extends InputStream { private InputStream inputStream; public BufferedInputStream(InputStream inputStream) { this.inputStream = inputStream; } @Override public int read() { System.out.println(\\\"提供8kb缓冲区\\\"); return inputStream.read(); } @Override public int read(byte[] buffer) { System.out.println(\\\"提供8kb缓冲区\\\"); return inputStream.read(buffer); } } \",\"package day09.DecoratorPattern; /** * 运行测试类 */ public class Demo { public static void main(String[] args) { FileInputStream fileInputStream = new FileInputStream(); BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream); int read = bufferedInputStream.read(); System.out.println(read); int read1 = bufferedInputStream.read(new byte[3]); System.out.println(read1); } } \",\"image-20220813123046809\"]},\"1034\":{\"h\":\"动态代理\",\"t\":[\"基于接口设计的！\",\"image-20220812163847532\",\"明星类 必须实现接口\",\"package day08.d4_proxy; /** * 明星类 必须实现接口 */ public class Star implements Skill { private String name; public Star() { } public Star(String name) { this.name = name; } @Override public void jump() { System.out.println(this.name + \\\"开始跳舞\\\"); } @Override public void sing() { System.out.println(this.name + \\\"开始唱歌\\\"); } } \",\"接口\",\"package day08.d4_proxy; public interface Skill { void jump(); void sing(); } \",\"代理对象\",\"package day08.d4_proxy; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class StarAgentProxy { /** * 设计一个方法来返回一个明星对象的代理对象 */ public static Skill getProxy(Star star) { //为明星生成代理对象 return (Skill) Proxy.newProxyInstance(star.getClass().getClassLoader(), star.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"收首款\\\"); //让明星(被代理对象)跳舞唱歌 //method 正在调用的方法对象 //args 代表这个方法的参数 Object rs = method.invoke(star, args); System.out.println(\\\"收尾款\\\"); return rs; } }); } } \",\"找代理让明星表演\",\"package day08.d4_proxy; /** * 开发出一个动态代理对象出来，理解动态代理的执行流程 */ public class Test { public static void main(String[] args) { // 1.创建一个类对象，对象的类必须实现接口 Star star = new Star(\\\"明星\\\"); // 为明星对象生成一个代理对象 Skill star2 = StarAgentProxy.getProxy(star); star2.jump();//走代理 star2.sing(); } } \",\"image-20220812172709522\",\"image-20220812172844277\",\"image-20220812173211516\",\"package day08.d5_proxy_demo; public interface UserService { String login(String name, String password); boolean delete(int id); String select(String query); } \",\"package day08.d5_proxy_demo; public class UserServiceImpl implements UserService { @Override public String login(String name, String password) { System.out.println(\\\"登陆中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } if (\\\"admin\\\".equals(name) && \\\"123456\\\".equals(password)) { System.out.println(\\\"账户密码正确\\\"); return \\\"登陆成功\\\"; } return \\\"账户/密码错误，登陆失败\\\"; } @Override public boolean delete(int id) { System.out.println(\\\"正在删除\\\" + id + \\\"中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } if (id > 0 && id < 10) { System.out.println(\\\"删除成功\\\"); return true; } System.out.println(\\\"删除失败\\\"); return false; } @Override public String select(String query) { System.out.println(\\\"正在为你查询\\\" + query + \\\"中...\\\"); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return query; } } \",\"package day08.d5_proxy_demo; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class UserServiceProxy { public static UserService getProxy(UserService userService) { return (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { long before = System.currentTimeMillis(); Object rs = method.invoke(userService, args); long after = System.currentTimeMillis(); long time = after - before; System.out.println(\\\"执行\\\" + method.getName() + \\\"方法花费了\\\" + time + \\\"ms\\\"); return rs; } }); } } \",\"package day08.d5_proxy_demo; public class Test { public static void main(String[] args) { long l = System.currentTimeMillis(); UserServiceImpl userService = new UserServiceImpl(); UserService proxy = UserServiceProxy.getProxy(userService); // 登陆 String loginResult = proxy.login(\\\"admin\\\", \\\"123456\\\"); System.out.println(loginResult); // 删除 boolean deleteResult = proxy.delete(2); System.out.println(deleteResult); // 查询 String selectResult = proxy.select(\\\"张三\\\"); System.out.println(selectResult); long l1 = System.currentTimeMillis(); System.out.println(l1 - l); } } \",\"image-20220812175931701\",\"image-20220812180107353\",\"package day08.d5_proxy_demo; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; public class UserServiceProxy { public static <T> T getProxy(T obj) { return (T) Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { long before = System.currentTimeMillis(); Object rs = method.invoke(obj, args); long after = System.currentTimeMillis(); long time = after - before; System.out.println(\\\"执行\\\" + method.getName() + \\\"方法花费了\\\" + time + \\\"ms\\\"); return rs; } }); } } \"]},\"1035\":{\"h\":\"异常的破解\"},\"1036\":{\"h\":\"什么是异常？\",\"t\":[\"异常是在程序在编译或者运行的过程中可能出现的问题，注意：语法错误不算异常体系\",\"比如：数组索引越界，空指针异常，日期格式化异常，......\",\"异常一旦出现，如果没有提前处理异常，程序就会退出JVM虚拟机而终止\"]},\"1037\":{\"h\":\"异常体系\",\"t\":[\"image-20220810135605293\",\"编译异常：在编译的时候会出现的异常\",\"运行异常：在运行的时候会出现的异常\",\"image-20220810135731947\"]},\"1038\":{\"h\":\"编译时异常的处理形式：\",\"t\":[\"出现异常直接抛出去给调用者，调用者也继续抛出去\",\"出现异常自己捕获处理，不麻烦别人\",\"前两者结合，出现异常直接抛出去给调用者，调用者处理异常\",\"image-20220810140233954\"]},\"1039\":{\"h\":\"处理方式1--throws\",\"t\":[\"throws:用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理\",\"这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将会引起程序的死亡\",\"抛出异常格式：\",\"方法 throws 异常1，异常2，异常3...{ } \",\"规范做法：\",\"方法 throws Exception{ } \"]},\"1040\":{\"h\":\"处理方式2--try...catch...\",\"t\":[\"监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理\",\"这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行\",\"格式：\",\"package com.meng; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStream; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class ExceptionDemo2 { public static void main(String[] args) { System.out.println(\\\"程序开始。。。\\\"); parseTime(\\\"2020-1-1 11:11:11\\\"); System.out.println(\\\"程序结束。。。\\\"); } public static void parseTime(String date){ try { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); Date d = sdf.parse(date); System.out.println(d); InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); } catch (Exception e) { e.printStackTrace(); } // try { // SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); // Date d = sdf.parse(date); // System.out.println(d); // InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); // } catch (ParseException e) { // e.printStackTrace(); // } catch (FileNotFoundException e) { // e.printStackTrace(); // } // try { // SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); // Date d = sdf.parse(date); // System.out.println(d); // } catch (ParseException e) { // e.printStackTrace(); // } // // try { // InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); // } catch (FileNotFoundException e) { // e.printStackTrace(); // } } } \"]},\"1041\":{\"h\":\"处理方式3--前两者结合\",\"t\":[\"方法直接将异常通过throws抛出去给调用者\",\"调用者收到异常后直接捕获处理\",\"package com.meng; import java.io.FileInputStream; import java.io.InputStream; import java.text.SimpleDateFormat; import java.util.Date; public class ExceptionDemo3 { public static void main(String[] args) { System.out.println(\\\"程序开始。。。\\\"); try { parseTime(\\\"2020-1-1 11:11:11\\\");//如果出现异常，下面的就不会执行，而直接跳到catch System.out.println(\\\"操作成功\\\"); } catch (Exception e) { e.printStackTrace(); System.out.println(\\\"操作失败\\\"); } System.out.println(\\\"程序结束。。。\\\"); } public static void parseTime(String date) throws Exception { SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); Date d = sdf.parse(date); System.out.println(d); InputStream inputStream = new FileInputStream(\\\"/Users/humeng/Pictures/1.jpg\\\"); } } \"]},\"1042\":{\"h\":\"运行时异常处理形式\",\"t\":[\"运行时异常编译阶段不报错，是运行时才可能出错的，使用编译阶段不处理也可以\",\"按照规范建议：建议在最外层调用处集中捕获处理即可\",\"package com.meng; /** * 运行时的异常处理 */ public class ExceptionDemo4 { public static void main(String[] args) { System.out.println(\\\"程序开始\\\"); try { div(10,0); } catch (Exception e) { e.printStackTrace(); } System.out.println(\\\"程序结束\\\"); } public static void div(int a,int b){ System.out.println(a); System.out.println(b); int c = a / b; System.out.println(c); } } \"]},\"1043\":{\"h\":\"自定义异常\",\"t\":[\"java无法为这个世界上所有的问题提供异常类\",\"如果企业想要通过异常方式管理自己的某个业务问题，就需要自定义异常类\",\"package com.meng; //自定义编译时异常 //继承Exception并重写构造器 public class MyException extends Exception{ public MyException(){ } public MyException(String message){ super(message); } } \",\"package com.meng; public class ExceptionDemo5 { public static void main(String[] args) { try { checkAge(23); } catch (MyException e) { e.printStackTrace(); } } public static void checkAge(int age) throws MyException { if (age < 0 || age > 200){ //抛出一个异常给对象调用者 //throw:在方法内部直接创建一个异常对象，并在此点抛出 //throws:在方法申明上的，抛出方法内部的异常 throw new MyException(age+\\\" is false\\\"); }else { System.out.println(\\\"年龄合法\\\"); } } } \",\"image-20220810142240642\",\"image-20220810142329260\"]},\"1044\":{\"c\":[\"Java异常\"]},\"1045\":{\"c\":[\"异常的破解\"]},\"1046\":{\"h\":\"工厂模式\",\"t\":[\"image-20220813113550510\",\"package day09; public abstract class Computer { private String name; private double price; public abstract void start(); public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } } \",\"package day09; import day09.FactoryPattern.Computer; public class Huawei extends Computer { @Override public void start() { System.out.println(getName() + \\\"开机了\\\"); } } \",\"package day09; import day09.FactoryPattern.Computer; public class Mac extends Computer { @Override public void start() { System.out.println(getName() + \\\"开机了\\\"); } } \",\"package day09; import day09.FactoryPattern.Computer; import day09.FactoryPattern.Huawei; import day09.FactoryPattern.Mac; public class FactoryPattern { /** * 定义一个方法，创建对象返回 * * @param info * @return */ public static Computer createComputer(String info) { switch (info) { case \\\"Mac\\\": Computer computer1 = new Mac(); computer1.setName(\\\"MacBook Air\\\"); computer1.setPrice(9999); return computer1; case \\\"Huawei\\\": Computer computer2 = new Huawei(); computer2.setName(\\\"华为\\\"); computer2.setPrice(9980); return computer2; default: return null; } } } \",\"package day09; import day09.FactoryPattern.Computer; import day09.FactoryPattern.FactoryPattern; public class FactoryDemo { public static void main(String[] args) { Computer mac = FactoryPattern.createComputer(\\\"Mac\\\"); mac.start(); Computer huawei = FactoryPattern.createComputer(\\\"Huawei\\\"); huawei.start(); } } \",\"image-20220813114627864\",\"image-20220813114820905\"]},\"1047\":{\"h\":\"Java基础第一幕\",\"t\":[\"第一幕\",\"语法之谜\"]},\"1048\":{\"h\":\"标识符\",\"t\":[\"Java中的所有组成部分都需要名字，类名，变量名，方法名都被称为标识符\",\"Java中的关键字不能作为标识符（就是关键字不能作为名字）\",\"img\"]},\"1049\":{\"h\":\"数据类型\"},\"1050\":{\"h\":\"Java是强类型语言\",\"t\":[\"要求变量的使用严格符合类型规定，所有的变量必须先定义后才能使用\"]},\"1051\":{\"h\":\"数据类型\",\"t\":[\"Java的数据类型分为两大类：基本类型和引用类型\",\"Java语言类型：\",\"基本类型：\",\"数值类型：整数型，浮点型\",\"boolean类型：占一位其值只有ture和false两个\",\"引用数据类型：类，接口，数组（注意：字符串类型也是一个类，也属于引用数据类型）\"]},\"1052\":{\"h\":\"整型拓展\",\"t\":[\"十进制整数，如：99,-500,0。 八进制整数，要求以 0开头，如：015。 十六进制数，要求 0x或 0X开头，如：0x15 。 //整型 int i=10; int i2=010; int i3=0x10; System.out.println(i); //10 System.out.println(i2); //8 System.out.println(i3); //16 \"]},\"1053\":{\"h\":\"字符型拓展\",\"t\":[\"单引号用来表示字符常量。例如'A'是一个字符，他与\\\"A\\\"是不同的，\\\"A\\\"表示的是一个字符串。\",\"//代码1 String sa=new String(\\\"Hello world\\\"); String sb=new String(\\\"Hello world\\\");System.out.println(sa==sb); // false,因为sa与sb是通过String对象new出来的,创建了两个对象，而且sa和sb的地址也不一样，所以返回false //代码2 String sc=\\\"Hello world\\\"; String sd=\\\"Hello world\\\";System.out.println(sc==sd); // true，因为创建的都是同一个对象，地址一样，内容也一样，所以返回true \"]},\"1054\":{\"h\":\"布尔类型拓展\",\"t\":[\"boolean类型：一位，不是一个字节，就是0或1\",\"boolean类型有两个值，true和false，不可以用0或1代替true或false，这点和c语言不同\",\"if(is==true&&un==false){ } if(is&&!un){ //是一样的，熟练的人应该使用下面的方式，代码要精简易读！ } \"]},\"1055\":{\"h\":\"类型转换\",\"t\":[\"因为Java是强类型的语言，所以有时候进行运算的时候，需要类型转换。\",\"低 ------------------------------------> 高\",\"byte,short,char—> int —> long—> float —> double\",\"类型转换满足的规则：\",\"不能对boolean类型进行类型转换\",\"不能把对象类型转换成不相关类的对象\",\"在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\",\"转换过程中可能导致溢出或损失精度\",\"浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入\"]},\"1056\":{\"h\":\"自动类型转换\",\"t\":[\"自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型\",\"byte,short,char是直接转换成int类型进行运算的\"]},\"1057\":{\"h\":\"强制类型转换\",\"t\":[\"public static void main(String[]args){ double x=3.14; int nx=(int)x; //值为3 char c='a'; int d=c+1; System.out.println(d); //98 System.out.println((char)d); //b } \"]},\"1058\":{\"h\":\"java的switch参数与case匹配规则的本质\",\"t\":[\"switch语句中的执行过程是，表达式里面的值可以直接匹配到case里面的值，因为编译器有一套算法，这也是switch语句执行起来高效的原因。\",\"编译器对switch语句有两套算法，\",\"第一种情况，如果case里面的值都是比较接近的。\",\"例如是这样的代码：\",\" switch（num）{ case 1: 执行语句； break; case 2: 执行语句； break； ...... } \",\"编译器会把case值装到一个类似数组的容器里，然后通过索引直接找到具体的值。数组遍历是不用挨个遍历的，通过索引可以锁定具体的值。\",\"第二种情况，case里面的值间距比较大，比如第一个case里面的值是1，第二个case里面的值是2，第三个case里面的值是1000，这会儿编译器的算法是通过二分查找法，来找到具体case值。\"]},\"1059\":{\"h\":\"方法参数传递机制：值传递\",\"t\":[\"基本类型的参数传输存储的：数据值 引用类型的参数传输存储的：地址值 主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址 \",\"package day01; //方法参数传递机制：值传递 //基本类型的参数传输存储的：数据值 //引用类型的参数传输存储的：地址值 //主要看变量中存储的是什么 基本类型就是在栈内存中的 而引用类型是在堆内存中的，变量存储的是对象的地址 public class D11_method { public static void main(String[] args) { // 基本类型 int num = 22; changeNum(num);//传递的是num的值：22 System.out.println(num); System.out.println(\\\"----------------------------\\\"); // 引用类型 int[] arr = new int[]{11, 22, 33}; System.out.println(\\\"地址为\\\" + arr); change(arr);//传递的是地址值：[I@75b84c92 System.out.println(arr[1]);//222 System.out.println(\\\"地址为\\\" + arr); } public static void changeNum(int num) { System.out.println(num); num = 222; System.out.println(num); } public static void change(int[] arr) { System.out.println(\\\"地址为\\\" + arr); System.out.println(arr[1]);//22 arr[1] = 222; System.out.println(arr[1]);//222 System.out.println(\\\"地址为\\\" + arr); } } \"]},\"1060\":{\"c\":[\"Java基础\"]},\"1061\":{\"c\":[\"Java语法\"]},\"1062\":{\"h\":\"Java基础第二幕\",\"t\":[\"提示\",\"面向对象的力量\"]},\"1063\":{\"h\":\"面向对象的思想\",\"t\":[\"把现实中的事物全部看成一个个的对象来解决问题，就使得代码看起来很像人的语言。\",\"Java中需要先定义类，才能创建对象。\",\"类是相同事物共同特征的描述，对象是具体存在的实例\"]},\"1064\":{\"h\":\"定义类的注意事项\",\"t\":[\"类名注意首字母大写，满足驼峰命名法。例如（Student ；Person；Book；Movie）\",\"一个Java文件中可以定义多个类，但是只能有一个类是用public修饰符，而且public的修饰符的类也必须是Java文件名相同\",\"规范：建议一个Java文件只定义一个类\"]},\"1065\":{\"h\":\"类中成分\",\"t\":[\"类中可以定义的5大成分：成员变量，构造器（无参，有参），成员方法（getter，setter，toString...），代码块，内部类\",\"package com.meng; public class Student { //1、成员变量 private String name; private int age; //2、构造器 分为有参和无参构造器，如果不写构造器，在类内会默认存在一个无参构造器，如果需要写有参构造器，无参构造器会被重载，最好再把无参构造器写出来，否则可能出现new一个无参对象报错。 public Student() { } public Student(String name, int age) { this.name = name; this.age = age; } //3、成员方法 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } \"]},\"1066\":{\"h\":\"this关键字\",\"t\":[\"作用：出现在成员方法，构造器中代表当前对象的地址，用于指定访问当前对象的成员变量，成员方法。\",\"this出现在构造器或者方法中，哪个对象调用它，this就代表哪个对象。\"]},\"1067\":{\"h\":\"面向对象:内存机制\",\"t\":[\"首先准备一个汽车类\",\"package day02; public class Car { // 成员变量(属性) String name; double price; // 方法(行为) public void start() { System.out.println(name + \\\"启动了\\\"); } public void run() { System.out.println(\\\"价格是\\\" + price + \\\"的\\\" + name + \\\"跑的贼快！\\\"); } } \",\"学生类\",\"package day02; public class Student { String name; char gender; String hobby; public void study() { System.out.println(\\\"名称:\\\" + name + \\\"性别:\\\" + gender + \\\"爱好:\\\" + hobby + \\\"的学生开始学习了\\\"); } } \"]},\"1068\":{\"h\":\"两个对象内存分析\",\"t\":[\"package day02; import day02.d1OOPArrayList.Car; //两个对象内存分析 public class Test01 { public static void main(String[] args) { Car car1 = new Car(); car1.name = \\\"宝马\\\"; car1.price = 50.88; System.out.println(car1.name); System.out.println(car1.price); car1.start(); car1.run(); Car car2 = new Car(); car2.name = \\\"奔驰\\\"; car2.price = 60; System.out.println(car2.name); System.out.println(car2.price); car2.start(); car2.run(); } } \",\"image-20220807093237996\",\"首先方法区加载Test.class文件以及执行main方法\",\"发现main方法中需要创建Car对象于是方法区中加载Car.class文件(成员变量、成员方法)\",\"在堆内存中开辟一块内存用于存储new Car()产生的对象(包含成员变量以及成员方法的引用地址)，再把对象的地址交给c1实例存储\",\"......\"]},\"1069\":{\"h\":\"两个变量指向同一个对象内存图\",\"t\":[\"package day02; import day02.d1OOPArrayList.Student; public class Test02 { public static void main(String[] args) { Student s1 = new Student(); s1.name = \\\"小明\\\"; s1.gender = '男'; s1.hobby = \\\"打篮球\\\"; s1.study(); Student s2 = s1; s2.hobby = \\\"爱提问\\\"; System.out.println(s2.name); System.out.println(s2.gender); System.out.println(s1.hobby); s2.study(); } } \",\"image-20220807094538111\"]},\"1070\":{\"h\":\"垃圾回收\",\"t\":[\"注意：当我们堆内存中的对象，没有被任何变量引用(指向)时，就会被判定为内存中的\\\"垃圾\\\"。\",\"Java存在自动垃圾回收器，会定期自动清理 堆内存中没人引用的对象\"]},\"1071\":{\"h\":\"面向对象的三大特征\"},\"1072\":{\"h\":\"面向对象的三大特征：封装、继承、多态。\"},\"1073\":{\"h\":\"封装 标准JavaBean\",\"t\":[\"封装的基本思想：合理隐藏（隐藏细节），合理暴露（提供访问入口）\",\"封装步骤：通常将成员变量私有、提供方法进行暴露。\",\"封装作用：提高业务功能的设计的安全性，提高组件化。\"]},\"1074\":{\"h\":\"特征的含义：\"},\"1075\":{\"h\":\"所谓特征就是已经成为Java设计代码的特点，即使毫无意义，通常也需要满足这样的设计要求来编写代码。\"},\"1076\":{\"h\":\"JavaBean\"},\"1077\":{\"h\":\"也可以理解为实体类，其对象可以用于在程序中封装数据。\",\"t\":[\"成员变量使用private修饰，提供每一个成员变量的setter/getter方法，必须提供一个无参构造器。\",\"package com.meng; import java.util.Arrays; public class User { private String name; private int age; private String[] hobbies; private String mail; public User() { } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String[] getHobbies() { return hobbies; } public void setHobbies(String[] hobbies) { this.hobbies = hobbies; } public String getMail() { return mail; } public void setMail(String mail) { this.mail = mail; } @Override public String toString() { return \\\"User{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", hobbies=\\\" + Arrays.toString(hobbies) + \\\", mail='\\\" + mail + '\\\\'' + '}'; } } \"]},\"1078\":{\"h\":\"面向对象进阶\"},\"1079\":{\"h\":\"static关键字\"},\"1080\":{\"h\":\"static关键字的作用，和修饰成员变量的用法\",\"t\":[\"static是静态的意思，可以修饰成员变量，表示该成员变量只在内存中存储一份，可以被共享访问、修改。（例如在线人数）\",\"静态成员变量（有static修饰，属于类，堆内存中加载一次）\",\"实例成员变量（无static修饰，存在于每个对象中）\"]},\"1081\":{\"h\":\"static修饰成员变量的内存原理\",\"t\":[\"image-20220807155545218\",\"首先user.class文件加载到方法区，加载类的同时会加载静态成员变量，因为静态成员变量属于类（加载一次，被共享访问，而且在堆内存中）。\",\"在栈内存中加载执行main方法\"]},\"1082\":{\"h\":\"成员方法的分类\",\"t\":[\"静态成员方法：有static关键字修饰，属于类，推荐使用类名访问，也可以使用对象访问\",\"实例成员方法：无static关键字修饰，属于对象，只能用于对象触发访问。\",\"image-20220807160857697\"]},\"1083\":{\"h\":\"static的应用：工具类，工具类的案例\",\"t\":[\"验证码工具静态类\",\"package com.meng; import java.util.Random; public class VerifyTool { /** * 静态方法 * @param n * @return */ public static String createCode(int n){ //1、使用String开发一个验证码 String chars = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\\\"; //2、定义一个变量用于存储验证码 String code = \\\"\\\"; //3、循环 Random random = new Random(); for (int i = 0; i < n; i++) { int index = random.nextInt(chars.length()); code += chars.charAt(index); } return code; } } \",\"测试类\",\"package com.meng; public class Test01 { public static void main(String[] args) { //直接调用静态方法，提高代码的复用，减少代码的重复 System.out.println(VerifyTool.createCode(4)); } } \"]},\"1084\":{\"h\":\"工具类原理和延伸\",\"t\":[\"一次编写处处可用；\",\"建议将工具类的构造器私有，不让工具类对外产生对象（节约内存）\",\"package com.meng; import java.util.Random; public class VerifyTool { /** * 私有构造器！！！！！！！！！！！！！！（建议）因为可以节约内存，详细原因见下面的思考 */ private VerifyTool(){ } /** * 静态方法 * @param n * @return */ public static String createCode(int n){ //1、使用String开发一个验证码 String chars = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\\\"; //2、定义一个变量用于存储验证码 String code = \\\"\\\"; //3、循环 Random random = new Random(); for (int i = 0; i < n; i++) { int index = random.nextInt(chars.length()); code += chars.charAt(index); } return code; } } \",\"思考：为什么工具类中的方法不用实例方法去做？\",\"答：实例方法需要创建对象调用，此时我们用对象仅仅只是要调用方法，这样只会浪费内存！\"]},\"1085\":{\"h\":\"static注意事项（面试常考）\",\"t\":[\"静态方法（static）只能访问静态成员，不可以直接访问实例的成员\",\"实例方法可以访问静态的成员，也可以访问实例的成员\",\"静态方法中是不可以出现static关键字的\"]},\"1086\":{\"h\":\"static应用知识（代码块）\"},\"1087\":{\"h\":\"代码块分为：\",\"t\":[\"静态代码块：\",\"格式：static\",\"特点：需要使用static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次\",\"使用场景：在类的加载的时候，做一些静态数据的初始化的操作，以便后续使用。\",\"构造代码块（了解，用的少）：\",\"格式\",\"特点：每次创建对象，调用构造器时执行，都会执行该代码块中的代码，并且在构造器执行前执行。\",\"使用场景：初始化实例资源。\"]},\"1088\":{\"h\":\"设计模式（面试）\"},\"1089\":{\"h\":\"设计模式、单例模式介绍、饿汉单例模式、懒汉单例模式\",\"t\":[\"单例模式：可以保证系统中，应用该模式的这个类永远只有一个实例，即一个类永远只能创建一个对象。\",\"应用场景：例如任务管理器，我们只需要一个就可以解决问题了，可以节约内存空间。\"]},\"1090\":{\"h\":\"饿汉单例：\",\"t\":[\"在类获取对象的时候，对象已经提前为你创建好了。\"]},\"1091\":{\"h\":\"设计步骤：\",\"t\":[\"定义一个类，把构造器私有\",\"定义一个静态变量存储这个类的一个对象\",\"package com.meng; /** * 1、定义一个单例类 */ public class SingleInstance { //3、定义一个静态变量，存储一个对象即可：属于类，与类一起加载一次 public static SingleInstance instance = new SingleInstance(); //2、单例必须私有构造器 private SingleInstance(){ System.out.println(\\\"创建了一个对象\\\"); } } \"]},\"1092\":{\"h\":\"懒汉单例\",\"t\":[\"真正需要该对象的时候，才去创建一个对象。（延迟加载对象）\"]},\"1093\":{\"h\":\"设计步骤\",\"t\":[\"定义一个类，把构造器私有。\",\"定义一个静态变量，存储一个对象。\",\"提供一个返回单例的方法。\",\"package com.meng; /** * 1、懒汉单例模式 */ public class SingleInstance2 { //3、定义一个静态变量,属于类，与类一起加载一次,(不能初始化对象，因为它懒） // public static SingleInstance2 instance; //把静态成员变量设为私有，防止别人调用这个啥都没有的静态变量，会坑到人的 private static SingleInstance2 instance; //2、私有构造器 private SingleInstance2(){ System.out.println(\\\"创建了一个对象\\\"); } //3、定义一个方法，让其他地方可以调用获取一个对象 public static SingleInstance2 getInstance(){ //首先判断是不是已经创建了一个对象，如果没有创建（第一次）就创建一个对象给静态变量，后续就有对象了，就不会再次创建对象了，保障多次创建的是同一个对象 if (instance == null){ instance = new SingleInstance2(); } return instance; } } \"]},\"1094\":{\"h\":\"继承（面向对象三大特征之一）\"},\"1095\":{\"h\":\"继承的基本介绍\",\"t\":[\"什么是继承？\",\"继承就是类与类之间的关系。\",\"多个类可以单独继承某个类（就是一个类可以被多个类继承）\",\"多个类称为子类（派生类），单独的类称为父类（或者基类，超类）\",\"注意：Java不存在多继承（通俗的讲就是：一个类只能有一个父类）\",\"为什么用继承？\",\"继承的好处：提高代码的复用性，减少代码的重复性。\",\"image-20220807183350757\"]},\"1096\":{\"h\":\"继承设计规范\",\"t\":[\"子类的共同特征放到父类中定义（比如学生和老师都可以继承人类，人类中有学生和老师共有的特征：姓名，年龄，身高，体重...），子类独有的方法要放在子类中单独定义（比如老师有工资，而大部分学生没有工资）\",\"这时候可能会有人想：如果我们把子类所有的方法和属性都定义到人类里面，那子类里面是不是就可以什么都不定义了？\",\"如果我们把子类所有的属性方法定义到父类，那么继承自父类的其他子类都会有这些属性方法，比如老师的工资定义到父类中，而学生继承父类，那么学生也就有工资了，这不符合逻辑！\"]},\"1097\":{\"h\":\"继承的内存运行原理\",\"t\":[\"image-20220808075119129\"]},\"1098\":{\"h\":\"继承的特点\",\"t\":[\"子类可以继承父类的属性和行为，但是子类不能继承父类的构造器\",\"Java是单继承模式：一个类只能继承一个直接父类\",\"Java不支持多继承（这点和C++不一样），但是支持多层继承。\",\"Java中所有的类都是Object类的子类。（Object是祖宗）\"]},\"1099\":{\"h\":\"子类是否可以继承父类的私有成员?\",\"t\":[\"注意:是可以继承父类的私有成员的，只是不能直接访问\",\"当我们new了一个子类构造器，在堆内存中会产生一个对象，而这个对象中是包含了父类成员空间(super)以及子类成员空间(this)，只是父类成员空间中的私有方法不能直接访问(从内存的角度来看是子类可以继承父类的所有属性和方法，只是能不能直接访问，后面我们可以通过反射暴力获取到子类对象的父类的私有方法)\"]},\"1100\":{\"h\":\"子类是否可以继承父类静态成员?\",\"t\":[\"不能 ---> 虽然子类可以直接使用父类的静态成员(这是共享的)，共享并非继承关系，在内存中只有一份\"]},\"1101\":{\"h\":\"在子类方法中访问成员（成员变量、成员方法）满足：就近原则\",\"t\":[\"先在子类局部范围找\",\"然后子类成员范围找\",\"然后父类成员范围找，如果父类范围还没有找到就会报错\"]},\"1102\":{\"h\":\"重写\",\"t\":[\"如果父类中的方法不能够满足子类的方法，在子类中可以对父类中的方法进行重写\"]},\"1103\":{\"h\":\"@Override重写注解\",\"t\":[\"@override是放在重写后的方法上的，作为重写是否正确的校验注解。\",\"加上该注解后如果重写错误，编译阶段会出现错误提示\",\"建议重写方法都加上@override注解，代码安全，优雅！\"]},\"1104\":{\"h\":\"注意事项：\",\"t\":[\"重写方法的名称、形参列表必须与被重写的方法名称和参数列表一致。\",\"私有方法不能被重写。\",\"子类重写父类方法时，访问权限必须大于或者等于父类\",\"子类也不能重写父类的静态方法。\"]},\"1105\":{\"h\":\"子类继承父类后构造器的特点：\",\"t\":[\"子类中的构造器会默认先访问父类中的无参构造器，然后再执行自己\",\"子类构造器的第一行语句默认都是：super()，不写也存在。\"]},\"1106\":{\"h\":\"包、权限修饰符\",\"t\":[\"包是用来分门别类管理各种不同的文件的，类似于文件夹，建包有利于项目管理和维护。\",\"package 公司域名（com）.技术名称(springboot).javabean\",\"包名建议全部小写，且具备意义\",\"建包语句一般在第一行，IDEA工具会自动生成创建。\",\"导包格式：包名.类名\"]},\"1107\":{\"h\":\"权限修饰符\",\"t\":[\"控制一个对象能够被访问的范围\",\"由小到大：private --->缺省 --->protect --->public\",\"image-20220808090917489\"]},\"1108\":{\"h\":\"final修饰符\",\"t\":[\"含有final修饰的类不能被继承，final修饰方法，不能被重写，\",\"final修饰变量，变量有且只能被赋值一次(基本类型 数据值不能改变，引用类型 地址值不能改变 但是内容可以改变)\",\"变量有几种：\",\"局部变量；\",\"成员变量：\",\"--静态成员变量\",\"--实例成员变量\"]},\"1109\":{\"h\":\"常量\",\"t\":[\"常量是使用了public static final 修饰的成员变量，必须有初始化值，而且初始化之后不能被改变。\",\"常量的作用和好处：可以用于做系统的配置信息，方便系统维护，同时也提高可读性。\",\"常量命名规范：英文单词全部大写，多个单词下划线连接起来\",\"这种方法在编译阶段会把常量名改为字面意思，在运行时提高一些性能。而且便于维护，改一个就可以修改全部\",\"package com.meng; public class FinalTest { public static final String SCHOOL_NAME = \\\"安徽大学\\\"; public static final String LOGIN_NAME = \\\"admin\\\"; public static final String PASSWORD = \\\"123456\\\"; public static void main(String[] args) { System.out.println(FinalTest.SCHOOL_NAME); System.out.println(LOGIN_NAME); System.out.println(PASSWORD); } } \"]},\"1110\":{\"h\":\"枚举\"},\"1111\":{\"h\":\"枚举的概述\",\"t\":[\"枚举是Java中的一种特殊类型\",\"枚举的作用：做信息的标志和信息的分类\"]},\"1112\":{\"h\":\"枚举的格式\",\"t\":[\"package com.meng; /** * 枚举类 enum */ public enum Season { //枚举第一列必须罗列枚举类的 对象 名称，建议全部大写 SPRING,SUMMER,AUTUMN,WINTER; } /* 反编译后的class文件 */ public final class day02.d2OOP.d5_enum.Season extends java.lang.Enum<day02.d2OOP.d5_enum.Season> { public static final day02.d2OOP.d5_enum.Season SPRING; public static final day02.d2OOP.d5_enum.Season SUMMER; public static final day02.d2OOP.d5_enum.Season AUTUMN; public static final day02.d2OOP.d5_enum.Season WINTER; public static day02.d2OOP.d5_enum.Season[] values(); public static day02.d2OOP.d5_enum.Season valueOf(java.lang.String); static {}; } \"]},\"1113\":{\"h\":\"枚举的特征：\",\"t\":[\"枚举类都是继承了java.lang.Enum类\",\"枚举类都是最终类，不能被继承\",\"枚举类的构造器时私有的，不能对外创建对象\",\"package com.meng; import static com.meng.Season.SUMMER; public class Test02 { public static void main(String[] args) { Test02 test02 = new Test02(); test02.test(SUMMER); } public void test(Season season) { switch (season) { case SPRING: System.out.println(\\\"万物复苏\\\"); break; case SUMMER: System.out.println(\\\"夏日炎炎\\\"); break; case AUTUMN: System.out.println(\\\"落霞与孤鹜齐飞，秋水共长天一色\\\"); break; case WINTER: System.out.println(\\\"冬天到了，春天的脚步近了\\\"); break; } } } \"]},\"1114\":{\"h\":\"抽象类\",\"t\":[\"某个父类知道其所有的子类要完成某个功能，但是每个子类完成的情况不一样，父类就只定义该功能的基本要求，具体实现由子类完成，这个类就可以是一个抽象类，抽象类其实是一种不完全的设计图\",\"抽象类必须使用abstract修饰：\",\"修饰符 abstract class 类名(){}\",\"抽象方法：就是抽象类中定义的子类中必须完成的功能的具体要求。\",\"修饰符 abstract 返回值类型 方法名称（形参列表）；\",\"没有方法体，只有方法签名，必须用abstract修饰。\",\"package com.meng.abstractDemo; public abstract class Animal { private String name; public abstract void cry(); public String getName() { return name; } public void setName(String name) { this.name = name; } } \",\"package com.meng.abstractDemo; public class Tiger extends Animal { @Override public void cry() { System.out.println(\\\"喵呜喵呜\\\"); } } \",\"package com.meng.abstractDemo; public class Dog extends Animal{ @Override public void cry() { System.out.println(\\\"汪汪汪\\\"); } } \"]},\"1115\":{\"h\":\"抽象类特征：\",\"t\":[\"**有得有失：**得到了抽象方法，失去了创建对象的能力。\",\"抽象类为什么不能创建对象？因为抽象类如果能创建对象，那么我们用这个对象调用抽象类中的抽象方法，抽象方法没有方法体！所以抽象类不能创建对象！抽象类存在构造器而且还是公有的！因为子类继承抽象类就要首先调用抽象类的构造器，并** 不是**因为抽象类的构造器私有化而导致抽象类不能创建对象的。\",\"类有的成员（成员变量，方法，构造器），抽象类都具备。\",\"抽象类中不一定有抽象方法，但是有抽象方法的一定是抽象类。\",\"一个类继承了这个抽象类，那么这个类必须重写完抽象类中的所有方法，否则这个类也应该定义成为抽象类！\",\"不能用abstract修饰变量、代码块、构造器。\"]},\"1116\":{\"h\":\"final和abstract是什么关系？\"},\"1117\":{\"h\":\"互斥关系\"},\"1118\":{\"h\":\"接口Interface\",\"t\":[\"什么是接口？\",\"接口就是体现规范的，期中用抽象方法定义的一组行为规范，接口是更加彻底的抽象。\",\"接口的定义和特点：\",\"public interface 接口名{\",\"//常量\",\"//抽象方法\",\"}\"]},\"1119\":{\"h\":\"接口的定义：\",\"t\":[\"package com.meng.interfaceTest; /** * 定义一个电脑接口 */ public interface ComputerInterface { //JDK1.8之前接口中的成员只有 常量 和 抽象方法 // public static final String COMPUTER_NAME = \\\"MacBook\\\"; //在接口中定义的默认就是静态常量 String COMPUTER_NAME = \\\"MacBook\\\"; // public abstract 可以省略不写 void USB();//USB接口 void HDMI();//高清接口 void DP();//数字式视频接口 void type_c();//type-c接口 } \"]},\"1120\":{\"h\":\"接口的实现：\",\"t\":[\"接口是用来被实现的（implements）的，实现接口的类成为实现类，实现类可以理解为所谓的子类。\",\"修饰符 class 实现类 implements 接口1,接口2,接口3...{\",\"}\",\"实现的关键字implements\",\"接口可以被类单实现，也可以被类多实现。\",\"package com.meng.interfaceTest; /** * 外设 */ public class Peripherals implements ComputerInterface{ @Override public void USB() { System.out.println(\\\"没有USB接口 -_-!\\\"); } @Override public void HDMI() { System.out.println(\\\"也没有\\\"); } @Override public void DP() { System.out.println(\\\"还是没有\\\"); } @Override public void type_c() { System.out.println(\\\"嘿嘿，有两个，一个电源线接口，另一个空着~\\\"); } public static void main(String[] args) { System.out.println(ComputerInterface.COMPUTER_NAME); Peripherals peripherals = new Peripherals(); peripherals.USB(); peripherals.HDMI(); peripherals.DP(); peripherals.type_c(); } } \"]},\"1121\":{\"h\":\"接口可以多继承\",\"t\":[\"规范整合，整合多个接口为同一个接口，便于子类实现\"]},\"1122\":{\"h\":\"接口新增方法、注意事项（了解）\",\"t\":[\"注意：\",\"接口不能创建对象！\",\"一个类可以实现多个接口，多个接口中有同样的静态方法不冲突(原因接口的静态方法只能接口自己调用)\",\"一个类继承了父类，同时又实现接口，父类中和接口中有同名的方法，默认使用父类的\",\"一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可\",\"一个接口继承了多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承\"]},\"1123\":{\"h\":\"JDK8开始接口新增了一些方法：\"},\"1124\":{\"h\":\"默认方法\",\"t\":[\"类似之前写的普通实例方法:必须使用default修饰\",\"默认会public修饰。需要使用接口的实现类的对象来调用\"]},\"1125\":{\"h\":\"静态方法\",\"t\":[\"默认会public修饰，必须用static修饰\",\"接口的静态方法必须使用本身接口名来调用\"]},\"1126\":{\"h\":\"私有方法\",\"t\":[\"就是私有的实例方法；必须使用private修饰，从JDK1.9才开始有的\",\"只能在本类中其他的默认方法或者私有方法访问\",\"package com.meng.interfaceTest; /** * 定义一个电脑接口 */ public interface ComputerInterface01 { //JDK1.8之前接口中的成员只有 常量 和 抽象方法 // public static final String COMPUTER_NAME = \\\"MacBook\\\"; //在接口中定义的默认就是静态常量 //String COMPUTER_NAME = \\\"MacBook\\\"; // public abstract 可以省略不写 // void USB();//USB接口 // void HDMI();//高清接口 // void DP();//数字式视频接口 // void type_c();//type-c接口 //---------JDK1.8新增方法---------- //1、实例方法 // 接口不能创建对象，必须通过实现类来创建对象调用方法 default void add(){ System.out.println(\\\"在接口中新增一个接口的时候，会牵一发而动全身，所以用default修饰可以在接口中进行添加方法体\\\"); } //2、静态方法 //必须使用static修饰，默认使用public //接口的静态方法只能用接口名自己调用 static void add1(){ System.out.println(\\\"Java源码自己会用到\\\"); } //3、私有方法 JDK1.9才支持的(了解即可)切换JDK模块版本：在项目结构中切换，这个语法JDK8不支持 //必须在接口内部才能被访问 // private void go(){ // // } } class Add implements ComputerInterface01{ } class test{ public static void main(String[] args) { Add add = new Add(); add.add(); ComputerInterface01.add1(); } } \"]},\"1127\":{\"h\":\"多态（面向对象三大特征之一，重点）\"},\"1128\":{\"h\":\"概述、形式\"},\"1129\":{\"h\":\"多态是同类型的对象，执行不同的行为，表现出不同的行为特征。\",\"t\":[\"多态的常见形式：\",\"父类类型 对象名称 = new 子类构造器\",\"接口 对象名称 = new 实现类构造器（接口也是一种父类，可以理解为干爹）\"]},\"1130\":{\"h\":\"多态中成员访问的特点\",\"t\":[\"方法调用：编译看左边，运行看右边\",\"变量调用：编译看左边，运行也看左边（多态侧重行为多态）\"]},\"1131\":{\"h\":\"优势：\",\"t\":[\"在多态的形势下右边的对象可以实现解耦合，便于扩展和维护。\",\"比如说： Animal a = new Cat(); 如果我们有一天不想用这个猫对象，我们就可以把猫换成狗对象： Animal a = new Dog(); 。然后后续的业务行为随对象而改变，后续的代码无需修改，例如（ a.cry(); ) 。解耦合在框架中非常常见，解耦合就是降低两个类之间的联系的紧密程度。\",\"定义方法的时候，使用父类类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展与便利。\",\"public void game（Animal animal）;这样就可以让所有的动物都被game方法接收。\"]},\"1132\":{\"h\":\"多态产生的一个问题：\",\"t\":[\"多态情况下不能使用子类独有的功能，不过我们可以通过引用类型的转换来调用子类独有的功能。（把大类（动物类）转成小类（猫类），大转小就需要强制类型转换）\"]},\"1133\":{\"h\":\"引用类型的转换\"},\"1134\":{\"h\":\"自动类型转换：从子类到父类，子类对象赋值给父类类型的变量指向。\"},\"1135\":{\"h\":\"强制类型转换：从父类到子类，子类 对象变量 = （子类）父类类型的变量\",\"t\":[\"作用：可以解决多态下的劣势，实现调用子类独有的功能。\",\"例如：Animal a = new Dog(); 因为a此时的类型是Animal，所以我们不知道 a 到底是哪一类具体的动物，如果我们想调用Dog中独有的吃骨头方法（eat），我们就需要对 a 对象进行强制类型转换：Dog d = ( Dog) a; 然后再 d.eat();才能调用子类中独有的方法\"]},\"1136\":{\"h\":\"至于为什么多态的父类不能调用子类的独有方法？例如：Animal a = new Dog(); 此时 a对象 的 引用类型 是 Animal动物，但是吃骨头是狗独有的行为方法，而Animal都不会吃骨头，如果用没有强转的a对象能调用到狗的吃骨头，这是不符合逻辑的。所以只能狗吃骨头，我们就得把a对象的Animal类型强转成Dog类型（Dog d = (Dog) a;)，这个时候原来的动物对象就被确认确确实实是狗，我们才可以让 d 调用吃骨头。注意强转的时候一定要复合逻辑！不能把猫转换成狗！！！Java在强制类型转换的时候有一个建议：如下\"},\"1137\":{\"h\":\"建议\",\"t\":[\"Java建议强转转换前使用 instanceof 判断当前对象的真实类型，再进行强制类型转换\",\"变量名 instanceof 真实类型\",\"判断关键字（instanceof）左边的变量指向的对象的真实类型，是否是右边的类型或者是其子类型，是就返回true，反之false；\",\"package com.meng.instanceofDemo; /** * 定义一个抽象类的动物 * 定义一个'叫'的方法体 */ public abstract class Animal { public abstract void cry(); } \",\"package com.meng.instanceofDemo; public class Cat extends Animal{ @Override public void cry() { System.out.println(\\\"喵喵喵\\\"); } //猫独有的方法抓老鼠 public void catchMice(){ System.out.println(\\\"猫在抓老鼠\\\"); } } \",\"package com.meng.instanceofDemo; public class Dog extends Animal{ @Override public void cry() { System.out.println(\\\"汪汪汪\\\"); } public void eat(){ System.out.println(\\\"狗在吃骨头\\\"); } } \",\"package com.meng.instanceofDemo; public class Test { public static void main(String[] args) { Animal animal = new Dog();//我们以后只需要把Cat修改为Dog，就可以把猫换成狗，而且下面的什么都不用动 animal.cry();//我们不强转成子类类型就只能调用父类中的通用方法 test(animal);//我们调用下面的test方法对animal进行类型的判断然后调用独有的方法 } public static void test(Animal animal){ //这时候我们不能知道传进来的到底是猫是狗，所以我们需要对Animal进行判断 if (animal instanceof Dog){ Dog dog = (Dog) animal; dog.eat(); }else if (animal instanceof Cat){ Cat cat = (Cat) animal; cat.catchMice(); } } } \"]},\"1138\":{\"h\":\"补充知识\"},\"1139\":{\"h\":\"内部类\",\"t\":[\"内部类就是一个定义在一个类里面的类，里面的类可以理解成寄生，外部类可以理解成宿主。（与现实世界进行对接）\"]},\"1140\":{\"h\":\"匿名内部类\",\"t\":[\"本质上是一个没有名字的局部内部类，定义在方法中，代码块中，等。\"]},\"1141\":{\"h\":\"作用：\",\"t\":[\"方便创建子类对象，最终的目的为了简化代码编写。\"]},\"1142\":{\"h\":\"格式：\",\"t\":[\"Animal animal1 = new Animal() { @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } };\"]},\"1143\":{\"h\":\"特点：\",\"t\":[\"匿名内部类是一个没有名字的内部类\",\"匿名内部类写出来就会产生一个匿名内部类的对象\",\"相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的\",\"我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法\",\"package com.meng.anonymous; public class Test { public static void main(String[] args) { //普通写法（抽象类不能被创建对象） Animal animal = new Tiger(); animal.run(); //匿名内部类： //匿名内部类是一个没有名字的内部类 //匿名内部类写出来就会产生一个匿名内部类的对象 //相当于创建的子类对象，我们认为是什么类就是什么类，可不是动物对象！因为抽象类不能创建对象的 //我们new出来的相当于Animal的子类！！！子类可以给到父类，这是多态的写法 Animal animal1 = new Animal() { @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } }; animal1.run(); } } class Tiger extends Animal{ @Override public void run() { System.out.println(\\\"老虎跑的快\\\"); } } abstract class Animal{ public abstract void run(); } \",\"使用形式：\",\"package com.meng.anonymous; public class Test2 { public static void main(String[] args) { //匿名内部类：创建一个接口的子类学生对象， // 以后用到Lambda表达式就一行代码就ok了 Swimming s1 = new Swimming() { @Override public void swimming() { System.out.println(\\\"学生在游泳\\\"); } }; go(s1); Swimming s2 = new Swimming() { @Override public void swimming() { System.out.println(\\\"老师在游泳\\\"); } }; go(s2); //我们还可以直接把匿名内部类直接作为方法的入参传送给方法 go(new Swimming() { @Override public void swimming() { System.out.println(\\\"我在游泳\\\"); } }); //Lambda表达式就一行代码就ok了,这个以后讲述 Swimming s3 = () -> System.out.println(\\\"Lambda在游泳\\\"); go(s3); go(() -> System.out.println(\\\"Lambda在游泳!!\\\")); } public static void go(Swimming swimming){ System.out.println(\\\"开始...\\\"); swimming.swimming(); System.out.println(\\\"结束...\\\"); } } /** * 定义一个接口：游泳 */ interface Swimming{ void swimming(); } \",\"开发中不是我们主动定义匿名内部类，而是别人需要我们写或者我们可以写的时候才会使用。\",\"匿名内部类的代码可以实现代码的进一步简化！\"]},\"1144\":{\"c\":[\"Java基础\"]},\"1145\":{\"c\":[\"Java语法\"]},\"1146\":{\"h\":\"Java基础第三幕\",\"t\":[\"提示\",\"常用API的魔力\"]},\"1147\":{\"h\":\"String类\",\"t\":[\"String类定义的变量可以存储字符串，同时String类提供了很多操作字符串的功能，我们可以直接使用\"]},\"1148\":{\"h\":\"不同方式定义字符串的内存原理\",\"t\":[\"image-20220807110326351\",\"image-20220807110534539\",\"String类常见的面试题\",\"下面代码运行的结果是？\",\"package com.meng; import java.lang.String; public class StringDemo01 { public static void main(String[] args) { //通过这种方法创建了两个对象，一个是在字符串常量池中的\\\"abc\\\"，还有一个是在堆内存中new出来的s1。其中s1是在堆内存中的 String s1 = new String(\\\"abc\\\"); //这句代码实际上创建了0个对象！ 因为字符串常量池中已经有\\\"abc\\\"，所以s2并没有在字符串常量池中再创建一个同样的\\\"abc\\\"对象 String s2 = \\\"abc\\\"; System.out.println(s1 == s2);//s1是在堆内存中的，s2是在字符串常量池中的， System.out.println(s1.equals(s2));// ==号比较的实际上是地址 // （equals若没有重写，比较的其实也是地址，重写equals是为了让它比较内容是否一样,equals在Object里面被重写了，所以s1.equals(s2)为true） //因为s1和s2的地址不同，所以是false！ } } \",\"package com.meng; public class StringDemo02 { public static void main(String[] args) { String s1 = \\\"abc\\\";//字符串常量池 String s2 = \\\"ab\\\";//字符串常量池 String s3 = s2 + \\\"c\\\";//运算得到的结果是放在 堆内存 中的 //这个为什么没有在编译时进行优化呢？因为s2是一个变量，只有在运行时s2才能确定时“ab” System.out.println(s1 == s3);//地址不一样，false } } \",\"package com.meng; public class StringDemo03 { public static void main(String[] args) { String s1 = \\\"abc\\\";//字符串常量池 String s2 = \\\"a\\\"+\\\"b\\\"+\\\"c\\\";//字符串常量池 //Java存在编译优化机制，也就是在编译时（值是确定的，就是\\\"abc\\\"）会把 \\\"a\\\"+\\\"b\\\"+\\\"c\\\" 直接转为 \\\"abc\\\" ，在运行时常量池中就只有一个对象\\\"abc\\\" （可以通过class文件中查看到） System.out.println(s1 == s2);//true } } //把class文件反编译后，如下 // // Source code recreated from a .class file by IntelliJ IDEA // (powered by FernFlower decompiler) // package com.meng; public class StringDemo03 { public StringDemo03() { } public static void main(String[] args) { String s1 = \\\"abc\\\"; String s2 = \\\"abc\\\";//运行时s2就已经是abc，说明编译时进行了编译优化 System.out.println(s1 == s2); } } \",\"字符串内容比较（equals）\",\"package com.meng; import java.util.Scanner; public class StringEqualsDemo04 { public static void main(String[] args) { //正确的用户名和密码 String OkName = \\\"admin\\\";//常量池 String OkPassword = \\\"123456\\\";//常量池 //提示用户输入 Scanner scanner = new Scanner(System.in); System.out.println(\\\"username：\\\"); String name = scanner.next();//用户输入过来的不是以双引号接收的，是放在堆内存中的 System.out.println(\\\"password：\\\"); String password = scanner.next();//堆内存 //判断 // == 比较的是地址 常量池地址 != 堆内存地址 所以不能使用双等号比较内容是否一样 if (OkName == name && OkPassword == password){ System.out.println(\\\"success (==)\\\"); }else { System.out.println(\\\"username or password is error (==)\\\"); } //equals 精确比较内容是否一致 if (name.equals(OkName) && password.equals(OkPassword)){ System.out.println(\\\"success (equals)\\\"); }else { System.out.println(\\\"username or password is error (equals)\\\"); } //equalsIgnoreCase 忽略大小写比较 if (name.equalsIgnoreCase(OkName) && password.equalsIgnoreCase(OkPassword)){ System.out.println(\\\"success (equalsIgnoreCase)\\\"); }else{ System.out.println(\\\"username or password is error (equalsIgnoreCase)\\\"); } } } //----------------输出内容--------------------- /* username： Admin password： 123456 username or password is error (==) username or password is error (equals) success (equalsIgnoreCase) 进程已结束,退出代码0 */ \",\"String常用API\",\"package com.meng; /** * 掌握String其他常用的API */ public class StringOtherDemo05 { public static void main(String[] args) { //1、public int length(); 获取字符串长度 (包含空格） String name = \\\"I love you China\\\"; System.out.println(name.length()); //2、public char charAt(int index); 获取某个索引位置处的字符 (从0开始） char wordInName = name.charAt(0); System.out.println(wordInName); System.out.println(\\\"------遍历字符串中的每个字符-------\\\"); for (int i = 0; i < name.length(); i++) { System.out.print(name.charAt(i));//print 不换行 } System.out.println(); //3、public char[] toCharArray(); 把字符串转换成字符数组 char[] chars = name.toCharArray(); for (int i = 0; i < chars.length; i++) { System.out.println(chars[i]); } //4、pubic String substring(int beginIndex, int endIndex); 截取内容，包括前面，不包括后面 String name2 = \\\"Java是最厉害的语言\\\"; System.out.println(name2.substring(0, 4));//Java //5、pubic String substring(int beginIndex）; 从当前位置 一直截取到末尾 System.out.println(name2.substring(4)); //6、public String replace(CharSequence target,CharSequence replacement); 替换关键字 String name3 = \\\"你在玩什么东西呢？一直送,垃圾\\\"; String rs = name3.replace(\\\"什么东西\\\", \\\"**\\\").replace(\\\"送\\\", \\\"**\\\").replace(\\\"垃圾\\\", \\\"**\\\"); System.out.println(rs); //7、public boolean contains(CharSequence s); 判断字符串中是否包含 if (name3.contains(\\\"垃圾\\\")){ System.out.println(\\\"违规！！！\\\"); }else { System.out.println(\\\"未发现\\\"); } //8、public boolean startsWith(String prefix); 判断是以什么开始 System.out.println(name3.startsWith(\\\"你在\\\")); //9、public String[] split(String regex);以什么分割成字符串数组 String name4 = \\\"唱歌，跳舞，rap，篮球\\\"; String[] hobbies = name4.split(\\\"，\\\"); for (String hobby : hobbies) { System.out.println(hobby); } } } \"]},\"1149\":{\"h\":\"ArrayList\",\"t\":[\"集合与数组类似，也是一种容器，用于装数据的。\",\"数组的特点：数组定义完，并启动后，类型确定，长度固定！在我们进行CRUD（增删改查）时候，数组的缺陷就暴漏出来了。所以我们就需要利用集合。\",\"集合的特点：集合大小不固定，启动后可以动态变化，类型也可以选择不固定的。集合就非常合适做元素个数不确定，且进行CRUD的业务场景。同时集合也提供了非常多且好用的API～\"]},\"1150\":{\"h\":\"快速入门：\"},\"1151\":{\"h\":\"对象集合获取：\",\"t\":[\"public ArrayList(); 创建一个空的集合对象\"]},\"1152\":{\"h\":\"添加数据：\",\"t\":[\"public boolean add(E e);添加一个指定的元素到此集合末尾\",\"public void add(int index,E element);在指定位置添加指定元素\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo01 { public static void main(String[] args) { //1、创建ArrayList对象 ArrayList list = new ArrayList(); //2、添加数据 list.add(\\\"JavaSE\\\"); list.add(\\\"HTML\\\"); list.add(\\\"CSS\\\"); list.add(\\\"JS\\\"); list.add(\\\"Vue\\\"); list.add(\\\"JavaWeb\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Maven\\\"); list.add(\\\"MyBatis\\\"); list.add(\\\"MyBatis-Plus\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Spring-MVC\\\"); list.add(\\\"SpringBoot\\\"); list.add(\\\"SpringCloud\\\"); list.add(\\\"设计模式\\\"); list.add(\\\"数据结构\\\"); list.add(\\\"算法设计\\\"); //3、打印输出 System.out.println(list);//打印出的是内容，说明ArrayList重写了toString方法 //4、给指定位置添加元素 list.add(1,\\\"注解，反射，多线程，网络编程\\\");//0 1(add) 2(1) 3(2)... System.out.println(list); } } \"]},\"1153\":{\"h\":\"ArrayList对于泛型的支持\",\"t\":[\"Java认为我们这样ArrayList list = new ArrayList();创建ArrayList对象没有约定泛型并不规范，所以要约定一个泛型。\"]},\"1154\":{\"h\":\"泛型概述：\",\"t\":[\"ArrayList< E >:其实就是一个泛型类，可以在编译阶段约束集合对象只能操作某种类型的数（E）\",\"例举：\",\"ArrayList< String >;只能操作字符串类型的元素；\",\"ArrayList< Integer >;只能操作整数类型的元素；\",\"注意：集合中只能存储引用类型，不支持基本数据类型！！！\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo02 { public static void main(String[] args) { ArrayList<String> list = new ArrayList<>(); list.add(\\\"字符串\\\"); list.add(\\\"dadada~\\\"); // list.add(2);整型和其他泛型不能添加到String的ArrayList集合中 ArrayList<Integer> list1 = new ArrayList<>(); list1.add(100); ArrayList<Object> list2 = new ArrayList<>(); list2.add(100); list2.add(\\\"hello\\\"); } } \"]},\"1155\":{\"h\":\"ArrayList常用API\",\"t\":[\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListDemo03 { public static void main(String[] args) { //1、创建ArrayList对象 ArrayList<String> list = new ArrayList<>(); //2、添加数据 list.add(\\\"Spring\\\"); list.add(\\\"Spring-MVC\\\"); list.add(\\\"SpringBoot\\\"); list.add(\\\"SpringCloud\\\"); list.add(\\\"设计模式\\\"); list.add(\\\"数据结构\\\"); list.add(\\\"算法设计\\\"); //常用API //1、public E get(int index) 获取某个索引位置处的元素值（从0开始） String s1 = list.get(1); System.out.println(s1); //2、public int size() 获取集合大小（元素个数） int size = list.size(); System.out.println(size); //3、完成集合的遍历 list.fori for (int i = 0; i < list.size(); i++) { System.out.println(\\\"遍历结果：\\\"+list.get(i)); } //4、public E remove(int index) 删除某个索引位置处的元素，并返回被删除的元素 String remove = list.remove(3); System.out.println(remove); System.out.println(list); //5、public boolean remove(Object o) 直接删除元素，删除成功返回true，否则返回false //注意：只会删除第一个出现的元素（存在元素相同的情况下） boolean b = list.remove(\\\"算法设计\\\"); System.out.println(b); System.out.println(list); //6、public E set(int index, E element) 修改指定位置的元素，并返回oldValue String set = list.set(4, \\\"从入门到如土\\\"); System.out.println(\\\"被修改的：\\\"+set); System.out.println(\\\"修改后的内容：\\\"+list); } } \"]},\"1156\":{\"h\":\"案例：\",\"t\":[\"遍历并删除元素\",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListTest01 { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(100); list.add(90); list.add(70); list.add(88); list.add(78); list.add(79); list.add(66); list.add(33); //删除80分以下的元素 //[100, 90, 70, 88, 78, 79, 66, 33] //[100, 90, 88, 78, 79, 66, 33] //[100, 90, 88, 79, 66, 33] //[100, 90, 88, 79, 33] 我们发现最后结果还是有80分以下的元素！ 这就是非常经典的bug， // i // 因为要删除时，如果后面的元素元素也是小于80分，这时候删除了本位置的元素，然后下一步就是i++，没有继续判断这个位置是不是小于80， // 所以出现了bug。解决方案： //一：在判断如果要删除的时候，我们让它删除后i--；也就是让它回到上一个位置，然后再进行循环判断下一个位置是否小于80，不过效率低 //二：倒序删除！！！ System.out.println(\\\"方法一：\\\"); System.out.println(list); for (int i = 0; i < list.size(); i++) { if (list.get(i)<80){ list.remove(i); i--;//方法一，效率低 } } System.out.println(list); //方法二 ArrayList<Integer> list2 = new ArrayList<>(); list2.add(100); list2.add(90); list2.add(70); list2.add(88); list2.add(78); list2.add(79); list2.add(66); list2.add(33); //[100, 90, 70, 88, 78, 79, 66, 33] //[100, 90, 70, 88, 78, 79, 66] //[100, 90, 88] // i System.out.println(\\\"方法二：\\\"); System.out.println(list2); for (int i = list2.size()-1; i>=0; i--){ if (list2.get(i)<80){ list2.remove(i); } } System.out.println(list2); } } \",\"存储自定义类型（开发中使用最多）\",\"package com.meng.arrayList; public class Movie { private String name;//电影名称 private double score;//电影评分 private String actor;//演员 public Movie() { } public Movie(String name, double score, String actor) { this.name = name; this.score = score; this.actor = actor; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getScore() { return score; } public void setScore(double score) { this.score = score; } public String getActor() { return actor; } public void setActor(String actor) { this.actor = actor; } @Override public String toString() { return \\\"Movie{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", score=\\\" + score + \\\", actor='\\\" + actor + '\\\\'' + '}'; } } \",\"package com.meng.arrayList; import java.util.ArrayList; public class ArrayListTest02 { public static void main(String[] args) { //1、创建一个自定义电影Movie类 //2、定义一个ArrayList类存储这些影片 ArrayList<Movie> movies = new ArrayList<>(); //3、创建影片对象，封装电影数据，把对象加入到集合中 Movie m1 = new Movie(\\\"长津湖\\\", 9.6, \\\"吴京,易烊千玺\\\"); Movie m2 = new Movie(\\\"奇迹·笨小孩\\\", 9.5, \\\"易烊千玺\\\"); movies.add(m1); movies.add(m2); //4、遍历集合中的影片对象，并展示处理 for (int i = 0; i < movies.size(); i++) { Movie movie = movies.get(i); System.out.println(movie); } //迭代器遍历；增强 'for' for (Movie movie : movies) { System.out.println(movie); } } } \",\"元素搜索🔍\",\"package com.meng.arrayList; public class Student { private String sId; private String name; private int age; private String className; public Student() { } public Student(String sId, String name, int age, String className) { this.sId = sId; this.name = name; this.age = age; this.className = className; } public String getsId() { return sId; } public void setsId(String sId) { this.sId = sId; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getClassName() { return className; } public void setClassName(String className) { this.className = className; } @Override public String toString() { return \\\"Student{\\\" + \\\"sId='\\\" + sId + '\\\\'' + \\\", name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", className='\\\" + className + '\\\\'' + '}'; } } \",\"package com.meng.arrayList; import java.util.ArrayList; public class Seek { /** * 根据学号，再学生集合中找出学生对象 * @param students * @param id * @return */ public Student getStudentById(ArrayList<Student> students, String id){ for (Student student : students) { if (id.equals(student.getsId())){ return student; } } return null;//查无此人 } } \",\"package com.meng.arrayList; import java.util.ArrayList; import java.util.Scanner; public class ArrayListTest03 { public static void main(String[] args) { //1、创建一个自定义Student学生类 //2、定义一个ArrayList类存储学生对象 ArrayList<Student> students = new ArrayList<>(); //3、创建学生对象，封装学生数据，把学生对象加入到集合中 Student student1 = new Student(\\\"20220101\\\", \\\"小胡\\\", 19,\\\"计算机\\\"); Student student2 = new Student(\\\"20220102\\\", \\\"小王\\\", 19,\\\"网络\\\"); students.add(student1); students.add(student2); //4、遍历集合 for (Student student : students) { System.out.println(student); } //5、让用户不断输入学号，可以搜索出学生的信息（独立成方法） Seek seek = new Seek(); Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请输入学号：\\\"); String id = scanner.next(); Student s = seek.getStudentById(students, id); if (s == null){ System.out.println(\\\"查无此人\\\"); }else { System.out.println(s); } } } } \"]},\"1157\":{\"h\":\"Object、Objects类\"},\"1158\":{\"h\":\"Object类的作用\",\"t\":[\"一个类要么默认继承了Object类，要么间接继承了Object类，Object类是Java中的祖宗类。\",\"Object类的方法是一切子类都可以直接使用的，所以我们需要学习Object类中的方法。\"]},\"1159\":{\"h\":\"Object类中的常用方法\",\"t\":[\"方法名\",\"说明\",\"public String toString()\",\"默认是返回当前对象在堆内存中的地址信息：类的权限名@内存地址\",\"public Boolean equals(Object o)\",\"默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false\"]},\"1160\":{\"h\":\"toString\",\"t\":[\"package com.toString; public class Student {//extends Object private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.toString; public class Test1 { public static void main(String[] args) { Student student = new Student(\\\"胖虎\\\", 18, '男'); /*String s = student.toString(); System.out.println(s);*/ System.out.println(student.toString()); //直接输出对象变量，默认可以省略toString System.out.println(student); //在开发中直接输出对象，默认输出对象的地址，其实是毫无意义的 //开发中输出对象变量，我们更多希望的是看到对象的内容是什么，而不是对象的地址 //所以我们就需要在Student类中重写toString让它可以输出内容 System.out.println(student); } } \"]},\"1161\":{\"h\":\"equals\",\"t\":[\"package com.toString; import java.util.Objects; public class Student {//extends Object private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } //先尝试自己重写equals /*@Override public boolean equals(Object o){ //1、判断o是不是学生类型 if (o instanceof Student){ //2、判断2个对象的内容是否一样 //this是主调的对象 //字符串的比较还是要用equals，字符串本身就重写了equals，比较本身内容 //o是Object类型，我们需要强转为学生 // if (this.name.equals(((Student) o).name) && this.age == ((Student) o).age && this.gender == ((Student) o).gender){ // return true; // }else { // return false; // } return this.name.equals(((Student) o).name) && this.age == ((Student) o).age && this.gender == ((Student) o).gender; }else { //学生只能和学生比较，否则返回false return false; } }*/ //IDEA自动生成，重写equals也会重写hashCode @Override public boolean equals(Object o) { if (this == o) return true;//先判断了是不是自己和自己比较 if (o == null || getClass() != o.getClass()) return false;//如果o是null，就是传进来一个空进来，或，判断类型是否一样 //如果通过了上面的层层判断，就进行正式的内容比较啦(因为此时的o就是学生类型且不为空) //首先把Object类型的o强转为Student类型的student，如果进行一一比较 //注意，这时候进行字符串比较，调用的是Objects里面的equals，而不是直接调用name字符串里面的equals，可以防止空指针异常（就是怕我们传进去一个空值进去比较） Student student = (Student) o; return age == student.age && gender == student.gender && Objects.equals(name, student.name); } //重写equals也会重写hashCode @Override public int hashCode() { return Objects.hash(name, age, gender); } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.toString; public class Test2 { public static void main(String[] args) { Student student1 = new Student(\\\"胖虎\\\", 18, '男'); Student student2 = new Student(\\\"胖虎\\\", 18, '男'); //不重写equals会调用Object里面的equals，默认比较地址是否相同,我们完全可以使用 == 号比较 System.out.println(student1.equals(student2));//不重写equals就是比较地址，false System.out.println(student1 == student2);//false //但是我们大多数都是想要比较内容是否相同，所以我们就需要在子类中重写equals System.out.println(student1.equals(student2)); } } \"]},\"1162\":{\"h\":\"Objects\",\"t\":[\"Objects类与Object还是继承关系，Object是自从JDK1.7才有的\"]},\"1163\":{\"h\":\"equals\",\"t\":[\"官方进行字符串比较的时候没有用对象自己的equals方法，而是调用Objects的equals的方法来比较两个对象\",\"Objects的equals比较更安全\",\"Objects.equals(name, student.name); 和 name.equals(student.name);\",\"因为后面的一种name可能为空( 就变成了null.equals() )，会报空指针异常，而前面的一种更加安全。\",\"Object.equals\",\"直接比较地址\",\"public boolean equals(Object obj) { return (this == obj); } \",\"String name;\",\"name.equals\",\"比较字符串内容\",\" /** * Compares this string to the specified object. The result is {@code * true} if and only if the argument is not {@code null} and is a {@code * String} object that represents the same sequence of characters as this * object. * * @param anObject * The object to compare this {@code String} against * * @return {@code true} if the given object represents a {@code String} * equivalent to this string, {@code false} otherwise * 将此字符串与指定对象进行比较。当且仅当参数不为null并且是表示与此对象相同的字符序列的String对象时，结果才为true 。 参形： anObject - 与此String进行比较的对象 返回值：true给定对象表示与此String等效的字符串，则为 true，否则为false */ public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) { char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) { if (v1[i] != v2[i]) return false; i++; } return true; } } return false; } \",\"Objects.equals\",\"进行非空判断，更安全。\",\"注意：需要在子类中重写equals才是比较内容，否则它会找父类Object中的equals比较地址\",\"public static boolean equals(Object a, Object b) { return (a == b) || (a != null && a.equals(b)); } \"]},\"1164\":{\"h\":\"isNull\",\"t\":[\"判断变量是否为null，为null返回true，反之false\",\"和 == 号判断是否为null一毛一样，不过调用API判断逼格更高。（专业）\",\"package com.toString; import java.util.Objects; public class Test2 { public static void main(String[] args) { Student student2 = new Student(\\\"胖虎\\\", 18, '男'); Student student3 = null; System.out.println(Objects.isNull(student1)); System.out.println(student1 == null); System.out.println(Objects.isNull(student3)); System.out.println(student3 == null); } } \"]},\"1165\":{\"h\":\"注意点：\",\"t\":[\"//调用Objects的equals比较内容需要重写equals，否则比较的就是地址 System.out.println(Objects.equals(student1,student2)); \"]},\"1166\":{\"h\":\"StringBuilder\",\"t\":[\"StringBuilder是一个可变字符串类，我们可以把它看成一个对象容器\",\"作用：提高字符串的操作效率，如拼接、修改等。\"]},\"1167\":{\"h\":\"StringBuilder构造器\",\"t\":[\"名称\",\"说明\",\"public StringBuilder()\",\"创建一个空白的可变的字符串对象，不包含任何内容\",\"public StringBuilder(String str)\",\"创建一个指定字符串内容的可变字符串对象\"]},\"1168\":{\"h\":\"StringBuilder常用方法\",\"t\":[\"方法名称\",\"说明\",\"public StringBuilder append(任意类型)\",\"添加数据并返回StringBuilder对象本身\",\"public StringBuilder reverse()\",\"将对象内容反转\",\"public int length()\",\"返回对象内容长度\",\"public String toString()\",\"通过toString()就可以实现把StringBuilder转换为String\",\"package com.stringbuilder; /** * 目标：学会StringBuilder操作字符串，最终还需要知道StringBuilder性能好的原因 */ public class Demo01 { public static void main(String[] args) { StringBuilder stringBuilder = new StringBuilder();//\\\"\\\" stringBuilder.append(\\\"a\\\"); System.out.println(stringBuilder); stringBuilder.append(\\\"b\\\"); stringBuilder.append(1); stringBuilder.append(false); stringBuilder.append(3.33); stringBuilder.append(\\\"abc\\\"); stringBuilder.append(2.4f); System.out.println(stringBuilder); //支持链式编程 StringBuilder stringBuilder1 = new StringBuilder(); stringBuilder1.append(\\\"https://\\\").append(\\\"www.\\\").append(\\\"apple\\\").append(\\\".com\\\"); System.out.println(stringBuilder1); //反转内容 stringBuilder1.reverse().append(\\\"反转\\\"); System.out.println(stringBuilder1); //长度 //insert插入 stringBuilder1.insert(0,\\\"22\\\"); System.out.println(stringBuilder1); System.out.println(stringBuilder1.length()); //注意：StringBuilder只是拼接字符串的手段，效率好 //最终的目的还是要恢复成String类型。才能复合方法的参数 String s = stringBuilder1.toString(); test(s); } public static void test(String s){ System.out.println(\\\"方法中的\\\"); System.out.println(s); } } \"]},\"1169\":{\"h\":\"StringBuilder性能好的原因：\",\"t\":[\"与String相比，StringBuilder在拼接字符串的时候，堆内存中只有一个我们new出来的对象，而String在运算拼接字符串的时候，（String底层拼接字符串的原理就是：每次进行运算拼接都会new 一个StringBuilder对象进行拼接，然后toString返回String类型的对象）会在堆内存中创建多个StringBuilder对象，所以效率低。\",\"String内容不可变、拼接字符串性能差\",\"StringBuilder内容可变、拼接字符串性能好，代码优雅\",\"定义字符串使用String\",\"拼接、修改等操作字符串使用StringBuilder，最终一定要toString把StringBuilder转为String类型。\",\"image-20220808162154769\"]},\"1170\":{\"h\":\"Math\"},\"1171\":{\"h\":\"概述：\",\"t\":[\"见名知意，即包含了基本的数学运算方法的类，Math没有提供公开的构造器。\",\"Math的构造器是被私有的，不能对外创建对象，但是Math中的方法都是静态的，可以直接通过类名进行访问。\"]},\"1172\":{\"h\":\"Math中的常用方法\",\"t\":[\"方法名\",\"说明\",\"public static int abs(int a)\",\"获取参数绝对值\",\"public static double ceil(double a)\",\"向上取整\",\"public static double floor(double a)\",\"向下取整\",\"public static int round(float a)\",\"四舍五入\",\"public static int max(int a,int b)\",\"获取两个int值中较大的值\",\"public static double pow(double a,double b)\",\"返回a的b次幂的值\",\"public static double random()\",\"返回值为double的随机值，范围[ 0.0,1.0 )\"]},\"1173\":{\"h\":\"System\",\"t\":[\"System的功能是通用的，都是直接用类名调用即可，所以System不能被实例化。\"]},\"1174\":{\"h\":\"System中常用方法\",\"t\":[\"方法名\",\"说明\",\"public static void exit(int status)\",\"终止当前运行的Java虚拟机，非零表示异常终止\",\"public static long currentTimeMillis()\",\"返回当前系统的时间毫秒值的形式。1970-1-1到目前的时间毫秒值（C语言的生日）\",\"public static void arraycopy(数组源数组，起始索引，目的地数组，起始索引，拷贝个数)\",\"数组拷贝\",\"测试电脑执行十万次循环所需要的时间\",\"package com.time; public class test1 { public static void main(String[] args) { //循环开始的时候时间 long startTime = System.currentTimeMillis(); System.out.println(startTime); //十万次循环 for (int i = 0; i < 1e5; i++) { System.out.println(\\\"输出\\\"+i); } //循环结束的时候的时间 long endTime = System.currentTimeMillis(); System.out.println(endTime); //把毫秒值转换成秒 System.out.println((endTime - startTime)/1000.0); } } //0.192s \"]},\"1175\":{\"h\":\"BigDecimal\"},\"1176\":{\"h\":\"BigDecimal作用\",\"t\":[\"用于解决浮点型运算精度失真的问题\",\"package com; public class Test01 { public static void main(String[] args) { System.out.println(0.09+0.01);//0.09999999999999999 System.out.println(1.0-0.32);//0.6799999999999999 System.out.println(1.015*100);//101.49999999999999 System.out.println(1.301/100);//0.013009999999999999 System.out.println(\\\"---------------\\\"); double c = 0.1+0.2; System.out.println(c);//0.30000000000000004 } } \"]},\"1177\":{\"h\":\"使用步骤\",\"t\":[\"创建对象BigDecimal封装浮点型数据（最好的方式是调用方法）\",\"public static BigDecimal valueOf (double val):包装浮点型成为BigDecimal对象\"]},\"1178\":{\"h\":\"Java开发手册中(嵩山版）：\",\"t\":[\"禁止使用构造方法 BigDecimal(double) 的方式把double值转化为BigDecimal对象。\",\"说明：BigDecimal(double)存在精度损失风险，在精度计算或值比较的场景中可能会导致业务功能逻辑异常。\",\"如：BigDecimal b = new BigDecimal(0.1F);实际的存储值为：0.10000000149\",\"正例：优先推荐入参为String的构造方法，或使用BigDecimal的valueOf 方法，此方法内部起始执行了Double的toString，而Double的toString按double的实际能表达的精度对尾数进行了截断。\",\"BigDecimal recommend1 = new BigDecimal(\\\"0.1\\\");\",\"BigDecimal recommend2 = BigDecimal.valueOf(0.1);\"]},\"1179\":{\"h\":\"BigDecimal常用API\",\"t\":[\"方法名\",\"说明\",\"public BigDecimal add(BigDecimal b)\",\"加法\",\"public BigDecimal subtract(BigDecimal b)\",\"减法\",\"public BigDecimal multiply(BigDecimal b)\",\"乘法\",\"public BigDecimal divide(BigDecimal b)\",\"除法\",\"public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)\",\"除法\",\"package com; import java.math.BigDecimal; import java.math.RoundingMode; public class Test01 { public static void main(String[] args) { System.out.println(0.09+0.01);//0.09999999999999999 System.out.println(1.0-0.32);//0.6799999999999999 System.out.println(1.015*100);//101.49999999999999 System.out.println(1.301/100);//0.013009999999999999 System.out.println(\\\"---------------\\\"); double a = 0.1; double b = 0.2; double c = a+b; System.out.println(c);//0.30000000000000004 System.out.println(\\\"----------------\\\"); //包装浮点型对象成为大数据对象 BigDecimal BigDecimal a1 = BigDecimal.valueOf(a); BigDecimal b1 = BigDecimal.valueOf(b); // BigDecimal c1 = a1.add(b1); // BigDecimal c1 = a1.subtract(b1); // BigDecimal c1 = a1.multiply(b1); BigDecimal c1 = a1.divide(b1); System.out.println(c1);//BigDecimal内重写了toString方法 //BigDecimal只是一个手段，我们最终还是要用double类型去接收结果 double rs = c1.doubleValue(); System.out.println(rs);//这个时候就可以传给double类型的参数了 //注意事项：BigDecimal一定是要精度运算的 BigDecimal a11 = BigDecimal.valueOf(10); BigDecimal b11 = BigDecimal.valueOf(3); // BigDecimal c11 = a11.divide(b11);报异常 ArithmeticException // System.out.println(c11); // c11 = a11/b11 除数 保留几位小数 一半上升（四舍五入） BigDecimal c11 = a11.divide(b11, 2, RoundingMode.HALF_UP); System.out.println(c11); } } \"]},\"1180\":{\"h\":\"总结：\",\"t\":[\"BigDecimal的作用是什么？\",\"解决浮点型运算精度失真问题\",\"BigDecimal的对象如何获取？\",\"BigDecimal b = BigDecimal.valueOf(0.1);\"]},\"1181\":{\"h\":\"Date\",\"t\":[\"Date类的对象在Java中代表的是当前所在系统的此刻日期时间。\",\"package com.date; import java.util.Date; public class DateDemo { public static void main(String[] args) { //创建一个Date对象，代表当前系统此刻的时间对象 Date date = new Date(); System.out.println(date); //获取时间毫秒值 System.out.println(date.getTime());//date.getTime() System.out.println(System.currentTimeMillis());//通过系统获得 //计算出当前时间往后走1小时100秒的的时间 Date date1 = new Date();//创建一个日期对象 System.out.println(date1);//先输出一下 long date2 = date1.getTime() + (60 * 60 + 100) * 1000;//把date1转为时间毫秒值再加上1小时100秒 Date date3 = new Date(date2);//把date2的毫秒值转成日期对象，有两种方式：1、Date date3 = new Date(date2); 2、date3.setTime(date2) System.out.println(date3);//输出date3 } } \"]},\"1182\":{\"h\":\"总结：\",\"t\":[\"日期对象如何创建，如何获取时间毫秒值？\",\"Date date = new Date();//创建日期对象\",\"Long time = date.getTime();//获取日期对象的时间毫秒值\",\"时间毫秒值怎么恢复成日期对象？\",\"Date d = new Date(time);\",\"d.setTime(time);\"]},\"1183\":{\"h\":\"SimpleDateFormat（简单日期格式化类）\"},\"1184\":{\"h\":\"SimpleDateFormat类的作用：\",\"t\":[\"可以对Date对象或时间毫秒值格式化成我们喜欢的时间形式。\",\"也可以把字符串的时间形式解析成日期对象。\"]},\"1185\":{\"h\":\"SimpleDateFormat的构造器\",\"t\":[\"构造器\",\"说明\",\"public SimpleDateFormat()\",\"构造一个SimpleDateFormat，使用默认格式\",\"public SimpleDateFormat(String pattern)\",\"构造一个SimpleDateFormat，使用指定的格式\"]},\"1186\":{\"h\":\"SimpleDateFormat的格式化方法\",\"t\":[\"格式化方法\",\"说明\",\"public final String format(Date date)\",\"将日期格式化成日期/时间字符串\",\"public final String format(Object time)\",\"将时间毫秒值转化成日期/时间字符串\",\"package com.simpleDateFormat; import java.text.SimpleDateFormat; import java.util.Date; public class SimpleDateFormatDemo1 { public static void main(String[] args) { //1、日期对象 Date date = new Date(); System.out.println(date); //2、格式化这个日期对象（指定最终格式化的形式） 年 月 日 时 分 秒 星期 上下午 SimpleDateFormat dateFormat = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss EEE a\\\"); //3、开始格式化日期对象成为喜欢的字符串形式 String rs = dateFormat.format(date); System.out.println(rs); System.out.println(\\\"----------格式化毫秒值-------------\\\"); //4、格式化时间毫秒值 //需求：请问100后的时间是 Date date1 = new Date(); long time = date1.getTime() + 100 * 1000; String s = dateFormat.format(time); System.out.println(s); System.out.println(\\\"-----------解析字符串时间，下一部分:Test1------------\\\"); } } \",\"package com.simpleDateFormat; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class Test1 { public static void main(String[] args) throws ParseException { //使用SimpleDateFormat解析字符串时间成为日期对象 String dateStr = \\\"2021年08月06日 11:11:11\\\"; System.out.println(dateStr); //把字符串时间解析成时间对象：形式务必和字符串中的形式一毛一样，否则会出现bug SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); //然后解析 Date date = sdf.parse(dateStr); //往后走2天14小时49分22秒 为了保险起见在第一个2后面加L，变成long类型，防止毫秒值过大越界 long time = date.getTime() + (2L*24*60*60+14*60*60+49*60+22)*1000; //格式化这个时间毫秒值 String format = sdf.format(time); System.out.println(format); } } \"]},\"1187\":{\"h\":\"总结：\",\"t\":[\"SimpleDateFormat可以格式化哪些时间形式？\",\"SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); sdf.format(date); sdf.format(time); \",\"SimpleDateFormat如何进行字符串时间的解析？\",\"mpleDateFormat sdf = new SimpleDateFormat(\\\"yyyy年MM月dd日 HH:mm:ss\\\"); Date d = sdf.parse(\\\"2022年2月28日 14:23:30\\\");//解析格式必须要一样 \"]},\"1188\":{\"h\":\"Calendar\"},\"1189\":{\"h\":\"Calendar概述\",\"t\":[\"Calendar代表了系统此刻日期对应的日历对象。\",\"Calendar是一个抽象类，不能直接创建对象。\",\"方法\",\"说明\",\"public int get(int field)\",\"获取日期中的某个字段信息\",\"public void set(int field, int value)\",\"修改日历的某个字段信息\",\"public void add(int field, int amount)\",\"为某个字段增加或者减少指定的值\",\"public final Date getTime()\",\"获取此刻日期对象\",\"public long getTimeInMillis()\",\"获取此刻的毫秒值\",\"package com.calendar; import java.util.Calendar; import java.util.Date; public class CalendarDemo1 { public static void main(String[] args) { //1、拿到系统此时的日历对象 Calendar cal = Calendar.getInstance(); System.out.println(cal); //2、获取日历信息 int year = cal.get(Calendar.YEAR); System.out.println(year); int month = cal.get(Calendar.MONTH); System.out.println(month); int weekOfYear = cal.get(Calendar.WEEK_OF_YEAR); System.out.println(weekOfYear); //3、修改日历中的某个字段信息(我们一般不会去修改日历中的时间，因为牵一发而动全身，后面的日历时间就会全都改变） //cal.set(Calendar.HOUR,10); //System.out.println(cal); //4、增加减少指定的值 //64天,59分后 cal.add(Calendar.DAY_OF_YEAR,64); cal.add(Calendar.MINUTE,59); //5、拿到此刻的日期对象 Date time = cal.getTime(); System.out.println(time); //6、拿到时间毫秒值 long timeInMillis = cal.getTimeInMillis(); System.out.println(timeInMillis); } } \",\"注意：Calendar是一个可变日期对象，一旦修改后其对象本身表示的时间将会产生变化\"]},\"1190\":{\"h\":\"JDK8新增的日期API\",\"t\":[\"JDK8新增的日期类，API非常多建议查阅JDK文档\",\"类\",\"说明\",\"LocalDate\",\"不包含具体时间的日期\",\"LocalTime\",\"不包含日期的时间\",\"LocalDateTime\",\"包含了日期以及时间\",\"Instant\",\"代表的是时间戳\",\"DateTimeFormatter\",\"用于做时间的格式化和解析的\",\"Duration\",\"用于计算两个”时间“的间隔\",\"Period\",\"用于计算两个”日期“的间隔\",\"其次，新的API的类型几乎全部都是不变类型（和String的使用类似），可以放心使用，不必担心被修改发生牵一发而动全身。\"]},\"1191\":{\"h\":\"LocalDate、LocalTime、LocalDateTime\",\"t\":[\"他们分别代表日期、时间、日期时间对象，他们类的实例是不可变对象\",\"他们三者构建对象和API都是通用的\",\"image-20220809104348616\",\"image-20220809105047333\",\"image-20220809134847701\",\"image-20220809134957404\",\"image-20220809135057623\",\"package com.time; import java.time.LocalDate; import java.time.LocalDateTime; import java.time.LocalTime; public class Test1 { public static void main(String[] args) { //1、获取本地的日期对象 LocalDate now = LocalDate.now(); System.out.println(\\\"今天的日期：\\\"+now);//今天的日期：2022-02-28 int year = now.getYear(); System.out.println(\\\"year:\\\"+year); int month = now.getMonthValue(); System.out.println(\\\"month:\\\"+month); int dayOfYear = now.getDayOfYear(); System.out.println(\\\"dayOfYear:\\\"+dayOfYear); //-------------------- LocalTime now1 = LocalTime.now(); System.out.println(now1); //--------------------最全的，综合了LocalDate和LocalTime LocalDateTime now2 = LocalDateTime.now(); System.out.println(now2); System.out.println(now2.getYear()); } } \"]},\"1192\":{\"h\":\"包装类\"},\"1193\":{\"h\":\"概述\",\"t\":[\"包装类其实就是八种基本数据类型对应的引用类型。（Java为了实现万物皆对象）\",\"基本数据类型\",\"引用数据类型\",\"byte\",\"Byte\",\"short\",\"Short\",\"int\",\"Integer\",\"long\",\"Long\",\"char\",\"Character\",\"float\",\"Float\",\"double\",\"Double\",\"boolean\",\"Boolean\",\"集合和泛型其实也只能支持包装类，不支持基本数据类型。（ArrayList< Integer >)\",\"自动装箱：基本数据类型的数据和变量可以直接赋值给包装类型的变量\",\"自动拆箱：包装类型的变量可以直接赋值给基本数据类型的变量\"]},\"1194\":{\"h\":\"包装类的特有的功能\",\"t\":[\"包装类的变量的默认值可以是null，容错率高。\",\"包装类可以把基本数据类型转换成字符串形式toString（用的不多 ，其实我们完全可以这样：num = num1 + \\\"\\\" ;让他加一个空字符串）\"]},\"1195\":{\"h\":\"可以把字符串类型转换成真实的数据类型（非常有用）\",\"t\":[\"Integer.parseInt(\\\"字符串类型的整数\\\")\",\" String age = \\\"20\\\"; //转换真实类型（int） int age1 = Integer.parseInt(age); System.out.println(age1); \",\"不过我们发现还是不方便，我们可以用这个：Integer.valueOf(\\\"字符串类型的整数\\\"); Double.valueOf(\\\"字符串类型的小数\\\")\"]},\"1196\":{\"h\":\"Arrays类\"},\"1197\":{\"h\":\"Arrays类概述\",\"t\":[\"数组操作工具类，专门用于数组操作元素的。\"]},\"1198\":{\"h\":\"Arrays类常用的API\",\"t\":[\"方法名\",\"public static String toString(类型[] a)\",\"对数组进行排序\",\"public static void sort(类型[] a)\",\"对数组进行默认升序排序\",\"public static < T > void sort(类型[] a,Comparator< ? super T > c)\",\"使用比较器对象自定义排序\",\"public static int binarySearch(int[] a, int[] key)\",\"二分搜索数组中的数据，存在返回 索引 ，不存在返回 -1\",\"image-20220809142249247\",\"package com.arrays; import java.util.Arrays; public class ArraysDemo1 { public static void main(String[] args) { int[] arr = {10,2,55,23,24,100}; System.out.println(arr);//打印地址 //String rs = Arrays.toString(arr); //System.out.println(rs); System.out.println(Arrays.toString(arr));//打印数组内容 //排序（默认升序） Arrays.sort(arr); System.out.println(Arrays.toString(arr));//API调用 //二分搜索技术（前提数组必须排好序才支持，否则出bug）数据结构中的内容：就是从中间开始先比较大小然后选择是在前半段还是在后半段，然后再和中间的比较... int index = Arrays.binarySearch(arr, 55);//查找到返回索引，查找不到返回 负数（规律 ： -（应该插入的位置的索引+1） ） System.out.println(index); } } \",\"image-20220809143211150\",\"package day03.d7_arrays; public class Student { private String name; private int age; private double height; public Student() { } public Student(String name, int age, double height) { this.name = name; this.age = age; this.height = height; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", height=\\\" + height + '}'; } } \",\"package day03.d7_arrays; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.List; /** * 自定义数组排序规则Comparator比较器 */ public class ArrayDemo2 { public static void main(String[] args) { Integer[] ages = {20, 18, 30, 11, 21, 55, 33}; Arrays.sort(ages); System.out.println(Arrays.toString(ages)); // Arrays.sort(ages, new Comparator<Integer>() { @Override public int compare(Integer o1, Integer o2) { return o2 - o1; } }); System.out.println(Arrays.toString(ages)); // 学生数组对象 Student[] students = { new Student(\\\"1\\\", 20, 189.0), new Student(\\\"2\\\", 22, 185.0), new Student(\\\"3\\\", 19, 177.0), new Student(\\\"4\\\", 21, 182.0) }; Arrays.sort(students, new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { // 比较浮点型可以这样写 return Double.compare(o1.getHeight(), o2.getHeight()); } }); System.out.println(Arrays.toString(students)); // 学生集合对象 List<Student> list = new ArrayList<>(); list.add(new Student(\\\"1\\\", 20, 189.0)); list.add(new Student(\\\"2\\\", 22, 185.0)); list.add(new Student(\\\"3\\\", 19, 177.0)); list.add(new Student(\\\"4\\\", 21, 182.0)); list.sort(new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { return o1.getAge() - o2.getAge(); } }); System.out.println(list); } } \"]},\"1199\":{\"h\":\"选择排序和二分查找\",\"t\":[\"image-20220809153449345\",\"package day03.d8_sort_binarysearch; import java.util.Arrays; /** * 选择排序 */ public class Test1 { public static void main(String[] args) { int[] arr = {6, 1, 5, 2, 3, 7, 4}; for (int i = 0; i < arr.length - 1; i++) { for (int j = i + 1; j < arr.length; j++) { if (arr[i] > arr[j]) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } System.out.println(Arrays.toString(arr)); } } \",\"image-20220809153403483\",\"package day03.d8_sort_binarysearch; import java.util.Arrays; import java.util.Objects; /** * 二分查找 */ public class Test2 { public static void main(String[] args) { int[] arr = {22, 11, 44, 55, 88, 33, 99}; Arrays.sort(arr); System.out.println(Arrays.toString(arr)); System.out.println(binarySearch(arr, 33)); } /** * 二分查找 * * @param arr * @param data * @return 索引值 */ public static int binarySearch(int[] arr, int data) { if (Objects.isNull(arr)) return -1; // 定义左右位置 int left = 0; int right = arr.length - 1; while (left <= right) { // 取中间索引 int middleIndex = (left + right) / 2; // 判断当前中间位置的元素和要找的大小情况 if (data > arr[middleIndex]) { // 右查找 left = middleIndex + 1; } else if (data < arr[middleIndex]) { // 左查找 right = middleIndex - 1; } else { return middleIndex; } } // 没有这个元素 return -1; } } \"]},\"1200\":{\"c\":[\"Java基础\"]},\"1201\":{\"c\":[\"Java语法\"]},\"1202\":{\"h\":\"反射\"},\"1203\":{\"h\":\"反射概述\",\"t\":[\"反射是指对于任何一个Class类，在\\\"运行的时候\\\"：都可以直接得到这个类全部成分\",\"在运行时，可以直接得到这个类的构造器对象：Constructor\",\"在运行时，可以直接得到这个类的成员变量对象：Field\",\"在运行时，可以直接得到这个类的成员方法对象：Method\",\"这种运行时动态获取类信息以及动态调用类中的成分的能力称为java语言的反射机制\"]},\"1204\":{\"h\":\"反射的关键\",\"t\":[\"反射第一步都是先得到编译后的Class类对象，然后就可以得到Class的全部成分\"]},\"1205\":{\"h\":\"总结\",\"t\":[\"反射的基本作用、关键？ \",\"反射是在运行的时候获取字节码文件对象：然后可以解析类中的全部成分\",\"反射的核心思想和关键就是：得到编译后的Class文件对象\"]},\"1206\":{\"h\":\"反射获取类对象\"},\"1207\":{\"h\":\"反射第一步：获取Class文件对象\",\"t\":[\"Class类中的静态方法：forName(String className)\",\"类名.Class\",\"package com.meng.d2_reflect; public class Student { } \",\"package com.meng.d2_reflect; /** * 目标：反射的第一步：获取Class对象（类对象） */ public class Test { public static void main(String[] args) throws Exception { //1、调用Class类中的一个静态方法:forName（全限名：包名+类名） Class c = Class.forName(\\\"com.meng.d2_reflect.Student\\\"); System.out.println(c); //2、直接通过类名.Class（常用） Class<Student> c1 = Student.class; System.out.println(c1); //3、通过 对象.getClass() 获取对象对应类的Class对象（常用） Student student = new Student(); Class<? extends Student> c2 = student.getClass(); System.out.println(c2); } } \"]},\"1208\":{\"h\":\"总结\",\"t\":[\"反射的第一步是什么？\",\"获取Class类对象，如此才可以解析类中的全部成分\",\"获取Class类对象的三种方式\",\"Class c1 = Class.forName(\\\"全类名\\\");\",\"Class c2 = 类名.Class;\",\"Class c3 = 对象.getClass();\"]},\"1209\":{\"h\":\"反射获取构造器对象\",\"t\":[\"反射的第一步是先得到类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取构造器的方法\",\"方法\",\"说明\",\"Constructor< ? >[] getConstructors()\",\"返回所有构造器对象的数组（只能拿public的）\",\"Constructor< ? >[] getDeclaredConstructors()\",\"返回所有构造器对象的数组，存在就能拿到\",\"Constructor< T >[] getConstructor(Class< ? >...parameterTypes)\",\"返回单个构造器对象（只能拿public的）\",\"Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes)\",\"返回单个构造器对象，存在就能拿到\",\"image-20220812153232036\",\"package com.meng.d3_reflect_constructor; public class Student { private String name; private int age; private Student() { System.out.println(\\\"无参数构造器执行\\\"); } public Student(String name, int age) { System.out.println(\\\"有参构造器执行\\\"); this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + '}'; } } \",\"package com.meng.d3_reflect_constructor; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; public class TestStudent01 { /** * 1、getConstructors： * 获取全部的构造器，只能获取public修饰的构造器 * Constructor[] getConstructors() */ @Test public void getConstructors() { //第一步获取类对象 Class c = Student.class; //提取类中全部的构造器对象(public) Constructor[] constructors = c.getConstructors(); //遍历构造器 for (Constructor constructor : constructors) { System.out.println(constructor.getName() + \\\"===>\\\" + constructor.getParameterCount()); } } /** * Constructor< ? >[] getDeclaredConstructors() * 返回所有构造器对象的数组，存在就能拿到 */ @Test public void getDeclaredConstructors() { Class<Student> c = Student.class; //全部 Constructor<?>[] declaredConstructors = c.getDeclaredConstructors(); for (Constructor<?> declaredConstructor : declaredConstructors) { System.out.println(declaredConstructor.getName() + \\\"===>\\\" + declaredConstructor.getParameterCount()); } } /** * 3、Constructor< T >[] getConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象（只能拿public的） */ @Test public void getConstructor() throws NoSuchMethodException { Class<Student> c = Student.class; //只能取出public的构造器 Constructor<Student> constructor = c.getConstructor(String.class, int.class); System.out.println(constructor); } /** * Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象，存在就能拿到 */ @Test public void getDeclaredConstructor() throws NoSuchMethodException { Class<Student> c = Student.class; //按照参数类型取出一个构造器，不管公有还是私有 Constructor<Student> declaredConstructor = c.getDeclaredConstructor(); System.out.println(declaredConstructor); //定位某个有参构造器 Constructor<Student> declaredConstructor1 = c.getDeclaredConstructor(String.class, int.class); System.out.println(declaredConstructor1); } } \"]},\"1210\":{\"h\":\"使用反射技术获取构造器对象并使用\",\"t\":[\"获取构造器的作用依然是初始化一个对象返回\"]},\"1211\":{\"h\":\"Constructor类中用于创建对象的方法\",\"t\":[\"方法\",\"说明\",\"T newInstance(Object...initargs)\",\"根据指定的构造器创建对象\",\"public void setAccessible(boolean flag)\",\"设置为true，表示取消访问检查，进行暴力反射\",\"package com.meng.d3_reflect_constructor; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; public class TestStudent02 { /** * Constructor< T > getDeclaredConstructor(Class< ? >...parameterTypes) * 返回单个构造器对象，存在就能拿到 */ @Test public void getDeclaredConstructor() throws Exception { Class<Student> c = Student.class; //按照参数类型取出一个构造器，不管公有还是私有 Constructor<Student> cons = c.getDeclaredConstructor(); System.out.println(cons); //如果遇到私有的构造器，可以暴力反射 cons.setAccessible(true); Student student = cons.newInstance(); student.setName(\\\"hi\\\"); student.setAge(1000); System.out.println(student); /** * private com.meng.d3_reflect_constructor.Student() * 无参数构造器执行 * Student{name='hi', age=1000} */ //定位某个有参构造器 Constructor<Student> cons1 = c.getDeclaredConstructor(String.class, int.class);//获取一个私有的有参的构造器 System.out.println(cons1); cons1.setAccessible(true);//暴力反射，让它可以创建对象，仅仅这一次 Student s = cons1.newInstance(\\\"小明\\\", 18); System.out.println(s); /** * private com.meng.d3_reflect_constructor.Student(java.lang.String,int) * 有参构造器执行 * Student{name='小明', age=18} */ } } \"]},\"1212\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取构造器对象 \",\"getDeclaredConstructors()\",\"getDeclaredConstructor(Class< ? >...parameterTypes)\",\"反射得到构造器可以做什么？ \",\"依然是创建对象的 \",\"public newInstance(Object...initargs)\",\"如果是非public的构造器，需要打开权限（暴力反射），然后创建对象 \",\"setAccessible(boolean)\",\"反射可以破坏封装性，私有的也可以执行了\"]},\"1213\":{\"h\":\"反射获取成员变量对象\",\"t\":[\"反射的第一步是获取类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取成员变量的方法\",\"方法\",\"说明\",\"Field[] getFields()\",\"返回所有成员变量对象的数组（只能那public的）\",\"Field[] getDeclaredFields()\",\"返回所有成员变量对象的数组，存在就能拿到\",\"Field[] getField(String name)\",\"返回单个成员变量对象（只能那public的）\",\"Field[] getDeclaredField(String name)\",\"返回单个成员变量对象，存在就能拿到\",\"package com.meng.d4_reflect_field; import org.junit.jupiter.api.Test; import java.lang.reflect.Field; public class TestFieldDemo1 { @Test public void getDeclaredFields() { Class<Student> studentClass = Student.class; Field[] declaredFields = studentClass.getDeclaredFields(); for (Field declaredField : declaredFields) { System.out.println(declaredField.getName() + \\\"===>\\\" + declaredField.getType()); } } @Test public void getDeclaredField() throws Exception { Class<Student> studentClass = Student.class; Field name = studentClass.getDeclaredField(\\\"name\\\"); System.out.println(name.getName() + \\\"===>\\\" + name.getType()); } } \",\"package com.meng.d4_reflect_field; import org.junit.jupiter.api.Test; import java.lang.reflect.Constructor; import java.lang.reflect.Field; public class TestFieldDemo2 { /** * 给成员变量赋值 * * @throws Exception */ @Test public void setField() throws Exception { //1、获取类对象 Class<Student> studentClass = Student.class; //利用反射机制创建对象（类中的所有的构造器，和属性都是私有的） //2、获取私有的有参构造器 Constructor<Student> declaredConstructor = studentClass.getDeclaredConstructor(String.class, int.class); //3、暴力反射，打开私有权限 declaredConstructor.setAccessible(true); //4、然后用私有的构造器进行新实例化一个对象student Student student = declaredConstructor.newInstance(\\\"小明\\\", 10); //5、获取类对象中的私有的属性（成员变量） Field age = studentClass.getDeclaredField(\\\"age\\\"); //6、暴力反射、打开属性的私有权限 age.setAccessible(true); //7、然后对student中的age属性进行注入赋值（更改student对象的年龄） age.set(student, 100); //取值 int nowAge = (int) age.get(student); System.out.println(nowAge); //8、输出student发现私有属性已经被修改 System.out.println(student); } } \"]},\"1214\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取成员变量的方式 \",\"获取类中成员变量对象的方法 \",\"getDeclaredFields()\",\"getDeclaredField(String name)\",\"反射得到成员变量可以做什么？ \",\"依然是在某个对象中取值和赋值 \",\"void set(Object obj,Object value);\",\"Object get(Object obj);\",\"如果某个成员变量是非public的，需要打开权限（暴力反射），然后再取值、赋值 \",\"setAccessible(boolean)\"]},\"1215\":{\"h\":\"反射获取方法对象\",\"t\":[\"反射的第一步是先得到类对象，然后从类对象中获取类的成分对象\",\"Class类中用于获取成员方法的方法\",\"方法\",\"说明\",\"Method[] getMethods()\",\"返回所有成员方法对象的数组（只能那public的）\",\"Method[] getDeclaredMethods()\",\"返回所有成员方法对象的数组，存在就可以拿到\",\"Method getMethod(String name,Class<?>...parameterTypes)\",\"返回单个成员方法对象（只能拿public的）\",\"Method getDeclaredMethods(String name,Class<?>...parameterTypes)\",\"返回单个成员方法对象，存在就可以拿到\"]},\"1216\":{\"h\":\"使用反射技术获取方法对象并使用\",\"t\":[\"获取成员方法的作用依然是在某个对象中执行此方法\"]},\"1217\":{\"h\":\"Method类中用于触发执行的方法\",\"t\":[\"方法\",\"说明\",\"Object invoke(Object obj,Object...args)\",\"运行方法：参数一：用obj对象调用调用该方法参数二：调用方法的传递的参数（如果没有就不写）返回值：方法的返回值（如果没有就不写）\",\"package com.meng.d5_reflect_method; public class Dog { private String name; public Dog() { } public Dog(String name) { this.name = name; } public void run() { System.out.println(\\\"狗跑的贼快~~\\\"); } private void eat() { System.out.println(\\\"狗吃骨头\\\"); } private String eat(String name) { System.out.print(\\\"狗吃\\\" + name); return \\\"吃的很开心\\\"; } public static void inAddr() { System.out.println(\\\"在世界上有很多单身狗\\\"); } public void setName(String name) { this.name = name; } public String getName() { return name; } } \",\"package com.meng.d5_reflect_method; import org.junit.jupiter.api.Test; import java.lang.reflect.Method; public class TestMethod1 { @Test public void getDeclaredMethods() { //1、获取类对象 Class<Dog> dogClass = Dog.class; //2、提取全部方法 Method[] declaredMethods = dogClass.getDeclaredMethods(); //3、遍历全部方法 for (Method declaredMethod : declaredMethods) { System.out.println(\\\" 方法名称 \\\" + declaredMethod.getName() + \\\" 返回值类型 \\\" + declaredMethod.getReturnType() + \\\" 参数个数 \\\" + declaredMethod.getParameterCount()); } } @Test public void getDeclaredMethod() throws Exception { //1、获取类对象 Class<Dog> dogClass = Dog.class; //2、获取类对象中的run方法 Method run = dogClass.getDeclaredMethod(\\\"run\\\"); //3、创建一个dog对象 Dog dog = new Dog(); //4、使用类对象中的run方法告诉这个dog应该跑（没有返回值） run.invoke(dog); //5、使用类对象获取eat的方法 Method eat = dogClass.getDeclaredMethod(\\\"eat\\\", String.class); //6、暴力反射，打开权限 eat.setAccessible(true); //7、使用eat方法告诉这个狗：狗你应该吃骨头 String rs = (String) eat.invoke(dog, \\\"骨头\\\"); System.out.println(rs); } } \"]},\"1218\":{\"h\":\"总结\",\"t\":[\"利用反射技术获取成员方法对象的方式 \",\"获取类中的成员方法对象 \",\"getDeclaredMethods()\",\"getDeclaredMethod(String name,Class<?>...parameterTypes)\",\"反射得到成员方法可以做什么？ \",\"依然是在某个对象中触发该方法执行 \",\"Object invoke(Object obj,Object...args)\",\"如果某个成员方法是非public的，需要打开权限（暴力反射），然后再触发执行 \",\"setAccessible(boolean)\"]},\"1219\":{\"h\":\"反射的作用-绕过编译阶段为集合添加数据\",\"t\":[\"反射是作用在运行时的技术，此时集合的泛型将不能产生约束了，此时是可以为集合存入其他任意类型的元素的\",\"泛型只是在编译的阶段可以约束集合只能操作某种数据类型，在编译成Class文件进入运行阶段的时候，其真实类型都是ArrayList了，泛型相当于被擦出了。\",\"package com.meng.d6_reflect_genericity; import java.lang.reflect.Method; import java.util.ArrayList; public class ReflectDemo { public static void main(String[] args) throws Exception { ArrayList<String> list1 = new ArrayList<>(); ArrayList<Integer> list2 = new ArrayList<>(); System.out.println(list1.getClass()); System.out.println(list2.getClass()); System.out.println(list1.getClass() == list2.getClass());//true /** * class java.util.ArrayList * class java.util.ArrayList * 虽然在编译阶段对ArrayList的泛型进行了约束，但是我们看到运用反射得到在运行阶段的时候list1和list2的类型都是ArrayList的，没有泛型进行约束 * 所以我们就可以利用反射绕过编译阶段对集合添加其他泛型的数据 */ System.out.println(\\\"=======================\\\"); list2.add(33); // list2.add(\\\"hello\\\"); Class<? extends ArrayList> list2Class = list2.getClass(); //先获取ArrayList.class文件中所有的方法 Method[] declaredMethods = list2Class.getDeclaredMethods(); //遍历 for (Method declaredMethod : declaredMethods) { System.out.println(declaredMethod); } //获取add方法 Method add = list2Class.getDeclaredMethod(\\\"add\\\", Object.class); //执行add方法，向list2中注入\\\"hello\\\"字符串类型的值 add.invoke(list2, \\\"hello\\\"); System.out.println(list2);//[33, hello] System.out.println(\\\"------------------\\\"); ArrayList list3 = list2; list3.add(\\\"另一种方式突破泛型\\\"); list3.add(true); System.out.println(list3); } } \"]},\"1220\":{\"h\":\"总结\",\"t\":[\"反射为何可以给约定了泛型的集合存入其他类型的元素？ \",\"编译成class文件进入运行阶段的时候，泛型会自动擦除\",\"反射是作用在运行的时候的技术，此时已近不存在泛型了\"]},\"1221\":{\"h\":\"反射的作用-通用框架的底层原理\",\"t\":[\"设计一个框架可以保存所有类型对象的属性和值\",\"package com.meng.d7_reflect_framework; public class Student { private String name; private int age; private char gender; public Student() { } public Student(String name, int age, char gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package com.meng.d7_reflect_framework; public class Teacher { private String name; private int age; private char gender; private double salary; public Teacher() { } public Teacher(String name, int age, char gender, double salary) { this.name = name; this.age = age; this.gender = gender; this.salary = salary; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } @Override public String toString() { return \\\"Teacher{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + \\\", salary=\\\" + salary + '}'; } } \",\"package com.meng.d7_reflect_framework; import java.io.FileOutputStream; import java.io.PrintStream; import java.lang.reflect.Field; public class MybatisUtil { public static void save(Object obj) { try ( PrintStream ps = new PrintStream(new FileOutputStream(\\\"src/data.txt\\\", true)); ) { //1、提取这个变量的全部成员变量 Class<?> objClass = obj.getClass(); ps.println(\\\"=========\\\" + objClass.getSimpleName() + \\\"===========\\\");//objClass.getSimpleName()获取这个类的简单类名，例如Student类获取的就是Student //2、提取这个类的成员变量 Field[] declaredFields = objClass.getDeclaredFields(); for (Field declaredField : declaredFields) { String name = declaredField.getName();//成员变量的名字 declaredField.setAccessible(true);//暴力反射 String value = declaredField.get(obj) + \\\"\\\";//通过成员变量得到成员变量的值 ps.println(name + \\\"=\\\" + value); } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.meng.d7_reflect_framework; import org.junit.jupiter.api.Test; public class TestReflectDemo { @Test public void testAddAllClass() { Student student = new Student(\\\"小明\\\", 10, '男'); MybatisUtil.save(student); Teacher teacher = new Teacher(\\\"小猴\\\", 28, '男', 10000); MybatisUtil.save(teacher); } } \"]},\"1222\":{\"h\":\"总结\",\"t\":[\"反射的作用？ \",\"可以在运行时得到一个类的全部成分然后操作\",\"可以破坏封装线（很突出）\",\"也可以破坏泛型的约束性（很突出）\",\"更重要的用途是适合做Java的高级框架\"]},\"1223\":{\"h\":\"正则表达式\",\"t\":[\"正则表达式可以用一些规定的字符类指定规则，并用来校验数据格式的合法性。\",\"image-20220809140425155\",\"package com.regex; public class Test1 { public static void main(String[] args) { //校验QQ号，5-10位 System.out.println(checkQQ(\\\"11111111111\\\")); System.out.println(checkQQ(\\\"11111\\\")); System.out.println(checkQQ(\\\"1111144\\\")); //正则表达式 System.out.println(checkQQ2(\\\"1\\\")); } public static boolean checkQQ2(String qq){ return qq !=null && qq.matches(\\\"\\\\\\\\d{5,10}\\\");// \\\\d 表示全是数字 { 5 , 10 } 表示5到10位 } public static boolean checkQQ(String qq){ if (qq == null || qq.length() < 5 || qq.length() > 10) { return false; } for (int i = 0; i < qq.length(); i++) { char c = qq.charAt(i); if (c < '0' || c > '9'){ return false; } } return true; } } \",\"正则表达式的规则：查阅JDK文档中的 Pattern\",\"部分文档\"]},\"1224\":{\"h\":\"正则表达式结构摘要\",\"t\":[\"构造\",\"匹配\",\"字符\",\"十\",\"字符x\",\"\\\\\\\\\",\"反斜杠字符\",\"\\\\0n\",\"八进制值为0n（0 <= n<= 7）的字符\",\"\\\\0nn\",\"八进制值为0nn（0 <= n<= 7）的字符\",\"\\\\0mnn\",\"八进制值为0mnn（0 <= m<= 3, 0 <= n<= 7）的字符\",\"\\\\xhh\",\"十六进制值0xhh的字符\",\"\\\\uhhhhh\",\"十六进制值0xhhhhhh的字符\",\"\\\\x{h...h}\",\"The character with hexadecimal value 0xh...h (Character.MIN_CODE_POINT <= 0xh...h <= Character.MAX_CODE_POINT)\",\"\\\\t\",\"标签字符 ('\\\\u0009')\",\"\\\\n\",\"换行符（换行符）字符（“\\\\u000A”）\",\"\\\\r\",\"回车字符（“\\\\u000D”）\",\"\\\\f\",\"表单提要字符（'\\\\u000C'）\",\"\\\\a\",\"警告（铃铛）字符（“\\\\u0007”）\",\"\\\\e\",\"转义字符（'\\\\u001B'）\",\"\\\\cx\",\"与x对应的控制字符\",\"字符类\",\"[abc]\",\"a、b或c（简单类）\",\"[^abc]\",\"除a、b或c以外的任何字符（否定）\",\"[a-zA-Z]\",\"a通过z或A到Z，包括（范围）\",\"[a-d[m-p]]\",\"a通过d，或m通过p：[a-dm-p]（工会）\",\"[a-z&&[def]]\",\"d、e或f（交叉）\",\"[a-z&&[^bc]]\",\"a通过z，b和c除外：[ad-z]（减法）\",\"[a-z&&[^m-p]]\",\"a通过z，而不是m通过p：[a-lq-z]（减法）\",\"预定义字符类\",\"。\",\"任何字符（可能匹配也可能不匹配行终止符）\",\"\\\\d\",\"一个数字：[0-9]\",\"\\\\D\",\"非数字：[^0-9]\",\"\\\\h\",\"水平空白字符：[ \\\\t\\\\xA0\\\\u1680\\\\u180e\\\\u2000-\\\\u200a\\\\u202f\\\\u205f\\\\u3000]\",\"\\\\H\",\"非水平空格字符：[^\\\\h]\",\"\\\\s\",\"空格字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\",\"\\\\S\",\"非空格字符：[^\\\\s]\",\"\\\\v\",\"垂直空格字符：[\\\\n\\\\x0B\\\\f\\\\r\\\\x85\\\\u2028\\\\u2029]\",\"\\\\V\",\"非垂直空格字符：[^\\\\v]\",\"\\\\w\",\"单词字符：[a-zA-Z_0-9]\",\"\\\\W\",\"非单词字符：[^\\\\w]\",\"POSIX字符类（仅限US-ASCII）\",\"\\\\p{Lower}\",\"小写字母字符：[a-z]\",\"\\\\p{Upper}\",\"大写字母字符：[A-Z]\",\"\\\\p{ASCII}\",\"所有ASCII：[\\\\x00-\\\\x7F]\",\"\\\\p{Alpha}\",\"按字母顺序排列的字符：[\\\\p{Lower}\\\\p{Upper}]\",\"\\\\p{Digit}\",\"小数位数：[0-9]\",\"\\\\p{Alnum}\",\"字母数字字符：[\\\\p{Alpha}\\\\p{Digit}]\",\"\\\\p{Punct}\",\"标点符号：其中一个!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_{\",\"\\\\p{Graph}\",\"可见字符：[\\\\p{Alnum}\\\\p{Punct}]\",\"\\\\p{Print}\",\"可打印字符：[\\\\p{Graph}\\\\x20]\",\"\\\\p{Blank}\",\"空格或标签页：[ \\\\t]\",\"\\\\p{Cntrl}\",\"控制字符：[\\\\x00-\\\\x1F\\\\x7F]\",\"\\\\p{XDigit}\",\"十六进制数字：[0-9a-fA-F]\",\"\\\\p{Space}\",\"空格字符：[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\",\"java.lang.字符类（简单的java字符类型）\",\"\\\\p{javaLowerCase}\",\"相当于java.lang.Character.isLowerCase()\",\"\\\\p{javaUpperCase}\",\"相当于java.lang.Character.isUpperCase()\",\"\\\\p{javaWhitespace}\",\"相当于java.lang.Character.isWhitespace()\",\"\\\\p{javaMirrored}\",\"相当于java.lang.Character.isMirrored()\",\"Unicode脚本、块、类别和二进制属性的类\",\"\\\\p{IsLatin}\",\"拉丁字母字符（脚本）\",\"\\\\p{InGreek}\",\"希腊区块（区块）中的一个字符\",\"\\\\p{Lu}\",\"大写字母（类别）\",\"\\\\p{IsAlphabetic}\",\"按字母顺序排列的字符（二进制属性）\",\"\\\\p{Sc}\",\"货币符号\",\"\\\\P{InGreek}\",\"除希腊语区块中的一个字符外的任何字符（否定）\",\"[\\\\p{L}&&[^\\\\p{Lu}]]\",\"除大写字母（减法）以外的任何字母\",\"边界匹配器\",\"^\",\"行的开头\",\"¥\",\"行的末尾\",\"\\\\b\",\"单词边界\",\"\\\\B\",\"非字边界\",\"\\\\A\",\"输入的开头\",\"\\\\G\",\"上场比赛结束\",\"\\\\Z\",\"输入的结尾，但对于最终终止者，如果有的话\",\"\\\\z\",\"输入的结尾\",\"越线匹配者\",\"\\\\R\",\"任何Unicode换行序列都相当于`\\\\u000D\\\\u000A\",\"贪婪的量词\",\"X？\",\"X，一次或根本不一次\",\"X*\",\"X、零次或更多次\",\"X+\",\"X，一次或多次\",\"X{n}\",\"X，正好是n次\",\"X{n，}\",\"X，至少n次\",\"X{n,m}\",\"X，至少n次，但不超过m次\",\"不愿意的量词\",\"X??\",\"X，一次或根本不一次\",\"X*？\",\"X、零次或更多次\",\"X+？\",\"X，一次或多次\",\"X{n}？\",\"X，正好是n次\",\"X{n,}？\",\"X，至少n次\",\"X{n,m}？\",\"X，至少n次，但不超过m次\",\"拥有量词\",\"X？+\",\"X，一次或根本不一次\",\"X*+\",\"X、零次或更多次\",\"X++\",\"X，一次或多次\",\"X{n}+\",\"X，正好是n次\",\"X{n,}+\",\"X，至少n次\",\"X{n,m}+\",\"X，至少n次，但不超过m次\",\"逻辑运算符\",\"XY\",\"X 后跟 Y\",\"X`\",\"`Y\",\"（十）\",\"X，作为一个捕获组\",\"背面参考\",\"\\\\n\",\"无论第n个捕获组匹配什么\",\"\\\\k<name>\",\"无论命名捕获组的“名称”匹配什么\",\"报价\",\"\\\\\",\"没什么，但引用以下字符\",\"\\\\Q\",\"没什么，而是引用所有字符，直到\\\\E\",\"\\\\E\",\"没什么，但以\\\\Q开头的结束引用\",\"特殊构造（命名捕获和非捕获）\",\"（？<name>X）\",\"X，作为一个命名捕获组\",\"(?:X)\",\"X，作为一个非捕获组\",\"（？idmsuxU-idmsuxU）\",\"没什么，但打开火柴的旗帜，我打开-关闭\",\"（？idmsux-idmsux:X）\",\"X，作为一个带有给定标志的非捕获组，i d m s u x on - off\",\"（？=X）\",\"X，通过零宽度正向往前看\",\"（？！十）\",\"X，通过零宽度负展望\",\"（？<=X)\",\"X，通过零宽度正向后看\",\"（？<！十）\",\"X，通过零宽度负视角\",\"（？>X）\",\"X，作为一个独立的、非俘获的团体\"]},\"1225\":{\"h\":\"Stream流\"},\"1226\":{\"h\":\"概述\",\"t\":[\"什么是Stream流？\",\"在Java 8 中，得益于Lambda表达式所带来的函数式编程，引入了一个全新的Stream流的概念\",\"目的：用于简化集合和数组操作的API\",\"image-20220810133948555\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.Collections; import java.util.List; /** * 初步体验Stream流的快捷 */ public class StreamTest { public static void main(String[] args) { List<String> name = new ArrayList<>(); Collections.addAll(name,\\\"刘备\\\",\\\"张飞\\\",\\\"关羽\\\",\\\"张三\\\",\\\"张无忌\\\"); System.out.println(name); //从name集合中取出姓张的放到新的集合 // List<String> zhangList = new ArrayList<>(); // for (String s : name) { // if (s.startsWith(\\\"张\\\")){ // zhangList.add(s); // } // } // System.out.println(zhangList); // // //找名称长度是3的姓名 // List<String> zhangThree = new ArrayList<>(); // for (String s : zhangList) { // if (s.length() == 3){ // zhangThree.add(s); // } // } // System.out.println(zhangThree); //使用Stream实现 /** * 先得到集合的Stream流（类似于传送带），然后经过一层一层的过滤，最终得到的就是我们想要的结果 */ //得到Stream流。过滤不是姓张的元素 。 过滤长度不是3的元素 。forEach遍历流 name.stream().filter(s -> s.startsWith(\\\"张\\\")).filter(s -> s.length() == 3).forEach(s -> System.out.println(s)); } } \"]},\"1227\":{\"h\":\"Stream流的获取\",\"t\":[\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Stream; public class StreamTest2 { public static void main(String[] args) { /**-----------------Collection集合获取流-----------------------*/ Collection<String> list = new ArrayList<>(); Stream<String> s = list.stream();//拿到Collection的Stream流 /**-----------------Map集合获取流-----------------------*/ Map<String,Integer> maps = new HashMap<>(); //键流 Stream<String> keyStream = maps.keySet().stream(); //值流 Stream<Integer> valueStream = maps.values().stream(); //或者键值对 Stream<Map.Entry<String, Integer>> kvStream = maps.entrySet().stream(); /**-----------------数组获取流-----------------------*/ String[] name = {\\\"小王\\\",\\\"小杜\\\",\\\"小李\\\"}; Stream<String> nameStream = Arrays.stream(name); } } \"]},\"1228\":{\"h\":\"Stream常用API\",\"t\":[\"image-20220810134701065\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.List; import java.util.stream.Stream; public class StreamTest3 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); //Stream<T> filter(Predicate<? super T> predicate); // list.stream().filter(new Predicate<String>() { // @Override // public boolean test(String s) { // return s.startsWith(\\\"张\\\"); // } // }); //使用Lambda表达式，我们认为s是list中的每一个元素 //注意过滤的不是filter形参的元素，filter中的形参是要保留的元素，过滤的是不符合形参的元素 list.stream().filter( s-> s.startsWith(\\\"张\\\")).forEach(s -> System.out.println(s)); //只会过滤，而不会改变原本的，list集合中的内容 System.out.println(list); long size = list.stream().filter(s -> s.length() == 3).count(); System.out.println(size); //limit取前几个元素 //扩展，我们认为在Lambda表达式中，我们发现如果入参和后面的方法参数一样的话，我们可以使用方法引用，例如 // s -> System.out.println(s) 可以变成这样 System.out::println 方法引用 list.stream().filter(s -> s.startsWith(\\\"张\\\")).limit(2).forEach(System.out::println); //skip是跳过前几个元素 list.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2).forEach(System.out::println); //Map加工 //给集合元素的前面都加上\\\"黑马的\\\" // list.stream().map(new Function<String, String>() { // @Override // public String apply(String s) { // return \\\"黑马的\\\"+s; // } // }); //简化： s：原材料 -> 加工后的 list.stream().map(s -> \\\"黑马的\\\"+s).forEach(System.out::println); //需求：把所有的名称，都加工为一个学生对象 // list.stream().map(s -> new Student(s)).forEach(student -> System.out.println(student)); list.stream().map(Student::new).forEach(System.out::println);//构造器引用 方法引用 //合并流 Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); Stream<String> s2 = Stream.of(\\\"java1\\\",\\\"java2\\\"); Stream<String> s3 = Stream.concat(s1,s2); s3.forEach(s -> System.out.println(s)); } } \"]},\"1229\":{\"h\":\"Stream流的收集操作\",\"t\":[\"image-20220810135140321\",\"就是把Stream流操作后的结果数据转回到集合或数组中去\",\"Stream流：方便操作集合/数组的手段\",\"集合/数组:才是开发中的目的\",\"流只能被收集一次\",\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; public class StreamTest4 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); List<String> zhangList = s1.collect(Collectors.toList()); System.out.println(zhangList); } } \",\"image-20220810135243897\"]},\"1230\":{\"c\":[\"Java8\"]},\"1231\":{\"c\":[\"Stream\"]},\"1232\":{\"h\":\"XML\"},\"1233\":{\"h\":\"XML的概述\",\"t\":[\"image-20220812181457115\"]},\"1234\":{\"h\":\"XML的创建、语法规则\",\"t\":[\"image-20220813103031843\",\"image-20220813103624311\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!--注释：根标签有且只有一个--> <student> <name>小王</name> <age>20</age> <friend> <name>小李</name> <age>22</age> </friend> <sql> select * from tb_user where age &lt; 18; select * from tb_user where age &lt; 18 &amp;&amp; age > 10; <!--CDATA区中可以按照原来的方式解析--> <![CDATA[ select * from tb_user where age < 10; ]]> </sql> </student> \",\"image-20220813104327660\",\"image-20220813105114797\",\"<!ELEMENT books (book+)> <!ELEMENT book (bookName,author,price)> <!ELEMENT bookName (#PCDATA)> <!ELEMENT author (#PCDATA)> <!ELEMENT price (#PCDATA)> \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE books SYSTEM \\\"data.dtd\\\"> <books> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> <book> <bookName>西游记</bookName> <author>吴承恩</author> <price>100</price> </book> </books> \",\"image-20220813105237548\",\"image-20220813105331038\",\"image-20220813105410833\",\"image-20220813105655574\",\"image-20220813105959987\",\"image-20220813110045653\",\"image-20220813110215014\",\"image-20220813110303201\",\"image-20220813110747061\",\"image-20220813110810494\",\"image-20220813111355648\",\"image-20220813111410216\",\"image-20220813111732708\"]},\"1235\":{\"h\":\"ArrayList源码深入\"},\"1236\":{\"h\":\"ArrayList扩容原理\",\"t\":[\"当我们写下了如下代码ArrayList<Integer> list = new ArrayList<>(); 调用了ArrayList类的无参构造方法创建了一个ArrayList对象实例。\",\"public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; } \",\"并且给Object[] elementData（用于存储数组列表元素的数组）一个初始的空数组。\",\"当我们调用了add方法将指定的元素添加到elementData末尾的时候 add方法如下\",\"/** * 将指定的元素追加到此列表的末尾。 */ public boolean add(E e) { //添加元素之前，先调用ensureCapacityInternal方法 ensureCapacityInternal(size + 1); // Increments modCount!! //这里看到ArrayList添加元素的实质就相当于为数组赋值 elementData[size++] = e; return true; } \",\"简单来说在添加第一个元素之前先进行扩容，具体调用了ensureCapacityInternal(size + 1)方法得到最小扩容量 在接着看上面👆🏻的方法\",\"//得到最小扩容量 private void ensureCapacityInternal(int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { // 获取默认的容量和传入参数的较大值 minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); } ensureExplicitCapacity(minCapacity); } \",\"该方法的参数minCapacity为1，调用Math.max(DEFAULT_CAPACITY, minCapacity);方法之后minCapacity为10。\",\"接着调用ensureExplicitCapacity(minCapacity);方法判断是否需要扩容\",\"//判断是否需要扩容 private void ensureExplicitCapacity(int minCapacity) { modCount++; // overflow-conscious code if (minCapacity - elementData.length > 0) //调用grow方法进行扩容，调用此方法代表已经开始扩容了 grow(minCapacity); } \",\"因为第一次这个时候minCapacity=10，elementData.length=0；所以肯定需要扩容，继续调用grow(minCapacity)方法进行扩容\",\"/** * 要分配的最大数组大小 */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; /** * ArrayList扩容的核心方法。 */ private void grow(int minCapacity) { // oldCapacity为旧容量，newCapacity为新容量 int oldCapacity = elementData.length; //将oldCapacity 右移一位，其效果相当于oldCapacity /2， //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍， int newCapacity = oldCapacity + (oldCapacity >> 1); //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量， if (newCapacity - minCapacity < 0) newCapacity = minCapacity; // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE， //如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。 if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } \",\"int newCapacity = oldCapacity + (oldCapacity >> 1),所以 ArrayList 每次扩容之后容量都会变为原来的 1.5 倍左右（oldCapacity 为偶数就是 1.5 倍，否则是 1.5 倍左右）！ 奇偶不同，比如 ：10+10/2 = 15, 33+33/2=49。如果是奇数的话会丢掉小数.\",\"当 add 第 1 个元素时，oldCapacity 为 0，经比较后第一个 if 判断成立，newCapacity = minCapacity(为 10)。但是第二个 if 判断不会成立，即 newCapacity 不比 MAX_ARRAY_SIZE 大，则不会进入 hugeCapacity 方法。数组容量为 10，add 方法中 return true,size 增为 1。\",\"当 add 第 11 个元素进入 grow 方法时，newCapacity 为 15，比 minCapacity（为 11）大，第一个 if 判断不成立。新容量没有大于数组最大 size，不会进入 hugeCapacity 方法。数组容量扩为 15，add 方法中 return true,size 增为 11。\",\"以此类推···\",\"总结：\",\"Q：说一说ArrayList的扩容机制吧。\\nA：当我们创建一个ArrayList对象的时候，底层其实是一个Object数组并且在我们创建的时候进行了初始化为空数组；\\n当我们第一次调用add方法进行添加元素的时候，首先会调用Arrays.copyOf方法对数组进行一个长度为10的扩容，扩容完毕之后再进行size++和元素的添加。\\n然后第二次调用add方法进行添加元素的时候，因为当前所需容量小于10所以不需要扩容。\\n当添加到第11个元素的时候，因为超过数组的长度10，所以会按照原先的1.5倍左右进行扩容，扩容完毕之后再进行size++和元素的添加。\\n······\"]},\"1237\":{\"h\":\"集合\"},\"1238\":{\"h\":\"集合概述\",\"t\":[\"集合和数组都是容器。\",\"数组的特点：\",\"数组定义完成并启动后，类型确定，长度固定。\",\"进行增删操作的时候，数组是不太合适的，增删数据都需要放弃原有的数组或者位移。\",\"集合是Java中存储对象数据的一种容器\",\"集合的特点：\",\"集合大小不固定，启动后可以动态变化，类型也可以选择不固定。集合更想一个气球。\",\"集合非常适合做元素增删操作。\",\"注意：集合只能存储引用类型的数据，如果要存储基本数据类型的数据可以选用包装类。\",\"image-20220809155725450\"]},\"1239\":{\"h\":\"Collection集合的体系特点\"},\"1240\":{\"h\":\"集合类体系结构\",\"t\":[\"image-20220809155829876\",\"集合分为Collection（单列）和Map（双列）\",\"Collection单例集合，每个元素（数据）只包含一个值\",\"Map双列集合，每个元素包含两个值（键值对：key : value）\",\"首先我们先了解单列集合\"]},\"1241\":{\"h\":\"Collection集合体系\",\"t\":[\"Collection集合是一个接口，是单列集合的祖宗类。\",\"Collection又分了一个List接口和Set接口。\",\"List下有ArrayList和LinkedList两个常用的实现类。\",\"Set下有HashSet和TreeSet常用实现类。\",\"HashSet下有LinkedHashSet实现类。\",\"image-20220809161431474\"]},\"1242\":{\"h\":\"Collection集合的特点\"},\"1243\":{\"h\":\"List系列集合：添加元素是有序的、可重复的、有索引。\",\"t\":[\"ArrayList、LinkedList：有序、可重复、有索引\"]},\"1244\":{\"h\":\"Set系列集合：添加元素是无序的、不重复、无索引。\",\"t\":[\"HashSet：无序、不重复、无索引；LinkedHashSet：有序、不重复、无索引\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.HashSet; /** * 明确Collection集合体系的特点 */ public class CollectionDemo1 { public static void main(String[] args) { //List 有序、可重复、有索引 Collection list = new ArrayList(); list.add(\\\"java\\\"); list.add(123); list.add(true); list.add(\\\"java\\\"); list.add(123); list.add(true); System.out.print(\\\"List:\\\");//有序、可重复、有索引 :[java, 123, true, java, 123, true] System.out.println(list);//可以直接打印出内容，说明重写了toString方法 //Object[] array = list.toArray(); toArray方法可以把集合转换成数组 //System.out.println(Arrays.toString(array)); 调用Arrays类的toString方法快速打印出数组 //Set 无序 不重复 无索引 Collection hashSet = new HashSet(); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); System.out.print(\\\"Set:\\\"); System.out.println(hashSet);// 无序、不重复、无索引：[java, 123, true] } } \"]},\"1245\":{\"h\":\"集合对泛型的支持\",\"t\":[\"集合都是支持泛型的，所谓泛型就是类，八种基本数据类型必须用他们的包装类（例如Integer，Double，Boolean...)，集合添加泛型可以在编译阶段约束集合只能操作某种数据类型。\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; import java.util.HashSet; /** * 明确Collection集合体系的特点 */ public class CollectionDemo1 { public static void main(String[] args) { //List 有序、可重复、有索引 Collection list = new ArrayList(); list.add(\\\"java\\\"); list.add(123); list.add(true); list.add(\\\"java\\\"); list.add(123); list.add(true); System.out.print(\\\"List:\\\");//有序、可重复、有索引 :[java, 123, true, java, 123, true] System.out.println(list);//可以直接打印出内容，说明重写了toString方法 //Object[] array = list.toArray(); toArray方法可以把集合转换成数组 //System.out.println(Arrays.toString(array)); 调用Arrays类的toString方法快速打印出数组 //Set 无序 不重复 无索引 Collection hashSet = new HashSet(); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); hashSet.add(\\\"java\\\"); hashSet.add(123); hashSet.add(true); System.out.print(\\\"Set:\\\"); System.out.println(hashSet);// 无序、不重复、无索引：[java, 123, true] System.out.println(\\\"----------分割线-----------\\\"); //集合对泛型的支持,不支持基本数据类型 Collection<String> list1 = new ArrayList<>(); list1.add(\\\"java\\\"); // list1.add(1);编译阶段报错 Collection<Integer> integers = new ArrayList<>(); integers.add(23);//这个时候23会自动装箱成为Integer对象 System.out.println(integers); } } \"]},\"1246\":{\"h\":\"Conllection API\",\"t\":[\"Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用。\"]},\"1247\":{\"h\":\"Collection API :\",\"t\":[\"方法名\",\"public boolean add(E e)\",\"把给定的对象添加到当前集合中\",\"public void clear()\",\"清空当前集合中的所有元素\",\"public boolean remove(E e)\",\"把给定的对象在当前集合中删除\",\"public boolean contains(Object o)\",\"判断当前集合中是否包含指定的对象\",\"public boolean isEmpty()\",\"判断当前集合是否为空\",\"public int size()\",\"返回集合中的元素个数\",\"public Objetc[] toArray()\",\"把集合中的元素，存储到数组中\",\"package com.meng.collection; import com.sun.istack.internal.NotNull; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; public class CollectionDemo2 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //2、清空元素 //list.clear();清空所以的元素 //3、判断集合是否为空，是空返回true，反之false System.out.println(list.isEmpty());//false //4、获取元素大小 System.out.println(list.size()); //5、判断集合中是否包含某个元素 System.out.println(list.contains(\\\"Java\\\")); System.out.println(list.contains(\\\"java\\\"));//false 精确匹配 //6、删除某个元素，如果有多个重复的元素，会默认删除第一个 System.out.println(list.remove(\\\"java\\\"));//false System.out.println(list); System.out.println(list.remove(\\\"Java\\\"));//true System.out.println(list); //7、把集合转换为数组 这里转换为Object是因为，以后有一种技术可以强行向String的集合中添加其他的元素，所以转成了Object Object[] array = list.toArray(); System.out.println(Arrays.toString(array)); System.out.println(\\\"-------------拓展-----------\\\"); Collection<String> list2 = new ArrayList<>(); list2.add(\\\"HTML\\\"); list2.add(\\\"CSS\\\"); list2.add(\\\"JS\\\"); list2.add(\\\"vue\\\"); list.addAll(list2);//把list2中的元素拷贝到list中 System.out.println(list); } } \"]},\"1248\":{\"h\":\"Collection集合常用的遍历\"},\"1249\":{\"h\":\"迭代器遍历概述\",\"t\":[\"遍历就是一个一个的把容器中的元素访问一遍。\",\"迭代器在java中的代表是iterator，迭代器是集合专用的遍历方式\",\"image-20220809164400430\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; public class CollectionDemo3 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //得到当前集合的迭代器对象 Iterator<String> iterator = list.iterator();//定义这个的时候就会得到一个该集合的迭代器，在第一个位置！！！ // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//遍历第一个元素，选取元素后移位 // System.out.println(iterator.next());//出现无此元素异常，越界！！ //定义while循环 while (iterator.hasNext()){//hasNext 问一问iterator里面该位置也没有元素，有元素就返回true并且移到下一个元素，反之false System.out.println(iterator.next()); } } } \",\"迭代器的默认位置在第一个元素的位置（当前集合索引为0）\",\"如果迭代器越界了会出现NoSuchElementException异常\"]},\"1250\":{\"h\":\"foreach/增强for循环\",\"t\":[\"增强for循环：既可以遍历集合也可以遍历数组\",\"它是JDK5之后出现的，其内部原来是一个iterator迭代器，遍历集合相当于是迭代器的简化写法\",\"实现iterator接口的类才可以使用迭代器和增强for，Collection接口已经实现了iterator接口\",\"格式：\",\"for(元素数据类型 变量名 : 数组或Collection集合){\",\"​ //在此处使用变量名就是该元素\",\"}\",\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; import java.util.Iterator; public class CollectionDemo4 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //foreach for (String s : list) { System.out.println(s); } System.out.println(\\\"----------------\\\"); double[] scores = {100,99,59.5}; for (double score : scores) { System.out.println(score); } } } \"]},\"1251\":{\"h\":\"Lambda 表达式\",\"t\":[\"package com.meng.collection; import java.math.BigDecimal; import java.util.ArrayList; import java.util.Collection; import java.util.function.Consumer; public class CollectionDemo5 { public static void main(String[] args) { //多态，list调用的都是左边Collection中的方法 Collection<String> list = new ArrayList<>(); //1、添加元素 list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"Spring\\\"); list.add(\\\"Java\\\"); System.out.println(list); //forEach list.forEach(new Consumer<String>() { @Override public void accept(String s) { System.out.println(s); } }); //简化 list.forEach(s -> { System.out.println(s); }); //更简化 list.forEach(System.out::println); } } \"]},\"1252\":{\"h\":\"Collection集合存储自定义类型的对象\",\"t\":[\"package com.meng.collection; import java.util.ArrayList; import java.util.Collection; public class CollectionDemo6 { public static void main(String[] args) { //定义一个电影类 //定义一个集合对象存储电影 Collection<Movie> movies = new ArrayList<>(); movies.add(new Movie(\\\"唐人街探案1\\\",9.8,\\\"王宝强，刘昊然\\\")); movies.add(new Movie(\\\"唐人街探案2\\\",9.8,\\\"王宝强，刘昊然\\\")); movies.add(new Movie(\\\"唐人街探案3\\\",9.8,\\\"王宝强，刘昊然\\\")); //遍历集合中的每一个元素 for (Movie movie : movies) { System.out.println(movie); } } } \",\"注意：集合中存储的是对象的地址。\"]},\"1253\":{\"h\":\"常见数据结构\",\"t\":[\"数据结构概述、栈、队列\",\"数组\",\"链表\",\"二叉树、二叉查找树\",\"平衡二叉树\",\"红黑树\"]},\"1254\":{\"h\":\"数据结构概述\",\"t\":[\"数据结构是计算机底层存储、组织数据的方式。是指数据相互之间是以什么方式排列在一起的。\",\"通常情况下，精心选择的数据结构可以带来更高的运行或存储效率\"]},\"1255\":{\"h\":\"栈\",\"t\":[\"栈的特点：后进先出，先进后出（薯片桶类型的）\",\"数据进入栈称为：进栈\",\"数据离开栈称为：出栈\",\"应用：游戏中手枪弹夹中的子弹威力的大小（例如第一枪可以打多少血量，第二枪打多少血量...）\",\"image-20220809172231598\"]},\"1256\":{\"h\":\"队列\",\"t\":[\"队列的特点：先进先出，后进后出（排队）\",\"数据从后端进入队列称为：入队列\",\"数据从前端离开队列称为：出队列\",\"应用：医院或餐厅叫号系统\",\"image-20220809172259302\"]},\"1257\":{\"h\":\"数组\",\"t\":[\"特点：内存中的一段连续空间、查询速度快（根据索引） 、删除效率低（删除数据后，再把后面的数据一个一个移过来）、增加效率极低\",\"image-20220809172438463\"]},\"1258\":{\"h\":\"链表\",\"t\":[\"链表中的元素是在内存中不连续存储的，每个元素结点包含数据值和下一个元素的地址。\",\"链表查询慢，无论查询哪个数据都要从头开始找。\",\"增删比较快，只需要把链（数据指向的下一个的地址）给改一改就行了\",\"单链表：只能向后查找\",\"双链表：向前向后都可以查找\",\"image-20220809174949079\",\"image-20220809175052880\"]},\"1259\":{\"h\":\"二叉树，二叉查找树\",\"t\":[\"二叉树：就是包含一个父节点，一个父节点产生一个左节点和右节点，每个结点最多有两个结点。\",\"二叉查找树：又称为二叉排序树或者二叉搜索树\",\"image-20220809175404361\"]},\"1260\":{\"h\":\"平衡二叉树\",\"t\":[\"优化二叉树可能出现的瘸子现象（一边非常长，一边很短）\",\"image-20220809175546477\",\"image-20220809175738079\",\"平衡二叉树是在满足查找的二叉树的大小规则下，让树尽可能矮小，以此提高查找数据的性能。\",\"平衡二叉树在添加元素后导致不平衡后：基本策略是进行左旋或者右旋，保证平衡。\",\"推荐观看黑马视频解析：https://www.bilibili.com/video/BV1Cv411372m?p=130&t=1826.1\"]},\"1261\":{\"h\":\"红黑树\",\"t\":[\"基于红黑规则实现了自平衡的排序二叉树\"]},\"1262\":{\"h\":\"红黑树概述\",\"t\":[\"红黑树是一种自平衡的二叉树，是计算机科学中用到的一种数据结构。\",\"1972年出现，当时被称为平衡二叉B树。1978年被修改为如今的”红黑树“\",\"每一个结点可以是红或黑；红黑树不是通过高度平衡的，他的平衡是通过红黑规则进行实现的。\"]},\"1263\":{\"h\":\"红黑规则\",\"t\":[\"每一个节点或是红色的，或是黑色的，根节点必须是黑色的\",\"如果一个节点没有子节点或者父节点，则该节点对应节点相应的指针属性值为Nill,这些Nill视为叶节点，叶节点是黑色的。\",\"如果某一个节点是红色的，那么它的子节点必须是黑色的（不能出现两个红色的节点相连的情况）\",\"对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。\",\"红黑树增删查改的性能都很好\",\"image-20220809181657857\",\"image-20220809181620271\",\"image-20220809181736575\"]},\"1264\":{\"h\":\"List系列集合\"},\"1265\":{\"h\":\"List集合特点：\",\"t\":[\"ArrayList、LinkedList：有序、可重复、有索引\",\"有序：存储和去除的元素顺序一致\",\"有索引：可通过索引操作元素\",\"可重复：存储的元素可以重复\"]},\"1266\":{\"h\":\"List集合特有的方法\",\"t\":[\"List集合因为支持索引，所以多了很多索引操作的独特api，其他Collection的功能List也继承了。\",\"方法名\",\"说明\",\"void add(int index,E element)\",\"在此集合中的指定位置插入指定元素\",\"E remove(int index)\",\"删除指定索引处的元素，返回被删除的元素\",\"E set(int index,E element)\",\"修改指定索引处的元素，返回被修改的元素\",\"E get(int index)\",\"返回指定索引处的元素\",\"package com.meng.list; import java.util.ArrayList; import java.util.List; public class ListDemo1 { public static void main(String[] args) { //创建一个ArrayList集合对象 //List：有序、可重复、有索引 List<String> list = new ArrayList<>();//多态写法，经典 list.add(\\\"Java\\\"); list.add(\\\"Java\\\"); list.add(\\\"MySQL\\\"); list.add(\\\"MySQL\\\"); //插入数据 list.add(2,\\\"HTML\\\"); System.out.println(list);//[Java, Java, HTML, MySQL, MySQL] //根据索引删除元素 System.out.println(list.remove(2)); System.out.println(list); //根据索引取元素 System.out.println(list.get(2)); //根据索引修改元素，返回修改前的数据 System.out.println(\\\"被修改的数据\\\"+list.set(0, \\\"JavaSE\\\")); System.out.println(list); } } \",\"List的实现类底层原理\",\"ArrayList底层是基于数组实现的，根据查询元素块，增删元素相对慢。\",\"LinkedList底层是基于双链表实现的，查询元素慢，增删首位元素是非常快的。\"]},\"1267\":{\"h\":\"List集合的遍历方式\",\"t\":[\"迭代器\",\"增强for循环\",\"Lambda表达式\",\"for循环（因为List集合存在索引，Collection不存在索引不能使用for循环）\"]},\"1268\":{\"h\":\"ArrayList集合底层原理（面试热点）\",\"t\":[\"ArrayList底层是基于数组实现的：根据索引定位元素快，增删需要做元素位移操作。\",\"第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。\",\"创建ArrayList集合后，首先会向集合中加入一个大小为10的数组，然后添加一个元素size加一，当元素的size等于10，会按照当前的1.5倍扩容(变为了15)，当插入的时候，会遍历插入的元素后面的元素然后后移一位，size加一；当删除元素的时候会把后面的元素全部迁移过来，size减一\"]},\"1269\":{\"h\":\"LinkedList集合底层原理\",\"t\":[\"LinkedList的特点\",\"底层是数据结构中的双链表，查询慢，首尾操作的速度是极快的，所以多了很多首尾操作的特有API\"]},\"1270\":{\"h\":\"LinkedList集合特有的功能\",\"t\":[\"方法名称\",\"说明\",\"public void addFirst(E e)\",\"在该列表开头插入指定的元素\",\"public void addLast(E e)\",\"在该列表末尾插入指定的元素\",\"public E getFirst()\",\"从列表中获取第一个元素\",\"public E getLast()\",\"从列表中获取最后一个元素\",\"public E removeFirst()\",\"从列表中删除第一个元素并返回第一个元素\",\"public E removeLast()\",\"从列表中删除最后一个元素并返回第一个元素\",\"package com.meng.list; import java.util.LinkedList; public class ListDemo2 { public static void main(String[] args) { //LinkedList 可以完成队列结构，和栈结构（双链表） //栈 //我们想调用LinkedList的独有方法，这个时候就不需要用多态了 LinkedList<String> stack = new LinkedList<>(); //压栈，入栈 // stack.addFirst(\\\"\\\"); // stack.push(\\\"\\\");内的方法就是这个： // public void push(E e) { // addFirst(e); // } stack.push(\\\"第1颗子弹\\\"); stack.push(\\\"第2颗子弹\\\"); stack.push(\\\"第3颗子弹\\\"); stack.push(\\\"第4颗子弹\\\"); System.out.println(\\\"弹夹：\\\"+stack); //出栈 弹栈 //System.out.println(stack.getFirst()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"碰~\\\"+stack.pop()); System.out.println(\\\"弹夹：\\\"+stack); //队列 LinkedList<String> queue = new LinkedList<>(); //入队 queue.offerLast(\\\"1\\\");//排队是排在最后一个位置；入队的专业英语：offerLast queue.addLast(\\\"2\\\"); queue.addLast(\\\"3\\\"); queue.addLast(\\\"4\\\"); queue.addLast(\\\"5\\\"); System.out.println(\\\"当前队伍：\\\"+queue); //出队 // System.out.println(queue.getFirst()); queue.removeFirst(); queue.removeFirst(); queue.removeFirst(); System.out.println(\\\"出队3个后\\\"+queue); } } \"]},\"1271\":{\"h\":\"集合的并发修改异常问题\",\"t\":[\"我们之前发现：边遍历边删除元素的时候可能有BUG\",\"迭代器遍历集合且直接用集合删除元素的时候可能出现问题\",\"增强for循环遍历集合且直接用集合删除元素的时候可能出现问题\",\"package com.meng.deleteQuestion; import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.Objects; public class Test1 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"C++\\\"); list.add(\\\"Java\\\"); list.add(\\\"Java\\\"); list.add(\\\"PHP\\\"); list.add(\\\"Python\\\"); list.add(\\\"HTML\\\"); System.out.println(list); //[C++, Java, Java, PHP, Python, HTML] //需求：删除list集合中的Java //a、迭代器遍历删除 // Iterator<String> it = list.iterator(); // while (it.hasNext()){ // String ele = it.next(); // if (\\\"Java\\\".equals(ele)){ // //list.remove(\\\"Java\\\");//不要使用这个删除 因为删除后就元素会前移，但是就不检测这个移动过来的元素了，直接后移 // it.remove();//利用迭代器删除当前所在元素，并且不会后移!!! // } // } // System.out.println(list); //b、foreach删除。有bug // for (String s : list) { // if (\\\"Java\\\".equals(s)){ // list.remove(\\\"Java\\\");//并发异常 // } // } //c、lambda表达式。有bug // list.forEach(s -> { // if (\\\"Java\\\".equals(s)){ // list.remove(\\\"Java\\\");//也有BUG // } // }); //d、for循环。会漏删除，不过我们可以倒着删除 for (int i = list.size()-1; i >= 0; i--) { String s = list.get(i); if (\\\"Java\\\".equals(s)){ list.remove(\\\"Java\\\"); } } System.out.println(list);//[C++, Java, PHP, Python, HTML] } } \"]},\"1272\":{\"h\":\"泛型深入\"},\"1273\":{\"h\":\"泛型概述和优势\",\"t\":[\"泛型：是JDK5中引入的新特性，可以在编译阶段约束操作的数据类型，并进行检查\",\"泛型的格式：< 数据类型 >；注意：泛型只能支持引用数据类型\",\"集合体系的全部接口和实现类都是支持泛型的使用\"]},\"1274\":{\"h\":\"泛型的好处\",\"t\":[\"统一数据类型\",\"把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，因为编译阶段类型就确定下来。\"]},\"1275\":{\"h\":\"自定义泛型类\",\"t\":[\"定义类时 同时定义了泛型的类就是泛型类\",\"泛型类的格式：修饰符 class 类名 < 泛型变量 >\",\"public class MyArrayList<T>{} \",\"此处泛型变量T可以随便写为任意的标志，常见的比如：E、T、K、V等。不过我们常用T\",\"作用：编译阶段可以指定数据类型，类似于集合的作用。\"]},\"1276\":{\"h\":\"案例\",\"t\":[\"模拟ArrayList集合自定义一个MyArrayList集合，完成添加和删除功能的泛型设计即可。\",\"package com.meng.genericity; import java.util.ArrayList; public class MyArrayList<T> { private ArrayList<T> lists = new ArrayList<>();//装饰模式的一种思想，外部类中可以再包一个内部对象 public void add(T t){ lists.add(t); } public void remove(T t){ lists.remove(t); } @Override public String toString() { return lists.toString(); } } \",\"package com.meng.genericity; public class Test { public static void main(String[] args) { MyArrayList<String> list = new MyArrayList<>(); list.add(\\\"Java\\\"); list.add(\\\"JavaWeb\\\"); list.add(\\\"MySQL\\\"); list.remove(\\\"Java\\\"); System.out.println(list); } } \"]},\"1277\":{\"h\":\"自定义泛型方法\",\"t\":[\"定义方法的同时定义了泛型方法就是泛型方法\",\"泛型方法的格式：修饰符 < 泛型变量 > 方法返回值 方法名称(形参列表)\",\"public <T> void show(T t){ } \",\"方法中可以使用泛型接收一切实际类型的参数，方法更具有通用性\"]},\"1278\":{\"h\":\"案例\",\"t\":[\"给任意一个类型的数组，都能返回特点内容，也就是实现Arrays.toString(数组)的功能\",\"package com.meng.genericity; public class Demo1 { public static void main(String[] args) { String[] name = {\\\"张三\\\",\\\"李四\\\",\\\"王五\\\"}; printArray(name); Integer[] ages = {10,20,30}; printArray(ages); Integer[] array = getArray(ages); System.out.println(array); String[] array1 = getArray(name); System.out.println(array1); } //泛型方法 public static <T> T[] getArray(T[] arr){ return arr; } public static <T> void printArray(T[] arr){ if (arr != null){ StringBuffer stringBuffer = new StringBuffer(\\\"[\\\"); for (int i = 0; i<arr.length; i++) { stringBuffer.append(i).append(i == arr.length - 1 ? \\\"\\\" : \\\", \\\"); } stringBuffer.append(\\\"]\\\"); System.out.println(stringBuffer); }else { System.out.println(arr); } } } \"]},\"1279\":{\"h\":\"自定义泛型接口\",\"t\":[\"使用了泛型定义的接口就是泛型接口\",\"泛型接口格式：修饰符 interface 接口名称< 泛型变量 >\",\"作用：泛型接口可以让实现类选择当前功能操作的数据类型\"]},\"1280\":{\"h\":\"案例\",\"t\":[\"教务系统：提供一个案例可以约束一定要完成数据（老师、学生）的增删改查操作。\",\"package com.meng.genericity_interface; public interface Data<T> { void add (T t); void remove(int id); void update(T t); T getById(int id); } \",\"package com.meng.genericity_interface; public class Teacher { } \",\"package com.meng.genericity_interface; public class Student { } \",\"package com.meng.genericity_interface; public class TeacherData implements Data<Teacher>{ @Override public void add(Teacher teacher) { } @Override public void remove(int id) { } @Override public void update(Teacher teacher) { } @Override public Teacher getById(int id) { return null; } } \",\"package com.meng.genericity_interface; //由实现类决定操作哪些信息 泛型接口传入的是学生，下面泛型就会表示成为学生 public class StudentData implements Data<Student>{ @Override public void add(Student student) { } @Override public void remove(int id) { } @Override public void update(Student student) { } @Override public Student getById(int id) { return null; } } \"]},\"1281\":{\"h\":\"泛型接口的作用\",\"t\":[\"泛型接口可以约束实现类，实现类可以在实现接口的时候传入自己的操作的数据类型，这样重写的方法都是针对与该类型的操作。\"]},\"1282\":{\"h\":\"泛型通配符、上下限\",\"t\":[\"通配符：？\",\"可以在使用泛型的时候代表一切类型\",\"ETKV是在定义泛型的时候使用的\",\"泛型的上下限：\",\"? extends Car: ？必须是Car或者是其子类 泛型上限\",\"? super Car : ？必须是Car或者其父类 泛型下限\"]},\"1283\":{\"h\":\"案例\",\"t\":[\"开发一个极品飞车的游戏，所有的汽车都能一起参加比赛\",\"package com.meng.game; import java.util.ArrayList; public class GenericDemo { public static void main(String[] args) { ArrayList<BMW> bmws = new ArrayList<>(); bmws.add(new BMW()); bmws.add(new BMW()); bmws.add(new BMW()); go(bmws); ArrayList<SUV> suvs = new ArrayList<>(); suvs.add(new SUV()); suvs.add(new SUV()); suvs.add(new SUV()); go(suvs); ArrayList<Dog> dogs = new ArrayList<>(); dogs.add(new Dog()); dogs.add(new Dog()); dogs.add(new Dog()); //go(dogs);//这是赛车游戏，狗不能进来的！！！达咩！使用泛型上下限 } /** * 所有车参加比赛,泛型通配符：? 可以 * @param cars */ public static void go(ArrayList<? extends Car> cars){ } } class Dog{ } class SUV extends Car{ } class BMW extends Car{ } //父类汽车 class Car{ } \"]},\"1284\":{\"h\":\"Set集合体系\"},\"1285\":{\"h\":\"Set集合的特点\",\"t\":[\"image-20220809161431474\",\"无序：存储顺序不一致\",\"不重复：可以去重复\",\"无索引：没有带索引的一些方法，所以不能使用普通的for循环遍历，也不能通过索引获取元素\"]},\"1286\":{\"h\":\"Set集合实现类的特点\",\"t\":[\"HashSet：无序、不重复、无索引\",\"LinkedHashSet：有序、不重复、无索引\",\"TreeSet：排序（天然对元素大小做升序排序）、不重复、无索引\",\"Set集合的功能其实和Collection集合的API一致\",\"package com.meng.collection_map; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.Set; public class SetDemo1 { public static void main(String[] args) { //Set集合体系的特点 Set<String> sets = new HashSet<>();//经典的代码：多态；以后我们如果HashSet不想使用，可以直接修改后面的HashSet，不用修改下面的元素了 sets.add(\\\"MySQL\\\"); sets.add(\\\"MySQL\\\"); sets.add(\\\"Java\\\"); sets.add(\\\"Java\\\"); sets.add(\\\"HTML\\\"); sets.add(\\\"HTML\\\"); sets.add(\\\"SpringBoot\\\"); sets.add(\\\"SpringBoot\\\"); System.out.println(sets);//[Java, MySQL, HTML, SpringBoot] 无序、不重复、无索引。无序：第一次是无序的，后面是有规律的 Set<String> linked = new LinkedHashSet<>();//多态；以后我们如果HashSet不想使用，可以直接修改后面的HashSet，不用修改下面的元素了 linked.add(\\\"MySQL\\\"); linked.add(\\\"MySQL\\\"); linked.add(\\\"Java\\\"); linked.add(\\\"Java\\\"); linked.add(\\\"HTML\\\"); linked.add(\\\"HTML\\\"); linked.add(\\\"SpringBoot\\\"); linked.add(\\\"SpringBoot\\\"); System.out.println(linked);//[MySQL, Java, HTML, SpringBoot]有序、不重复、无索引。无索引：只是没有提供索引的方法，底层还是有索引的 } } \"]},\"1287\":{\"h\":\"HashSet元素无序的底层原理：哈希表\"},\"1288\":{\"h\":\"HashSet底层原理\",\"t\":[\"HashSet底层采用哈希表存储的数据\",\"哈希表是一种对应增删改查数据性能都较好的结构\"]},\"1289\":{\"h\":\"哈希表的组成\",\"t\":[\"JDK8之前，底层采用数组+链表组成\",\"JDK8开始后，底层采用数组+链表+红黑树组成\"]},\"1290\":{\"h\":\"哈希值\",\"t\":[\"JDK根据对象的地址，按照某种规则算出来的int类型的数值\"]},\"1291\":{\"h\":\"Object类的API\",\"t\":[\"**public int hashCode();**返回对象的哈希值\"]},\"1292\":{\"h\":\"对象的哈希值特点\",\"t\":[\"同一个对象多次调用hashCode()方法返回的哈希值是相同的\",\"默认情况下，不同对象的哈希值是不同的\",\"package com.meng.collection_map; import java.util.Objects; /** * 目标：获取对象的哈希值，并确认 */ public class SetDemo2 { public static void main(String[] args) { String name = \\\"小胡\\\"; System.out.println(name.hashCode()); System.out.println(name.hashCode()); String name1 = \\\"小虎\\\"; System.out.println(name1.hashCode()); System.out.println(name1.hashCode()); } } \"]},\"1293\":{\"h\":\"哈希表原理\",\"t\":[\"JDK1.7:https://www.bilibili.com/video/BV1Cv411372m?p=134&spm_id_from=pageDriver&vd_source=51ea6336b76b9ea01f2d5cad2110fe0a&t=1095.8\",\"image-20220810103158118\",\"创建一个默认长度为16的数组，数组名为table\",\"根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法）\",\"判断当前位置是否为null，如果是null直接存入\",\"如果位置不为null，表示有元素，则调用equals方法比较哈希值\",\"如果哈希值一样，则不存，如果不一样，则存入数组\",\"JDK7新元素会占据老元素的位置，指向老元素\",\"JDK8中的新元素会挂在老元素的下面\",\"JDK1.8\",\"image-20220810103529523\",\"底层结构：哈希表（数组、链表、红黑树）\",\"当挂在元素下面的数据过多时，查询性能降低，从JDK8后当链表长度超过8的时候，自动转换为红黑树（根据哈希值比较）\",\"image-20220810104015476\",\"package com.meng.collection_map; import java.util.Objects; public class Student { private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } } \",\"package com.meng.collection_map; import java.util.HashSet; import java.util.Set; public class SetDemo3 { public static void main(String[] args) { //Set集合去重复的原因是先判断哈希值，在判断equals。重写hashCode和equals去重复 Set<Student> students = new HashSet<>(); students.add(new Student(\\\"小胡\\\",18,'男')); students.add(new Student(\\\"小胡\\\",18,'男')); students.add(new Student(\\\"小王\\\",18,'男')); students.add(new Student(\\\"小张\\\",18,'男')); System.out.println(students); } } \",\"image-20220810104318377\"]},\"1294\":{\"h\":\"LinkedHashSet集合\",\"t\":[\"有序、不重复、无索引\",\"这里的有序指的是保证存储和取出的元素顺序一致\",\"原理：底层数据结构依然是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序\",\"image-20220810104528185\"]},\"1295\":{\"h\":\"TreeSet集合\",\"t\":[\"不重复、无索引、可排序\",\"可排序：按照元素大小默认升序（由小到大)排序\",\"TreeSet集合底层是基于红黑树的数据结构实现排序的，增删改查性能都较好\"]},\"1296\":{\"h\":\"TreeSet集合默认的排序规则\",\"t\":[\"对于数值类型：Integer、Double，官方默认按照大小进行升序排序\",\"对于字符串类型：默认按照首字符的编号升序排序。\",\"对于自定义的类型如Student对象，TreeSet无法直接排序\",\"如果想使用TreeSet存储自定义类型，需要制定排序规则\",\"image-20220810105035042\",\"image-20220810105424559\",\"package com.meng.collection_map; import java.util.Objects; public class Student implements Comparable<Student>{ private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } /** * 方式一：类自定义比较规则 * @param o * @return */ @Override public int compareTo(Student o) { //按照年龄比较 // return this.age - o.age;//取掉年龄重复的元素 return this.age - o.age >= 0 ? 1 : -1;//把等于零的情况取掉了，保留元素重复的元素，避免了少元素的情况 } } \",\"package com.meng.collection_map; import java.util.Comparator; import java.util.Set; import java.util.TreeSet; public class SetDemo4 { public static void main(String[] args) { Set<Integer> set = new TreeSet<>(); set.add(23); set.add(80); set.add(21); set.add(25); System.out.println(set); Set<String> strings = new TreeSet<>(); strings.add(\\\"Java\\\"); strings.add(\\\"Java\\\"); strings.add(\\\"A\\\"); strings.add(\\\"Z\\\"); strings.add(\\\"b\\\"); strings.add(\\\"小黑\\\"); System.out.println(strings);//按照首字符编号从小到大排序 System.out.println(\\\"----------------------\\\"); //优先使用集合自带的比较器 // Set<Student> students = new TreeSet<>(new Comparator<Student>() { // @Override // public int compare(Student o1, Student o2) { // return o1.getAge() - o2.getAge(); // } // }); Set<Student> students = new TreeSet<>(Comparator.comparingInt(Student::getAge)); students.add(new Student(\\\"xx\\\",11,'男')); students.add(new Student(\\\"xx\\\",11,'男')); students.add(new Student(\\\"xx\\\",13,'男')); students.add(new Student(\\\"xx\\\",1,'男')); System.out.println(students); } } \",\"总结：\",\"TreeSet集合特点： \",\"可排序、不重复、无索引\",\"底层基于红黑树实现的、增删改查性能好\",\"TreeSet集合自定义排序规则有几种方式 \",\"2种\",\"类实现Comparable接口，重写比较规则\",\"集合自定义Comparable比较器，重写比较规则\"]},\"1297\":{\"h\":\"总结\",\"t\":[\"如果希望元素可以重复，有索引，索引查询要快\",\"用ArrayList集合，基于数组的（用的最多）\",\"如果希望元素可以重复，有索引，增删首尾操作快\",\"用LinkedList集合，基于链表\",\"如果希望增删改查都快，但是元素不重复、无序、无索引\",\"用HashSet集合，基于哈希表\",\"如果希望增删改查都快，但是元素不重复、有序、无索引\",\"用LinkedHashSet集合，基于哈希表和双链表\",\"如果要对对象进行排序\",\"用TreeSet集合，基于红黑树。后续也可以用List集合实现排序\"]},\"1298\":{\"h\":\"可变参数\",\"t\":[\"可变参数用在形参中可以接收多个数据\",\"可变参数的格式：数据类型 ... 参数名称\",\"可变参数的作用\",\"传输参数非常灵活，方便。可以不穿参数，可以传一个参数或多个，甚至也可以传一个数组\",\"可变参数在方法内部本身就是一个数组\",\"可变参数的注意事项：\",\"一个形参列表中的可变参数只能有一个\",\"可变参数必须放在形参列表的最后面\",\"package com.meng.params; import java.util.Arrays; public class MethodDemo { public static void main(String[] args) { sum(1); sum(10); sum(10,20,30); sum(1,new int[]{10,20,30}); } public static void sum(int a,int...nums){ //注意nums在方法内部其实就是数组 System.out.println(\\\"参数个数\\\"+nums.length); System.out.println(\\\"元素内容\\\"+ Arrays.toString(nums)); } } \"]},\"1299\":{\"h\":\"集合工具类\",\"t\":[\"java.utils.Collections:是集合工具类\",\"作用：Collections并不属于集合，是用来操作集合的工具类\"]},\"1300\":{\"h\":\"Collections常用的API\",\"t\":[\"方法名称\",\"说明\",\"public static < T > boolean addAll(Collection < ? super T > c ,T ... elements)\",\"给集合对象批量添加元素\",\"public static void shuffle ( List < ? > list)\",\"打乱List集合元素的顺序\"]},\"1301\":{\"h\":\"Collections常用的排序的API\",\"t\":[\"方法\",\"说明\",\"public static < T > void sort(LIst< T > list)\",\"将集合中的元素按照默认规则排序，注意：本方式不可以直接对自定义类型的List排序，除非自定义类实现了比较规则的Comparable接口\",\"public static < T > void sort(List< T > list , Comparator< ? super T > c)\",\"将集合中的元素按照指定规则排序\",\"package com.meng.collections; import java.util.Objects; public class Student implements Comparable<Student>{ private String name; private int age; private char sex; public Student() { } public Student(String name, int age, char sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", sex=\\\" + sex + '}'; } /** * 只要两个结果内容一样，返回的就是true * @param o * @return */ @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age && sex == student.sex && Objects.equals(name, student.name); } /** * 两个对象的内容一样，重写后的hashCode的哈希值就是一样的 * @return */ @Override public int hashCode() { return Objects.hash(name, age, sex); } /** * 方式一：类自定义比较规则 * @param o * @return */ @Override public int compareTo(Student o) { return this.age - o.age; } } \",\"package com.meng.collections; import java.util.ArrayList; import java.util.Collections; import java.util.List; public class CollectionDemo2 { public static void main(String[] args) { List<Student> students = new ArrayList<>(); Collections.addAll(students,new Student(\\\"xx\\\",10,'男'), new Student(\\\"xx\\\",9,'男'), new Student(\\\"xx\\\",8,'男'), new Student(\\\"xx\\\",10,'男')); System.out.println(students); Collections.sort(students);//学生类已经实现类Comparable接口（implements） System.out.println(students); } } \"]},\"1302\":{\"h\":\"案例：斗地主游戏\",\"t\":[\"package com.meng.games; public class Card { private String size;//点数 private String color;//花色 private int index;//牌的大小，解决排序中J Q K A 大小王排序的问题 public Card() { } public Card(String size, String color,int index) { this.size = size; this.color = color; this.index = index; } public String getSize() { return size; } public void setSize(String size) { this.size = size; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } public int getIndex() { return index; } public void setIndex(int index) { this.index = index; } @Override public String toString() { return color + size; } } \",\"package com.meng.games; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List; /** * 1、做牌 * 2、洗牌 * 3、定义三个玩家 * 4、发牌 * 5、排序 * 6、看牌 */ public class GameDemo { /** *1、定义一个静态的集合存储54张牌 */ public static ArrayList<Card> allCards = new ArrayList<>(); /** *2、定义静态代码块，加载数据 */ static { String[] sizes = {\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\",\\\"10\\\",\\\"J\\\",\\\"Q\\\",\\\"K\\\",\\\"A\\\",\\\"2\\\"}; String[] colors = {\\\"♠\\\",\\\"♥\\\",\\\"♣\\\",\\\"♦\\\"}; //组合点数和花色 int index = 0;//记录牌的大小 for (String size : sizes) { index++; for (String color : colors) { //封装成牌对象 Card card = new Card(size, color,index); //存入到集合容器 allCards.add(card); } } Card c1 = new Card(\\\"\\\", \\\"小王\\\",++index); Card c2 = new Card(\\\"\\\", \\\"大王\\\",++index); Collections.addAll(allCards,c1,c2);//把大小王放到牌中 System.out.println(\\\"新牌：\\\"+allCards); } public static void main(String[] args) { //9、洗牌 Collections.shuffle(allCards); //洗牌后 System.out.println(\\\"洗牌：\\\"+allCards); //10、发牌、定义3个玩家 List<Card> play1 = new ArrayList<>(); List<Card> play2 = new ArrayList<>(); List<Card> play3 = new ArrayList<>(); //发牌,剩余3张牌作为底牌 for (int i = 0; i < allCards.size() - 3; i++) { //先拿到当前循环一次的牌对象 Card card = allCards.get(i); if (i%3 == 0){ //play1 play1.add(card); }else if ( i%3 == 1){ play2.add(card); }else if (i%3 == 2){ play3.add(card); } } //12、拿到底牌 List<Card> lastThreeCards = allCards.subList(allCards.size() - 3, allCards.size()); //13、给玩家的牌排序 sortCards(play1); sortCards(play2); sortCards(play3); sortCards(lastThreeCards); //14、输出 System.out.println(\\\"play1:\\\"+play1); System.out.println(\\\"play2:\\\"+play2); System.out.println(\\\"play3:\\\"+play3); System.out.println(\\\"底牌:\\\"+lastThreeCards); } private static void sortCards(List<Card> cards) { //给牌排序 Collections.sort(cards, (o1, o2) -> o2.getIndex() - o1.getIndex()); } } \"]},\"1303\":{\"h\":\"Map集合\"},\"1304\":{\"h\":\"Map集合概述和使用\",\"t\":[\"Map集合是一种双列集合，每个元素包含两个元素\",\"Map集合的每个元素的格式：key=value（键值对元素）\",\"Map集合也被称为”键值对集合“\"]},\"1305\":{\"h\":\"Map集合整体格式\",\"t\":[\"Collection集合的格式：[元素1，元素2，元素3]\",\"Map集合完整的格式：\",\"key1 ==========value1\",\"key2 ==========value2\",\"key3 ==========value3\"]},\"1306\":{\"h\":\"Map集合体系\",\"t\":[\"image-20220810131346237\",\"image-20220810132212721\",\"image-20220810132414102\",\"Map集合的键无序、不重复的；Map集合的值不做要求可以重复\"]},\"1307\":{\"h\":\"Map集合的特点\",\"t\":[\"Map集合的特点都是由键决定的\",\"Map集合的键是无序的、不重复、无索引，值不做要求（可以重复）\",\"Map集合后面的重复的键会覆盖前面的重复的键\",\"Map集合的键值对都可以为null\"]},\"1308\":{\"h\":\"Map集合实现类的特点\",\"t\":[\"HashMap：元素按照键是无序的，不重复，无索引，值不做要求（与Map体系一致）\",\"LinkedHashMap：元素按照键是有序的，不重复，无索引，值不做要求\",\"TreeMap：元素按照键是排序的，不重复，无索引，值不做要求\",\"package com.meng.map; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo1 { public static void main(String[] args) { // Map<String,Integer> maps = new HashMap<>();//一行经典代码！！多态 Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 maps.put(\\\"NIKE\\\",1); maps.put(\\\"鸿星尔克\\\",1); maps.put(\\\"Java\\\",1); maps.put(\\\"Java\\\",10);//覆盖了上面的Java maps.put(null,null); System.out.println(maps); } } \"]},\"1309\":{\"h\":\"Map集合常用API\",\"t\":[\"方法\",\"说明\",\"V put (K key, V value)\",\"添加元素\",\"V remove (Object key)\",\"根据键删除集合中的元素\",\"void clear()\",\"清空集合中所有的元素\",\"boolean containsKey(Object key)\",\"判断集合中是否包含指定的键\",\"boolean containsValue(Object value)\",\"判断集合中是否包含指定的值\",\"boolean isEmpty()\",\"判断集合是否为空\",\"int size()\",\"集合的长度，也就是集合中键值对的个数\",\"V get(Object key)\",\"根据键取出值对应的元素\",\"package com.meng.map; import java.util.*; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo1 { public static void main(String[] args) { Map<String,Integer> maps = new HashMap<>();//一行经典代码！！多态 // Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 //1、添加元素 maps.put(\\\"NIKE\\\",1); maps.put(\\\"鸿星尔克\\\",1); maps.put(\\\"Java\\\",1); maps.put(\\\"Java\\\",10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\",1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\",2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} //2、清空集合 //maps.clear();//{} System.out.println(maps); //3、判断集合是否为空 //System.out.println(maps.isEmpty());//true //4、根据键获取对应的值 Integer nike = maps.get(\\\"NIKE\\\"); System.out.println(nike); System.out.println(maps.get(\\\"Java\\\")); System.out.println(maps.get(\\\"Java2\\\"));//null //5、根据键删除整个元素,删除键会返回对应的值 Integer java = maps.remove(\\\"Java\\\"); System.out.println(java); System.out.println(maps); //6、判断是否包含某个键 System.out.println(maps.containsKey(\\\"Java\\\")); //7、判断是否包含某个值 System.out.println(maps.containsValue(1)); //8、获取全部键的集合，返回一个Set集合，因为Map集合和Set集合的特点是一样的 Set<String> keys = maps.keySet(); System.out.println(keys); //9、获取所有值的集合,返回的是Collection集合不是Set集合，因为怕值出现一样的时候用Set会出现值的丢失,所以使用Collection集合 Collection<Integer> values = maps.values(); System.out.println(values); //10、集合大小 System.out.println(maps.size());//4 //11、合并集合 Map<String,Integer> map1 = new HashMap<>(); map1.put(\\\"java1\\\",1); map1.put(\\\"java2\\\",100); Map<String,Integer> map2 = new HashMap<>(); map2.put(\\\"java2\\\",1); map2.put(\\\"java3\\\",100); map1.putAll(map2);//把map2中的集合拷贝到map1中 System.out.println(map1); } } \"]},\"1310\":{\"h\":\"Map集合的遍历\"},\"1311\":{\"h\":\"键找值\",\"t\":[\"先获取Map集合的全部键的Set集合\",\"遍历Set集合，然后通过键提取对应的值\",\"package com.meng.map; import java.util.Collection; import java.util.HashMap; import java.util.Map; import java.util.Set; /** * 认识Map体系的特点：键无序、不重复、无索引、值不做要求 */ public class MapDemo2 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 // Map<String,Integer> maps = new LinkedHashMap<>();//一行经典代码！！多态。LinkedHashMap有序 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); //1、把键转为Set集合 Set<String> keySet = maps.keySet(); //2、遍历每个键，根据键找值 for (String s : keySet) { System.out.println(s+\\\"=====>\\\"+maps.get(s)); } } } \"]},\"1312\":{\"h\":\"键值对\",\"t\":[\"先把Map集合装换成Set集合，Set集合中的每个元素都是键值对实体类型了\",\"遍历Set集合，然后提取键以及值\",\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Set; public class MapDemo3 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); /** * 此时 maps = {NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} * 使用foreach遍历map集合，发现map集合的键值对元素直接是没有类型的。所以不可以直接使用foreach遍历集合 * 不过我们可以通过Map的方法 entrySet() 的方法，把Map转换成Set集合的形式 * Set<Map.Entry<String, Integer>> entries = [ (NIKE=1), (Java=10), (iPhone13=1), (HuaWei=2), (鸿星尔克=1) ] * 然后我们就可以直接遍历Set集合得到Map集合了 * */ Set<Map.Entry<String, Integer>> entries = maps.entrySet(); for (Map.Entry<String, Integer> entry : entries) { System.out.println(entry); // String key = entry.getKey(); // Integer value = entry.getValue(); // System.out.println(key+\\\"----->\\\"+value); } } } \"]},\"1313\":{\"h\":\"Lambda表达式\",\"t\":[\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Set; import java.util.function.BiConsumer; public class MapDemo4 { public static void main(String[] args) { Map<String, Integer> maps = new HashMap<>();//一行经典代码！！多态 //1、添加元素 maps.put(\\\"NIKE\\\", 1); maps.put(\\\"鸿星尔克\\\", 1); maps.put(\\\"Java\\\", 1); maps.put(\\\"Java\\\", 10);//覆盖了上面的Java maps.put(\\\"iPhone13\\\", 1);//覆盖了上面的Java maps.put(\\\"HuaWei\\\", 2);//覆盖了上面的Java //{NIKE=1, Java=10, iPhone13=1, HuaWei=2, 鸿星尔克=1} System.out.println(maps); // maps.forEach(new BiConsumer<String, Integer>() { // @Override // public void accept(String s, Integer integer) { // System.out.println(s+\\\"---->\\\"+integer); // } // }); //lambda表达式,一行直接解决Map集合遍历 maps.forEach((k,v) -> { System.out.println(k+\\\"--->\\\"+v); }); } } \",\"map集合的foeEach底层源码：其实就是在调用第二种的键值对方法，把键和值封装成一个类型整体给Set集合，然后再回调BiConsumer函数型接口\",\"案例\",\"package com.meng.map; import java.util.HashMap; import java.util.Map; import java.util.Random; public class MapCase { public static void main(String[] args) { //80个学生的选择 String[] selects = {\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"D\\\"}; StringBuilder sb = new StringBuilder(); Random random = new Random(); for (int i = 0; i < 80; i++) { sb.append(selects[random.nextInt(selects.length)]); } System.out.println(sb); //定义一个Map集合 Map<Character,Integer> infos = new HashMap<>(); for (int i = 0; i < 80; i++) { char c = sb.charAt(i); if (infos.containsKey(c)){ //让值加一 infos.put(c,infos.get(c)+1); }else { //第一次被选 infos.put(c,1); } } System.out.println(infos); } } \"]},\"1314\":{\"h\":\"不可变集合\",\"t\":[\"什么是不可变集合？\",\"不可以被修改的集合\",\"集合的数据在创建的时候就已经提供，并且在整个生命周期中都不可改变。否则报错\",\"如何创建不可变集合？\",\"在List、Set、Map接口中，都存在of方法，可以创建一个不可变集合\",\"package com.meng.unchange_collection; import java.util.List; import java.util.Map; import java.util.Set; public class CollectionDemo1 { public static void main(String[] args) { //不可变的List集合，注意JDK1.8不支持 List<Double> lists = List.of(569.5,600.5,599.3); // lists.add(500.4); System.out.println(lists); //不可变的Set集合 Set<String> sets = Set.of(\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\"); System.out.println(sets); //不可变的Map集合 Map<String,Integer> maps = Map.of(\\\"huawei\\\",2,\\\"java\\\",3); System.out.println(maps); } } \"]},\"1315\":{\"h\":\"总结：\",\"t\":[\"定义完成之后不可修改、添加、删除\",\"List、Set、Map接口中都存在of方法可以创建不可变集合\",\"image-20220810132436936\"]},\"1316\":{\"h\":\"多线程\"},\"1317\":{\"h\":\"多线程\",\"t\":[\"image-20220811094813259\",\"多线程是什么？\",\"多线程是指从硬件上实现多条执行流程的技术\",\"多线程用在哪？有什么好处\",\"购票系统\",\"百度网盘的下载和上传\",\"消息通信(收发消息)，淘宝，京东...\"]},\"1318\":{\"h\":\"多线程的创建\"},\"1319\":{\"h\":\"方式一：继承Thread类\",\"t\":[\"定义一个子类MyThread继承线程类java.lang.Thread，重写run()方法\",\"创建MyThread类对象\",\"调用线程对象的start()方法启动线程\",\"package com.demo1; /** * 掌握多线程的创建方式一：继承Thread类 */ public class Demo1 { public static void main(String[] args) { //1、new一个新线程对象，代表线程 Thread t = new MyThread(); //2、调用start方法执行线程中的run方法 t.start();//实现了多线程 //写一个主线程 for (int i = 0; i < 5; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } /** * 定义一个线程类继承Thread类 */ class MyThread extends Thread{ /** * 重写run方法，里面是定义线程以后要干啥 */ @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(\\\"子线程执行输出\\\" + i); } } } \"]},\"1320\":{\"h\":\"优缺点：\",\"t\":[\"优点：编码简单\",\"缺点：线程类已经继承Thread，无法继承其他类，不利于扩展\"]},\"1321\":{\"h\":\"疑问：\",\"t\":[\"为什么不是调用run方法启动多线程，而是调用start方法呢？\",\"如果直接调用run方法会当成普通方法执行，此时相当于还是单线程执行\"]},\"1322\":{\"h\":\"注意点：\",\"t\":[\"不要把主线程的任务放到子线程任务之前，否则主线程一直是先跑完的，相当于是一个单线程的效果了。\",\"image-20220811100852340\"]},\"1323\":{\"h\":\"方式二：实现Runnable接口\",\"t\":[\"定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法\",\"创建MyRunnable任务对象\",\"把MyRunnable任务对象交给Thread处理\",\"调用线程对象的start()方法启动线程\",\"image-20220811101703243\",\"package com.demo1; public class Demo2 { public static void main(String[] args) { //创建一个任务对象 Runnable target = new MyRunnable(); //把任务对象交给Thread对象处理 Thread t = new Thread(target); //启动线程 t.start(); //定义主线程（在main中） for (int i = 0; i < 10; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } /** * 定义一个线程任务类，实现Runnable接口 */ class MyRunnable implements Runnable{ /** * 实现run方法 */ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程执行输出\\\" + i); } } } \"]},\"1324\":{\"h\":\"优缺点：\",\"t\":[\"优点：线程任务只是实现接口，可以继续继承和实现接口，扩展性强\",\"缺点：编程多一层对象包装，如果线程有执行结果，是不可以直接返回的\",\"image-20220811102046877\"]},\"1325\":{\"h\":\"实现Runnable接口（匿名内部类形式）\",\"t\":[\"package com.demo1; public class Demo2 { public static void main(String[] args) { //匿名内部类形式 Runnable target = new Runnable(){ @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程1执行输出\\\" + i); } } }; Thread thread = new Thread(target); thread.start(); //简化 new Thread(new Runnable() { @Override public void run() { for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程2执行输出\\\" + i); } } }).start(); //简化 new Thread(()->{ for (int i = 0; i < 10; i++) { System.out.println(\\\"子线程3执行输出\\\" + i); } }).start(); //定义主线程（在main中） for (int i = 0; i < 10; i++) { System.out.println(\\\"主线程执行输出\\\" + i); } } } \"]},\"1326\":{\"h\":\"方式三：JDK5.0新增：实现Callable接口\",\"t\":[\"前两种线程创建的方式都存在一个问题： \",\"他们重写的run方法不能返回结果\",\"不适合需要返回线程执行结果的业务场景\",\"于是JDK5.0提供了Callable和FutureTask，可以解决这个问题\",\"得到任务对象 \",\"定义类实现Callable接口，重写call方法，封装要做的事情\",\"用FutureTask把Callable对象封装成线程任务对象\",\"把线程任务对象交给Thread处理\",\"调用Thread的start方法启动线程，执行任务\",\"线程执行完毕后，通过FutureTask的get方法区获取任务执行的结果\",\"package com.demo1; import java.util.concurrent.Callable; import java.util.concurrent.FutureTask; public class Demo3 { public static void main(String[] args) { //创建任务对象 Callable<String> call = new MyCallable(100); //把Callable任务对象交给FutureTask对象 //FutureTask对象的作用1：是Runnable的对象（实现了Runnable接口），可以交给Thread了 //FutureTask对象的作用2：可以在线程执行完毕后通过调用其get方法得到线程执行完毕的结果 FutureTask<String> task = new FutureTask<>(call); //交给线程处理 Thread thread = new Thread(task); //启动线程 thread.start(); //获取结果（主线程） try { //如果task任务没有执行完，这里的代码会等待，直到线程跑完才取出结果 String rs1 = task.get(); System.out.println(\\\"第一个结果：\\\"+rs1); } catch (Exception e) { e.printStackTrace(); } Callable<String> call2 = new MyCallable(200); FutureTask<String> task2 = new FutureTask<>(call2); Thread thread2 = new Thread(task2); thread2.start(); try { String rs2 = task2.get(); System.out.println(\\\"第二个结果：\\\"+rs2); } catch (Exception e) { e.printStackTrace(); } } } /** * 定义一个任务类，实现Callable接口，应该声明线程任务执行完毕后的结果数据类型 */ class MyCallable implements Callable<String>{ //计算1到n的和 private int n; public MyCallable(int n) { this.n = n; } /** * 重写call方法 * @return * @throws Exception */ @Override public String call() throws Exception { int sum = 0; for (int i = 0; i <= n; i++) { sum += i; } return \\\"子线程执行的结果为：\\\" + sum; } } \",\"image-20220811104734651\"]},\"1327\":{\"h\":\"优缺点：\",\"t\":[\"优点：线程任务类只是实现接口，可以继续继承和实现接口，扩展性强\",\"优点：可以在线程执行完毕后通过FutureTask的get方法获取执行结果，如果没有执行完毕会等待执行完毕后，获取结果\",\"缺点：编码复杂一些\"]},\"1328\":{\"h\":\"总结\",\"t\":[\"方式\",\"优点\",\"缺点\",\"继承Thread类\",\"编码简单，可以直接使用Thread类中的start方法启动线程\",\"扩展性较差，不能在继续继承其他的类，不能返回线程执行的结果\",\"实现Runnable接口\",\"扩展性强，实现该接口的同时还可以继承其他的类\",\"编程相对复杂，不能返回线程执行的结果\",\"实现Callable接口\",\"扩展性强，实现该接口的同时还可以继承其他的类，可以得到线程执行的结果\",\"编程相对复杂\"]},\"1329\":{\"h\":\"Thread的常用方法\",\"t\":[\"Thread常用方法：获取线程名称getName()、设置名称setName()、获取当前线程对象currentThread()\",\"当有很多线程执行的时候，我们怎么区分这些线程？\",\"可以使用Thread的常用方法：getName()、setName()、currentThread()等\",\"package com.api; public class MyThread extends Thread{ public MyThread() { } public MyThread(String name) { //为当前线程对象设置名字，送给父类的有参构造器初始化名称 super(name); } @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName()+\\\"子线程输出\\\"); } } } \",\"package com.api; public class Demo1 { public static void main(String[] args) { Thread t1 = new MyThread(\\\"1号\\\"); // t1.setName(\\\"1号\\\"); t1.start(); // System.out.println(t1.getName()); Thread t2 = new MyThread(\\\"2号\\\"); // t2.setName(\\\"2号\\\"); t2.start(); // System.out.println(t2.getName()); /** * 哪个线程执行它，它就代表哪个多线程对象（当前线程对象） * 主线程的默认名称就叫main */ Thread m = Thread.currentThread(); System.out.println(m.getName()); for (int i = 0; i < 5; i++) { System.out.println(\\\"main线程输出\\\"); } } } \"]},\"1330\":{\"h\":\"Thread类的线程休眠方法\",\"t\":[\"方法名称\",\"说明\",\"public static void sleep(long time)\",\"让当前线程休眠指定的时间后再继续执行，单位为毫秒\",\"package com.api; public class Demo2 { public static void main(String[] args) throws Exception { for (int i = 0; i < 5; i++) { System.out.println(\\\"输出\\\"+i); if (i == 2){ System.out.println(\\\"睡3秒休息一下~~\\\"); //让当前线程进入休眠状态 Thread.sleep(3000); } } } } \"]},\"1331\":{\"h\":\"总结\",\"t\":[\"Thread常用方法、构造器\",\"方法名称\",\"说明\",\"String getName()\",\"获取线程当前的名称，默认线程名称为Thread-索引\",\"void setName(String name)\",\"设置线程名称\",\"public static Thread currentThread() 例如：如果在main方法中写：Thread m = Thread.currentThread(); m就代表main方法的线程\",\"返回对当前正在执行的线程对象的引用。返回值：当前正在执行的线程。\",\"public static void sleep(long time)\",\"让线程休眠指定的时间，单位毫秒\",\"public void run()\",\"线程任务方法\",\"punlic void start()\",\"线程启动方法\",\"构造器\",\"说明\",\"public Thread(String name)\",\"可以设置当前线程指定的名称\",\"public Thread(Runnable target)\",\"把Runnable对象交给线程对象\",\"public Thread(Runnable target,String name)\",\"把Runnable对象交给线程对象，并指定线程名称\"]},\"1332\":{\"h\":\"线程安全\"},\"1333\":{\"h\":\"线程安全是什么、方式的原因\",\"t\":[\"多个线程同时操作同一个共享资源的时候，可能会出现**业务（比如修改数据）**安全问题，称为线程安全问题\"]},\"1334\":{\"h\":\"取钱模型\",\"t\":[\"需求：小明和小红是一对夫妻，他们有一个共同的账户，余额是10万元\",\"如果小明和小红同时来取钱，而且2人都需要取钱10万元，可能出现什么问题？\"]},\"1335\":{\"h\":\"模拟线程安全问题：\",\"t\":[\"package com.thread_safe; public class Account { private String cardId; private double money; public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 小明 小红 取钱 * @param money */ public void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"package com.thread_safe; /** * 取钱的线程类 */ public class DrawThread extends Thread{ private Account account; public DrawThread(Account account,String name){ super(name); this.account = account; } @Override public void run() { //取钱 account.drawMoney(100000); } } \",\"package com.thread_safe; /** * 模拟取钱案例 */ public class Demo1 { public static void main(String[] args) { //1、定义线程类，创建一个共享的账户对象 Account account = new Account(\\\"001\\\",100000); //2、创建两个线程对象，代表小明和小红同时进来了 new DrawThread(account,\\\"小明\\\").start(); new DrawThread(account,\\\"小红\\\").start(); } } \",\"输出结果：\",\"小红取钱成功：100000.0 小红取钱后剩余：0.0 小明取钱成功：100000.0 小明取钱后剩余：-100000.0\",\"线程安全问题发生的原因是什么？\",\"多个线程同时访问同一个共享资源且存在修改资源的时候，可能会出现线程安全问题\"]},\"1336\":{\"h\":\"线程同步\",\"t\":[\"为了解决线程安全问题\",\"取钱案例出现的问题原因\",\"多个线程同时执行，发现账户余额是足够的\",\"如何解决？\",\"让多个线程实现先后依次访问共享资源，这样就解决了安全问题（一起进入账户，然后依次访问，排队）\"]},\"1337\":{\"h\":\"线程同步核心思想\",\"t\":[\"加锁，把共享资源进行上锁，每次只能一个人进入访问，完毕以后进行解锁，然后其他线程才能进来\"]},\"1338\":{\"h\":\"方式一：同步代码块\",\"t\":[\"作用：把出现线程安全问题的核心代码给上锁\",\"原理：每次只能一个线程进入，执行完毕后自动解锁，其他线程才可以进来执行\",\"synchronized (\\\"lock\\\") { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \"]},\"1339\":{\"h\":\"锁对象要求\",\"t\":[\"理论上：锁对象只要对于当前同时执行的线程来说是同一个对象即可\"]},\"1340\":{\"h\":\"锁对象用任意唯一的对象好不好呢？\",\"t\":[\"不好，因为会影响到其他无关线程的执行\"]},\"1341\":{\"h\":\"锁对象的规范要求\",\"t\":[\"规范：建议使用共享资源作为锁对象\",\"对于实例方法建议使用this作为锁对象\",\"对于静态方法建议使用字节码（类名.class）对象作为锁对象\",\"synchronized (this) { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \",\"image-20220811124659879\"]},\"1342\":{\"h\":\"方式二：同步方法\",\"t\":[\"作用：把出现线程安全问题的核心方法给上锁\",\"原理：每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行\",\"/** * 小明 小红 取钱 * @param money */ public synchronized void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } \",\"格式：\",\"public synchronized void run(){//实例方法：同步方法默认用this作为锁的对象。但是代码要高度面向对象 } public synchronized static void run1(){//静态方法，同步方法默认用类名.class作为锁对象 } \"]},\"1343\":{\"h\":\"同步方法底层原理\",\"t\":[\"同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码块\",\"如果方法是实例方法：同步方法默认用this作为锁的对象。但是代码要高度面向对象\",\"如果方法是静态方法：同步方法默认用类名.class作为锁对象\",\"是同步代码块好还是同步方法好？\",\"同步代码块锁的范围更小，同步方法锁的范围更大\",\"同步方法可读性方便\",\"image-20220811125740602\"]},\"1344\":{\"h\":\"Lock锁\",\"t\":[\"为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock，更加灵活、方便\",\"Lock锁实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作\",\"Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock对象\",\"方法名称\",\"说明\",\"Public ReentrantLock()\",\"获得Lock锁的实现类对象\",\"Lock的API\",\"方法\",\"说明\",\"void lock()\",\"获得锁\",\"void unlock()\",\"释放锁\",\"private final Lock lock = new ReentrantLock();//final修饰后：锁对象是唯一不可替换的，非常专业 \",\" lock.lock();//上锁 try { //上锁的内容 } finally { lock.unlock();//解锁，写在finally中，防止出现bug然后被锁死！！！ } \",\"package com.thread_lock; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class Account { private String cardId; private double money; private final Lock lock = new ReentrantLock();//final修饰后：锁对象是唯一不可替换的，非常专业 public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 小明 小红 取钱 * @param money */ public void drawMoney(double money) { //1、获取是谁来取钱 String name = Thread.currentThread().getName(); lock.lock();//上锁 try { //2、判断账户余额 if (this.money >= money){ //2、取钱 System.out.println(name + \\\"取钱成功：\\\" + money); //3、更新余额 this.money -= money; System.out.println(name + \\\"取钱后剩余：\\\" + this.money); }else { //余额不足 System.out.println(name + \\\"余额不足\\\"); } } finally { lock.unlock();//解锁，写在finally中，防止出现bug然后被锁死！！！ } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"什么是线程通信、如何实现？\",\"所谓线程通信就是线程间互相发送数据\",\"线程通信常见的形式\",\"通过共享一个数据的方式实现\",\"根据共享数据的情况决定自己改怎么做，以及通知其他线程怎么做\",\"image-20220811130657310\",\"image-20220811132950606\",\"image-20220811141019403\",\"package day06.thread_comunication; public class Account { private String cardId; private double money; public Account() { } public Account(String cardId, double money) { this.cardId = cardId; this.money = money; } /** * 父亲们存钱 同步方法 * 亲爹 干爹 岳父 存钱 * * @param money */ public synchronized void depositMoney(double money) { try { String name = Thread.currentThread().getName(); if (this.money == 0) { // 存钱 this.money += money; System.out.println(name + \\\"存钱\\\" + money + \\\"成功！余额是:\\\" + this.money); this.notifyAll(); this.wait(); } else { this.notifyAll(); this.wait(); } } catch (Exception e) { e.printStackTrace(); } } /** * 孩子们取钱 同步方法 * 小明和小红取钱 * * @param money */ public synchronized void drawMoney(double money) { try { String name = Thread.currentThread().getName(); if (this.money >= money) { // 取钱 this.money -= money; System.out.println(name + \\\"来取钱\\\" + money + \\\"成功！余额是:\\\" + this.money); // 唤醒正在此对象的监视器上等待的所有线程 this.notifyAll();//唤醒所有线程 this.wait();//让当前线程进入等待，并且释放占用的锁，直到另一个线程调用notify方法或者notifyAll方法 } else { // 钱不够,唤醒其他线程(期望唤醒父亲们存钱) this.notifyAll(); this.wait();//让当前线程进入等待，并且释放占用的锁，直到另一个线程调用notify方法或者notifyAll方法 } } catch (Exception e) { e.printStackTrace(); } } public String getCardId() { return cardId; } public void setCardId(String cardId) { this.cardId = cardId; } public double getMoney() { return money; } public void setMoney(double money) { this.money = money; } } \",\"package day06.thread_comunication; /** * 存钱线程 */ public class DepositThread extends Thread { private Account account; public DepositThread(Account account, String name) { super(name); this.account = account; } @Override public void run() { while (true) { account.depositMoney(100000); try { Thread.sleep(2000); } catch (Exception e) { e.printStackTrace(); } } } } \",\"package day06.thread_comunication; /** * 取钱线程 */ public class DrawThread extends Thread { private Account account; public DrawThread(Account account, String name) { super(name); this.account = account; } @Override public void run() { while (true) { account.drawMoney(100000); try { Thread.sleep(3000); } catch (Exception e) { e.printStackTrace(); } } } } \",\"package day06.thread_comunication; /** * 了解线程通信 */ public class ThreadDemo { public static void main(String[] args) { Account account = new Account(\\\"ICBC-111\\\", 0); new DrawThread(account, \\\"小明\\\").start(); new DrawThread(account, \\\"小红\\\").start(); new DepositThread(account, \\\"亲爹\\\").start(); new DepositThread(account, \\\"干爹\\\").start(); new DepositThread(account, \\\"岳父\\\").start(); } } \"]},\"1345\":{\"h\":\"概述\",\"t\":[\"线程池就是一个可以复用线程的技术\",\"不使用线程池的问题\",\"如果用户每发起一个请求，后台就创建一个新的线程来处理，下次新任务来了又要创建新线程，而创建新线程的开销是很大的，这样会严重影响系统的性能\",\"image-20220811141640927\"]},\"1346\":{\"h\":\"线程池实现的API、参数说明\"},\"1347\":{\"h\":\"谁代表线程池？\",\"t\":[\"JDK5.0起提供了代表线程池的接口：ExecutorService\",\"image-20220811141756349\"]},\"1348\":{\"h\":\"如何得到线程对象？\",\"t\":[\"方式一：使用ExecutorService的实现类ThreadPoolExecutor自己创建一个线程对象【重要】\",\"方式二：使用Executor（线程池工具类）调用方法返回不同特点的线程池对象\"]},\"1349\":{\"h\":\"ThreadPoolExecutor构造器的参数说明\",\"t\":[\"public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) \",\"参数一：指定线程池的线程数量（核心线程）：corePoolSize-------------------------》不能小于0\",\"参数二：指定线程池可以支持的最大线程数量：maximumPoolSize-----------------》最大数量>=核心数量\",\"参数三：指定临时线程的最大存活时间：keepAliveTime--------------------------------》不能小于0\",\"参数四：指定存活时间的单位（秒、分、时、天）：unit--------------------------------》时间单位\",\"参数五：指定任务队列：workQueue----------------------------------------------------------》不能为null\",\"参数六：指定用哪个线程工厂创建线程：threadFactory---------------------------------》不能为null\",\"参数七：指定线程忙、任务慢的时候，新任务来了怎么办：handler-----------------》不能为null\"]},\"1350\":{\"h\":\"线程池常见面试题\"},\"1351\":{\"h\":\"临时线程什么时候创建？\",\"t\":[\"新任务提交时发现核心线程都在忙，而且任务队列也排满了！并且还可以创建临时线程，此时才会创建临时线程\"]},\"1352\":{\"h\":\"什么时候会开始拒绝任务？\",\"t\":[\"核心线程和临时线程都在忙，而且任务队列也满了！！新任务过来的时候才会开始任务拒绝\"]},\"1353\":{\"h\":\"线程池处理Runnable任务\",\"t\":[\"ThreadPoolExecutor创建线程池对象实例\",\"ExecutorService pools = new ThreadPoolExecutor(3,//指定线程池的线程数量（核心线程） 5,//指定线程池可以支持的最大线程数量 8,//指定临时线程的最大存活时间 TimeUnit.SECONDS,//指定存活时间的单位 new ArrayBlockingQueue<>(6),//指定任务队列 Executor.defaultThreadFactory(),//指定用哪个线程工厂创建线程 new ThreadPoolExecutor.AbortPolicy());//指定线程忙、任务慢的时候，新任务来了怎么办 \",\"ExecutorService的常用方法\",\"方法名称\",\"说明\",\"void execute(Runnable command)\",\"执行任务/命令，没有返回值，一般用来执行Runnable任务\",\"Future< T > submit(Callable< T > task)\",\"执行任务，返回未来任务对象获取线程结果，一般拿来执行 Callable 任务\",\"void shutdown()\",\"等待任务执行完毕后关闭线程池\",\"List < Runnable > shutdownNow()\",\"立刻关闭，停止正在执行的任务，并返回队列中未执行的任务\",\"image-20220811145535092\",\"package com.threadpool; public class MyRunnable implements Runnable{ @Override public void run() { for (int i = 0; i < 5; i++) { System.out.println(Thread.currentThread().getName()+\\\"输出了：HelloWorld==》\\\"+i); } try { System.out.println(Thread.currentThread().getName()+\\\"本任务与线程绑定了，线程进入休眠了。。。\\\"); Thread.sleep(1000000); } catch (InterruptedException e) { e.printStackTrace(); } } } \",\"package com.threadpool; import java.util.concurrent.*; /** * 自定义一个线程池对象，并且测试其特性 */ public class ThreadPoolDemo1 { public static void main(String[] args) { //1、创建线程池对象 /** * public ThreadPoolExecutor(int corePoolSize, * int maximumPoolSize, * long keepAliveTime, * TimeUnit unit, * BlockingQueue<Runnable> workQueue, * ThreadFactory threadFactory,//默认线程工厂：Executors.defaultThreadFactory() * RejectedExecutionHandler handler) */ ExecutorService pool = new ThreadPoolExecutor(3,5, 6, TimeUnit.SECONDS,new ArrayBlockingQueue<>(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); //2、给任务，线程池处理 Runnable target = new MyRunnable(); pool.execute(target);//线程1 pool.execute(target);//线程2 pool.execute(target);//线程3 //核心线程执行上面的任务，下面的任务进入队列等待，（5个任务队列，当等待的线程超过5的时候，才会启动临时线程） pool.execute(target);//队列线程1 pool.execute(target);//队列线程2 pool.execute(target);//3 pool.execute(target);//4 pool.execute(target);//5（队列线程满了而且核心线程还被占用着！） //启动临时线程！！！ pool.execute(target);//临时线程1（线程4） pool.execute(target);//临时线程2（线程5）达到最大线程数量 //满了，不创建，拒绝策略被触发 //pool.execute(target); /** * 异常： * RejectedExecutionException: * [Running, pool size = 5, active threads = 5, queued tasks = 5, completed tasks = 0] * 执行， 池子数量 = 5 ， 执行的线程 = 5 ， 队列任务 = 5 ， 完成的任务 = 0 */ //关闭线程池（开发中一般不会使用） //pool.shutdownNow();//立即关闭，即使任务没有完成，会丢失任务的 pool.shutdown();//会等待全部任务执行完毕之后再关闭 } } \"]},\"1354\":{\"h\":\"线程处理Callable任务\",\"t\":[\"package com.threadpool; import java.util.concurrent.*; /** * 自定义一个线程池对象，并且测试其特性 */ public class ThreadPoolDemo2 { public static void main(String[] args) { //1、创建线程池对象 /** * public ThreadPoolExecutor(int corePoolSize, * int maximumPoolSize, * long keepAliveTime, * TimeUnit unit, * BlockingQueue<Runnable> workQueue, * ThreadFactory threadFactory,//默认线程工厂：Executors.defaultThreadFactory() * RejectedExecutionHandler handler) */ ExecutorService pool = new ThreadPoolExecutor(3,5, 6, TimeUnit.SECONDS,new ArrayBlockingQueue<>(5), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); Future<String> submit1 = pool.submit(new MyCallable(100)); Future<String> submit2 = pool.submit(new MyCallable(200)); Future<String> submit3 = pool.submit(new MyCallable(300)); Future<String> submit4 = pool.submit(new MyCallable(400)); Future<String> submit5 = pool.submit(new MyCallable(500)); try { System.out.println(submit1.get()); System.out.println(submit2.get()); System.out.println(submit3.get()); System.out.println(submit4.get()); System.out.println(submit5.get()); } catch (InterruptedException | ExecutionException e) { e.printStackTrace(); } } } \"]},\"1355\":{\"h\":\"Executors工具类实现线程池\"},\"1356\":{\"h\":\"Executors得到线程对象的常用方法\",\"t\":[\"Executor：线程池工具类通过调用方法返回不同类型的线程池对象\",\"方法名称\",\"public static ExecutorService newCachedThreadPool()\",\"线程数量随着任务的增加而增加，如果线程任务执行完毕且空闲了一段时间则会被回收掉\",\"public static ExecutorService newFixedThreadPool(int nThreads)\",\"创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池就会补充一个新的线程代替他\",\"public static ExecutorService newSingleThreadExecutor()\",\"创建只有一个线程的线程对象，如果该线程出现异常而结束，那么线程池会补充一个新的线程池\",\"public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务\",\"注意：Executors的底层也是基于线程池的实现类ThreadPoolExecutor创建线程池对象的\",\"package com.executors; import com.threadpool.MyRunnable; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; /** * 使用Executors的工具方法直接得到一个线程池对象 */ public class ThreadPoolDemo1 { public static void main(String[] args) { ExecutorService pool = Executors.newFixedThreadPool(3); /** * ExecutorService pool = Executors.newFixedThreadPool(3); * 源码的做法：就是在内部new了一个ThreadPoolExecutor给了一些参数 * 核心线程3个，最大线程3个（没有临时线程），没有空闲时间（都是不死线程，没有临时线程，不需要配置空闲时间），任务队列没有限制任务数量 * public static ExecutorService newFixedThreadPool(int nThreads) { * return new ThreadPoolExecutor(nThreads, nThreads, * 0L, TimeUnit.MILLISECONDS, * new LinkedBlockingQueue<Runnable>()); * } */ pool.execute(new MyRunnable()); pool.execute(new MyRunnable()); pool.execute(new MyRunnable()); //任务队列不受控制 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 pool.execute(new MyRunnable());//已经没有多余线程了 } } \"]},\"1357\":{\"h\":\"Executors使用可能存在的陷阱\",\"t\":[\"大型并发系统环境中使用Executors如果不注意可能会出现系统风险\",\"方法名称\",\"存在问题\",\"public static ExecutorService newFixedThreadPool(int nThreads)\",\"允许请求的任务队列长度是Integer.MAX_VALUE，可能出现OOM错误（java.lang.OutOfMemoryError)\",\"public static ExecutorService newSingleThreadExecutor()\",\"同上\",\"public static ExecutorService newCachedThreadPool()\",\"创建的线程数量最大上限是Integer.MAX_VALUE，线程数可能会随着任务1:1增长，也可能出现OOM错误（java.lang.OutOfMemoryError)\",\"public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"同上\",\"image-20220811151604202\",\"定时器是一种控制任务延时调用，或者周期调用的技术\",\"作用：闹钟、定时邮件发送\"]},\"1358\":{\"h\":\"定时器的实现方式\",\"t\":[\"方式一：Timer\",\"方式二：ScheduledExecutorService\"]},\"1359\":{\"h\":\"Timer定时器(不推荐使用)\",\"t\":[\"构造器\",\"说明\",\"public Timer()\",\"创建Timer定时器对象\",\"方法\",\"说明\",\"public void schedule(TimerTask task,long delay,long period)\",\"开启一个定时器，按照计划处理TimerTask任务\",\"package com.timer; import java.util.Timer; import java.util.TimerTask; /** * Timer定时器的使用和了解 */ public class TimerDemo1 { public static void main(String[] args) { //1、创建Timer定时器 Timer timer = new Timer();//定时器本身就是一个单线程 //2、调用方法来处理定时任务 timer.schedule(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行一次~~~\\\"); } },3000,2000); } } \",\"Timer定时器的特点和存在的问题\",\"Timer是单线程，处理多个任务按照顺序执行，存在延时与设置定时器的时间有出入\",\"可能因为其中某个任务的异常使Timer线程死掉，从而影响后续任务执行\"]},\"1360\":{\"h\":\"ScheduledExecutorService定时器\",\"t\":[\"ScheduledExecutorService是JDK1.5中引入的并发包，目的是为了弥补Timer的缺陷，ScheduledExecutorService内部为线程池\",\"Executors的方法\",\"说明\",\"public staitc ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\",\"得到线程池对象\",\"ScheduledExecutorService的方法\",\"说明\",\"public ScheduledFuture<?> scheduledAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)\",\"周期调度方法\"]},\"1361\":{\"h\":\"ScheduledExecutorService的优点\",\"t\":[\"基于线程池，某个任务的执行情况下不会影响其他定时任务的执行\",\"package com.timer; import java.util.Date; import java.util.TimerTask; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class TimerDemo2 { public static void main(String[] args) { //1、创建ScheduledExecutorService线程池，做定时器 ScheduledExecutorService pool = Executors.newScheduledThreadPool(3); //2、开启定时器任务 pool.scheduleAtFixedRate(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行输出：AAA\\\"+\\\"====>\\\"+new Date()); try { Thread.sleep(10000); } catch (InterruptedException e) { e.printStackTrace(); } } },0,2, TimeUnit.SECONDS); //2、开启定时器任务 pool.scheduleAtFixedRate(new TimerTask() { @Override public void run() { System.out.println(Thread.currentThread().getName()+\\\"执行输出：BBB\\\"+\\\"====>\\\"+new Date()); } },0,2, TimeUnit.SECONDS); } } \",\"image-20220811153337574\"]},\"1362\":{\"h\":\"线程的并发与并行\"},\"1363\":{\"h\":\"并发与并行\",\"t\":[\"正在运行的程序（软件）就是一个独立的进程，线程是属于进程的，多个线程其实是并发与并行同时进行的\"]},\"1364\":{\"h\":\"并发的理解\",\"t\":[\"CPU同时处理线程的数量有限\",\"CPU会轮询为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发\"]},\"1365\":{\"h\":\"并行的理解\",\"t\":[\"在同一时刻上，同时有多个线程在被CPU处理并执行\",\"image-20220811153946533\"]},\"1366\":{\"h\":\"线程的生命周期\"},\"1367\":{\"h\":\"状态\",\"t\":[\"线程的状态：也就是线程从生到死的过程，以及中间经历的各种状态及状态转换\",\"理解线程的状态有利于提升并发编程的理解能力\"]},\"1368\":{\"h\":\"Java线程的状态\",\"t\":[\"Java总共定义了6种状态\",\"6种状态都定义在Thread类的内部枚举类中\",\"public enum State { NEW,//新建状态 RUNNABLE,//可运行状态 BLOCKED,//阻塞状态（锁被占用） WAITING,//无限等待状态 TIMED_WAITING,//计时等待 TERMINATED;//死亡状态 } \",\"image-20220811155157442\",\"image-20220811155235160\",\"image-20220811155328547\"]},\"1369\":{\"h\":\"文件操作的奥秘\"},\"1370\":{\"h\":\"学习思路\",\"t\":[\"先要定位文件 \",\"File类可以定位文件：进行删除、获取文本本身信息等操作\",\"但是不能读写文件\",\"读写文件数据 \",\"IO流技术可以对硬盘中的文件进行读写\",\"总体学习思路 \",\"先学会使用File类定位文件以及操作文件本身\",\"然后学习IO流读写文件数据\",\"File类在包java.io.File下、代表操作系统的文件对象（文件、文件夹）\",\"File类提供了诸如：定位文件，获取文件本身的信息、删除文件、创建文件（文件夹）等功能。\",\"方法\",\"说明\",\"public File (String pathname)\",\"根据文件路径创建文件对象\",\"public File (String parent,String child)\",\"从父路径名 字符串和 子路径 字符串 创建对象\",\"public File (File parent,String child)\",\"根据父路径对应的文件对象和子路径名 字符串创建文件对象\",\"package com.memg; import java.io.File; /** * 学会创建File对象，定位操作系统的文件对象 */ public class FileDemo1 { public static void main(String[] args) { //创建File对象 File f = new File(\\\"/Users/red/Pictures/2022.03.01.10.14.jpg\\\"); long length = f.length(); System.out.println(length); System.out.println(f.getName()); //file创建对象，支持绝对路径，支持相对路径 //相对路径：一般是定位我们模块中的文件 File f2 = new File(\\\"src/data.txt\\\"); System.out.println(f2.length()); //判断路径是否存在 File f3 = new File(\\\"/Users/red/Downloads\\\"); System.out.println(f3.isDirectory());//判断文件夹是否存在 System.out.println(f3.exists());//判断路径是否存在 } } \"]},\"1371\":{\"h\":\"判断文件类型、获取文件信息\",\"t\":[\"方法\",\"说明\",\"public boolean isDirectory()\",\"测试此抽象路径表示的是File是否问文件夹\",\"public boolean isFile()\",\"测试此抽象路径表示的是File是否问文件\",\"public boolean exists()\",\"测试此抽象路径表示的是File是否存在\",\"public String getAbsolutePath()\",\"返回此抽象路径名的绝对路径名字符串\",\"public String getPath()\",\"将此抽象路径名装换为路径名字符串\",\"public String getName()\",\"返回由此抽象路径名表示的文件或文件夹名称\",\"public long lastModified()\",\"返回文件最后修改的时间毫秒值\",\"package com.memg; import java.io.File; import java.text.SimpleDateFormat; public class FileDemo2 { public static void main(String[] args) { //1、绝对路径创建一个文件对象 File file = new File(\\\"src/data.txt\\\"); //2、获取它的绝对路径 System.out.println(file.getAbsolutePath()); //3、获取文件定义的时候使用的路径 System.out.println(file.getPath()); //4、获取文件名称，带后缀 System.out.println(file.getName()); //5、获取文件大小：字节个数 System.out.println(file.length()); //6、获取文件最后修改时间；时间毫秒值 long time = file.lastModified(); System.out.println(\\\"最后修改时间：\\\"+new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\").format(time));//格式化时间 //7、判断文件是文件还是文件夹 System.out.println(file.isFile()); System.out.println(file.isDirectory()); } } \"]},\"1372\":{\"h\":\"创建文件、删除文件功能\"},\"1373\":{\"h\":\"File创建文件的功能\",\"t\":[\"方法\",\"说明\",\"public boolean createNewFile()\",\"创建一个新的空的文件夹\",\"public boolean mkdir()\",\"只能创建一级文件夹\",\"public boolean mkdirs()\",\"可以创建多级文件夹\"]},\"1374\":{\"h\":\"File类删除文件夹的功能\",\"t\":[\"方法\",\"说明\",\"public boolean delete()\",\"删除由此抽象路径名表示的文件或空文件夹\",\"delete方法直接删除不走回收站；如果删除的是一个文件，且文件没有被占用则直接被删除\",\"delete方法默认只能删除空文件夹\",\"package com.memg; import java.io.File; import java.io.IOException; /** * 学会创建File对象，定位操作系统的文件对象 */ public class FileDemo3 { public static void main(String[] args) throws IOException { //创建File对象 File f = new File(\\\"src/data.txt\\\"); //创建文件 System.out.println(f.createNewFile());//已存在文件，返回false // File f2 = new File(\\\"src/data2.txt\\\"); System.out.println(f2.createNewFile());//创建文件几乎不用，因为后面文件都是自动创建的，IO流写文件自动创建 //mkdir 创建一级目录 File file = new File(\\\"/Users/humeng/aaa\\\"); //System.out.println(file.mkdir()); //mkdirs创建多级目录 //File file1 = new File(\\\"/Users/humeng/aaa/bbb/ccc\\\"); //System.out.println(file1.mkdirs()); //删除,只能删除空文件夹或文件 System.out.println(\\\"--------\\\"); System.out.println(f2.delete()); System.out.println(file.delete()); File f3 = new File(\\\"/Users/humeng/aaa\\\"); System.out.println(f3.delete()); } } \"]},\"1375\":{\"h\":\"遍历文件夹\",\"t\":[\"方法\",\"说明\",\"public String[] list()\",\"获取当前目录下的所有的”一级文件夹名称“到一个字符串数组中去返回\",\"public File[] listFile() 常用\",\"获取当前目录下的所有的”一级文件夹对象“到一个文件对象数组中去返回（重点）\"]},\"1376\":{\"h\":\"注意事项\",\"t\":[\"当调用者不存在时，返回null\",\"当调用者是一个文件时，返回null\",\"当调用者是一个空文件夹时，返回一个长度为0的数组\",\"当调用者是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回\",\"当调用者是一个有隐藏文件的文件夹时，将里面的所有文件和文件夹的路径放在File数组中返回，包含隐藏内容\",\"当调用者是一个需要权限才能进入的文件夹时，返回null\",\"package com.memg; import java.io.File; public class FileDemo4 { public static void main(String[] args) { File file = new File(\\\"/Users/humeng/Pictures\\\"); String[] names = file.list(); for (String name : names) { System.out.println(name); } File[] files = file.listFiles(); for (File file1 : files) { System.out.println(file1.getAbsolutePath()); // file1.delete();会删除照片下的一级文件对象的，不要打开！！ } } } \"]},\"1377\":{\"h\":\"递归的形式和特点\",\"t\":[\"什么是方法递归？\",\"方法直接调用自己或者简介调用自己的形式成为方法递归（recursion）\",\"递归作为一种算法在程序设计语言中广泛应用\"]},\"1378\":{\"h\":\"递归的形式\",\"t\":[\"直接递归：方法自己调用自己\",\"简介递归：方法调用其他方法，其他方法又回调方法自己\"]},\"1379\":{\"h\":\"方法递归存在的问题\",\"t\":[\"递归如果没有控制好终止，会出现递归死循环，导致栈内存溢出现象\",\"package com.recursion; public class RecursionDemo1 { public static void main(String[] args) { test(); } public static void test(){ System.out.println(\\\"=========test被执行========\\\"); test();//方法递归 直接递归形式 } } \",\"package com.recursion; public class RecursionDemo1 { public static void main(String[] args) { test2(); } public static void test2(){ System.out.println(\\\"=========test2被执行========\\\"); test3();//方法递归 间接递归形式 } public static void test3(){ System.out.println(\\\"=========test3被执行========\\\"); test2();//方法递归 间接递归形式 } } \"]},\"1380\":{\"h\":\"递归的算法流程、核心要素\"},\"1381\":{\"h\":\"案例：计算1 - n的阶乘\",\"t\":[\"package com.recursion; /** * 递归算法 */ public class Demo2 { public static void main(String[] args) { System.out.println(f(5)); } public static int f(int n){ if (n == 1){ return 1; }else { return f(n-1) * n; } } } \"]},\"1382\":{\"h\":\"递归算法三要素大体可以总结为：\",\"t\":[\"递归的公式：f(n) = f(n-1) * n;\",\"递归的终点：f(1);\",\"递归的方向必须走向终结点\"]},\"1383\":{\"h\":\"案例：计算1-n的和\",\"t\":[\"f(n) = 1+2+3+4+5+...+(n-1)+n;\",\"那么这个公式就等价于：f(n)=f(n-1)+n;\",\"终结点：f(1) = 1;\",\"package com.recursion; public class Demo3 { public static void main(String[] args) { System.out.println(f(100)); } public static int f(int n){ if (n == 1){ return 1; }else { return f(n-1) + n; } } } \"]},\"1384\":{\"h\":\"案例：猴子吃桃问题（经典问题）\",\"t\":[\"package com.recursion; /** * 公式： * 第x天的桃子吃掉二分之一再吃掉一个 = 下一天的桃子 * f(x) - f(x)/2 - 1 = f(x+1) * 2f(x) - f(x) -2 = 2f(x+1) * f(x) = 2f(x+1) + 2 * * f(1) = ? * 终结点：f(10) = 1; * */ public class Demo4 { public static void main(String[] args) { System.out.println(f(1)); } public static int f(int x){ if (x == 10){ return 1; }else { return 2*f(x+1)+2; } } } \"]},\"1385\":{\"h\":\"非规律化递归案例-文件搜索\"},\"1386\":{\"h\":\"案例：文件搜索\",\"t\":[\"先定位出的应该是一级文件对象\",\"遍历全部一级文件对象，判断是否是文件\",\"如果是文件，判断是否是自己想要的\",\"如果是文件夹，需要继续递归进去重复上述过程\",\"package com.recursion; import java.io.File; /** * 去humeng中搜索\\\"Java入门.md\\\"文件 */ public class Demo5 { public static void main(String[] args) { File file = new File(\\\"/Users/humeng\\\"); searchFile(file,\\\"Java入门.md\\\"); } /** * 搜索某个目录下的全部文件，找到我们想要的文件 * @param dir 被搜索的原目录 * @param fileName 被搜索的文件名称 */ public static void searchFile(File dir,String fileName){ //3、判断dir是否是目录 if (dir != null && dir.isDirectory()){ //4、提取当前目录下的一级文件对象 File[] files = dir.listFiles(); //5、判断是否存在一级文件对象，存在才可以遍历 if (files != null && files.length > 0){ //6、遍历一级文件夹 for (File file : files) { //7、如果是文件 if (file.isFile()){ //8、判断文件名是否一样 if (file.getName().contains(fileName)){ //9、找到文件 System.out.println(\\\"查找到了\\\"+file.getAbsolutePath()); } }else { //是文件夹，需要继续递归寻找 searchFile(file,fileName); } } } } } } \"]},\"1387\":{\"h\":\"常见字符集\"},\"1388\":{\"h\":\"字符集基础知识\",\"t\":[\"计算机底层不可以直接存储字符的，计算机中底层只能存储二进制（0、1）\",\"二进制是可以转换成十进制的\",\"结论：计算机底层可以表示十进制编号，计算机可以给人类字符进行编号存储，这套编号规则就是字符集\"]},\"1389\":{\"h\":\"ASCII字符集\",\"t\":[\"ASCII：包括了数字、英文、符号\",\"ASCII使用1个字节存储一个字符，一个字节是8位（2的8次方），总共可以表示256个字符信息，对于英文，数字来说是够用的。\"]},\"1390\":{\"h\":\"GBK：\",\"t\":[\"window系统默认的码表。兼容ASCII码表，也包含了几万个汉字，并支持繁体汉字以及部分日韩文字。\",\"注意：GBK是中国的码表，一个中文以两个字节（16位，2的16次方）的形式存储。但不包含世界上所有国家的文字。\"]},\"1391\":{\"h\":\"Unicode码表\",\"t\":[\"Unicode是计算机科学领域里的一项业界字符编码标准\",\"容纳世界上大多数国家的所有常见文字和符号\",\"Unicode会先通过UTF-8，UTF-16，以及UTF-32的编码成二进制后再存储到计算机，其中最常见的是UTF-8\",\"注意：\",\"Unicode是万国码，以UTF-8编码后一个中文一般以三个字节的形式存储\",\"UTF-8也要兼容ASCII编码表\",\"技术人员都应该使用UTF-8的字符集编码\",\"编码前和编码后的字符集需要一致，否则会出现中文乱码\"]},\"1392\":{\"h\":\"总结\",\"t\":[\"英文和数字等在任何国家的字符集中都占1个字节\",\"GBK字符中一个中文字符占2个字节\",\"UTF-8编码中一个中文占3个字节\",\"编码前和编码后的字符集必须一致，否则乱码\",\"英文和数组在任何国家的编码中都不会乱码\"]},\"1393\":{\"h\":\"字符集的编码、解码\",\"t\":[\"package com.recursion; import java.util.Arrays; public class Demo6 { public static void main(String[] args) throws Exception { String name = \\\"小胡\\\"; byte[] bytes = name.getBytes();//以当前代码的默认字符集进行编码 System.out.println(Arrays.toString(bytes)); //解码 String s = new String(bytes); System.out.println(s); } } \"]},\"1394\":{\"h\":\"IO流概述\",\"t\":[\"I表示input，是数据从硬盘文件读入到内存的过程，称之为输入，负责读\",\"O表示output，是内存程序的数据从内存写出到硬盘文件的过程，称之输出，负责写\"]},\"1395\":{\"h\":\"IO流的分类\",\"t\":[\"按照流的方向分：IO流分为输入流和输出流\",\"按照流中的数据最小单位分：IO流分为字节流（音视频）和字符流（字符文件）\"]},\"1396\":{\"h\":\"总结流的四大类\",\"t\":[\"字节输入流\",\"字节输出流\",\"字符输入流\",\"字符输出流\",\"image-20220810150205017\",\"image-20220810150254975\"]},\"1397\":{\"h\":\"字节流的使用\"},\"1398\":{\"h\":\"文件字节输入流\",\"t\":[\"image-20220810150344088\"]},\"1399\":{\"h\":\"每次读取一个字节\",\"t\":[\"作用：以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去\",\"构造器\",\"说明\",\"public FileInputStream(File file)\",\"创建字节输入流管道与源文件对象接通\",\"public FileInputStream(String pathname)\",\"创建字节输入流管道与源文件路径接通\",\"方法名称\",\"说明\",\"public int read()\",\"每次读取一个字节返回，如果字节已经没有可读的返回-1\",\"public int read(byte[] buffer)\",\"每次读取一个字节数组返回，如果字节已经没有可读的返回-1\",\"package com.io; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStream; public class Demo1 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流 管道 与源文件接通 InputStream fileInputStream = new FileInputStream(\\\"src/data.txt\\\"); //2、读取一个字节返回（每次读一滴水） // int read = fileInputStream.read();//读取一个字节，int是4个字节，所以读取中文也可以（中文UTF-8占3个字节） // System.out.println((char) read);//a // // int read1 = fileInputStream.read(); // System.out.println((char) read1);//b // // int read2 = fileInputStream.read();//c // System.out.println((char) read2); // // int read3 = fileInputStream.read();//读取完毕返回：-1 // System.out.println((char) read3); //3、使用循环读 //定义一个变量，每次读取一个字节,但是中文是三个字节，所以永远无法避免中文乱码问题 // int b; // while (( b = fileInputStream.read() ) != -1){ // System.out.print((char) b); // } } } \"]},\"1400\":{\"h\":\"每次读取一个字节数组\",\"t\":[\"作用：以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去\",\"package com.io; import java.io.FileInputStream; import java.io.InputStream; import java.util.Arrays; /** * 使用文件字节输入流每次读取一个字节数组数据 */ public class Demo2 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流管道与源文件接通 InputStream fileInputStream = new FileInputStream(\\\"src/data.txt\\\"); //2、定义一个字节数组(桶），读取数据，注意：字节数据都是装在buffer桶中的！！！！！！！！！！ // byte[] buffer = new byte[3];//3B(三个字节的桶）buffer:[0,0,0] // // int read = fileInputStream.read(buffer);// buffer:[97, 98, 99] // System.out.println(\\\"读了几个字节\\\"+read);// read:3 // String s = new String(buffer);// 对buffer桶进行解码 // System.out.println(s);// buffer:[97, 98, 99] ——>[a,b,c] // // int read1 = fileInputStream.read(buffer);// buffer:[97, 98, 99] // System.out.println(\\\"读了几个字节\\\"+read1);// read:3 // String s1 = new String(buffer);// 对buffer桶进行解码 // System.out.println(s1);// buffer:[97, 98, 99] ——>[a,b,c] // //// int read2 = fileInputStream.read(buffer);// buffer:[99, 100, 99] //// System.out.println(\\\"读了几个字节\\\"+ read2);// read:3 //// String s2 = new String(buffer);// 对buffer桶进行解码 //// System.out.println(s2);// buffer:[99, 100, 99] ——>[c,d,c]:为什么最后只有两滴水，却还是三滴水？ //// // 因为是前面的桶中剩余的水是[a,b,c], //// //而这桶水只有两滴水[c,d],但是上一桶水最后一个位置还有一滴水c,所以[c,d,c] // // int read2 = fileInputStream.read(buffer);// buffer:[99, 100, 99] // System.out.println(\\\"读了几个字节\\\"+ read2);// read:3 // String s2 = new String(buffer,0,read2);// 对buffer桶进行解码,从0(桶的底部开始),到读了几个字节read2 // System.out.println(s2);// buffer:[99, 100] ——>[c,d] // // // int read3 = fileInputStream.read(buffer); // System.out.println(\\\"读取完毕\\\"+read3); //3、使用循环 /** * 注意：依然无法避免乱码 * 文本内容：abc abc cd * 定义一个只能装3滴水的桶 * 定义len记录每次读取的字节数 * 使用while循环：每次读取的字节数不等于-1（也就是没有读取完）就进入while循环体： * 使用String的一个解码构造器：new String(buffer,0,len)； * 这个buffer是桶中的字节数据，0是从第0滴水开始，len是到第几滴水结束（有几滴水就读几滴水，不要读多，否则会出现上一桶水的残留） */ byte[] buffer = new byte[3]; int len;//记录每次读取的字节数 while ( ( len = fileInputStream.read(buffer) ) != -1){ //读多少倒多少！！！这个String的API非常重要！！ System.out.print(new String(buffer,0,len)); } } } \"]},\"1401\":{\"h\":\"一次读取完全部字节（避免乱码）\",\"t\":[\"定义一个与文件大小一样的字节数组，一次性读取完文件的全部字节\",\"如果文件过大会引起内存溢出（例如一个16GB的内存去读一个100GB的文件，就会造成内存溢出）\",\"package com.io; import java.io.File; import java.io.FileInputStream; import java.io.InputStream; /** * 使用文件字节输入流一次读取字节数组数据 */ public class Demo3 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输入流管道与源文件接通 File file = new File(\\\"src/data1.txt\\\"); InputStream fileInputStream = new FileInputStream(file); //2、定义一个字节数组，与文件大小一样大 //自己实现 // long length = file.length();//获取文件大小 // byte[] buffer = new byte[(int) length];//定义一个和文件大小相同的桶buffer // int len = fileInputStream.read(buffer);//读取桶这么大小的文件返回字节的长度 // System.out.println(\\\"读取了多少个字节\\\"+len);//字节长度 // System.out.println(\\\"文件大小\\\"+length);//文件大小 = 字节长度 // String s = new String(buffer);//字节解码 // System.out.println(s); //JDK9 提供的API byte[] bytes = fileInputStream.readAllBytes(); System.out.println(new String(bytes)); } } \"]},\"1402\":{\"h\":\"文件字节输出流\",\"t\":[\"image-20220810154117721\",\"package com.io; import java.io.FileOutputStream; import java.io.OutputStream; import java.nio.charset.Charset; import java.nio.charset.StandardCharsets; public class Demo4 { public static void main(String[] args) throws Exception { //1、创建一个文件字节输出流管道与目标文件接通 // OutputStream outputStream = new FileOutputStream(\\\"src/data2.txt\\\");//先清空之前的数据，写入新数据 OutputStream outputStream = new FileOutputStream(\\\"src/data2.txt\\\",true);//true:追加数据 //2、写入数据 outputStream.write('a'); outputStream.write(98); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); // outputStream.write('胡'); //写数据一定要刷新数据！！ //写一个字节数组出去 byte[] buffer = {98,'a',99}; outputStream.write(buffer); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); //写中文 byte[] buffer2 = \\\"我是中国人\\\".getBytes(); outputStream.write(buffer2); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); //写一个字节数组的一部分 byte[] buffer3 = {98,'a',99,100}; outputStream.write(buffer3,0,3); outputStream.write(\\\"\\\\r\\\\n\\\".getBytes(StandardCharsets.UTF_8)); // outputStream.flush(); outputStream.close();//释放资源，包含了刷新，关闭后流就不能使用了 } } \"]},\"1403\":{\"h\":\"文件拷贝\",\"t\":[\"image-20220810155021245\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class CopyDemo5 { public static void main(String[] args) { try { //1、创建字节输入流管道与原图片接通 InputStream fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 OutputStream fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); //关闭流 fileOutputStream.close(); fileInputStream.close(); } catch (Exception e) { e.printStackTrace(); } } } \",\"image-20220810155059730\"]},\"1404\":{\"h\":\"资源释放的方式\"},\"1405\":{\"h\":\"try-catch-finally\",\"t\":[\"finally :在异常处理的时候提供finally块来执行所有清除操作，比如说IO流中的资源释放\",\"特点：被finally控制的语句最终一定会被执行，除非JVM退出\",\"异常处理标准格式：try...catch...finally\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class Demo6 { public static void main(String[] args) { InputStream fileInputStream = null; OutputStream fileOutputStream = null; try { //1、创建字节输入流管道与原图片接通 fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); } catch (Exception e) { e.printStackTrace(); }finally { //关闭流 try { if (fileOutputStream != null)fileOutputStream.close();//防止还没有创建流对象的时候就出现异常出现空指针异常 } catch (IOException e) { e.printStackTrace(); } try { if (fileInputStream != null)fileInputStream.close();//防止还没有创建流对象的时候就出现异常出现空指针异常 } catch (IOException e) { e.printStackTrace(); } } } } \"]},\"1406\":{\"h\":\"try-with-resource\",\"t\":[\"资源就是实现了AutoCloseable接口的对象\",\"image-20220810155503910\",\"image-20220810155531840\",\"package com.io; import java.io.*; /** * 学会使用字节流完成文件的复制（支持一切文件） */ public class Demo7 { public static void main(String[] args) { try( //这里只能放置资源对象，用完会自动关闭，自动调用资源对象的close方法关闭资源 //1、创建字节输入流管道与原图片接通 InputStream fileInputStream = new FileInputStream(\\\"/Users/humeng/Pictures/2022.03.01.10.14.jpg\\\"); //2、创建字节输出流与目标文件接通 OutputStream fileOutputStream = new FileOutputStream(\\\"/Users/humeng/Pictures/new.jpg\\\"); ) { //3、定义一个字节数组，来转移数据 byte[] buffer = new byte[1024]; int len; while ((len = fileInputStream.read(buffer)) != -1){ fileOutputStream.write(buffer,0,len);//读多少，倒多少 } System.out.println(\\\"copy success\\\"); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1407\":{\"h\":\"一次读取一个字符\",\"t\":[\"image-20220810155828636\",\"image-20220810160313348\",\"因为字节流读取中文会出现乱码或者内存溢出\",\"读取中文输入使用字符流更合适，最小单位是按照单个字符读取的\",\"package com.io; import java.io.FileReader; import java.io.Reader; public class ReadDemo1 { public static void main(String[] args) throws Exception { //1、创建一个字符输入流管道与文件接通 Reader fileReader = new FileReader(\\\"src/data2.txt\\\"); //2、读取一个字符返回，如果没有可读的字符返回-1 // int code = fileReader.read(); // System.out.println((char) code); //3、使用循环读取字符 int code; while((code = fileReader.read()) != -1){ System.out.print((char) code); } } } \"]},\"1408\":{\"h\":\"一次读取一个字符数组\",\"t\":[\"package com.io; import java.io.FileReader; import java.io.Reader; public class ReadDemo2 { public static void main(String[] args) throws Exception { //1、创建一个字符输入流管道与文件接通 Reader fileReader = new FileReader(\\\"src/data2.txt\\\"); char[] buffer = new char[1024];//1kb int len; while ((len = fileReader.read(buffer))!=-1){ String s = new String(buffer, 0, len); System.out.print(s); } } } \"]},\"1409\":{\"h\":\"文件字符输入流\",\"t\":[\"image-20220810160819067\",\"package com.io; import java.io.FileWriter; import java.io.Writer; public class WriterDemo { public static void main(String[] args) throws Exception { Writer fileWriter = new FileWriter(\\\"src/data1.txt\\\",true); fileWriter.write(99); fileWriter.write('\\\\n'); fileWriter.write(\\\"小胡\\\"); char[] buffer = \\\"我们的\\\".toCharArray(); fileWriter.write(buffer); fileWriter.write(\\\"abc我是中国人\\\",0,3);//abc fileWriter.close(); } } \",\"image-20220810161002221\"]},\"1410\":{\"h\":\"缓冲流\"},\"1411\":{\"h\":\"缓冲流概述\",\"t\":[\"缓冲流也称为高效流、或者高级流。之前学习的字节流可以称为原始流\",\"作用：缓冲流自带缓冲区、可以提高原始字节流、字符流读写数据的性能\",\"image-20220810161245496\",\"image-20220810161337830\"]},\"1412\":{\"h\":\"字节缓冲流\",\"t\":[\"image-20220810161510193\",\"字节缓冲输入流：BufferedInputStream,提高字节输入流读取数据的性能，读写功能上并无变化\",\"字节缓冲输出流：BufferedOutputStream，提高字节输出流写数据的性能，读写功能上并无变化\",\"构造器\",\"说明\",\"public BufferedInputStream (InputStream is)\",\"可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道，从而提高字节输入流读数据的性能\",\"public BufferedOutputStream(OutputStrean os)\",\"可以把低级的字节输出流包装成一个高级的缓冲字节输出流管道，从而提高字节输出流写数据的性能\",\"package com.io2; import java.io.*; public class Demo1 { public static void main(String[] args) { try ( //创建字节输入流管道 InputStream is = new FileInputStream(\\\"src/data2.txt\\\"); //把原始的字节输入流管道包装成高级的缓冲字节输入流 InputStream bis = new BufferedInputStream(is); //创建字节输出流管道 OutputStream os = new FileOutputStream(\\\"src/data3.txt\\\"); OutputStream bos = new BufferedOutputStream(os) ) { byte[] buffer = new byte[1024]; int len; while ((len = bis.read(buffer)) != -1) { bos.write(buffer, 0, len); } System.out.println(\\\"完成了复制\\\"); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1413\":{\"h\":\"字符缓冲流\",\"t\":[\"输入流\",\"image-20220810162655785\",\"package com.io2; import java.io.BufferedReader; import java.io.FileReader; import java.io.Reader; /** * 经典代码：按照行读 */ public class BufferedReaderDemo1 { public static void main(String[] args) { try ( Reader fr = new FileReader(\\\"src/data2.txt\\\"); //把低级的字符输入流包装成高级的字符缓冲输入流 BufferedReader br = new BufferedReader(fr); ) { // char[] buffer = new char[1024]; // int len; // while ((len = fr.read(buffer)) != -1) { // String s = new String(buffer, 0, len); // System.out.println(s); // } // System.out.println(br.readLine()); String line; while ((line = br.readLine()) != null) { System.out.println(line); } } catch (Exception e) { e.printStackTrace(); } } } \",\"输出流\",\"image-20220810162924092\",\"package com.io2; import java.io.BufferedWriter; import java.io.FileWriter; import java.io.Writer; public class Demo2 { public static void main(String[] args) throws Exception { Writer fw = new FileWriter(\\\"src/data1.txt\\\", true); BufferedWriter bw = new BufferedWriter(fw); bw.write(99); bw.newLine();//换行 bw.write('\\\\n'); bw.write(\\\"小胡\\\"); char[] buffer = \\\"我们的\\\".toCharArray(); bw.write(buffer); bw.newLine();//换行 bw.write(\\\"abc我是中国人\\\", 0, 3);//abc bw.close(); } } \",\"image-20220810164319416\"]},\"1414\":{\"h\":\"对象序列化和反序列化\",\"t\":[\"image-20220810164659455\",\"image-20220810165525879\",\"注意：\",\"对象如果要序列化必须要实现Serializable接口\",\"transient修饰的成员变量不参与序列化，可以防止敏感信息暴露\",\" private static final long serialVersionUID = 1;申请序列化的版本号，序列化的版本号必须和反序列化的版本号必须一致才不会出错\",\"package day05; import java.io.Serializable; /** * 对象如果要序列化必须要实现Serializable接口 */ public class Student implements Serializable { // 申请序列化的版本号 // 序列化的版本号必须和反序列化的版本号必须一致才不会出错 private static final long serialVersionUID = 1; private String name; // transient修饰的成员变量不参与序列化，可以防止敏感信息暴露 private transient Integer age; private Character gender; public Student() { } public Student(String name, Integer age, Character gender) { this.name = name; this.age = age; this.gender = gender; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Integer getAge() { return age; } public void setAge(Integer age) { this.age = age; } public Character getGender() { return gender; } public void setGender(Character gender) { this.gender = gender; } @Override public String toString() { return \\\"Student{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", gender=\\\" + gender + '}'; } } \",\"package day05; import java.io.FileOutputStream; import java.io.ObjectOutputStream; /** * 对象序列化 */ public class Demo4 { public static void main(String[] args) throws Exception { // 创建对象 Student student = new Student(\\\"小张\\\", 20, '男'); // 创建普通字节输出流 FileOutputStream os = new FileOutputStream(\\\"src/obj.txt\\\"); // 对象序列化:创建对象字节输出流 ObjectOutputStream oos = new ObjectOutputStream(os); oos.writeObject(student); oos.close(); os.close(); } } \",\"最终输出的对象序列化文件(并不是乱码而是java的一种存储机制)\",\"���\\u0005sr� day05.Student�\\u0016��c>;\\u0002�\\u0003L�\\u0003aget�\\u0013Ljava/lang/Integer;L�\\u0006gendert�\\u0015Ljava/lang/Character;L�\\u0004namet�\\u0012Ljava/lang/String;xpsr�\\u0011java.lang.Integer\\u0012⠤���8\\u0002�\\u0001I�\\u0005valuexr�\\u0010java.lang.Number���\\u001d ���\\u0002��xp���\\u0014sr�\\u0013java.lang.Character4�G�k\\u001a&x\\u0002�\\u0001C�\\u0005valuexpu7t�\\u0006小张 \",\"image-20220810165721366\",\"image-20220810170015030\",\"package day05; import java.io.FileInputStream; import java.io.ObjectInputStream; /** * 对象的反序列化 */ public class Demo5 { public static void main(String[] args) throws Exception { ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\\\"src/obj.txt\\\")); Student student = (Student) ois.readObject(); System.out.println(student); } } \",\"Student{name='小张', age=null, gender=男} \"]},\"1415\":{\"h\":\"打印流\",\"t\":[\"作用：打印流可以实现方便、高效的打印数据到文件中去。打印流一般是指：PrintStream,和PrintWriter两个类\",\"可以实现打印什么就是什么数据，例如打印整数97写出去就是97，打印boolean的true，写出去就是true\"]},\"1416\":{\"h\":\"PrintStream、PrintWriter\",\"t\":[\"image-20220810171121584\",\"构造器\",\"说明\",\"public PrintStream(OutputStream os)\",\"打印流直接通向字节输出流管道\",\"public PrintStream(File f)\",\"打印流直接通向文件对象\",\"public PrintStream(String filepath)\",\"打印流直接通向文件路径\",\"方法\",\"说明\",\"public void print(Xxx xx)\",\"打印任意类型的数据出去\",\"package com.printStream; import java.io.FileOutputStream; import java.io.PrintStream; public class PrintDemo1 { public static void main(String[] args) throws Exception { //1、创建一个打印流对象 PrintStream ps = new PrintStream(new FileOutputStream(\\\"src/data4.txt\\\", true)); // PrintWriter ps = new PrintWriter(\\\"src/data4.txt\\\");//打印功能与PrintStream的使用没有区别 //2、打印 ps.println(97); ps.println('a'); ps.println(true); ps.println(\\\"xiaohu\\\"); ps.println(\\\"我是打印流输出的，我是啥就打印啥\\\"); ps.close(); } } \",\"image-20220810171331840\",\"image-20220810171606026\"]},\"1417\":{\"h\":\"Properties\",\"t\":[\"image-20220810173917264\",\"image-20220810174009175\",\"package day05; import java.io.FileWriter; import java.util.Properties; public class Demo6 { public static void main(String[] args) throws Exception { Properties properties = new Properties(); properties.setProperty(\\\"admin\\\", \\\"root\\\"); properties.setProperty(\\\"password\\\", \\\"123456\\\"); // System.out.println(properties); /** * 参数一：保存管道 * 参数二：保存心得注释 */ properties.store(new FileWriter(\\\"src/application.properties\\\"), \\\"this is user\\\"); } } \",\"package day05; import java.io.FileReader; import java.util.Properties; public class Demo7 { public static void main(String[] args) throws Exception { Properties properties = new Properties(); System.out.println(properties); properties.load(new FileReader(\\\"src/application.properties\\\")); System.out.println(properties); String admin = properties.getProperty(\\\"admin\\\"); System.out.println(admin); } } \"]},\"1418\":{\"h\":\"commons-io\",\"t\":[\"commons-io是Apache开源基金组织提供的一组有关IO操作的类库，可以提高IO功能开发效率\",\"官网：https://commons.apache.org/proper/commons-io/\",\"commons-io工具包提供了很多io操作的类。有两个主要的类FileUtils、IOUtils\"]},\"1419\":{\"h\":\"FileUtils主要方法如下：\",\"t\":[\"方法\",\"说明\",\"String readFileToString(File file,String encoding)\",\"读取文件中的数据，返回字符串\",\"void copyFile(File srcFile,File destFile)\",\"复制文件\",\"void copyDirectoryToDirectory(File srcDir,File destDir)\",\"复制文件夹\",\"package com.io3; import org.apache.commons.io.FileUtils; import org.apache.commons.io.IOUtils; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; public class IODemo1 { public static void main(String[] args) throws Exception { //完成文件拷贝 IOUtils.copy(new FileInputStream(\\\"/Users/humeng/Pictures/IMG_8484(20220301-105418).JPG\\\"), new FileOutputStream(\\\"/Users/humeng/Pictures/new2.JPG\\\")); //完成文件夹复制到某个文件夹下 FileUtils.copyDirectoryToDirectory(new File(\\\"/Users/humeng/Gitee\\\"), new File(\\\"/Users/humeng/Gitee2\\\")); //删除文件夹 FileUtils.deleteDirectory(new File(\\\"/Users/humeng/Gitee2\\\")); } } \"]},\"1420\":{\"c\":[\"Java文件\"]},\"1421\":{\"c\":[\"文件操作\"]},\"1422\":{\"h\":\"网络编程\"},\"1423\":{\"h\":\"什么是网络编程？\",\"t\":[\"网络编程可以让程序与网络上的其他设备中的程序进行数据交换\"]},\"1424\":{\"h\":\"网络体系基本模式\",\"t\":[\"常见的通信模式有如下2中形式：Client-Server（CS）、Browser/Server（BS）\",\"image-20220811155616271\",\"image-20220811155720260\"]},\"1425\":{\"h\":\"网络通信的三要素\"},\"1426\":{\"h\":\"三要素概述、要素一：IP地址\"},\"1427\":{\"h\":\"实现网络编程的关键三要素\",\"t\":[\"IP地址：设备在网络中的地址，是唯一的标识\",\"端口：应用程序在设备中的唯一标识\",\"协议：数据在网络中传输的规则，常见的协议有UDP协议和TCP协议\",\"image-20220811161144990\"]},\"1428\":{\"h\":\"IP地址\",\"t\":[\"IP：全称”互联网协议地址”，是分配给上网设备的唯一标志\",\"常见IP分为：IPv4和IPv6\",\"image-20220811161447089\",\"image-20220811161534805\",\"image-20220811162933624\",\"image-20220811162903436\"]},\"1429\":{\"h\":\"IP地址形式\",\"t\":[\"公网地址、私有地址（局域网使用）\",\"192.168. 开头的就是常见的局域网地址，范围为：192.168.0.0——192.168.255.255\"]},\"1430\":{\"h\":\"IP常用命令\",\"t\":[\"ipconfig：查看本机IP (Mac:ifconfig)\",\"ping IP地址：检查网络是否连通\"]},\"1431\":{\"h\":\"特殊IP\",\"t\":[\"本机IP：127.0.0.1或者localhost：称为回送地址也可以称本地回环地址，只会寻找当前所在的本机\"]},\"1432\":{\"h\":\"IP地址操作类-InetAddress\",\"t\":[\"此类表示Internet协议（IP）地址\"]},\"1433\":{\"h\":\"InetAddress API如下\",\"t\":[\"名称\",\"说明\",\"public static InetAddress getLocalHost()\",\"返回本主机的地址对象\",\"public static InetAddress getByName(String host)\",\"得到指定主机的IP地址对象，参数是域名或者IP地址\",\"public String getHostName()\",\"获取此IP地址的主机名\",\"public String getHostAddress()\",\"返回IP地址字符串\",\"public boolean isReachable(int timeout)\",\"在指定的毫秒内连通该IP地址对象的主机，连通返回true\",\"package com.inetAddress; import java.net.InetAddress; public class InetAddressDemo1 { public static void main(String[] args) throws Exception { //1、获取本机IP地址 InetAddress ip1 = InetAddress.getLocalHost(); // System.out.println(ip1); System.out.println(ip1.getHostName());//获取主机名 System.out.println(ip1.getHostAddress());//获取IP //2、获取域名的IP对象 InetAddress ip2 = InetAddress.getByName(\\\"www.baidu.com\\\"); System.out.println(ip2.getHostName()); System.out.println(ip2.getHostAddress()); //3、获取公网IP对象 InetAddress ip3 = InetAddress.getByName(\\\"36.152.44.96\\\"); System.out.println(ip3.getHostName()); System.out.println(ip3.getHostAddress()); //4、判断是否能互通 ping 5s之内测试 System.out.println(ip3.isReachable(5000)); } } \"]},\"1434\":{\"h\":\"端口号\",\"t\":[\"标识正在计算机设备上运行的程序（进程），被规定为一个16位的二进制，范围是0——65535\",\"一个设备不可以出现两个端口号一样，会出现端口号冲突的\",\"ip地址相当于酒店的地址而端口号相当于酒店的房间\",\"image-20220812094948778\"]},\"1435\":{\"h\":\"协议\"},\"1436\":{\"h\":\"通信协议\",\"t\":[\"连接和通信数据的规则被称为网络通信协议\"]},\"1437\":{\"h\":\"网络通信协议有两种参考模型\"},\"1438\":{\"h\":\"传输层的2个常见协议\",\"t\":[\"TCP：传输控制协议\",\"UDP：用户数据报协议\"]},\"1439\":{\"h\":\"TCP协议特点\",\"t\":[\"使用TCP协议，必须双方先建立连接，它是一种面向连接的可靠通信协议\",\"传输前，采用三次握手方式建立连接，所以是可靠的\",\"在连接中可进行大数据的传输\",\"连接、发送数据都需要确认，且传输完毕后，还需释放已经建立的连接\"]},\"1440\":{\"h\":\"TCP协议通信场景\",\"t\":[\"对信息安全要求较高的场景：例如：文件下载，金融等数据通信\"]},\"1441\":{\"h\":\"TCP三次握手确立连接\",\"t\":[\"首先客户端向服务器发出连接请求（问服务器在吗？）等待服务器确认\",\"服务器向客户端返回了一个响应（在哦）告诉客户端收到了请求\",\"然后客户端向服务器再次发出确认信息，最后建立连接\",\"双方建立信任的过程（确认收发信息都没有问题，首先客户端发请求，服务器收请求，服务器发响应，客户端收响应，客户端再次向服务端发出确认信息，建立连接）\",\"image-20220812095033346\"]},\"1442\":{\"h\":\"TCP四次挥手断开连接\",\"t\":[\"客户端向服务器发出取消连接请求\",\"服务器向客户端返回一个响应，表示收到客户端取消请求（让客户端稍等一会）\",\"服务器将最后的数据处理完毕，然后再向客户端发出确认取消信息\",\"客户端再次发送确认消息，连接取消\",\"image-20220812095202456\"]},\"1443\":{\"h\":\"UDP协议\",\"t\":[\"UDP是一种无连接、不可靠传输的协议\",\"将数据源IP、目的地IP和端口封装成数据包，不需要建立连接\",\"每个数据包的大小限制在64KB内\",\"发送不管对方是否准备好，接收方收到也不确认，所以是不可靠的\",\"可以广播发送，发送数据结束时无需释放资源，开销小，速度快\"]},\"1444\":{\"h\":\"UDP协议通信场景\",\"t\":[\"语音通话，视频会话等\"]},\"1445\":{\"h\":\"UDP通信\"},\"1446\":{\"h\":\"快速入门\"},\"1447\":{\"h\":\"DatagramPacket：数据包对象（韭菜盘子）\",\"t\":[\"构造器\",\"说明\",\"public DatagramPacket(byte[] buf,int length,InetAddress address,int port)\",\"创建发送端数据包对象：buf：要发送的内容，字节数组；length：要发送内容的字节长度；address：接收端的IP地址对象；port：接收端的端口号\",\"public DatagramPacket(byte[] buf,int length)\",\"创建接收的数据包对象：buf：用来存储接收的内容；length：能够接收的内容长度\"]},\"1448\":{\"h\":\"DatagramSocket：发送端和接收端对象（人）\",\"t\":[\"构造器\",\"说明\",\"public DatagramSocket()\",\"创建发送端的Socket对象，系统会随机分配一个端口号\",\"public DatagramSocket(int port)\",\"创建接收端的Socket对象并指定端口号\"]},\"1449\":{\"h\":\"DatagramSocket类成员方法\",\"t\":[\"方法\",\"说明\",\"public void send(DatagramSocket dp)\",\"发送数据包\",\"public void receive(DatagramSocket p)\",\"接收数据包\",\"package com.udp; import java.net.DatagramPacket; import java.net.DatagramSocket; /** * 接收端 （服务端） */ public class ServerDemo2 { public static void main(String[] args) throws Exception { System.out.println(\\\"========服务端启动=========\\\"); //1、创建接收端对象，注册端口（人） DatagramSocket socket = new DatagramSocket(8888); //2、创建一个数据包对象接收数据（韭菜盘子） byte[] buffer = new byte[1024 * 64];//64KB DatagramPacket packet = new DatagramPacket(buffer,buffer.length); //3、等待接收数据即可 socket.receive(packet); //4、取出数据即可（读多少，取出多少） int length = packet.getLength(); String rs = new String(buffer,0,length); System.out.println(\\\"收到了：\\\"+rs); // 获取发送端的IP和端口 String ip = packet.getSocketAddress().toString(); System.out.println(\\\"对方地址：\\\"+ip); int port = packet.getPort(); System.out.println(\\\"对方端口\\\"+port); socket.close();//关闭对象资源 } } \",\"package com.udp; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; /** * 发送端 一发 一收 （客户端） */ public class ClientDemo1 { public static void main(String[] args) throws Exception { System.out.println(\\\"========客户端启动=========\\\"); //1、创建发送端对象，发送端自带默认的端口号（人） DatagramSocket socket = new DatagramSocket(6666); //2、创建一个数据包对象封装对象（韭菜盘子） /** * public DatagramPacket(byte buf[], int offset, int length, * InetAddress address, int port) * 参数一：封装要发送的数据（韭菜） * 参数二：发送数据的大小 * 参数三：服务端的IP地址 * 参数四：服务端的端口 * * */ byte[] buffer = \\\"我是一颗快乐的韭菜\\\".getBytes(); DatagramPacket packet = new DatagramPacket(buffer,buffer.length, InetAddress.getLocalHost(),8888); //3、发送数据 socket.send(packet); socket.close();//关闭对象资源 } } \"]},\"1450\":{\"h\":\"多发多收\",\"t\":[\"package com.udp2; import java.net.DatagramPacket; import java.net.DatagramSocket; public class ServerDemo2 { public static void main(String[] args) throws Exception { System.out.println(\\\"========服务端启动=========\\\"); //1、创建接收端对象，注册端口（人） DatagramSocket socket = new DatagramSocket(8888); //2、创建一个数据包对象接收数据（韭菜盘子） byte[] buffer = new byte[1024 * 64];//64KB DatagramPacket packet = new DatagramPacket(buffer,buffer.length); while (true) { //3、等待接收数据即可 socket.receive(packet); //4、取出数据即可（读多少，取出多少） int length = packet.getLength(); String rs = new String(buffer,0,length); if (\\\"exit\\\".equals(rs)){ System.out.println(\\\"客户离线！\\\"); socket.close(); break; } System.out.println(\\\"收到了来自：\\\"+packet.getAddress() + \\\"，对方端口是：\\\"+packet.getPort()+\\\"的消息：\\\"+rs); // 获取发送端的IP和端口 } } } \",\"package com.udp2; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; import java.util.Scanner; /** * 发送端：多发 多收 */ public class ClientDemo1 { public static void main(String[] args) throws Exception { System.out.println(\\\"========客户端启动=========\\\"); //1、创建发送端对象，发送端自带默认的端口号（人） DatagramSocket socket = new DatagramSocket(6666); //2、创建一个数据包对象封装对象（韭菜盘子） /** * public DatagramPacket(byte buf[], int offset, int length, * InetAddress address, int port) * 参数一：封装要发送的数据（韭菜） * 参数二：发送数据的大小 * 参数三：服务端的IP地址 * 参数四：服务端的端口 * * */ Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请说：\\\"); String msg = scanner.nextLine(); byte[] buffer = msg.getBytes(); DatagramPacket packet = new DatagramPacket(buffer,buffer.length, InetAddress.getLocalHost(),8888); //3、发送数据 socket.send(packet); if (\\\"exit\\\".equals(msg)){ System.out.println(\\\"离线成功！\\\"); socket.close(); scanner.close(); break; } } } } \"]},\"1451\":{\"h\":\"广播、组播\"},\"1452\":{\"h\":\"UDP的三种通信方式\",\"t\":[\"单播：单台主机与单台主机之间的通信\",\"广播：当前主机与所在网络中的所有主机通信\",\"组播：当前主机与选定的一组主机的通信\"]},\"1453\":{\"h\":\"UDP如何实现广播\",\"t\":[\"使用广播地址：255.255.255.255\",\"具体操作： \",\"发送端发送的数据包的目的地写的是广播地址，且指定端口。（255.255.255.255,9999）\",\"本机所在网段的其他主机的程序只要匹配端口成功就可以收到消息了。（9999）\"]},\"1454\":{\"h\":\"UDP如何实现组播\",\"t\":[\"使用组播地址：224.0.0.0——239.255.255.255\",\"具体操作： \",\"发送端的数据包的目的地是组播IP（例如 ：244.0.1.1，端口：9999）\",\"接收端必须绑定该组播IP（224.0.1.1），端口还要对应发送的目的端口9999，这样即可接收该组播消息\",\"DatagramSocket的子类MulticastSocket可以在接收端绑定组播IP\"]},\"1455\":{\"h\":\"TCP通信\"},\"1456\":{\"h\":\"客户端\"},\"1457\":{\"h\":\"Socket\",\"t\":[\"构造器\",\"说明\",\"public Socket(String host,int pot)\",\"创建发送端的Socket对象与服务器连接，参数为服务端重写的IP和端口\"]},\"1458\":{\"h\":\"Socket类成员方法\",\"t\":[\"方法\",\"说明\",\"OutputStream getOutputStream()\",\"获得字节输出流对象\",\"InputStream getInputStream()\",\"获得字节输入流对象\",\"package com.socket1; import java.io.IOException; import java.io.OutputStream; import java.io.PrintStream; import java.net.Socket; /** * 完成Socket网络编程入门案例的客户端开发 */ public class ClientDemo1 { public static void main(String[] args) { //1、创建Socket通信管道请求与服务器的连接 //public Socket(String host,int port) //参数一：服务端的地址；参数二：服务端的端口号 try { Socket socket = new Socket(\\\"localhost\\\",7777); //2、从socket通信管道中得到一个字节输出流，负责发送数据 OutputStream os = socket.getOutputStream(); //3、把低级的字节流包装成打印流 PrintStream ps = new PrintStream(os); //4、发送消息 ps.print(\\\"我是TCP的客户端，我已经与你对接，发出要求，约吗？\\\"); ps.flush();//刷新 //关闭资源（正常情况不用关闭，除非用户点击离线才进行关闭） // socket.close();//可能会出现bug：消息还没有发完，发一半，就关闭了资源 } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1459\":{\"h\":\"服务端\"},\"1460\":{\"h\":\"ServerSocket\",\"t\":[\"构造器\",\"说明\",\"public ServerSocket(int port)\",\"注册服务端端口\"]},\"1461\":{\"h\":\"ServerSocket类成员方法\",\"t\":[\"方法\",\"说明\",\"public Socket accept()\",\"等待接收客户端的Socket通信连接，连接成功返回Socket对象与客户端建立端到端通信\",\"package com.socket2; import java.io.BufferedReader; import java.io.InputStream; import java.io.InputStreamReader; import java.net.ServerSocket; import java.net.Socket; /** * 目标：开发Socket网络编程入门代码的服务端，实现接收消息 */ public class ServerDemo2 { public static void main(String[] args) { try { System.out.println(\\\"======服务端启动成功=====\\\"); //1、注册端口 ServerSocket serverSocket = new ServerSocket(7777); //2、调用accept方法，等待接收客户端的Socket连接请求，建立Socket通信管道 Socket socket = serverSocket.accept(); //3、从Socket通信管道中得到一个字节输入流 InputStream is = socket.getInputStream(); //4、把字节输入流包装成缓冲字节输入流，进行消息的接收 BufferedReader br = new BufferedReader(new InputStreamReader(is)); //5、按照行读取消息 String msg; while ((msg = br.readLine()) != null){ System.out.println(socket.getRemoteSocketAddress()+\\\"说了:\\\"+msg); if (\\\"exit\\\".equals(msg)){ br.close(); is.close(); socket.close(); break; } } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.socket2; import java.io.OutputStream; import java.io.PrintStream; import java.net.Socket; import java.util.Scanner; /** * 完成Socket网络编程入门案例的客户端开发 */ public class ClientDemo1 { public static void main(String[] args) { //1、创建Socket通信管道请求与服务器的连接 //public Socket(String host,int port) //参数一：服务端的地址；参数二：服务端的端口号 try { Socket socket = new Socket(\\\"localhost\\\",7777); //2、从socket通信管道中得到一个字节输出流，负责发送数据 OutputStream os = socket.getOutputStream(); //3、把低级的字节流包装成打印流 PrintStream ps = new PrintStream(os); //4、发送消息 Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请说：\\\"); String msg = scanner.nextLine(); ps.println(msg); ps.flush();//刷新 if (\\\"exit\\\".equals(msg)){ ps.close(); os.close(); socket.close(); break; } } //关闭资源（正常情况不用关闭，除非用户点击离线才进行关闭） // socket.close();//可能会出现bug：消息还没有发完，发一半，就关闭了资源 } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1462\":{\"h\":\"本案例的多发多收，是否可以同时接收多个客户端的消息？\",\"t\":[\"不可以\",\"因为服务端现在只有一个线程，只能与一个客户进行通信\"]},\"1463\":{\"h\":\"TCP通信-同时接收多个客户端消息[重点]\"},\"1464\":{\"h\":\"如何才可以让服务端可以处理多个客户端的通信需求？\",\"t\":[\"引入多线程\",\"package com.socket3; import java.io.BufferedReader; import java.io.InputStream; import java.io.InputStreamReader; import java.net.ServerSocket; import java.net.Socket; /** * 目标：实现服务端可同时处理多个客户端的消息 */ public class ServerDemo2 { public static void main(String[] args) { try { System.out.println(\\\"======服务端启动成功=====\\\"); //1、注册端口 ServerSocket serverSocket = new ServerSocket(7777); //a、定义一个死循环，不断的由主线程负责不断的接收客户端的Socket管道 while (true) { //2、每接收到一个客户端的Socket管道，交给一个独立的子线程类负责读取消息 Socket socket = serverSocket.accept(); //3、开始创建独立线程处理Socket管道 ServerReaderThread serverReaderThread = new ServerReaderThread(socket); serverReaderThread.start(); } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.socket3; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.net.Socket; public class ServerReaderThread extends Thread{ private Socket socket; public ServerReaderThread(Socket socket){ this.socket = socket; } @Override public void run() { try { //3、从Socket通信管道中得到一个字节输入流 InputStream is = socket.getInputStream(); //4、把字节输入流包装成缓冲字节输入流，进行消息的接收 BufferedReader br = new BufferedReader(new InputStreamReader(is)); //5、按照行读取消息 String msg; while ((msg = br.readLine()) != null){ System.out.println(socket.getRemoteSocketAddress()+\\\"说了:\\\"+msg); if (\\\"exit\\\".equals(msg)){ br.close(); is.close(); socket.close(); break; } } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.socket3; import java.io.OutputStream; import java.io.PrintStream; import java.net.Socket; import java.util.Scanner; /** * 完成Socket网络编程入门案例的客户端开发 */ public class ClientDemo1 { public static void main(String[] args) { //1、创建Socket通信管道请求与服务器的连接 //public Socket(String host,int port) //参数一：服务端的地址；参数二：服务端的端口号 try { Socket socket = new Socket(\\\"localhost\\\",7777); //2、从socket通信管道中得到一个字节输出流，负责发送数据 OutputStream os = socket.getOutputStream(); //3、把低级的字节流包装成打印流 PrintStream ps = new PrintStream(os); //4、发送消息 Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请说：\\\"); String msg = scanner.nextLine(); ps.println(msg); ps.flush();//刷新 if (\\\"exit\\\".equals(msg)){ ps.close(); os.close(); socket.close(); break; } } //关闭资源（正常情况不用关闭，除非用户点击离线才进行关闭） // socket.close();//可能会出现bug：消息还没有发完，发一半，就关闭了资源 } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1465\":{\"h\":\"TCP通信模型：线程池优化\",\"t\":[\"package com.socket4; import java.io.BufferedReader; import java.io.InputStream; import java.io.InputStreamReader; import java.net.Socket; public class ServerReaderRunnable implements Runnable{ private Socket socket; public ServerReaderRunnable(Socket socket){ this.socket = socket; } @Override public void run() { try { //3、从Socket通信管道中得到一个字节输入流 InputStream is = socket.getInputStream(); //4、把字节输入流包装成缓冲字节输入流，进行消息的接收 BufferedReader br = new BufferedReader(new InputStreamReader(is)); //5、按照行读取消息 String msg; while ((msg = br.readLine()) != null){ System.out.println(socket.getRemoteSocketAddress()+\\\"说了:\\\"+msg); if (\\\"exit\\\".equals(msg)){ br.close(); is.close(); socket.close(); break; } } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.socket4; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.*; /** * 目标：实现服务端可同时处理多个客户端的消息 */ public class ServerDemo2 { //使用静态变量 private static ExecutorService pool = new ThreadPoolExecutor(3,5, 6, TimeUnit.SECONDS,new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); public static void main(String[] args) { try { System.out.println(\\\"======服务端启动成功=====\\\"); //1、注册端口 ServerSocket serverSocket = new ServerSocket(7777); //a、定义一个死循环，不断的由主线程负责不断的接收客户端的Socket管道 while (true) { //2、每接收到一个客户端的Socket管道，交给一个独立的子线程类负责读取消息 Socket socket = serverSocket.accept(); ServerReaderRunnable target = new ServerReaderRunnable(socket); pool.execute(target); } } catch (Exception e) { e.printStackTrace(); } } } \",\"package com.socket4; import java.io.OutputStream; import java.io.PrintStream; import java.net.Socket; import java.util.Scanner; /** * 完成Socket网络编程入门案例的客户端开发 */ public class ClientDemo1 { public static void main(String[] args) { //1、创建Socket通信管道请求与服务器的连接 //public Socket(String host,int port) //参数一：服务端的地址；参数二：服务端的端口号 try { Socket socket = new Socket(\\\"localhost\\\",7777); //2、从socket通信管道中得到一个字节输出流，负责发送数据 OutputStream os = socket.getOutputStream(); //3、把低级的字节流包装成打印流 PrintStream ps = new PrintStream(os); //4、发送消息 Scanner scanner = new Scanner(System.in); while (true) { System.out.println(\\\"请说：\\\"); String msg = scanner.nextLine(); ps.println(msg); ps.flush();//刷新 if (\\\"exit\\\".equals(msg)){ ps.close(); os.close(); socket.close(); break; } } //关闭资源（正常情况不用关闭，除非用户点击离线才进行关闭） // socket.close();//可能会出现bug：消息还没有发完，发一半，就关闭了资源 } catch (Exception e) { e.printStackTrace(); } } } \"]},\"1466\":{\"h\":\"实现BS开发-模拟\",\"t\":[\"image-20220812140237167\",\"基于一个线程的BS\",\"package day07.d4_bs; import java.io.IOException; import java.io.OutputStream; import java.io.PrintStream; import java.net.ServerSocket; import java.net.Socket; /** * 模拟BS架构 */ public class BSserverDemo { public static void main(String[] args) { try { ServerSocket socket = new ServerSocket(8080); while (true) { Socket accept = socket.accept(); new ServerReaderThread(accept).start(); } } catch (Exception e) { e.printStackTrace(); } } } class ServerReaderThread extends Thread { private Socket socket; public ServerReaderThread(Socket socket) { this.socket = socket; } @Override public void run() { try { OutputStream outputStream = socket.getOutputStream(); PrintStream printStream = new PrintStream(outputStream); printStream.println(\\\"HTTP/1.1 200 OK\\\"); printStream.println(\\\"Content-Type:text/html;charset=UTF-8\\\"); printStream.println();//必须换行才可以响应 printStream.println(\\\"<h1>hello我的</h1>\\\"); printStream.close(); } catch (Exception e) { e.printStackTrace(); } } } \",\"使用线程池(因为BS架构浏览器请求已经服务器响应是非常快的，所以使用线程池可以处理很多请求和响应)\",\"package day07.d4_bs; import java.io.IOException; import java.io.OutputStream; import java.io.PrintStream; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.*; /** * 模拟BS架构 */ public class BSserverDemo { // 创建线程池 public static ExecutorService pool = new ThreadPoolExecutor(3, 5, 6, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()); public static void main(String[] args) { try { ServerSocket socket = new ServerSocket(8080); while (true) { Socket accept = socket.accept(); pool.execute(new ServerReadRunnable(accept)); } } catch (Exception e) { e.printStackTrace(); } } } \",\"package day07.d4_bs; import java.io.IOException; import java.io.OutputStream; import java.io.PrintStream; import java.net.Socket; public class ServerReadRunnable implements Runnable { private Socket socket; public ServerReadRunnable(Socket socket) { this.socket = socket; } @Override public void run() { try { OutputStream outputStream = socket.getOutputStream(); PrintStream printStream = new PrintStream(outputStream); printStream.println(\\\"HTTP/1.1 200 OK\\\"); printStream.println(\\\"Content-Type:text/html;charset=UTF-8\\\"); printStream.println();//必须换行才可以响应 printStream.println(\\\"<h1>hello我的</h1>\\\"); printStream.close(); } catch (IOException e) { e.printStackTrace(); } } } \"]},\"1467\":{\"h\":\"Java8特性的科技\"},\"1468\":{\"h\":\"Lambda概述\",\"t\":[\"Lambda表达式是JDK8开始后的一种新语法形式。\",\"作用：简化 匿名内部类（面向对象中的内容）的代码写法\",\"Lambda表达式的简化格式：\",\"(匿名内部类被重写方法的形参列表) ->{\",\"被重写方法的方法体代码。\",\"}\",\"注：->是语法形式，无实际含义。\",\"**注意：**Lambda表达式只能简化函数式接口的匿名内部类的写法形式。\",\"什么是函数式接口？\",\"首先必须是接口、其次接口中有且仅有一个抽象方法的形式；\",\"通常我们会在接口上加一个@FunctionalInterface注解，标记该接口必须满足函数式接口。\",\"image-20220809154042123\",\"package com.lambda; public class LambdaDemo1 { public static void main(String[] args) { //目标：学会使用Lambda表达式简化匿名内部类 //Lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式 //普通的匿名内部类 Swimming s1 = new Swimming() { @Override public void swim() { System.out.println(\\\"老师游的很快\\\"); } }; go(s1); //简化（因为这个Swimming接口中只有一个抽象方法，所以不会产生二义性） Swimming s2 = ()->{ System.out.println(\\\"老师游泳很很很块\\\"); }; go(s2); //再进一步简化 go(()->{ System.out.println(\\\"老师游泳游得超过了光速！！\\\"); }); } public static void go(Swimming s){ System.out.println(\\\"开始。。。\\\"); s.swim(); System.out.println(\\\"结束。。。\\\"); } } @FunctionalInterface//一旦加上这个注解，这个接口就必须是函数式接口，里面只能有一个抽象方法。 interface Swimming{ void swim(); } \"]},\"1469\":{\"h\":\"总结：\",\"t\":[\"Lambda表达式的基本作用\",\"简化函数式接口的匿名内部类的写法\",\"Lambda表达式有什么使用前提？\",\"必须是接口的匿名内部类，接口中只能有一个抽象方法\",\"Lambda的好处\",\"Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可传递的代码，它可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。\",\"Lambda表达式省略写法（在Lambda基础上继续简化）\",\"参数类型可以省略不写\",\"如果只有一个参数，参数类型可以省略，同时（）也可以省略\",\"如果Lambda方法体重只有一行代码，可以省略大括号不写，同时也要省略分号\",\"如果Lambda方法体重只有一行代码，可以省略大括号不写，如果这行代码是return语句，必须省略return不写，同时也要省略；不写\",\"package com.lambda; import java.util.Arrays; import java.util.Comparator; public class LambdaDemo2 { public static void main(String[] args) { Integer[] ages1 = {34,12,42,23}; // Arrays.sort(ages1, new Comparator<Integer>() { // @Override // public int compare(Integer o1, Integer o2) { // return o2-o1;//降序：o2 - o1; 升序：o1 - o2; // } // }); //简化 // Arrays.sort(ages1,(Integer o1,Integer o2) -> { // return o2 - o1; // }); // 再简化！！ // Arrays.sort(ages1,((o1, o2) -> { // return o2 - o1; // })); //再再再简化！！！ Arrays.sort(ages1,(o1, o2) -> o2 - o1); System.out.println(Arrays.toString(ages1)); } } \"]},\"1470\":{\"h\":\"Stream流\",\"t\":[\"什么是Stream流？\",\"在Java 8 中，得益于Lambda表达式所带来的函数式编程，引入了一个全新的Stream流的概念\",\"目的：用于简化集合和数组操作的API\",\"image-20220810133948555\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.Collections; import java.util.List; /** * 初步体验Stream流的快捷 */ public class StreamTest { public static void main(String[] args) { List<String> name = new ArrayList<>(); Collections.addAll(name,\\\"刘备\\\",\\\"张飞\\\",\\\"关羽\\\",\\\"张三\\\",\\\"张无忌\\\"); System.out.println(name); //从name集合中取出姓张的放到新的集合 // List<String> zhangList = new ArrayList<>(); // for (String s : name) { // if (s.startsWith(\\\"张\\\")){ // zhangList.add(s); // } // } // System.out.println(zhangList); // // //找名称长度是3的姓名 // List<String> zhangThree = new ArrayList<>(); // for (String s : zhangList) { // if (s.length() == 3){ // zhangThree.add(s); // } // } // System.out.println(zhangThree); //使用Stream实现 /** * 先得到集合的Stream流（类似于传送带），然后经过一层一层的过滤，最终得到的就是我们想要的结果 */ //得到Stream流。过滤不是姓张的元素 。 过滤长度不是3的元素 。forEach遍历流 name.stream().filter(s -> s.startsWith(\\\"张\\\")).filter(s -> s.length() == 3).forEach(s -> System.out.println(s)); } } \"]},\"1471\":{\"h\":\"Stream流的获取\",\"t\":[\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Stream; public class StreamTest2 { public static void main(String[] args) { /**-----------------Collection集合获取流-----------------------*/ Collection<String> list = new ArrayList<>(); Stream<String> s = list.stream();//拿到Collection的Stream流 /**-----------------Map集合获取流-----------------------*/ Map<String,Integer> maps = new HashMap<>(); //键流 Stream<String> keyStream = maps.keySet().stream(); //值流 Stream<Integer> valueStream = maps.values().stream(); //或者键值对 Stream<Map.Entry<String, Integer>> kvStream = maps.entrySet().stream(); /**-----------------数组获取流-----------------------*/ String[] name = {\\\"小王\\\",\\\"小杜\\\",\\\"小李\\\"}; Stream<String> nameStream = Arrays.stream(name); } } \"]},\"1472\":{\"h\":\"Stream常用API\",\"t\":[\"image-20220810134701065\",\"package com.meng.streamDemo; import java.util.ArrayList; import java.util.List; import java.util.stream.Stream; public class StreamTest3 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); //Stream<T> filter(Predicate<? super T> predicate); // list.stream().filter(new Predicate<String>() { // @Override // public boolean test(String s) { // return s.startsWith(\\\"张\\\"); // } // }); //使用Lambda表达式，我们认为s是list中的每一个元素 //注意过滤的不是filter形参的元素，filter中的形参是要保留的元素，过滤的是不符合形参的元素 list.stream().filter( s-> s.startsWith(\\\"张\\\")).forEach(s -> System.out.println(s)); //只会过滤，而不会改变原本的，list集合中的内容 System.out.println(list); long size = list.stream().filter(s -> s.length() == 3).count(); System.out.println(size); //limit取前几个元素 //扩展，我们认为在Lambda表达式中，我们发现如果入参和后面的方法参数一样的话，我们可以使用方法引用，例如 // s -> System.out.println(s) 可以变成这样 System.out::println 方法引用 list.stream().filter(s -> s.startsWith(\\\"张\\\")).limit(2).forEach(System.out::println); //skip是跳过前几个元素 list.stream().filter(s -> s.startsWith(\\\"张\\\")).skip(2).forEach(System.out::println); //Map加工 //给集合元素的前面都加上\\\"黑马的\\\" // list.stream().map(new Function<String, String>() { // @Override // public String apply(String s) { // return \\\"黑马的\\\"+s; // } // }); //简化： s：原材料 -> 加工后的 list.stream().map(s -> \\\"黑马的\\\"+s).forEach(System.out::println); //需求：把所有的名称，都加工为一个学生对象 // list.stream().map(s -> new Student(s)).forEach(student -> System.out.println(student)); list.stream().map(Student::new).forEach(System.out::println);//构造器引用 方法引用 //合并流 Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); Stream<String> s2 = Stream.of(\\\"java1\\\",\\\"java2\\\"); Stream<String> s3 = Stream.concat(s1,s2); s3.forEach(s -> System.out.println(s)); } } \"]},\"1473\":{\"h\":\"Stream流的收集操作\",\"t\":[\"image-20220810135140321\",\"就是把Stream流操作后的结果数据转回到集合或数组中去\",\"Stream流：方便操作集合/数组的手段\",\"集合/数组:才是开发中的目的\",\"流只能被收集一次\",\"package com.meng.streamDemo; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; public class StreamTest4 { public static void main(String[] args) { List<String> list = new ArrayList<>(); list.add(\\\"张无忌\\\"); list.add(\\\"张三丰\\\"); list.add(\\\"张飞\\\"); list.add(\\\"吴邪\\\"); list.add(\\\"张启灵\\\"); list.add(\\\"王月半\\\"); System.out.println(list); Stream<String> s1 = list.stream().filter(s -> s.startsWith(\\\"张\\\")); List<String> zhangList = s1.collect(Collectors.toList()); System.out.println(zhangList); } } \",\"image-20220810135243897\"]},\"1474\":{\"h\":\"函数式接口定义\",\"t\":[\"函数式接口（Functional Interface）：有且仅有一个抽象方法的接口，但可以有多个非抽象方法的接口\",\"函数式接口，即适用于函数式编程场景的接口，可以被隐式转换为Lambda表达式来表示接口的一个实现；jdk8以前是使用匿名类实现的。\",\"示例：jdk1.8 使用注解@FunctionalInterface注解表示一个函数式接口\",\"@FunctionalInterface public interface IHello { public void sayHello(String name); } \",\"示例: jdk1.8 之前使用匿名内部类方式来调用函数式接口\",\"@Test void test1() { IHello hello = new IHello() { @Override public void sayHello(String name) { System.out.println(\\\"hello \\\" + name); } }; hello.sayHello(\\\"张三\\\"); } \",\"示例: jdk1.8 之后可以使用lambda表达式隐式的实现函数式接口\",\"@Test void test2() { IHello hello = name -> System.out.println(\\\"hello \\\" + name); hello.sayHello(\\\"李四\\\"); } \"]},\"1475\":{\"h\":\"jdk1.8 新增的函数式接口\",\"t\":[\"jdk1.8之前,已有的函数式接口有很多：\",\"java.lang.Runnable java.util.concurrent.Callable java.security.PrivilegedAction java.util.Comparator java.io.FileFilter java.nio.file.PathMatcher java.lang.reflect.InvocationHandler java.beans.PropertyChangeListener java.awt.event.ActionListener javax.swing.event.ChangeListener\",\"jdk1.8之后新增的一个重要的函数接口:\",\"java.util.function\",\"此包下有很多类来支持java的函数式编程, 现在就讲到本篇文章的重点, 其中重要的四个接口Function、Consumer、Predicate、Supplier。\",\"接口\",\"参数\",\"返回值\",\"说明\",\"Supplier<T>\",\"无\",\"T\",\"供给型；无参，返回一个指定泛型的对象\",\"Consumer<T>\",\"T\",\"无\",\"消费型；传入一个指定泛型的参数，无返回值\",\"Predicate<T>\",\"T\",\"Boolean\",\"断言型；判断函数，返回判断结果true/false\",\"Function<T,R>\",\"T\",\"R\",\"方法型；输入一个参数，得到一个结果\"]},\"1476\":{\"h\":\"Supplier：供给型函数式接口\",\"t\":[\"使用场景：提前定义可能返回的一个指定类型结果，等需要调用的时候再获取结果。\",\" @Test void test3(){ // 示例1 int num1 = 100; int num2 = 200; // 提前定义好需要返回的指定类型结果，但不运行 Supplier supplier= () -> num1 + num2; // 调取get()方法获取一个结果 System.out.println(supplier.get()); // 示例2 String str = \\\"abcdefghijklmn\\\"; String s = getValue(()->str.substring(1,5)); System.out.println(s); } // 定义一个方法，返回一个结果，参数使用Supplier，具体返回内容由调用者决定 public static String getValue(Supplier supplier){ return supplier.get(); } \",\"注意：此示例中返回的结果引用的对象num1和num2其实是不能更改的，如果我们在supplier定义后，suppliser.get()调用前将num1或num更改了，则编译会报错！\"]},\"1477\":{\"h\":\"Consumer：消费型函数式接口\",\"t\":[\"使用场景：处理一些结果或数据，不需要返回的消费型，例如打印、发送通知等操作。 方法：\",\"void accept(T t); 给参数T执行指定的操作 default Consumer andThen(Consumer<? super T> after) 给参数T执行指定操作后，再执行after方法\",\"@Test void test4(){ // 传入一个加法并打印结果 modify(10,x->System.out.println(x+20)); // 传入一个减法并打印结果 modify(10,x->System.out.println(x-20)); } // 定义一个方法，第二个参数为一个Consumer public static void modify(int num,Consumer consumer){ // 执行accept()方法，方法的具体实现不关心，调用的时候才关心 consumer.accept(num); } \",\"示例：将一批用户里面的“李四”整理出来。\",\"@Test void test4(){ List lisiList = new ArrayList<>(); // 定义一个消费方法，将李四筛选出来存入lisiList Consumer consumer = x -> { if (x.getName().equals(\\\"李四\\\")){ lisiList.add(x); } }; List list = new ArrayList<>(); list.add(new Person(21,\\\"张三\\\")); list.add(new Person(22,\\\"李四\\\")); list.add(new Person(23,\\\"张三\\\")); list.add(new Person(16,\\\"李四\\\")); list.add(new Person(30,\\\"王五\\\")); list.add(new Person(52,\\\"李四\\\")); // 传入一个消费方法 list.forEach(consumer); // 打印消费方法处理后的lisiList System.out.println(lisiList); } \",\"Consumer接口还有一个方法andThen(Consumer<? super T> after)，表示对给定参数执行定义操作后，再继续执行after定义的操作。\",\"示例：将李四整理出来后将年龄大于25的李四整理出来\",\"@Test void test4(){ List lisiList = new ArrayList<>(); // 定义一个消费方法，将李四筛选出来存入lisiList Consumer consumer = x -> { if (x.getName().equals(\\\"李四\\\")){ lisiList.add(x); } }; // 整理出李四后，继续将年龄大于25的筛选出来 consumer = consumer.andThen(x->{ // removeIf方法里传入了一个Predicate断言接口实例，下面示例中将要讲到 lisiList.removeIf(y->y.getAge()<25); }); List list = new ArrayList<>(); list.add(new Person(21,\\\"张三\\\")); list.add(new Person(22,\\\"李四\\\")); list.add(new Person(23,\\\"张三\\\")); list.add(new Person(16,\\\"李四\\\")); list.add(new Person(30,\\\"王五\\\")); list.add(new Person(52,\\\"李四\\\")); // 传入一个消费方法 list.forEach(consumer); // 打印消费方法处理后的lisiList System.out.println(lisiList); } \"]},\"1478\":{\"h\":\"Predicate：断言型函数式接口\",\"t\":[\"使用场景：对一个数据进行判断，并返回boolean 方法：\",\"boolean test(T t) 判断指定值是否符合条件 Predicate and(Predicate<? super T> other) 与操作 Predicate or(Predicate<? super T> other) 或操作 static Predicate isEqual(Object targetRef) 静态方法，equals判断第一个test与第二个test方法相同\",\"@Test public void test5(){ Predicate predicate = (x)-> x==10; System.out.println(predicate.test(10)); } \",\"在上例中我们有使用到List集合里的一个方法removeIf(Predicate<? super E> filter) 他的方法参数就是一个Predicate，用来判断list值并移除\",\"示例：将list集合里面小于20的数据移除\",\"@Test public void test5(){ List list = new ArrayList<>(); list.add(9); list.add(12); list.add(21); list.add(60); // 使用lambda表达式Predicate，判断list里数是否满足条件，并删除 list.removeIf(x->x<20); System.out.println(list); } \",\"查看list.removeIf()方法源码，我们发现他实现的方式就是遍历集合并对每个集合元素调用Predicate.test()方法，验证结果并移除元素。\",\"Predicate其他方法的使用类似 示例：1.移除集合中大于20的元素。2.然后移除小于50的元素。3.或者移除值等于60的元素。4.前面整个结果取反\",\"@Test public void test5(){ // 1.断言 值大于20 Predicate<Integer> predicate2 = (x)-> x>20; // 2.断言 并且值小于50 predicate2 = predicate2.and(y->y<50); // 3.断言 或者值等于60 predicate2 = predicate2.or(y->y==60); // 4.断言 逻辑取反 predicate2 = predicate2.negate(); List<Integer> list = new ArrayList<>(); list.add(9); list.add(12); list.add(21); list.add(60); // 使用lambda表达式Predicate，判断list里数是否满足条件，并删除 list.removeIf(predicate2); System.out.println(list); } \",\"结果：[21, 60]\",\"示例：使用isEqual() 统计集合中与设定相等的元素个数\",\"@Test public void test5(){ // 示例3 统计集合中相等的对象的个数 Person p = new Person(22, \\\"李四\\\"); // 使用isEqual生成一个断言 Predicate<Person> predicate3 = Predicate.isEqual(p); Long count = Stream.of( new Person(21,\\\"张三\\\"), new Person(22,\\\"李四\\\"), new Person(23,\\\"王五\\\"), new Person(24,\\\"王五\\\"), new Person(22,\\\"李四\\\"), new Person(26,\\\"张三\\\") ).filter(predicate3).count(); System.out.println(count); } \",\"结果：2\"]},\"1479\":{\"h\":\"Function：函数型函数式接口\",\"t\":[\"使用场景：根据一个数据类型得到另一个数据类型。\",\"方法：\",\"R apply(T t); 根据一个数据类型T加工得到一个数据类型R Function<V, R> compose(Function<? super V, ? extends T> before) 组合函数，调用当前function之前调用 Function<T, V> andThen(Function<? super R, ? extends V> after) 组合函数，调用当前function之后调用 static Function<T, T> identity() 静态方法，返回与原函数参数一致的结果。x=y;\",\"apply() 示例：实现一个function将String转换为Integer\",\"@Test public void test6(){ //示例1：定义一个funciton,实现将String转换为Integer Function<String,Integer> function = x->Integer.parseInt(x); Integer a = function.apply(\\\"100\\\"); System.out.println(a.getClass()); // 结果：class java.lang.Integer } \",\"andThen() 示例：使用andThen()方法实现一个函数：y=10x + 10\",\"@Test public void test6(){ //示例3：使用andThen() 实现一个函数 y=10x + 10; Function<Integer,Integer> function2 = x->10*x; function2 = function2.andThen(x->x+10); System.out.println(function2.apply(2)); //结果：30 } \",\"compose() 示例：使用compose() 实现一个函数 y=(10+x)2\",\"@Test public void test6(){ //示例4：使用compose() 实现一个函数 y=(10+x)2; Function<Integer,Integer> function3 = x->x*2; function3 = function3.compose(x->x+10); System.out.println(function3.apply(3)); //结果：26 } \",\"联合使用 示例：使用使用andThen()、compose() 方法实现一个函数 y=(10+x)2+10;\",\"@Test public void test6(){ //示例5：使用使用compose()、andThen()实现一个函数 y=(10+x)2+10; Function<Integer,Integer> function4 = x->x*2; function4 = function4.compose(x->x+10); function4 = function4.andThen(x->x+10); System.out.println(function4.apply(3)); //结果：36 } \"]},\"1480\":{\"h\":\"总结\",\"t\":[\"这些函数式接口用的最多的地方就是方法参数，向参数中传递一个函数，只有函数的定义，函数的具体实现则由调用者来实现。这就是函数式接口的意义所在。\"]},\"1481\":{\"c\":[\"Java8\"]},\"1482\":{\"c\":[\"lambda\",\"stream\"]},\"1483\":{\"h\":\"Java Web\"},\"1484\":{\"h\":\"Linux\"},\"1485\":{\"h\":\"Mysql\"},\"1486\":{\"h\":\"Ssm\"},\"1487\":{\"h\":\"Basis Land\"},\"1488\":{\"h\":\"Java\"},\"1489\":{\"h\":\"Collection Land\"},\"1490\":{\"h\":\"Concurrent\"},\"1491\":{\"h\":\"Io\"},\"1492\":{\"h\":\"New Features\"},\"1493\":{\"h\":\"Basis Land\"},\"1494\":{\"h\":\"Java\"},\"1495\":{\"h\":\"Collection Land\"},\"1496\":{\"h\":\"Concurrent\"},\"1497\":{\"h\":\"Io\"},\"1498\":{\"h\":\"Network\"},\"1499\":{\"h\":\"New Features\"}},\"dirtCount\":0,\"index\":[[\"刷新\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"刷盘时机\",{\"1\":{\"128\":1}}],[\"约吗\",{\"1\":{\"1458\":1}}],[\"约束名称\",{\"1\":{\"525\":1}}],[\"约束的分类\",{\"1\":{\"525\":1}}],[\"约束的存在保证了数据库中数据的正确性\",{\"1\":{\"525\":1}}],[\"约束是作用于表中列上的规则\",{\"1\":{\"525\":1}}],[\"约束概念\",{\"1\":{\"525\":1}}],[\"约束\",{\"0\":{\"524\":1}}],[\"广播\",{\"0\":{\"1451\":1},\"1\":{\"1452\":1}}],[\"广州\",{\"1\":{\"526\":1}}],[\"离线成功\",{\"1\":{\"1450\":1}}],[\"离开\",{\"1\":{\"437\":1}}],[\"离开等指令\",{\"1\":{\"437\":1}}],[\"韭菜\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"韭菜盘子\",{\"0\":{\"1447\":1},\"1\":{\"1449\":2,\"1450\":2}}],[\"视频会话等\",{\"1\":{\"1444\":1}}],[\"视图做最终的页面展示\",{\"1\":{\"325\":1}}],[\"视图\",{\"1\":{\"167\":1,\"325\":1}}],[\"视图解析器\",{\"1\":{\"167\":1}}],[\"视图渲染\",{\"1\":{\"166\":1}}],[\"告诉客户端收到了请求\",{\"1\":{\"1441\":1}}],[\"告诉客户端应该继续请求或者如果它已完成则忽略它\",{\"1\":{\"288\":1}}],[\"金融等数据通信\",{\"1\":{\"1440\":1}}],[\"局域网使用\",{\"1\":{\"1429\":1}}],[\"局部变量\",{\"1\":{\"703\":1,\"1108\":1}}],[\"局部变量可以保证线程安全的\",{\"1\":{\"187\":1}}],[\"协议\",{\"0\":{\"1435\":1},\"1\":{\"1427\":1}}],[\"协议多\",{\"1\":{\"106\":1}}],[\"联合使用\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"断言\",{\"1\":{\"1028\":4,\"1478\":4}}],[\"断言型函数式接口\",{\"0\":{\"1028\":1,\"1478\":1}}],[\"断言型\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"移除集合中大于20的元素\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"移动文件\",{\"1\":{\"450\":1}}],[\"移动到这个档案的第一行\",{\"1\":{\"435\":1}}],[\"移动到这个档案的第\",{\"1\":{\"435\":1}}],[\"移动到这个档案的最后一行\",{\"1\":{\"435\":1}}],[\"移动到这一行的最后面字符处\",{\"1\":{\"435\":1}}],[\"移动到这一行的最前面字符处\",{\"1\":{\"435\":1}}],[\"移动半页\",{\"1\":{\"435\":2}}],[\"移动一页\",{\"1\":{\"435\":2}}],[\"移动光标的方法\",{\"1\":{\"435\":1}}],[\"移动光标到行首\",{\"1\":{\"433\":1}}],[\"移动目录的位置\",{\"1\":{\"418\":1}}],[\"移动应用还是人工智能\",{\"1\":{\"63\":1}}],[\"供给型函数式接口\",{\"0\":{\"1026\":1,\"1476\":1}}],[\"供给型\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"升序\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"升序排列\",{\"1\":{\"519\":1}}],[\"灵活的代码\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"灵活构造接口信息表的查询条件\",{\"1\":{\"99\":1}}],[\"���\\u0002��xp���\\u0014sr�\\u0013java\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"���\\u0005sr�\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"\\u0002�\\u0003l�\\u0003aget�\\u0013ljava\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"序列化的版本号必须和反序列化的版本号必须一致才不会出错\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"序列化器\",{\"1\":{\"113\":1}}],[\"序列化器来解决数据乱码\",{\"1\":{\"109\":1}}],[\"缓冲流自带缓冲区\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"缓冲流也称为高效流\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"缓冲流概述\",{\"0\":{\"1006\":1,\"1411\":1}}],[\"缓冲流\",{\"0\":{\"1005\":1,\"1410\":1}}],[\"缓存通过以下两个方法发起的sql\",{\"1\":{\"240\":1}}],[\"缓存早期的bean对象\",{\"1\":{\"164\":2}}],[\"缓存已经经历了完整的生命周期\",{\"1\":{\"164\":2}}],[\"缓存名称\",{\"1\":{\"164\":1}}],[\"缓存中没有该数据则会请求数据库\",{\"1\":{\"125\":1}}],[\"缓存中的数据过期后可能会导致数据不一致或数据不可用\",{\"1\":{\"115\":1}}],[\"缓存穿透\",{\"1\":{\"124\":1}}],[\"缓存需要监控和调优\",{\"1\":{\"115\":1}}],[\"缓存监控和调优问题\",{\"1\":{\"115\":1}}],[\"缓存安全问题\",{\"1\":{\"115\":1}}],[\"缓存数据和数据库数据不一致\",{\"1\":{\"115\":1}}],[\"缓存数据一致性问题\",{\"1\":{\"115\":1}}],[\"缓存内存问题\",{\"1\":{\"115\":1}}],[\"缓存过期问题\",{\"1\":{\"115\":1}}],[\"缓存雪崩指的是大量缓存键在相同时间失效\",{\"1\":{\"115\":1}}],[\"缓存雪崩\",{\"1\":{\"115\":1,\"126\":1}}],[\"缓存击穿指的是某个热门的缓存键在过期后\",{\"1\":{\"115\":1}}],[\"缓存击穿\",{\"1\":{\"115\":1,\"125\":1}}],[\"缓存可能的常见问题\",{\"1\":{\"115\":1}}],[\"缓存时\",{\"0\":{\"115\":1}}],[\"缓存实现了登录用户信息的存储\",{\"1\":{\"114\":1}}],[\"缓存的是objectfactory\",{\"1\":{\"164\":2}}],[\"缓存的数据需要和数据库中的数据保持一致性\",{\"1\":{\"127\":1}}],[\"缓存的\",{\"0\":{\"114\":1}}],[\"缓存高频访问用户信息时提到了自定义序列化器\",{\"0\":{\"113\":1}}],[\"缓存首页高频访问的推荐用户信息列表\",{\"1\":{\"109\":1}}],[\"缓存策略\",{\"1\":{\"108\":1}}],[\"缓存\",{\"1\":{\"92\":1}}],[\"倒多少\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"倒序删除\",{\"1\":{\"751\":1,\"1156\":1}}],[\"胡\",{\"1\":{\"997\":1,\"1402\":1}}],[\"却还是三滴水\",{\"1\":{\"995\":1,\"1400\":1}}],[\"桶的底部开始\",{\"1\":{\"995\":1,\"1400\":1}}],[\"桶\",{\"1\":{\"995\":1,\"1400\":1}}],[\"音视频\",{\"1\":{\"990\":1,\"1395\":1}}],[\"音视频文件\",{\"1\":{\"307\":2}}],[\"称之输出\",{\"1\":{\"989\":1,\"1394\":1}}],[\"称之为输入\",{\"1\":{\"989\":1,\"1394\":1}}],[\"称为回送地址也可以称本地回环地址\",{\"1\":{\"1431\":1}}],[\"称为线程安全问题\",{\"1\":{\"928\":1,\"1333\":1}}],[\"称为面向切面编程\",{\"1\":{\"160\":1}}],[\"兼容ascii码表\",{\"1\":{\"985\":1,\"1390\":1}}],[\"猴子吃桃问题\",{\"0\":{\"979\":1,\"1384\":1}}],[\"间接递归形式\",{\"1\":{\"974\":2,\"1379\":2}}],[\"已有的函数式接口有很多\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"已存在文件\",{\"1\":{\"969\":1,\"1374\":1}}],[\"已经没有多余线程了\",{\"1\":{\"951\":5,\"1356\":5}}],[\"已经省略了冒号\",{\"1\":{\"434\":1}}],[\"已经将get请求乱码问题解决\",{\"1\":{\"309\":1}}],[\"已经初始化完成的bean对象\",{\"1\":{\"164\":2}}],[\"死亡状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"死锁\",{\"1\":{\"216\":1}}],[\"死锁产生的条件是什么\",{\"0\":{\"216\":1}}],[\"计时等待\",{\"1\":{\"963\":1,\"1368\":1}}],[\"计算1\",{\"0\":{\"976\":1,\"978\":1,\"1381\":1,\"1383\":1}}],[\"计算1到n的和\",{\"1\":{\"921\":1,\"1326\":1}}],[\"计算出当前时间往后走1小时100秒的的时间\",{\"1\":{\"776\":1,\"1181\":1}}],[\"计算机可以给人类字符进行编号存储\",{\"1\":{\"983\":1,\"1388\":1}}],[\"计算机底层可以表示十进制编号\",{\"1\":{\"983\":1,\"1388\":1}}],[\"计算机底层不可以直接存储字符的\",{\"1\":{\"983\":1,\"1388\":1}}],[\"计算机中底层只能存储二进制\",{\"1\":{\"983\":1,\"1388\":1}}],[\"计算机\",{\"1\":{\"751\":1,\"1156\":1}}],[\"计算公式\",{\"1\":{\"523\":1}}],[\"计算型代码\",{\"1\":{\"220\":1}}],[\"计算索引时效率更高\",{\"1\":{\"193\":1}}],[\"计算新数组的索引位置\",{\"1\":{\"191\":1}}],[\"周期调度方法\",{\"1\":{\"955\":1,\"1360\":1}}],[\"闹钟\",{\"1\":{\"952\":1,\"1357\":1}}],[\"满了\",{\"1\":{\"948\":1,\"1353\":1}}],[\"满足\",{\"0\":{\"696\":1,\"1101\":1}}],[\"满足驼峰命名法\",{\"1\":{\"659\":1,\"1064\":1}}],[\"满足各种应用场景的需求\",{\"1\":{\"106\":1}}],[\"达到最大线程数量\",{\"1\":{\"948\":1,\"1353\":1}}],[\"达咩\",{\"1\":{\"878\":1,\"1283\":1}}],[\"立即关闭\",{\"1\":{\"948\":1,\"1353\":1}}],[\"立即记录到aof中\",{\"1\":{\"128\":1}}],[\"立刻关闭\",{\"1\":{\"948\":1,\"1353\":1}}],[\"天\",{\"1\":{\"944\":1,\"1349\":1}}],[\"天然对元素大小做升序排序\",{\"1\":{\"881\":1,\"1286\":1}}],[\"谁代表线程池\",{\"0\":{\"942\":1,\"1347\":1}}],[\"钱不够\",{\"1\":{\"939\":1,\"1344\":1}}],[\"唤醒其他线程\",{\"1\":{\"939\":1,\"1344\":1}}],[\"唤醒所有线程\",{\"1\":{\"939\":1,\"1344\":1}}],[\"唤醒正在此对象的监视器上等待的所有线程\",{\"1\":{\"939\":1,\"1344\":1}}],[\"唤醒后切换为可执行状态\",{\"1\":{\"204\":1}}],[\"孩子们取钱\",{\"1\":{\"939\":1,\"1344\":1}}],[\"岳父\",{\"1\":{\"939\":2,\"1344\":2}}],[\"干爹\",{\"1\":{\"939\":2,\"1344\":2}}],[\"亲爹\",{\"1\":{\"939\":2,\"1344\":2}}],[\"父亲们存钱\",{\"1\":{\"939\":1,\"1344\":1}}],[\"父类汽车\",{\"1\":{\"878\":1,\"1283\":1}}],[\"父类类型的变量\",{\"0\":{\"730\":1,\"1135\":1}}],[\"父类类型\",{\"1\":{\"724\":1,\"1129\":1}}],[\"父类中和接口中有同名的方法\",{\"1\":{\"717\":1,\"1122\":1}}],[\"父类就只定义该功能的基本要求\",{\"1\":{\"709\":1,\"1114\":1}}],[\"理解线程的状态有利于提升并发编程的理解能力\",{\"1\":{\"962\":1,\"1367\":1}}],[\"理解动态代理的执行流程\",{\"1\":{\"629\":1,\"1034\":1}}],[\"理论上\",{\"1\":{\"934\":1,\"1339\":1}}],[\"余额是\",{\"1\":{\"939\":2,\"1344\":2}}],[\"余额是10万元\",{\"1\":{\"929\":1,\"1334\":1}}],[\"余额不足\",{\"1\":{\"930\":2,\"933\":2,\"936\":2,\"937\":2,\"939\":2,\"1335\":2,\"1338\":2,\"1341\":2,\"1342\":2,\"1344\":2}}],[\"睡3秒休息一下~~\",{\"1\":{\"925\":1,\"1330\":1}}],[\"哪个线程执行它\",{\"1\":{\"924\":1,\"1329\":1}}],[\"哪个对象调用它\",{\"1\":{\"661\":1,\"1066\":1}}],[\"疑问\",{\"0\":{\"916\":1,\"1321\":1}}],[\"京东\",{\"1\":{\"912\":1,\"1317\":1}}],[\"淘宝\",{\"1\":{\"912\":1,\"1317\":1}}],[\"百度网盘的下载和上传\",{\"1\":{\"912\":1,\"1317\":1}}],[\"百分比\",{\"1\":{\"478\":1}}],[\"购票系统\",{\"1\":{\"912\":1,\"1317\":1}}],[\"鸿星尔克=1\",{\"1\":{\"904\":1,\"906\":1,\"907\":3,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":3,\"1313\":1}}],[\"鸿星尔克\",{\"1\":{\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":1,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":1}}],[\"认识map体系的特点\",{\"1\":{\"903\":1,\"904\":1,\"906\":1,\"1308\":1,\"1309\":1,\"1311\":1}}],[\"认为本次请求失败\",{\"1\":{\"240\":1}}],[\"剩余3张牌作为底牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"♦\",{\"1\":{\"897\":1,\"1302\":1}}],[\"♣\",{\"1\":{\"897\":1,\"1302\":1}}],[\"♥\",{\"1\":{\"897\":1,\"1302\":1}}],[\"♠\",{\"1\":{\"897\":1,\"1302\":1}}],[\"看牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"洗牌后\",{\"1\":{\"897\":1,\"1302\":1}}],[\"洗牌\",{\"1\":{\"897\":3,\"1302\":3}}],[\"牌的大小\",{\"1\":{\"897\":1,\"1302\":1}}],[\"斗地主游戏\",{\"0\":{\"897\":1,\"1302\":1}}],[\"甚至也可以传一个数组\",{\"1\":{\"893\":1,\"1298\":1}}],[\"哈希算法\",{\"1\":{\"888\":1,\"1293\":1}}],[\"哈希值\",{\"0\":{\"885\":1,\"1290\":1}}],[\"哈希表原理\",{\"0\":{\"888\":1,\"1293\":1}}],[\"哈希表的组成\",{\"0\":{\"884\":1,\"1289\":1}}],[\"哈希表是一种对应增删改查数据性能都较好的结构\",{\"1\":{\"883\":1,\"1288\":1}}],[\"哈希表\",{\"0\":{\"882\":1,\"1287\":1},\"1\":{\"888\":1,\"1293\":1}}],[\"教务系统\",{\"1\":{\"875\":1,\"1280\":1}}],[\"边遍历边删除元素的时候可能有bug\",{\"1\":{\"866\":1,\"1271\":1}}],[\"边界匹配器\",{\"1\":{\"819\":1,\"1224\":1}}],[\"碰~\",{\"1\":{\"865\":3,\"1270\":3}}],[\"弹栈\",{\"1\":{\"865\":1,\"1270\":1}}],[\"弹夹\",{\"1\":{\"865\":2,\"1270\":2}}],[\"压栈\",{\"1\":{\"865\":1,\"1270\":1}}],[\"压缩和解压\",{\"0\":{\"489\":1}}],[\"压缩文件\",{\"0\":{\"420\":1}}],[\"叶节点是黑色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"叶子节点上真正的存储数据\",{\"1\":{\"144\":1}}],[\"红黑规则\",{\"0\":{\"858\":1,\"1263\":1}}],[\"红黑树增删查改的性能都很好\",{\"1\":{\"858\":1,\"1263\":1}}],[\"红黑树不是通过高度平衡的\",{\"1\":{\"857\":1,\"1262\":1}}],[\"红黑树是一种自平衡的二叉树\",{\"1\":{\"857\":1,\"1262\":1}}],[\"红黑树概述\",{\"0\":{\"857\":1,\"1262\":1}}],[\"红黑树\",{\"0\":{\"856\":1,\"1261\":1},\"1\":{\"848\":1,\"857\":1,\"888\":1,\"1253\":1,\"1262\":1,\"1293\":1}}],[\"医院或餐厅叫号系统\",{\"1\":{\"851\":1,\"1256\":1}}],[\"游戏中手枪弹夹中的子弹威力的大小\",{\"1\":{\"850\":1,\"1255\":1}}],[\"游泳\",{\"1\":{\"738\":1,\"1143\":1}}],[\"薯片桶类型的\",{\"1\":{\"850\":1,\"1255\":1}}],[\"平衡二叉树在添加元素后导致不平衡后\",{\"1\":{\"855\":1,\"1260\":1}}],[\"平衡二叉树是在满足查找的二叉树的大小规则下\",{\"1\":{\"855\":1,\"1260\":1}}],[\"平衡二叉树\",{\"0\":{\"855\":1,\"1260\":1},\"1\":{\"848\":1,\"1253\":1}}],[\"平均值\",{\"1\":{\"521\":1}}],[\"平均负载\",{\"1\":{\"481\":1}}],[\"栈的特点\",{\"1\":{\"850\":1,\"1255\":1}}],[\"栈\",{\"0\":{\"850\":1,\"1255\":1},\"1\":{\"848\":1,\"865\":1,\"1253\":1,\"1270\":1}}],[\"栈和队列等\",{\"1\":{\"34\":1}}],[\"唐人街探案3\",{\"1\":{\"847\":1,\"1252\":1}}],[\"唐人街探案2\",{\"1\":{\"847\":1,\"1252\":1}}],[\"唐人街探案1\",{\"1\":{\"847\":1,\"1252\":1}}],[\"刘昊然\",{\"1\":{\"847\":3,\"1252\":3}}],[\"刘备\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"​\",{\"1\":{\"845\":1,\"1250\":1}}],[\"问服务器在吗\",{\"1\":{\"1441\":1}}],[\"问一问iterator里面该位置也没有元素\",{\"1\":{\"844\":1,\"1249\":1}}],[\"问题\",{\"1\":{\"211\":1,\"316\":1}}],[\"迭代器\",{\"1\":{\"862\":1,\"1267\":1}}],[\"迭代器的默认位置在第一个元素的位置\",{\"1\":{\"844\":1,\"1249\":1}}],[\"迭代器是集合专用的遍历方式\",{\"1\":{\"844\":1,\"1249\":1}}],[\"迭代器在java中的代表是iterator\",{\"1\":{\"844\":1,\"1249\":1}}],[\"迭代器遍历删除\",{\"1\":{\"866\":1,\"1271\":1}}],[\"迭代器遍历集合且直接用集合删除元素的时候可能出现问题\",{\"1\":{\"866\":1,\"1271\":1}}],[\"迭代器遍历概述\",{\"0\":{\"844\":1,\"1249\":1}}],[\"迭代器遍历\",{\"1\":{\"751\":1,\"1156\":1}}],[\"拓展\",{\"1\":{\"842\":1,\"1247\":1}}],[\"拓展技巧领域\",{\"0\":{\"54\":1}}],[\"八种基本数据类型必须用他们的包装类\",{\"1\":{\"840\":1,\"1245\":1}}],[\"八进制值为0mnn\",{\"1\":{\"819\":1,\"1224\":1}}],[\"八进制值为0nn\",{\"1\":{\"819\":1,\"1224\":1}}],[\"八进制值为0n\",{\"1\":{\"819\":1,\"1224\":1}}],[\"八进制整数\",{\"1\":{\"647\":1,\"1052\":1}}],[\"根节点必须是黑色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"根标签有且只有一个\",{\"1\":{\"829\":1,\"1234\":1}}],[\"根据一个数据类型t加工得到一个数据类型r\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"根据一个数据类型得到另一个数据类型\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"根据父路径对应的文件对象和子路径名\",{\"1\":{\"965\":1,\"1370\":1}}],[\"根据文件路径创建文件对象\",{\"1\":{\"965\":1,\"1370\":1}}],[\"根据共享数据的情况决定自己改怎么做\",{\"1\":{\"939\":1,\"1344\":1}}],[\"根据键找值\",{\"1\":{\"906\":1,\"1311\":1}}],[\"根据键删除整个元素\",{\"1\":{\"904\":1,\"1309\":1}}],[\"根据键删除集合中的元素\",{\"1\":{\"904\":1,\"1309\":1}}],[\"根据键获取对应的值\",{\"1\":{\"904\":1,\"1309\":1}}],[\"根据键取出值对应的元素\",{\"1\":{\"904\":1,\"1309\":1}}],[\"根据键值key计算hash值得到数组索引\",{\"1\":{\"190\":1}}],[\"根据哈希值比较\",{\"1\":{\"888\":1,\"1293\":1}}],[\"根据元素的哈希值跟数组的长度求余计算出应存入的位置\",{\"1\":{\"888\":1,\"1293\":1}}],[\"根据查询元素块\",{\"1\":{\"861\":1,\"1266\":1}}],[\"根据索引定位元素快\",{\"1\":{\"863\":1,\"1268\":1}}],[\"根据索引修改元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"根据索引取元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"根据索引删除元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"根据索引\",{\"1\":{\"852\":1,\"1257\":1}}],[\"根据指定的构造器创建对象\",{\"1\":{\"806\":1,\"1211\":1}}],[\"根据学号\",{\"1\":{\"751\":1,\"1156\":1}}],[\"根据数据库自身的特点把逻辑设计转换为物理设计\",{\"1\":{\"528\":1}}],[\"根据运行的时间排序\",{\"1\":{\"481\":1}}],[\"根据cpu使用百分比大小排序\",{\"1\":{\"481\":1}}],[\"根据内存\",{\"1\":{\"481\":1}}],[\"根据key\",{\"1\":{\"333\":2}}],[\"根据key获取单个参数值\",{\"1\":{\"308\":1}}],[\"根据key获取参数值\",{\"1\":{\"308\":1}}],[\"根据名称获取参数值\",{\"1\":{\"308\":2}}],[\"根据请求头名称\",{\"1\":{\"307\":2}}],[\"根据请求信息调用\",{\"1\":{\"166\":1}}],[\"根据不同的请求方式\",{\"1\":{\"301\":1}}],[\"根据sql列表字段还原实体类\",{\"1\":{\"244\":1}}],[\"根据id查询\",{\"1\":{\"570\":1}}],[\"根据id找对应的session\",{\"1\":{\"334\":1}}],[\"根据id删除\",{\"0\":{\"279\":1}}],[\"根据id删除品牌\",{\"1\":{\"241\":1}}],[\"根据id修改品牌\",{\"1\":{\"241\":1}}],[\"根据id排序和返回id直接走的是覆盖索引\",{\"1\":{\"148\":1}}],[\"根据uid查询用户\",{\"1\":{\"240\":1}}],[\"根据\",{\"1\":{\"166\":1,\"167\":3,\"310\":2}}],[\"根据主键索引查询或者唯一索引查询\",{\"1\":{\"142\":1}}],[\"根据主键索引查询\",{\"1\":{\"142\":1}}],[\"根据具体业务估计设置锁的时长\",{\"1\":{\"132\":1}}],[\"根据业务的id得到hashcode然后对队列的大小取余得到该消息应该放到哪个队列中\",{\"1\":{\"177\":1}}],[\"根据业务类型设计了缓存\",{\"1\":{\"114\":1}}],[\"根据业务流程\",{\"1\":{\"95\":1}}],[\"根据标识到数据库中查找该用户对应的\",{\"1\":{\"101\":1}}],[\"合并集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"合并流\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"合理暴露\",{\"1\":{\"668\":1,\"1073\":1}}],[\"合理隐藏\",{\"1\":{\"668\":1,\"1073\":1}}],[\"黑马的\",{\"1\":{\"823\":3,\"1022\":3,\"1228\":3,\"1472\":3}}],[\"黑影凭借着自己强大的技术实力\",{\"1\":{\"25\":1}}],[\"王宝强\",{\"1\":{\"847\":3,\"1252\":3}}],[\"王月半\",{\"1\":{\"823\":1,\"824\":1,\"1022\":1,\"1023\":1,\"1228\":1,\"1229\":1,\"1472\":1,\"1473\":1}}],[\"王五\",{\"1\":{\"514\":1,\"526\":1,\"873\":1,\"1027\":2,\"1028\":2,\"1278\":1,\"1477\":2,\"1478\":2}}],[\"吴邪\",{\"1\":{\"823\":1,\"824\":1,\"1022\":1,\"1023\":1,\"1228\":1,\"1229\":1,\"1472\":1,\"1473\":1}}],[\"吴京\",{\"1\":{\"751\":1,\"1156\":1}}],[\"初步体验stream流的快捷\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"初始管理员账户admin密码zabbix\",{\"1\":{\"405\":1}}],[\"初始安装\",{\"1\":{\"399\":1}}],[\"初始化实例资源\",{\"1\":{\"682\":1,\"1087\":1}}],[\"初始化等一系列操作\",{\"1\":{\"582\":1}}],[\"初始化mysql数据库\",{\"0\":{\"402\":1}}],[\"初始化\",{\"1\":{\"297\":1}}],[\"初始化长度为16的数组\",{\"1\":{\"190\":1}}],[\"初始化方法\",{\"1\":{\"163\":1,\"298\":1}}],[\"得益于lambda表达式所带来的函数式编程\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"得到指定主机的ip地址对象\",{\"1\":{\"1433\":1}}],[\"得到一个结果\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"得到一张表如下\",{\"1\":{\"142\":1}}],[\"得到线程池对象\",{\"1\":{\"955\":1,\"1360\":1}}],[\"得到任务对象\",{\"1\":{\"921\":1,\"1326\":1}}],[\"得到当前集合的迭代器对象\",{\"1\":{\"844\":1,\"1249\":1}}],[\"得到最小扩容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"得到stream流\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"得到编译后的class文件对象\",{\"1\":{\"800\":1,\"1205\":1}}],[\"得到了抽象方法\",{\"1\":{\"710\":1,\"1115\":1}}],[\"得到初始密码\",{\"1\":{\"347\":1,\"350\":1}}],[\"得到\",{\"1\":{\"200\":1}}],[\"得到数组中的索引\",{\"1\":{\"192\":1}}],[\"得到的集合放到new\",{\"1\":{\"184\":1}}],[\"得到的是不同的\",{\"1\":{\"159\":1}}],[\"命名捕获和非捕获\",{\"1\":{\"819\":1,\"1224\":1}}],[\"命令输入错误可以退出当前命令不执行\",{\"1\":{\"468\":1}}],[\"命令本身\",{\"1\":{\"439\":1}}],[\"命令有其通用的格式\",{\"1\":{\"439\":1}}],[\"命令基础格式\",{\"0\":{\"439\":1}}],[\"命令模式只有一些最基本的命令\",{\"1\":{\"432\":1}}],[\"命令模式\",{\"0\":{\"432\":1}}],[\"命令自动跟着结束\",{\"1\":{\"424\":1}}],[\"命令的输出重定向\",{\"1\":{\"423\":1}}],[\"命令运行后台中的程序\",{\"1\":{\"422\":1}}],[\"命令运行由\",{\"1\":{\"422\":1}}],[\"命令可以看到该目录下的所有目录和文件的详细信息\",{\"1\":{\"418\":1}}],[\"命令\",{\"1\":{\"117\":1,\"423\":1,\"484\":1,\"494\":1,\"948\":1,\"1353\":1}}],[\"命令和\",{\"1\":{\"117\":1}}],[\"命令打包\",{\"1\":{\"103\":1}}],[\"命令进行打包和部署\",{\"1\":{\"98\":1}}],[\"命令将失败\",{\"1\":{\"117\":1}}],[\"命令将\",{\"1\":{\"98\":1}}],[\"没什么\",{\"1\":{\"819\":4,\"1224\":4}}],[\"没有空闲时间\",{\"1\":{\"951\":1,\"1356\":1}}],[\"没有临时线程\",{\"1\":{\"951\":2,\"1356\":2}}],[\"没有带索引的一些方法\",{\"1\":{\"880\":1,\"1285\":1}}],[\"没有泛型进行约束\",{\"1\":{\"814\":1,\"1219\":1}}],[\"没有返回值\",{\"1\":{\"812\":1,\"948\":1,\"1217\":1,\"1353\":1}}],[\"没有这个元素\",{\"1\":{\"794\":1,\"1199\":1}}],[\"没有继续判断这个位置是不是小于80\",{\"1\":{\"751\":1,\"1156\":1}}],[\"没有usb接口\",{\"1\":{\"715\":1,\"1120\":1}}],[\"没有方法体\",{\"1\":{\"709\":1,\"1114\":1}}],[\"没有被任何变量引用\",{\"1\":{\"665\":1,\"1070\":1}}],[\"没有被外部强引用的情况下\",{\"1\":{\"222\":1}}],[\"没有可用连接\",{\"1\":{\"240\":1}}],[\"没有定义可变的成员变量\",{\"1\":{\"158\":1}}],[\"没有放弃的念头\",{\"1\":{\"16\":1}}],[\"贪婪的量词\",{\"1\":{\"819\":1,\"1224\":1}}],[\"¥\",{\"1\":{\"819\":1,\"1224\":1}}],[\"货币符号\",{\"1\":{\"819\":1,\"1224\":1}}],[\"希腊区块\",{\"1\":{\"819\":1,\"1224\":1}}],[\"希望能够创造出更多的奇迹\",{\"1\":{\"90\":1}}],[\"拉丁字母字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"拉链法\",{\"1\":{\"189\":1}}],[\"块\",{\"1\":{\"819\":1,\"1224\":1}}],[\"垂直空格字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"水平空白字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"任务队列不受控制\",{\"1\":{\"951\":1,\"1356\":1}}],[\"任务队列没有限制任务数量\",{\"1\":{\"951\":1,\"1356\":1}}],[\"任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"任务慢的时候\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"任何unicode换行序列都相当于`\",{\"1\":{\"819\":1,\"1224\":1}}],[\"任何字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"任意类型\",{\"1\":{\"763\":1,\"1168\":1}}],[\"任意匹配\",{\"1\":{\"302\":2}}],[\"^\",{\"1\":{\"819\":7,\"1224\":7}}],[\"^0\",{\"1\":{\"819\":1,\"1224\":1}}],[\"^m\",{\"1\":{\"819\":1,\"1224\":1}}],[\"^bc\",{\"1\":{\"819\":1,\"1224\":1}}],[\"^abc\",{\"1\":{\"819\":1,\"1224\":1}}],[\"否定\",{\"1\":{\"819\":2,\"1224\":2}}],[\"否则乱码\",{\"1\":{\"987\":1,\"1392\":1}}],[\"否则主线程一直是先跑完的\",{\"1\":{\"917\":1,\"1322\":1}}],[\"否则报错\",{\"1\":{\"909\":1,\"1314\":1}}],[\"否则是\",{\"1\":{\"831\":1,\"1236\":1}}],[\"否则\",{\"1\":{\"831\":1,\"1236\":1}}],[\"否则出bug\",{\"1\":{\"793\":1,\"1198\":1}}],[\"否则比较的就是地址\",{\"1\":{\"760\":1,\"1165\":1}}],[\"否则它会找父类object中的equals比较地址\",{\"1\":{\"758\":1,\"1163\":1}}],[\"否则为false\",{\"1\":{\"758\":1,\"1163\":1}}],[\"否则返回false\",{\"1\":{\"750\":1,\"756\":1,\"1155\":1,\"1161\":1}}],[\"否则这个类也应该定义成为抽象类\",{\"1\":{\"710\":1,\"1115\":1}}],[\"否则可能出现new一个无参对象报错\",{\"1\":{\"660\":1,\"1065\":1}}],[\"否则无权限解压到\",{\"1\":{\"354\":1}}],[\"否则会出现上一桶水的残留\",{\"1\":{\"995\":1,\"1400\":1}}],[\"否则会出现中文乱码\",{\"1\":{\"986\":1,\"1391\":1}}],[\"否则会出现bug\",{\"1\":{\"781\":1,\"1186\":1}}],[\"否则会出现500错误\",{\"1\":{\"557\":1}}],[\"否则会报错\",{\"1\":{\"331\":1}}],[\"否则会乱码\",{\"1\":{\"314\":1}}],[\"否则表示连接不可用\",{\"1\":{\"240\":1}}],[\"否则druid\",{\"1\":{\"240\":1}}],[\"否则新位置\",{\"1\":{\"193\":1}}],[\"否则执行resize\",{\"1\":{\"190\":1}}],[\"否则索引将会失效\",{\"1\":{\"150\":1}}],[\"铃铛\",{\"1\":{\"819\":1,\"1224\":1}}],[\"警告\",{\"1\":{\"819\":1,\"1224\":1}}],[\"泛型下限\",{\"1\":{\"877\":1,\"1282\":1}}],[\"泛型上限\",{\"1\":{\"877\":1,\"1282\":1}}],[\"泛型通配符\",{\"0\":{\"877\":1,\"1282\":1},\"1\":{\"878\":1,\"1283\":1}}],[\"泛型接口可以约束实现类\",{\"1\":{\"876\":1,\"1281\":1}}],[\"泛型接口可以让实现类选择当前功能操作的数据类型\",{\"1\":{\"874\":1,\"1279\":1}}],[\"泛型接口的作用\",{\"0\":{\"876\":1,\"1281\":1}}],[\"泛型接口传入的是学生\",{\"1\":{\"875\":1,\"1280\":1}}],[\"泛型接口格式\",{\"1\":{\"874\":1,\"1279\":1}}],[\"泛型方法\",{\"1\":{\"873\":1,\"1278\":1}}],[\"泛型方法的格式\",{\"1\":{\"872\":1,\"1277\":1}}],[\"泛型变量\",{\"1\":{\"870\":1,\"872\":1,\"874\":1,\"1275\":1,\"1277\":1,\"1279\":1}}],[\"泛型类的格式\",{\"1\":{\"870\":1,\"1275\":1}}],[\"泛型的上下限\",{\"1\":{\"877\":1,\"1282\":1}}],[\"泛型的好处\",{\"0\":{\"869\":1,\"1274\":1}}],[\"泛型的格式\",{\"1\":{\"868\":1,\"1273\":1}}],[\"泛型只能支持引用数据类型\",{\"1\":{\"868\":1,\"1273\":1}}],[\"泛型只是在编译的阶段可以约束集合只能操作某种数据类型\",{\"1\":{\"814\":1,\"1219\":1}}],[\"泛型\",{\"1\":{\"868\":1,\"1273\":1}}],[\"泛型深入\",{\"0\":{\"867\":1,\"1272\":1}}],[\"泛型会自动擦除\",{\"1\":{\"815\":1,\"1220\":1}}],[\"泛型相当于被擦出了\",{\"1\":{\"814\":1,\"1219\":1}}],[\"泛型概述和优势\",{\"0\":{\"868\":1,\"1273\":1}}],[\"泛型概述\",{\"0\":{\"749\":1,\"1154\":1}}],[\"绕过编译阶段为集合添加数据\",{\"0\":{\"814\":1,\"1219\":1}}],[\"骨头\",{\"1\":{\"812\":1,\"1217\":1}}],[\"吃的很开心\",{\"1\":{\"812\":1,\"1217\":1}}],[\"狗不能进来的\",{\"1\":{\"878\":1,\"1283\":1}}],[\"狗你应该吃骨头\",{\"1\":{\"812\":1,\"1217\":1}}],[\"狗吃\",{\"1\":{\"812\":1,\"1217\":1}}],[\"狗吃骨头\",{\"1\":{\"812\":1,\"1217\":1}}],[\"狗跑的贼快~~\",{\"1\":{\"812\":1,\"1217\":1}}],[\"狗在吃骨头\",{\"1\":{\"732\":1,\"1137\":1}}],[\"暴力反射\",{\"1\":{\"806\":1,\"807\":1,\"808\":2,\"809\":1,\"812\":1,\"813\":1,\"816\":1,\"1211\":1,\"1212\":1,\"1213\":2,\"1214\":1,\"1217\":1,\"1218\":1,\"1221\":1}}],[\"规律\",{\"1\":{\"793\":1,\"1198\":1}}],[\"规范整合\",{\"1\":{\"716\":1,\"1121\":1}}],[\"规范\",{\"1\":{\"659\":1,\"936\":1,\"1064\":1,\"1341\":1}}],[\"规范做法\",{\"1\":{\"634\":1,\"1039\":1}}],[\"规范的接口定义\",{\"1\":{\"100\":1,\"120\":1}}],[\"专门用于数组操作元素的\",{\"1\":{\"792\":1,\"1197\":1}}],[\"专业\",{\"1\":{\"759\":1,\"1164\":1}}],[\"专业技能\",{\"0\":{\"92\":1}}],[\"综合了localdate和localtime\",{\"1\":{\"786\":1,\"1191\":1}}],[\"综上\",{\"1\":{\"150\":1}}],[\"综上回表查询就是\",{\"1\":{\"146\":1}}],[\"今天的日期\",{\"1\":{\"786\":2,\"1191\":2}}],[\"今天是特别的一天\",{\"1\":{\"1\":1}}],[\"拿到底牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"拿到collection的stream流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"拿到时间毫秒值\",{\"1\":{\"784\":1,\"1189\":1}}],[\"拿到此刻的日期对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"拿到系统此时的日历对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"往后走2天14小时49分22秒\",{\"1\":{\"781\":1,\"1186\":1}}],[\"星期\",{\"1\":{\"781\":1,\"1186\":1}}],[\"星光大陆的获得与新挑战\",{\"0\":{\"46\":1}}],[\"月\",{\"1\":{\"781\":1,\"1186\":1}}],[\"年\",{\"1\":{\"781\":1,\"1186\":1}}],[\"年龄\",{\"1\":{\"691\":1,\"1096\":1}}],[\"年龄合法\",{\"1\":{\"638\":1,\"1043\":1}}],[\"报价\",{\"1\":{\"819\":1,\"1224\":1}}],[\"报异常\",{\"1\":{\"774\":1,\"1179\":1}}],[\"报告和文档\",{\"1\":{\"249\":1}}],[\"舍入模式\",{\"1\":{\"774\":1,\"1179\":1}}],[\"乘法\",{\"1\":{\"774\":1,\"1179\":1}}],[\"减法\",{\"1\":{\"774\":1,\"819\":3,\"1179\":1,\"1224\":3}}],[\"减少代码的重复性\",{\"1\":{\"690\":1,\"1095\":1}}],[\"减少代码的重复\",{\"1\":{\"678\":1,\"1083\":1}}],[\"减少hash冲突\",{\"1\":{\"192\":1}}],[\"减少系统中的重复代码\",{\"1\":{\"160\":1}}],[\"嵩山版\",{\"0\":{\"773\":1,\"1178\":1}}],[\"拷贝个数\",{\"1\":{\"769\":1,\"1174\":1}}],[\"拷贝目录\",{\"1\":{\"418\":1}}],[\"四舍五入\",{\"1\":{\"767\":1,\"774\":1,\"1172\":1,\"1179\":1}}],[\"四周一片浩瀚的草原\",{\"1\":{\"19\":1}}],[\"号判断是否为null一毛一样\",{\"1\":{\"759\":1,\"1164\":1}}],[\"号比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"胖虎\",{\"1\":{\"755\":1,\"756\":2,\"759\":1,\"1160\":1,\"1161\":2,\"1164\":1}}],[\"胖达\",{\"0\":{\"95\":1}}],[\"独立成方法\",{\"1\":{\"751\":1,\"1156\":1}}],[\"独立开发完整前后端\",{\"1\":{\"109\":1}}],[\"笨小孩\",{\"1\":{\"751\":1,\"1156\":1}}],[\"奇偶不同\",{\"1\":{\"831\":1,\"1236\":1}}],[\"奇迹\",{\"1\":{\"751\":1,\"1156\":1}}],[\"奇妙的大陆\",{\"0\":{\"19\":1}}],[\"易烊千玺\",{\"1\":{\"751\":2,\"1156\":2}}],[\"易扩展\",{\"1\":{\"106\":1}}],[\"长津湖\",{\"1\":{\"751\":1,\"1156\":1}}],[\"长度\",{\"1\":{\"763\":1,\"1168\":1}}],[\"长度固定\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"长度为0的空数组\",{\"1\":{\"184\":1}}],[\"电影评分\",{\"1\":{\"751\":1,\"1156\":1}}],[\"电影名称\",{\"1\":{\"751\":1,\"1156\":1}}],[\"算法设计\",{\"1\":{\"747\":1,\"750\":2,\"1152\":1,\"1155\":2}}],[\"篮球\",{\"1\":{\"743\":1,\"1148\":1}}],[\"跳舞\",{\"1\":{\"743\":1,\"1148\":1}}],[\"跳舞唱歌\",{\"1\":{\"629\":1,\"1034\":1}}],[\"唱歌\",{\"1\":{\"743\":1,\"1148\":1}}],[\"未发现\",{\"1\":{\"743\":1,\"1148\":1}}],[\"未指定值采用某人值\",{\"1\":{\"525\":1}}],[\"违规\",{\"1\":{\"743\":1,\"1148\":1}}],[\"违反了最左前缀法则\",{\"1\":{\"150\":1}}],[\"违反最左前缀\",{\"1\":{\"150\":1}}],[\"违反最左前缀法则\",{\"1\":{\"150\":1}}],[\"送给父类的有参构造器初始化名称\",{\"1\":{\"924\":1,\"1329\":1}}],[\"送\",{\"1\":{\"743\":1,\"1148\":1}}],[\"截取内容\",{\"1\":{\"743\":1,\"1148\":1}}],[\"忽略大小写比较\",{\"1\":{\"743\":1,\"1148\":1}}],[\"忽略所有挂断\",{\"1\":{\"422\":1}}],[\"堆内存地址\",{\"1\":{\"743\":1,\"1148\":1}}],[\"堆内存\",{\"1\":{\"743\":2,\"1148\":2}}],[\"堆内存中只有一个我们new出来的对象\",{\"1\":{\"764\":1,\"1169\":1}}],[\"堆内存中加载一次\",{\"1\":{\"675\":1,\"1080\":1}}],[\"堆内存中没人引用的对象\",{\"1\":{\"665\":1,\"1070\":1}}],[\"普通的匿名内部类\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"普通写法\",{\"1\":{\"738\":1,\"1143\":1}}],[\"普通方法\",{\"0\":{\"598\":1}}],[\"匿名内部类被重写方法的形参列表\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"匿名内部类形式\",{\"0\":{\"920\":1,\"1325\":1},\"1\":{\"920\":1,\"1325\":1}}],[\"匿名内部类的代码可以实现代码的进一步简化\",{\"1\":{\"738\":1,\"1143\":1}}],[\"匿名内部类写出来就会产生一个匿名内部类的对象\",{\"1\":{\"738\":2,\"1143\":2}}],[\"匿名内部类是一个没有名字的内部类\",{\"1\":{\"738\":2,\"1143\":2}}],[\"匿名内部类\",{\"0\":{\"735\":1,\"1140\":1},\"1\":{\"738\":2,\"1018\":1,\"1143\":2,\"1468\":1}}],[\"猫在抓老鼠\",{\"1\":{\"732\":1,\"1137\":1}}],[\"猫独有的方法抓老鼠\",{\"1\":{\"732\":1,\"1137\":1}}],[\"猫类\",{\"1\":{\"727\":1,\"1132\":1}}],[\"喵喵喵\",{\"1\":{\"732\":1,\"1137\":1}}],[\"喵呜喵呜\",{\"1\":{\"709\":1,\"1114\":1}}],[\"叫\",{\"1\":{\"732\":1,\"1137\":1}}],[\"动物类\",{\"1\":{\"727\":1,\"1132\":1}}],[\"动态代理\",{\"0\":{\"629\":1,\"1034\":1}}],[\"动态字段\",{\"0\":{\"277\":1}}],[\"动态sql\",{\"1\":{\"273\":1,\"284\":1}}],[\"动态条件查询\",{\"0\":{\"273\":1}}],[\"期望唤醒父亲们存钱\",{\"1\":{\"939\":1,\"1344\":1}}],[\"期中用抽象方法定义的一组行为规范\",{\"1\":{\"713\":1,\"1118\":1}}],[\"期待着下一个冒险的故事\",{\"1\":{\"49\":2}}],[\"失去了创建对象的能力\",{\"1\":{\"710\":1,\"1115\":1}}],[\"汪汪汪\",{\"1\":{\"709\":1,\"732\":1,\"1114\":1,\"1137\":1}}],[\"春天的脚步近了\",{\"1\":{\"708\":1,\"1113\":1}}],[\"冬天到了\",{\"1\":{\"708\":1,\"1113\":1}}],[\"秋水共长天一色\",{\"1\":{\"708\":1,\"1113\":1}}],[\"落霞与孤鹜齐飞\",{\"1\":{\"708\":1,\"1113\":1}}],[\"夏日炎炎\",{\"1\":{\"708\":1,\"1113\":1}}],[\"万物复苏\",{\"1\":{\"708\":1,\"1113\":1}}],[\"万次执行\",{\"1\":{\"615\":1}}],[\"枚举第一列必须罗列枚举类的\",{\"1\":{\"707\":1,\"1112\":1}}],[\"枚举类的构造器时私有的\",{\"1\":{\"708\":1,\"1113\":1}}],[\"枚举类都是最终类\",{\"1\":{\"708\":1,\"1113\":1}}],[\"枚举类都是继承了java\",{\"1\":{\"708\":1,\"1113\":1}}],[\"枚举类\",{\"1\":{\"707\":1,\"1112\":1}}],[\"枚举的特征\",{\"0\":{\"708\":1,\"1113\":1}}],[\"枚举的格式\",{\"0\":{\"707\":1,\"1112\":1}}],[\"枚举的作用\",{\"1\":{\"706\":1,\"1111\":1}}],[\"枚举的概述\",{\"0\":{\"706\":1,\"1111\":1}}],[\"枚举是java中的一种特殊类型\",{\"1\":{\"706\":1,\"1111\":1}}],[\"枚举\",{\"0\":{\"705\":1,\"1110\":1}}],[\"英文和数组在任何国家的编码中都不会乱码\",{\"1\":{\"987\":1,\"1392\":1}}],[\"英文和数字等在任何国家的字符集中都占1个字节\",{\"1\":{\"987\":1,\"1392\":1}}],[\"英文\",{\"1\":{\"984\":1,\"1389\":1}}],[\"英文单词全部大写\",{\"1\":{\"704\":1,\"1109\":1}}],[\"英文冒号\",{\"1\":{\"434\":1}}],[\"含有final修饰的类不能被继承\",{\"1\":{\"703\":1,\"1108\":1}}],[\"虽然在编译阶段对arraylist的泛型进行了约束\",{\"1\":{\"814\":1,\"1219\":1}}],[\"虽然子类可以直接使用父类的静态成员\",{\"1\":{\"695\":1,\"1100\":1}}],[\"虽然主角和他的伙伴们取得了巨大的胜利\",{\"1\":{\"90\":1}}],[\"体现出多态的扩展与便利\",{\"1\":{\"726\":1,\"1131\":1}}],[\"体重\",{\"1\":{\"691\":1,\"1096\":1}}],[\"体验着技能的提升带来的成就感\",{\"1\":{\"5\":1}}],[\"身高\",{\"1\":{\"691\":1,\"1096\":1}}],[\"姓名\",{\"1\":{\"691\":1,\"1096\":1}}],[\"人\",{\"0\":{\"1448\":1},\"1\":{\"1449\":2,\"1450\":2}}],[\"人类中有学生和老师共有的特征\",{\"1\":{\"691\":1,\"1096\":1}}],[\"人们穿着五颜六色的服装\",{\"1\":{\"1\":1}}],[\"派生类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"延迟加载对象\",{\"1\":{\"687\":1,\"1092\":1}}],[\"懒汉单例\",{\"0\":{\"687\":1,\"1092\":1}}],[\"懒汉单例模式\",{\"0\":{\"684\":1,\"1089\":1},\"1\":{\"688\":1,\"1093\":1}}],[\"饿汉单例\",{\"0\":{\"685\":1,\"1090\":1}}],[\"饿汉单例模式\",{\"0\":{\"684\":1,\"1089\":1}}],[\"答\",{\"1\":{\"679\":1,\"1084\":1}}],[\"详细原因见下面的思考\",{\"1\":{\"679\":1,\"1084\":1}}],[\"详细解析如下\",{\"1\":{\"309\":1}}],[\"私有地址\",{\"1\":{\"1429\":1}}],[\"私有的也可以执行了\",{\"1\":{\"807\":1,\"1212\":1}}],[\"私有方法\",{\"0\":{\"721\":1,\"1126\":1},\"1\":{\"721\":1,\"1126\":1}}],[\"私有方法不能被重写\",{\"1\":{\"699\":1,\"1104\":1}}],[\"私有构造器\",{\"1\":{\"679\":1,\"688\":1,\"1084\":1,\"1093\":1}}],[\"私服\",{\"1\":{\"250\":1}}],[\"节约内存\",{\"1\":{\"679\":1,\"1084\":1}}],[\"属于对象\",{\"1\":{\"677\":1,\"1082\":1}}],[\"属于类\",{\"1\":{\"675\":1,\"677\":1,\"686\":1,\"688\":1,\"1080\":1,\"1082\":1,\"1091\":1,\"1093\":1}}],[\"属性名\",{\"1\":{\"281\":1}}],[\"属性\",{\"0\":{\"594\":1},\"1\":{\"240\":1,\"662\":1,\"1067\":1}}],[\"垃圾\",{\"1\":{\"665\":1,\"743\":3,\"1070\":1,\"1148\":3}}],[\"垃圾回收\",{\"0\":{\"665\":1,\"1070\":1}}],[\"爱提问\",{\"1\":{\"664\":1,\"1069\":1}}],[\"爱好\",{\"1\":{\"662\":1,\"1067\":1}}],[\"男\",{\"1\":{\"664\":1,\"755\":1,\"756\":2,\"759\":1,\"816\":2,\"888\":4,\"891\":4,\"896\":4,\"1009\":1,\"1069\":1,\"1160\":1,\"1161\":2,\"1164\":1,\"1221\":2,\"1293\":4,\"1296\":4,\"1301\":4,\"1414\":1}}],[\"奔驰\",{\"1\":{\"663\":1,\"1068\":1}}],[\"宝马\",{\"1\":{\"663\":1,\"1068\":1}}],[\"性别\",{\"1\":{\"662\":1,\"1067\":1}}],[\"性能层面\",{\"1\":{\"215\":1}}],[\"性能更好\",{\"1\":{\"192\":1,\"234\":1}}],[\"性能由好到差为\",{\"1\":{\"142\":1}}],[\"性能最好\",{\"1\":{\"128\":1}}],[\"性能适中\",{\"1\":{\"128\":1}}],[\"性能影响大\",{\"1\":{\"128\":1}}],[\"性能会更高\",{\"1\":{\"111\":1}}],[\"性能优秀\",{\"1\":{\"106\":1,\"237\":1}}],[\"跑的贼快\",{\"1\":{\"662\":1,\"1067\":1}}],[\"价格是\",{\"1\":{\"662\":1,\"1067\":1}}],[\"浮点数到整数的转换是通过舍弃小数得到\",{\"1\":{\"650\":1,\"1055\":1}}],[\"浮点型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"布尔类型拓展\",{\"0\":{\"649\":1,\"1054\":1}}],[\"布隆过滤器主要是检查一个元素是否在一个集合中\",{\"1\":{\"124\":1}}],[\"十六进制值0xhhhhhh的字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"十六进制值0xhh的字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"十六进制数字\",{\"1\":{\"819\":1,\"1224\":1}}],[\"十六进制数\",{\"1\":{\"647\":1,\"1052\":1}}],[\"十\",{\"1\":{\"819\":4,\"1224\":4}}],[\"十万次循环\",{\"1\":{\"769\":1,\"1174\":1}}],[\"十进制整数\",{\"1\":{\"647\":1,\"1052\":1}}],[\"监视捕获异常\",{\"1\":{\"635\":1,\"1040\":1}}],[\"监控统计\",{\"1\":{\"240\":1}}],[\"监控\",{\"1\":{\"136\":1}}],[\"账户\",{\"1\":{\"629\":1,\"1034\":1}}],[\"账户密码正确\",{\"1\":{\"629\":1,\"1034\":1}}],[\"账户名可以省略\",{\"1\":{\"373\":1}}],[\"找名称长度是3的姓名\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"找代理让明星表演\",{\"1\":{\"629\":1,\"1034\":1}}],[\"找到文件\",{\"1\":{\"981\":1,\"1386\":1}}],[\"找到我们想要的文件\",{\"1\":{\"981\":1,\"1386\":1}}],[\"找到的\",{\"1\":{\"167\":1}}],[\"找到突破口\",{\"1\":{\"79\":1}}],[\"找到正确的路径\",{\"1\":{\"77\":1}}],[\"找到回家的方法\",{\"1\":{\"20\":1}}],[\"收到了来自\",{\"1\":{\"1450\":1}}],[\"收到了\",{\"1\":{\"1449\":1}}],[\"收发消息\",{\"1\":{\"912\":1,\"1317\":1}}],[\"收尾款\",{\"1\":{\"629\":1,\"1034\":1}}],[\"收首款\",{\"1\":{\"629\":1,\"1034\":1}}],[\"收获与成长\",{\"0\":{\"64\":1}}],[\"收获知识\",{\"0\":{\"22\":1}}],[\"明确collection集合体系的特点\",{\"1\":{\"839\":1,\"840\":1,\"1244\":1,\"1245\":1}}],[\"明确了注册中心\",{\"1\":{\"107\":1}}],[\"明星\",{\"1\":{\"629\":1,\"1034\":1}}],[\"明星类\",{\"1\":{\"629\":2,\"1034\":2}}],[\"低\",{\"1\":{\"650\":1,\"1055\":1}}],[\"低性能的读取了\",{\"1\":{\"628\":1,\"1033\":1}}],[\"低性能读取了一个字节a\",{\"1\":{\"628\":1,\"1033\":1}}],[\"低效\",{\"1\":{\"240\":2}}],[\"装饰类\",{\"1\":{\"628\":1,\"1033\":1}}],[\"装饰模式的一种思想\",{\"1\":{\"871\":1,\"1276\":1}}],[\"装饰模式\",{\"0\":{\"628\":1,\"1033\":1}}],[\"装上了\",{\"1\":{\"360\":1}}],[\"坑\",{\"0\":{\"623\":1}}],[\"纯注解开发\",{\"0\":{\"606\":1}}],[\"纯内存操作\",{\"1\":{\"139\":1}}],[\"静态方法中是不可以出现static关键字的\",{\"1\":{\"680\":1,\"1085\":1}}],[\"静态方法\",{\"0\":{\"720\":1,\"1125\":1},\"1\":{\"678\":1,\"679\":1,\"680\":1,\"721\":1,\"937\":1,\"1028\":1,\"1029\":1,\"1083\":1,\"1084\":1,\"1085\":1,\"1126\":1,\"1342\":1,\"1478\":1,\"1479\":1}}],[\"静态成员方法\",{\"1\":{\"677\":1,\"1082\":1}}],[\"静态成员变量\",{\"1\":{\"675\":1,\"703\":1,\"1080\":1,\"1108\":1}}],[\"静态工厂\",{\"0\":{\"589\":1}}],[\"静态代码块会随着类的加载自动执行\",{\"1\":{\"316\":1}}],[\"静态代码块\",{\"1\":{\"316\":1,\"682\":1,\"1087\":1}}],[\"拦截器参数\",{\"0\":{\"577\":1}}],[\"拦截器\",{\"0\":{\"574\":1}}],[\"声明这个类是处理rest风格开发的异常处理类\",{\"1\":{\"573\":1}}],[\"流只能被收集一次\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"流程分析\",{\"0\":{\"558\":1}}],[\"流量控制\",{\"1\":{\"96\":1}}],[\"流量染色是指根据请求的属性对请求进行分类和标记\",{\"1\":{\"108\":1}}],[\"流量染色\",{\"1\":{\"92\":1,\"95\":1,\"102\":2}}],[\"流量削峰\",{\"1\":{\"92\":1}}],[\"\\thttps\",{\"1\":{\"553\":1}}],[\"乐观锁\",{\"0\":{\"553\":1}}],[\"版本管理\",{\"0\":{\"543\":1}}],[\"版本最低为jdk8或更高版本\",{\"1\":{\"352\":1}}],[\"烂大街\",{\"1\":{\"538\":1}}],[\"精心选择的数据结构可以带来更高的运行或存储效率\",{\"1\":{\"849\":1,\"1254\":1}}],[\"精选项目推荐\",{\"0\":{\"538\":1}}],[\"精确几位\",{\"1\":{\"774\":1,\"1179\":1}}],[\"精确比较内容是否一致\",{\"1\":{\"743\":1,\"1148\":1}}],[\"精确路径>目录路径>扩展名路径>\",{\"1\":{\"302\":1}}],[\"精确匹配\",{\"1\":{\"302\":2,\"842\":1,\"1247\":1}}],[\"瑞吉外卖\",{\"0\":{\"537\":1}}],[\"手动提交\",{\"1\":{\"536\":1}}],[\"手动添加\",{\"1\":{\"356\":1}}],[\"子路径\",{\"1\":{\"965\":1,\"1370\":1}}],[\"子线程输出\",{\"1\":{\"924\":1,\"1329\":1}}],[\"子线程执行的结果为\",{\"1\":{\"921\":1,\"1326\":1}}],[\"子线程执行输出\",{\"1\":{\"914\":1,\"918\":1,\"1319\":1,\"1323\":1}}],[\"子线程3执行输出\",{\"1\":{\"920\":1,\"1325\":1}}],[\"子线程2执行输出\",{\"1\":{\"920\":1,\"1325\":1}}],[\"子线程1执行输出\",{\"1\":{\"920\":1,\"1325\":1}}],[\"子类可以给到父类\",{\"1\":{\"738\":2,\"1143\":2}}],[\"子类可以继承父类的属性和行为\",{\"1\":{\"693\":1,\"1098\":1}}],[\"子类\",{\"0\":{\"730\":2,\"1135\":2}}],[\"子类对象赋值给父类类型的变量指向\",{\"0\":{\"729\":1,\"1134\":1}}],[\"子类构造器\",{\"1\":{\"724\":1,\"1129\":1}}],[\"子类构造器的第一行语句默认都是\",{\"1\":{\"700\":1,\"1105\":1}}],[\"子类中的构造器会默认先访问父类中的无参构造器\",{\"1\":{\"700\":1,\"1105\":1}}],[\"子类继承父类后构造器的特点\",{\"0\":{\"700\":1,\"1105\":1}}],[\"子类也不能重写父类的静态方法\",{\"1\":{\"699\":1,\"1104\":1}}],[\"子类重写父类方法时\",{\"1\":{\"699\":1,\"1104\":1}}],[\"子类是否可以继承父类静态成员\",{\"0\":{\"695\":1,\"1100\":1}}],[\"子类是否可以继承父类的私有成员\",{\"0\":{\"694\":1,\"1099\":1}}],[\"子类独有的方法要放在子类中单独定义\",{\"1\":{\"691\":1,\"1096\":1}}],[\"子类的共同特征放到父类中定义\",{\"1\":{\"691\":1,\"1096\":1}}],[\"子查询根据查询结果不同\",{\"1\":{\"533\":1}}],[\"子查询\",{\"0\":{\"533\":1},\"1\":{\"533\":3}}],[\"子句\",{\"1\":{\"273\":1}}],[\"右移一位\",{\"1\":{\"831\":1,\"1236\":1}}],[\"右查找\",{\"1\":{\"794\":1,\"1199\":1}}],[\"右外连接\",{\"1\":{\"532\":1}}],[\"右\",{\"0\":{\"532\":1}}],[\"右键\",{\"1\":{\"293\":1}}],[\"左查找\",{\"1\":{\"794\":1,\"1199\":1}}],[\"左边的变量指向的对象的真实类型\",{\"1\":{\"732\":1,\"1137\":1}}],[\"左外连接\",{\"1\":{\"532\":1}}],[\"左\",{\"0\":{\"532\":1}}],[\"隐藏细节\",{\"1\":{\"668\":1,\"1073\":1}}],[\"隐藏字段是指\",{\"1\":{\"154\":1}}],[\"隐式内连接\",{\"1\":{\"531\":1}}],[\"商品和订单\",{\"1\":{\"529\":1}}],[\"商品的名称\",{\"1\":{\"244\":1,\"245\":2}}],[\"商品的id\",{\"1\":{\"244\":1}}],[\"维护设计\",{\"1\":{\"528\":1}}],[\"维基百科\",{\"1\":{\"361\":1}}],[\"物理设计\",{\"1\":{\"528\":1}}],[\"物理内存\",{\"1\":{\"481\":1}}],[\"赵六\",{\"1\":{\"526\":1}}],[\"深圳\",{\"1\":{\"526\":1}}],[\"深度分页查询\",{\"1\":{\"141\":1}}],[\"销售部\",{\"1\":{\"526\":1}}],[\"销毁\",{\"1\":{\"335\":1}}],[\"销毁方法\",{\"1\":{\"298\":1}}],[\"销毁bean\",{\"1\":{\"163\":1}}],[\"研发部\",{\"1\":{\"526\":1}}],[\"部分文档\",{\"1\":{\"818\":1,\"1223\":1}}],[\"部门和员工\",{\"1\":{\"529\":1}}],[\"部门表\",{\"1\":{\"526\":1}}],[\"部署形式\",{\"0\":{\"408\":1}}],[\"部署flink\",{\"1\":{\"394\":1}}],[\"部署spark\",{\"1\":{\"391\":1}}],[\"部署好环境\",{\"1\":{\"390\":1,\"393\":1}}],[\"部署\",{\"0\":{\"364\":1}}],[\"张启灵\",{\"1\":{\"823\":1,\"824\":1,\"1022\":1,\"1023\":1,\"1228\":1,\"1229\":1,\"1472\":1,\"1473\":1}}],[\"张\",{\"1\":{\"821\":2,\"823\":5,\"824\":1,\"1020\":2,\"1022\":5,\"1023\":1,\"1226\":2,\"1228\":5,\"1229\":1,\"1470\":2,\"1472\":5,\"1473\":1}}],[\"张无忌\",{\"1\":{\"821\":1,\"823\":1,\"824\":1,\"1020\":1,\"1022\":1,\"1023\":1,\"1226\":1,\"1228\":1,\"1229\":1,\"1470\":1,\"1472\":1,\"1473\":1}}],[\"张飞\",{\"1\":{\"821\":1,\"823\":1,\"824\":1,\"1020\":1,\"1022\":1,\"1023\":1,\"1226\":1,\"1228\":1,\"1229\":1,\"1470\":1,\"1472\":1,\"1473\":1}}],[\"张珊珊\",{\"1\":{\"525\":1}}],[\"张珊珊1\",{\"1\":{\"525\":1}}],[\"张三丰\",{\"1\":{\"823\":1,\"824\":1,\"1022\":1,\"1023\":1,\"1228\":1,\"1229\":1,\"1472\":1,\"1473\":1}}],[\"张三sa\",{\"1\":{\"525\":1}}],[\"张三\",{\"1\":{\"309\":6,\"320\":1,\"514\":1,\"525\":1,\"526\":1,\"629\":1,\"821\":1,\"873\":1,\"1020\":1,\"1024\":1,\"1027\":4,\"1028\":2,\"1034\":1,\"1226\":1,\"1278\":1,\"1470\":1,\"1474\":1,\"1477\":4,\"1478\":2}}],[\"演员\",{\"1\":{\"751\":1,\"1156\":1}}],[\"演示自动增长\",{\"1\":{\"525\":1}}],[\"演练与实践\",{\"0\":{\"62\":1}}],[\"奖金\",{\"1\":{\"525\":1}}],[\"入栈\",{\"1\":{\"865\":1,\"1270\":1}}],[\"入队的专业英语\",{\"1\":{\"865\":1,\"1270\":1}}],[\"入队\",{\"1\":{\"865\":1,\"1270\":1}}],[\"入队列\",{\"1\":{\"851\":1,\"1256\":1}}],[\"入队人数超限的问题\",{\"1\":{\"109\":1}}],[\"入门案例\",{\"0\":{\"575\":1}}],[\"入职日期\",{\"1\":{\"525\":1}}],[\"员工姓名\",{\"1\":{\"525\":1}}],[\"员工id\",{\"1\":{\"525\":1}}],[\"员工表\",{\"1\":{\"525\":1,\"526\":1}}],[\"唯一约束\",{\"1\":{\"525\":1}}],[\"唯一标识\",{\"1\":{\"264\":1,\"270\":2}}],[\"求和\",{\"1\":{\"521\":1}}],[\"降序\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"降序排列\",{\"1\":{\"519\":1}}],[\"降低了模块之间的耦合度\",{\"1\":{\"160\":1}}],[\"降低开发者的使用成本\",{\"1\":{\"97\":1}}],[\"德\",{\"1\":{\"518\":1}}],[\"德鲁伊\",{\"1\":{\"237\":1}}],[\"花色\",{\"1\":{\"897\":1,\"1302\":1}}],[\"花\",{\"1\":{\"518\":1}}],[\"马\",{\"1\":{\"518\":1}}],[\"别名\",{\"1\":{\"517\":2}}],[\"别名typealiases属性\",{\"0\":{\"268\":1}}],[\"批量添加\",{\"1\":{\"514\":1}}],[\"批量删除\",{\"0\":{\"280\":1},\"1\":{\"280\":2}}],[\"日\",{\"1\":{\"781\":1,\"1186\":1}}],[\"日期时间对象\",{\"1\":{\"786\":1,\"1191\":1}}],[\"日期对象\",{\"1\":{\"781\":1,\"1186\":1}}],[\"日期对象如何创建\",{\"1\":{\"777\":1,\"1182\":1}}],[\"日期格式化异常\",{\"1\":{\"631\":1,\"1036\":1}}],[\"日期类型参数传递\",{\"0\":{\"565\":1}}],[\"日期\",{\"1\":{\"511\":1,\"785\":1,\"1190\":1}}],[\"日志文件夹\",{\"1\":{\"386\":2}}],[\"日志监控\",{\"1\":{\"240\":1}}],[\"列名可以省略\",{\"1\":{\"514\":1}}],[\"列名\",{\"1\":{\"512\":4,\"517\":1,\"521\":6}}],[\"列等\",{\"1\":{\"505\":1}}],[\"列表的结尾会预留一定的容量空间\",{\"1\":{\"187\":1}}],[\"端口还要对应发送的目的端口9999\",{\"1\":{\"1454\":1}}],[\"端口号\",{\"0\":{\"1434\":1}}],[\"端口号默认3306\",{\"1\":{\"501\":1}}],[\"端口\",{\"1\":{\"1427\":1,\"1454\":1}}],[\"端口等等\",{\"1\":{\"172\":1}}],[\"`integer\",{\"1\":{\"831\":1,\"1236\":1}}],[\"`\",{\"1\":{\"831\":1,\"1236\":1}}],[\"`hugecapacity\",{\"1\":{\"831\":1,\"1236\":1}}],[\"`y\",{\"1\":{\"819\":1,\"1224\":1}}],[\"`desc`\",{\"1\":{\"529\":1}}],[\"`uname\",{\"1\":{\"496\":6}}],[\"`pwd`\",{\"1\":{\"373\":1,\"375\":2,\"377\":1,\"386\":2,\"395\":2,\"458\":1,\"459\":2}}],[\"历史命令\",{\"1\":{\"496\":1}}],[\"历史记录服务器角色\",{\"1\":{\"381\":1}}],[\"真实类型\",{\"1\":{\"732\":1,\"1137\":1}}],[\"真正需要该对象的时候\",{\"1\":{\"687\":1,\"1092\":1}}],[\"真正的终点\",{\"0\":{\"90\":1}}],[\"真正的绝地试炼\",{\"0\":{\"72\":1}}],[\"真正的关键在于如何将所学运用到实际中\",{\"1\":{\"68\":1}}],[\"真的是经过一系列的踩坑总结出的\",{\"1\":{\"496\":1}}],[\"猜想\",{\"1\":{\"495\":1}}],[\"尝试10次连接\",{\"1\":{\"494\":1}}],[\"尝试将一个特定的键\",{\"1\":{\"117\":1}}],[\"帮我们做组件库的迁移操作\",{\"1\":{\"494\":1}}],[\"帮助他们踏上自己的java之旅\",{\"1\":{\"48\":1}}],[\"帮助他们踏上自己的探险之旅\",{\"1\":{\"7\":1}}],[\"帮助读者了解java知识\",{\"1\":{\"18\":1}}],[\"案例\",{\"0\":{\"751\":1,\"871\":1,\"873\":1,\"875\":1,\"878\":1,\"897\":1,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"1156\":1,\"1276\":1,\"1278\":1,\"1280\":1,\"1283\":1,\"1302\":1,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1},\"1\":{\"486\":1,\"908\":1,\"1313\":1}}],[\"变为了15\",{\"1\":{\"863\":1,\"1268\":1}}],[\"变量调用\",{\"1\":{\"725\":1,\"1130\":1}}],[\"变量有几种\",{\"1\":{\"703\":1,\"1108\":1}}],[\"变量有且只能被赋值一次\",{\"1\":{\"703\":1,\"1108\":1}}],[\"变量存储的是对象的地址\",{\"1\":{\"654\":2,\"1059\":2}}],[\"变量名\",{\"1\":{\"643\":1,\"732\":1,\"845\":1,\"1048\":1,\"1137\":1,\"1250\":1}}],[\"变量名称=变量值\",{\"1\":{\"486\":1}}],[\"变成long类型\",{\"1\":{\"781\":1,\"1186\":1}}],[\"变成可以被访问的网页\",{\"1\":{\"351\":1}}],[\"变成了赞叹和敬佩\",{\"1\":{\"40\":1}}],[\"环境变量\",{\"0\":{\"483\":1}}],[\"环境的变更\",{\"1\":{\"437\":1}}],[\"额外的操作数\",{\"1\":{\"476\":1}}],[\"额外的优化的建议\",{\"1\":{\"142\":1}}],[\"均包含相同数目的黑色节点\",{\"1\":{\"858\":1,\"1263\":1}}],[\"均属于web层开发技术\",{\"1\":{\"556\":1}}],[\"均支持使用systemctl命令控制\",{\"1\":{\"474\":1}}],[\"均可直接执行\",{\"1\":{\"389\":1}}],[\"权限修饰符\",{\"0\":{\"701\":1,\"702\":1,\"1106\":1,\"1107\":1}}],[\"权限数字序号\",{\"1\":{\"465\":1}}],[\"权限\",{\"1\":{\"465\":1}}],[\"权限校验\",{\"1\":{\"121\":1}}],[\"省略默认表示切换到root\",{\"1\":{\"461\":1}}],[\"跟踪文件的最新更改\",{\"1\":{\"460\":1}}],[\"跟原来的元素就没啥关系了\",{\"1\":{\"186\":1}}],[\"覆盖了上面的java\",{\"1\":{\"903\":1,\"904\":3,\"906\":3,\"907\":3,\"908\":3,\"1308\":1,\"1309\":3,\"1311\":3,\"1312\":3,\"1313\":3}}],[\"覆盖写入到符号右边的指定文件中\",{\"1\":{\"459\":1}}],[\"覆盖索引+子查询\",{\"1\":{\"148\":1}}],[\"覆盖索引\",{\"1\":{\"147\":1}}],[\"管道\",{\"1\":{\"994\":1,\"1399\":1}}],[\"管道符\",{\"0\":{\"456\":1}}],[\"管理者一个就够\",{\"1\":{\"381\":2}}],[\"管理数据库连接\",{\"1\":{\"236\":1}}],[\"管理事务\",{\"1\":{\"229\":1}}],[\"管理员可以接入并发布接口\",{\"1\":{\"95\":1}}],[\"统计集合中相等的对象的个数\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"统计集合中与设定相等的元素个数\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"统计班级一共有多少学生\",{\"1\":{\"521\":1}}],[\"统计数量\",{\"1\":{\"521\":1}}],[\"统计文件的行数\",{\"1\":{\"455\":1}}],[\"统一数据类型\",{\"1\":{\"869\":1,\"1274\":1}}],[\"统一格式\",{\"1\":{\"571\":1}}],[\"统一编码处理\",{\"1\":{\"337\":1}}],[\"统一资源标识符\",{\"1\":{\"307\":2}}],[\"统一资源定位符\",{\"1\":{\"307\":2}}],[\"统一sql管理\",{\"1\":{\"264\":1}}],[\"统一监控和日志记录\",{\"1\":{\"102\":1}}],[\"统一业务处理\",{\"1\":{\"97\":1}}],[\"统一鉴权认证\",{\"1\":{\"102\":2}}],[\"统一鉴权\",{\"1\":{\"97\":1}}],[\"符号是可选的\",{\"1\":{\"461\":1}}],[\"符号\",{\"1\":{\"451\":1,\"984\":1,\"1389\":1}}],[\"符号在\",{\"1\":{\"411\":1}}],[\"递归算法三要素大体可以总结为\",{\"0\":{\"977\":1,\"1382\":1}}],[\"递归算法\",{\"1\":{\"976\":1,\"1381\":1}}],[\"递归的方向必须走向终结点\",{\"1\":{\"977\":1,\"1382\":1}}],[\"递归的终点\",{\"1\":{\"977\":1,\"1382\":1}}],[\"递归的公式\",{\"1\":{\"977\":1,\"1382\":1}}],[\"递归的算法流程\",{\"0\":{\"975\":1,\"1380\":1}}],[\"递归的形式\",{\"0\":{\"973\":1,\"1378\":1}}],[\"递归的形式和特点\",{\"0\":{\"972\":1,\"1377\":1}}],[\"递归如果没有控制好终止\",{\"1\":{\"974\":1,\"1379\":1}}],[\"递归作为一种算法在程序设计语言中广泛应用\",{\"1\":{\"972\":1,\"1377\":1}}],[\"递归\",{\"1\":{\"451\":1}}],[\"翻页查看文件内容\",{\"1\":{\"448\":1}}],[\"暂时离开\",{\"1\":{\"437\":1}}],[\"效率好\",{\"1\":{\"763\":1,\"1168\":1}}],[\"效率低\",{\"1\":{\"751\":1,\"1156\":1}}],[\"效率得到提升\",{\"1\":{\"217\":1}}],[\"效果等同于\",{\"1\":{\"437\":2}}],[\"喔\",{\"1\":{\"437\":1}}],[\"储存后离开\",{\"1\":{\"437\":1}}],[\"画面的左下角处会出现\",{\"1\":{\"436\":1}}],[\"嘿嘿\",{\"1\":{\"435\":1,\"715\":1,\"1120\":1}}],[\"呢\",{\"1\":{\"435\":1}}],[\"亦即将\",{\"1\":{\"437\":1}}],[\"亦即由\",{\"1\":{\"435\":1}}],[\"亦即是退格键\",{\"1\":{\"435\":1}}],[\"亦即加上想要进行的次数\",{\"1\":{\"435\":1}}],[\"且指定端口\",{\"1\":{\"1453\":1}}],[\"且传输完毕后\",{\"1\":{\"1439\":1}}],[\"且文件没有被占用则直接被删除\",{\"1\":{\"969\":1,\"1374\":1}}],[\"且进行crud的业务场景\",{\"1\":{\"744\":1,\"1149\":1}}],[\"且具备意义\",{\"1\":{\"701\":1,\"1106\":1}}],[\"且已经复制了\",{\"1\":{\"435\":1}}],[\"且在取代前显示提示字符给用户确认\",{\"1\":{\"435\":1}}],[\"且通过自定义\",{\"1\":{\"109\":1}}],[\"搜寻\",{\"1\":{\"435\":1}}],[\"搜索某个目录下的全部文件\",{\"1\":{\"981\":1,\"1386\":1}}],[\"搜索\",{\"1\":{\"473\":1}}],[\"搜索替换等\",{\"1\":{\"435\":1}}],[\"搜索和分析海量数据\",{\"1\":{\"361\":1}}],[\"刚好相反\",{\"1\":{\"435\":1}}],[\"刚刚我们发现\",{\"1\":{\"308\":1}}],[\"啊\",{\"1\":{\"435\":1}}],[\"屏幕\",{\"1\":{\"435\":4}}],[\"屏蔽了项目冗余的报错细节\",{\"1\":{\"109\":1}}],[\"→\",{\"1\":{\"435\":1}}],[\"↑\",{\"1\":{\"435\":1}}],[\"↓\",{\"1\":{\"435\":1}}],[\"←\",{\"1\":{\"435\":1}}],[\"向参数中传递一个函数\",{\"1\":{\"1030\":1,\"1480\":1}}],[\"向前向后都可以查找\",{\"1\":{\"853\":1,\"1258\":1}}],[\"向前移一位的操作\",{\"1\":{\"187\":1}}],[\"向list2中注入\",{\"1\":{\"814\":1,\"1219\":1}}],[\"向光标之上寻找一个字符串名称为\",{\"1\":{\"435\":1}}],[\"向光标之下寻找一个名称为\",{\"1\":{\"435\":1}}],[\"向上取整\",{\"1\":{\"767\":1,\"1172\":1}}],[\"向上\",{\"1\":{\"435\":3}}],[\"向上箭头键\",{\"1\":{\"435\":1}}],[\"向下取整\",{\"1\":{\"767\":1,\"1172\":1}}],[\"向下\",{\"1\":{\"435\":2}}],[\"向下箭头键\",{\"1\":{\"435\":1}}],[\"向右箭头键\",{\"1\":{\"435\":1}}],[\"向左箭头键\",{\"1\":{\"435\":1}}],[\"底牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"底下以\",{\"1\":{\"437\":1}}],[\"底线命令模式可以输入单个或多个字符的命令\",{\"1\":{\"434\":1}}],[\"底线命令模式\",{\"0\":{\"434\":1}}],[\"底层基于红黑树实现的\",{\"1\":{\"891\":1,\"1296\":1}}],[\"底层结构\",{\"1\":{\"888\":1,\"1293\":1}}],[\"底层采用数组+链表+红黑树组成\",{\"1\":{\"884\":1,\"1289\":1}}],[\"底层采用数组+链表组成\",{\"1\":{\"884\":1,\"1289\":1}}],[\"底层还是有索引的\",{\"1\":{\"881\":1,\"1286\":1}}],[\"底层是数据结构中的双链表\",{\"1\":{\"864\":1,\"1269\":1}}],[\"底层是先初始化一个比较大的数组\",{\"1\":{\"124\":1}}],[\"底层获取请求参数和post不一样\",{\"1\":{\"309\":1}}],[\"底层原理\",{\"1\":{\"281\":1}}],[\"底层依赖于一条\",{\"1\":{\"211\":1}}],[\"底层使用hash表数据结构\",{\"1\":{\"188\":1}}],[\"底层使用的是\",{\"1\":{\"187\":2}}],[\"底层数据结构依然是哈希表\",{\"1\":{\"889\":1,\"1294\":1}}],[\"底层数据结构\",{\"1\":{\"187\":1}}],[\"底层其实是一个object数组并且在我们创建的时候进行了初始化为空数组\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"光标移动到这个屏幕的最下方那一行的第一个字符\",{\"1\":{\"435\":1}}],[\"光标移动到这个屏幕的最上方那一行的第一个字符\",{\"1\":{\"435\":1}}],[\"光标移动到这个屏幕的中央那一行的第一个字符\",{\"1\":{\"435\":1}}],[\"光标移动到非空格符的上一行\",{\"1\":{\"435\":1}}],[\"光标移动到非空格符的下一行\",{\"1\":{\"435\":1}}],[\"光标会向右移动这一行的\",{\"1\":{\"435\":1}}],[\"光标向下移动\",{\"1\":{\"435\":1}}],[\"光标向下移动一个字符\",{\"1\":{\"435\":1}}],[\"光标向右移动一个字符\",{\"1\":{\"435\":1}}],[\"光标向上移动一个字符\",{\"1\":{\"435\":1}}],[\"光标向左移动一个字符\",{\"1\":{\"435\":1}}],[\"光标将变成竖线\",{\"1\":{\"433\":1}}],[\"光驱\",{\"1\":{\"428\":1}}],[\"切换jdk模块版本\",{\"1\":{\"721\":1,\"1126\":1}}],[\"切换进程内存显示单位\",{\"1\":{\"481\":1}}],[\"切换顶部的内存显示的单位\",{\"1\":{\"481\":1}}],[\"切换用户后\",{\"1\":{\"461\":1}}],[\"切换光标为输入\",{\"1\":{\"433\":1}}],[\"切换到命令模式\",{\"1\":{\"433\":1}}],[\"切换到底线命令模式\",{\"1\":{\"432\":1}}],[\"切换到输入模式\",{\"1\":{\"432\":2}}],[\"切换到上一个操作所在目录\",{\"1\":{\"417\":1}}],[\"切换到上一层目录\",{\"1\":{\"417\":1}}],[\"切换到用户主目录\",{\"1\":{\"417\":1}}],[\"切换到系统根目录\",{\"1\":{\"417\":1}}],[\"切换到该目录下\",{\"1\":{\"417\":1}}],[\"切换到root\",{\"1\":{\"366\":1}}],[\"切换到root用户\",{\"1\":{\"353\":1,\"462\":1}}],[\"切换到tomcat用户\",{\"1\":{\"354\":1}}],[\"行的末尾\",{\"1\":{\"819\":1,\"1224\":1}}],[\"行的开头\",{\"1\":{\"819\":1,\"1224\":1}}],[\"行为\",{\"1\":{\"662\":1,\"1067\":1}}],[\"行数\",{\"1\":{\"455\":1}}],[\"行数据会贴在原本的\",{\"1\":{\"435\":1}}],[\"行数据\",{\"1\":{\"435\":1}}],[\"行呢\",{\"1\":{\"437\":1}}],[\"行会被推到变成\",{\"1\":{\"435\":1}}],[\"行开始贴\",{\"1\":{\"435\":1}}],[\"行之后\",{\"1\":{\"435\":1}}],[\"行之间搜寻\",{\"1\":{\"435\":1}}],[\"行之间寻找\",{\"1\":{\"435\":1}}],[\"行\",{\"1\":{\"435\":11,\"437\":1}}],[\"行尾\",{\"1\":{\"433\":1}}],[\"行validationquery指定的sql\",{\"1\":{\"240\":1}}],[\"退格键\",{\"1\":{\"433\":1}}],[\"退出代码0\",{\"1\":{\"743\":1,\"1148\":1}}],[\"退出编辑模式\",{\"1\":{\"436\":1}}],[\"退出程序\",{\"1\":{\"434\":1}}],[\"退出输入模式\",{\"1\":{\"433\":1}}],[\"退出命令\",{\"1\":{\"347\":1,\"350\":1}}],[\"退出mysql控制台页面\",{\"1\":{\"347\":1,\"350\":1}}],[\"退出同步代码块锁会自动释放\",{\"1\":{\"215\":1}}],[\"换行符\",{\"1\":{\"819\":2,\"1224\":2}}],[\"换行\",{\"1\":{\"433\":1,\"1008\":2,\"1413\":2}}],[\"便进入了命令模式\",{\"1\":{\"432\":1}}],[\"便于扩展和维护\",{\"1\":{\"726\":1,\"1131\":1}}],[\"便于子类实现\",{\"1\":{\"716\":1,\"1121\":1}}],[\"便于项目的持续发布和回滚\",{\"1\":{\"119\":1}}],[\"便于项目的维护和理解\",{\"1\":{\"107\":1}}],[\"便于分发应用程序\",{\"1\":{\"119\":1}}],[\"便于让下游的\",{\"1\":{\"108\":1}}],[\"便于让实际的\",{\"1\":{\"102\":1}}],[\"便于开发者轻松实现分布式系统和微服务架构\",{\"1\":{\"106\":1}}],[\"便于系统的开发维护\",{\"1\":{\"95\":1}}],[\"习惯将经常被修改的目录放在这个目录下\",{\"1\":{\"428\":1}}],[\"缩写\",{\"1\":{\"428\":1}}],[\"挂起\",{\"1\":{\"424\":1}}],[\"信号\",{\"1\":{\"422\":1}}],[\"删\",{\"1\":{\"418\":1,\"419\":1}}],[\"删除由此抽象路径名表示的文件或空文件夹\",{\"1\":{\"969\":1,\"1374\":1}}],[\"删除list集合中的java\",{\"1\":{\"866\":1,\"1271\":1}}],[\"删除指定索引处的元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"删除效率低\",{\"1\":{\"852\":1,\"1257\":1}}],[\"删除某个元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"删除某个索引位置处的元素\",{\"1\":{\"750\":1,\"1155\":1}}],[\"删除80分以下的元素\",{\"1\":{\"751\":1,\"1156\":1}}],[\"删除失败\",{\"1\":{\"629\":1,\"1034\":1}}],[\"删除成功返回true\",{\"1\":{\"750\":1,\"1155\":1}}],[\"删除成功\",{\"1\":{\"629\":1,\"1034\":1}}],[\"删除数据后\",{\"1\":{\"852\":1,\"1257\":1}}],[\"删除数据\",{\"1\":{\"514\":1}}],[\"删除数据库\",{\"1\":{\"507\":1}}],[\"删除表时判断表是否存在\",{\"1\":{\"513\":1}}],[\"删除表\",{\"1\":{\"513\":1}}],[\"删除列\",{\"1\":{\"512\":1}}],[\"删除用户组\",{\"1\":{\"463\":1}}],[\"删除游标所在处\",{\"1\":{\"435\":2}}],[\"删除光标所在到最后一行的所有数据\",{\"1\":{\"435\":1}}],[\"删除光标所在到第一行的所有数据\",{\"1\":{\"435\":1}}],[\"删除光标后一个字符\",{\"1\":{\"433\":1}}],[\"删除光标前一个字符\",{\"1\":{\"433\":1}}],[\"删除键会返回对应的值\",{\"1\":{\"904\":1,\"1309\":1}}],[\"删除键\",{\"1\":{\"433\":1}}],[\"删除当前光标所在处的字符\",{\"1\":{\"432\":1}}],[\"删除文件夹\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"删除文件功能\",{\"0\":{\"967\":1,\"1372\":1}}],[\"删除文件\",{\"1\":{\"419\":1,\"965\":1,\"1370\":1}}],[\"删除目录\",{\"1\":{\"418\":1}}],[\"删除系统自带的java程序\",{\"1\":{\"353\":1}}],[\"删除对应的cookie\",{\"1\":{\"331\":1}}],[\"删除共享的数据\",{\"1\":{\"310\":1}}],[\"删除该键值对\",{\"1\":{\"310\":1,\"333\":1}}],[\"删除pom\",{\"1\":{\"292\":1}}],[\"删除tb\",{\"1\":{\"243\":1}}],[\"删除\",{\"0\":{\"278\":1,\"513\":1},\"1\":{\"241\":1,\"279\":1,\"283\":1,\"435\":1,\"473\":1,\"507\":1,\"508\":1,\"514\":1,\"570\":1,\"629\":1,\"910\":1,\"969\":1,\"1034\":1,\"1315\":1,\"1374\":1}}],[\"删除即可\",{\"1\":{\"131\":1}}],[\"删除设置了过期时间并且剩余⽣存时间最短的键\",{\"1\":{\"130\":1}}],[\"删除设置了过期时间并且最近最少使⽤的键\",{\"1\":{\"130\":1}}],[\"删除最近最少使⽤\",{\"1\":{\"130\":1}}],[\"删除里面过期的key\",{\"1\":{\"129\":1}}],[\"剪切光标所在的向下\",{\"1\":{\"435\":1}}],[\"剪切游标所在的那一整行\",{\"1\":{\"435\":1}}],[\"剪切\",{\"1\":{\"418\":1}}],[\"固定\",{\"1\":{\"413\":1}}],[\"域名等\",{\"1\":{\"408\":1}}],[\"域名服务\",{\"1\":{\"374\":1}}],[\"现在就讲到本篇文章的重点\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"现在是一个崭新的zabbix等待我们去探索\",{\"1\":{\"405\":1}}],[\"现在我们来在node1\",{\"1\":{\"388\":1}}],[\"现在我们在一台电脑中以多台虚拟机来模拟集群\",{\"1\":{\"384\":1}}],[\"完毕以后进行解锁\",{\"1\":{\"932\":1,\"1337\":1}}],[\"完整性\",{\"1\":{\"396\":1}}],[\"完成socket网络编程入门案例的客户端开发\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"完成文件夹复制到某个文件夹下\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"完成文件拷贝\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"完成了复制\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"完成了绝地之地的探险\",{\"1\":{\"74\":1}}],[\"完成的任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"完成添加和删除功能的泛型设计即可\",{\"1\":{\"871\":1,\"1276\":1}}],[\"完成集合的遍历\",{\"1\":{\"750\":1,\"1155\":1}}],[\"完成流的copy\",{\"1\":{\"315\":1}}],[\"完成一些如加载配置文件\",{\"1\":{\"297\":1}}],[\"完成一般字段的映射\",{\"1\":{\"270\":1}}],[\"完成一系列的任务\",{\"1\":{\"26\":1}}],[\"完成主键字段的映射\",{\"1\":{\"270\":1}}],[\"完成商品品牌数据的增删改查操作\",{\"0\":{\"241\":1}}],[\"完成下单的完整操作实现业务的异步\",{\"1\":{\"176\":1}}],[\"完成对用户请求的处理后\",{\"1\":{\"166\":1}}],[\"完成之后需要手动删除该锁\",{\"1\":{\"125\":1}}],[\"软连接\",{\"0\":{\"475\":1}}],[\"软件\",{\"1\":{\"958\":1,\"1363\":1}}],[\"软件名称\",{\"1\":{\"473\":1}}],[\"软件安装\",{\"0\":{\"472\":1}}],[\"软件能够监控众多网络参数和服务器的健康度\",{\"1\":{\"396\":1}}],[\"软链接\",{\"1\":{\"392\":1,\"395\":1}}],[\"软链接我们自己安装的java程序\",{\"1\":{\"353\":1}}],[\"积极的持续开发更新维护\",{\"1\":{\"396\":1}}],[\"扫描表数据\",{\"1\":{\"389\":1}}],[\"意思是可读可写可执行\",{\"1\":{\"441\":1}}],[\"意思是重复前一个动作的意思\",{\"1\":{\"435\":1}}],[\"意思是查询必须从索引的最左前列开始\",{\"1\":{\"150\":1}}],[\"意思表示\",{\"1\":{\"389\":1}}],[\"格式化时间\",{\"1\":{\"966\":1,\"1371\":1}}],[\"格式化时间毫秒值\",{\"1\":{\"781\":1,\"1186\":1}}],[\"格式化这个时间毫秒值\",{\"1\":{\"781\":1,\"1186\":1}}],[\"格式化这个日期对象\",{\"1\":{\"781\":1,\"1186\":1}}],[\"格式化毫秒值\",{\"1\":{\"781\":1,\"1186\":1}}],[\"格式化方法\",{\"1\":{\"781\":1,\"1186\":1}}],[\"格式化namenode\",{\"1\":{\"386\":1}}],[\"格式\",{\"0\":{\"737\":1,\"1142\":1},\"1\":{\"635\":1,\"682\":2,\"845\":1,\"937\":1,\"1040\":1,\"1087\":2,\"1250\":1,\"1342\":1}}],[\"格式为key\",{\"1\":{\"287\":1,\"288\":1}}],[\"清空集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"清空集合中所有的元素\",{\"1\":{\"904\":1,\"1309\":1}}],[\"清空所以的元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"清空元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"清空当前集合中的所有元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"清空文件\",{\"1\":{\"386\":1}}],[\"清屏\",{\"1\":{\"471\":1}}],[\"清理工作\",{\"1\":{\"254\":1}}],[\"清理\",{\"1\":{\"253\":1}}],[\"略\",{\"1\":{\"385\":1}}],[\"角色分配如下\",{\"1\":{\"382\":1}}],[\"角色和节点分配\",{\"0\":{\"382\":1}}],[\"越界\",{\"1\":{\"844\":1,\"1249\":1}}],[\"越线匹配者\",{\"1\":{\"819\":1,\"1224\":1}}],[\"越多越好\",{\"1\":{\"381\":3}}],[\"越靠后分页查询的效率就越低\",{\"1\":{\"148\":1}}],[\"海量数据的存储和海量数据的分析计算问题\",{\"1\":{\"379\":1}}],[\"验证结果并移除元素\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"验证码工具静态类\",{\"1\":{\"678\":1,\"1083\":1}}],[\"验证flink启动\",{\"1\":{\"395\":1}}],[\"验证yarn\",{\"1\":{\"387\":1}}],[\"验证hbase\",{\"1\":{\"389\":1}}],[\"验证hdfs\",{\"1\":{\"387\":1}}],[\"验证hadoop集群运行情况\",{\"0\":{\"387\":1}}],[\"验证kafka启动\",{\"1\":{\"377\":1}}],[\"验证zookeeper\",{\"1\":{\"375\":1}}],[\"高清接口\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"高\",{\"1\":{\"650\":1,\"1055\":1}}],[\"高吞吐低延迟\",{\"1\":{\"376\":1}}],[\"高效的打印数据到文件中去\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"高效\",{\"1\":{\"240\":1}}],[\"高效稳定几个角度出发\",{\"1\":{\"105\":1}}],[\"总共可以表示256个字符信息\",{\"1\":{\"984\":1,\"1389\":1}}],[\"总体学习思路\",{\"1\":{\"965\":1,\"1370\":1}}],[\"总量\",{\"1\":{\"481\":1}}],[\"总有它的身影存在\",{\"1\":{\"374\":1}}],[\"总结流的四大类\",{\"0\":{\"991\":1,\"1396\":1}}],[\"总结\",{\"0\":{\"291\":1,\"301\":1,\"775\":1,\"777\":1,\"782\":1,\"800\":1,\"803\":1,\"807\":1,\"809\":1,\"813\":1,\"815\":1,\"817\":1,\"892\":1,\"910\":1,\"923\":1,\"926\":1,\"987\":1,\"1019\":1,\"1030\":1,\"1180\":1,\"1182\":1,\"1187\":1,\"1205\":1,\"1208\":1,\"1212\":1,\"1214\":1,\"1218\":1,\"1220\":1,\"1222\":1,\"1297\":1,\"1315\":1,\"1328\":1,\"1331\":1,\"1392\":1,\"1469\":1,\"1480\":1},\"1\":{\"128\":1,\"831\":1,\"891\":1,\"1236\":1,\"1296\":1}}],[\"涉及到分布式状态一致性的场景\",{\"1\":{\"374\":1}}],[\"涉及到三个操作数\",{\"1\":{\"211\":1}}],[\"复原前一个动作\",{\"1\":{\"435\":1}}],[\"复制文件夹\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"复制文件\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"复制光标所在的那个字符到该行行尾的所有数据\",{\"1\":{\"435\":1}}],[\"复制光标所在的那个字符到该行行首的所有数据\",{\"1\":{\"435\":1}}],[\"复制光标所在的向下\",{\"1\":{\"435\":1}}],[\"复制游标所在行到最后一行的所有数据\",{\"1\":{\"435\":1}}],[\"复制游标所在行到第一行的所有数据\",{\"1\":{\"435\":1}}],[\"复制游标所在的那一行\",{\"1\":{\"435\":1}}],[\"复制与贴上\",{\"1\":{\"435\":1}}],[\"复制粘贴\",{\"1\":{\"435\":1}}],[\"复制到node3同名文件夹\",{\"1\":{\"377\":1}}],[\"复制到node2同名文件夹\",{\"1\":{\"377\":1}}],[\"复制到node2和node3\",{\"1\":{\"375\":1}}],[\"复制到node2服务器的同名路径下\",{\"1\":{\"373\":2}}],[\"复制到本机的\",{\"1\":{\"373\":1}}],[\"复杂程度高\",{\"1\":{\"321\":1}}],[\"复杂度上升\",{\"1\":{\"176\":1}}],[\"复杂的任务\",{\"1\":{\"58\":1}}],[\"必须换行才可以响应\",{\"1\":{\"1466\":2}}],[\"必须双方先建立连接\",{\"1\":{\"1439\":1}}],[\"必须省略return不写\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"必须是接口的匿名内部类\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"必须是car或者其父类\",{\"1\":{\"877\":1,\"1282\":1}}],[\"必须是car或者是其子类\",{\"1\":{\"877\":1,\"1282\":1}}],[\"必须在接口内部才能被访问\",{\"1\":{\"721\":1,\"1126\":1}}],[\"必须在选项的最后一位\",{\"1\":{\"490\":1}}],[\"必须在选项的最后一个\",{\"1\":{\"490\":1}}],[\"必须通过实现类来创建对象调用方法\",{\"1\":{\"721\":1,\"1126\":1}}],[\"必须用static修饰\",{\"1\":{\"720\":1,\"1125\":1}}],[\"必须用abstract修饰\",{\"1\":{\"709\":1,\"1114\":1}}],[\"必须有初始化值\",{\"1\":{\"704\":1,\"1109\":1}}],[\"必须提供一个无参构造器\",{\"1\":{\"672\":1,\"1077\":1}}],[\"必须实现接口\",{\"1\":{\"629\":2,\"1034\":2}}],[\"必须使所有的数据都保持一致状态\",{\"1\":{\"536\":1}}],[\"必须使用static修饰\",{\"1\":{\"721\":1,\"1126\":1}}],[\"必须使用private修饰\",{\"1\":{\"721\":1,\"1126\":1}}],[\"必须使用default修饰\",{\"1\":{\"719\":1,\"1124\":1}}],[\"必须使用\",{\"1\":{\"373\":1}}],[\"必须配置其访问路径\",{\"1\":{\"302\":1}}],[\"补充知识\",{\"0\":{\"733\":1,\"1138\":1}}],[\"补充\",{\"0\":{\"517\":1,\"613\":1},\"1\":{\"465\":1}}],[\"补充命令\",{\"0\":{\"373\":1}}],[\"补齐缺失的目录结构\",{\"1\":{\"292\":1}}],[\"留待使用\",{\"1\":{\"372\":1}}],[\"千万要注意disabled单词不要写错\",{\"1\":{\"371\":1}}],[\"改一个就可以修改全部\",{\"1\":{\"704\":1,\"1109\":1}}],[\"改\",{\"1\":{\"418\":3,\"419\":1}}],[\"改名\",{\"1\":{\"392\":1}}],[\"改为\",{\"1\":{\"371\":1}}],[\"改善出现脑裂而引发的数据丢失问题\",{\"1\":{\"137\":1}}],[\"课程中使用简单密码\",{\"1\":{\"398\":1}}],[\"课程中不多涉及\",{\"1\":{\"371\":1}}],[\"课程使用mysql\",{\"1\":{\"398\":1}}],[\"课程为大家演示快速搭建rabbitmq环境\",{\"1\":{\"357\":1}}],[\"克隆\",{\"1\":{\"365\":1}}],[\"虚拟内存\",{\"1\":{\"481\":1}}],[\"虚拟机\",{\"1\":{\"397\":1}}],[\"虚拟机集群\",{\"1\":{\"365\":1}}],[\"虚拟目录\",{\"1\":{\"307\":1}}],[\"~\",{\"1\":{\"360\":1,\"417\":1,\"444\":1,\"456\":3,\"458\":2,\"459\":5,\"460\":2,\"474\":1,\"475\":2,\"485\":3}}],[\"及创建用户的\",{\"1\":{\"505\":1}}],[\"及\",{\"1\":{\"435\":1}}],[\"及衍生发行版如\",{\"1\":{\"360\":1}}],[\"及时更新缓存\",{\"1\":{\"115\":1}}],[\"社区打造\",{\"1\":{\"360\":1}}],[\"快捷键映射图\",{\"0\":{\"430\":1}}],[\"快\",{\"1\":{\"359\":1}}],[\"快速检索\",{\"1\":{\"388\":1}}],[\"快速入门\",{\"0\":{\"295\":1,\"745\":1,\"1150\":1,\"1446\":1},\"1\":{\"323\":1}}],[\"快速随机访问就是通过元素的序号快速获取元素对象\",{\"1\":{\"187\":1}}],[\"填入如下内容\",{\"1\":{\"358\":1,\"366\":2,\"386\":1,\"387\":1,\"389\":1}}],[\"填入如下内容并保存退出\",{\"1\":{\"356\":1}}],[\"准备linux\",{\"1\":{\"397\":1}}],[\"准备主机名映射\",{\"0\":{\"366\":1}}],[\"准备仓库文件\",{\"1\":{\"358\":1}}],[\"准备gpgkey密钥\",{\"1\":{\"358\":1}}],[\"准备yum仓库\",{\"1\":{\"358\":1}}],[\"准备环境\",{\"0\":{\"242\":1}}],[\"点数\",{\"1\":{\"897\":1,\"1302\":1}}],[\"点对点传输等消息服务\",{\"1\":{\"357\":1}}],[\"点击下一步\",{\"1\":{\"405\":2}}],[\"点击刷新按钮\",{\"1\":{\"258\":1}}],[\"点击查看模板\",{\"1\":{\"93\":1}}],[\"订阅模式的消息队列系统\",{\"1\":{\"376\":1}}],[\"订阅\",{\"1\":{\"357\":1}}],[\"显示内连接\",{\"1\":{\"531\":1}}],[\"显示内存信息\",{\"1\":{\"481\":1}}],[\"显示\",{\"0\":{\"531\":1}}],[\"显示压缩\",{\"1\":{\"490\":1}}],[\"显示cpu状态信息\",{\"1\":{\"481\":1}}],[\"显示全部进程\",{\"1\":{\"478\":1}}],[\"显示行号\",{\"1\":{\"437\":1}}],[\"显示的指定端口也是可以的比如\",{\"1\":{\"356\":1}}],[\"显示数据为null\",{\"1\":{\"270\":1}}],[\"永久生效\",{\"1\":{\"356\":1,\"358\":3,\"360\":1,\"486\":1}}],[\"永远无法被\",{\"1\":{\"222\":1}}],[\"停止正在执行的任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"停止\",{\"1\":{\"356\":1,\"474\":1}}],[\"停止防火墙开机自启\",{\"1\":{\"354\":1}}],[\"才会启动临时线程\",{\"1\":{\"948\":1,\"1353\":1}}],[\"才是开发中的目的\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"才是后台运行\",{\"1\":{\"424\":1}}],[\"才去创建一个对象\",{\"1\":{\"687\":1,\"1092\":1}}],[\"才可以使用yum安装\",{\"1\":{\"356\":1}}],[\"才能复合方法的参数\",{\"1\":{\"763\":1,\"1168\":1}}],[\"才能调用子类中独有的方法\",{\"1\":{\"730\":1,\"1135\":1}}],[\"才能创建对象\",{\"1\":{\"658\":1,\"1063\":1}}],[\"才能输入喔\",{\"1\":{\"436\":1}}],[\"才能在这个充满机遇与挑战的java世界中立足\",{\"1\":{\"90\":1}}],[\"才能在这个充满竞争和机遇的世界中走得更远\",{\"1\":{\"67\":1}}],[\"才能成功战胜这个终极挑战\",{\"1\":{\"88\":1}}],[\"才能真正成为java编程的高手\",{\"1\":{\"81\":1}}],[\"才能真正成为java大陆的探险家\",{\"1\":{\"54\":1}}],[\"才能逐渐接近迷宫的出口\",{\"1\":{\"79\":1}}],[\"才能解开迷宫的谜题\",{\"1\":{\"78\":1}}],[\"才能够最终夺回java大陆的控制权\",{\"1\":{\"72\":1}}],[\"才能够在绝地之地立足\",{\"1\":{\"70\":1}}],[\"才能够成功完成这次的探险\",{\"1\":{\"69\":1}}],[\"才能够获得知识的钥匙\",{\"1\":{\"21\":1}}],[\"才能找到前往下一关的出口\",{\"1\":{\"30\":1}}],[\"才能得到java城的奥义\",{\"1\":{\"29\":1}}],[\"需求\",{\"1\":{\"781\":1,\"823\":1,\"866\":1,\"929\":1,\"1022\":1,\"1186\":1,\"1228\":1,\"1271\":1,\"1334\":1,\"1472\":1}}],[\"需求分析\",{\"1\":{\"528\":1}}],[\"需配置好本地的主机名映射\",{\"1\":{\"354\":1}}],[\"需要继续递归寻找\",{\"1\":{\"981\":1,\"1386\":1}}],[\"需要继续递归进去重复上述过程\",{\"1\":{\"981\":1,\"1386\":1}}],[\"需要制定排序规则\",{\"1\":{\"891\":1,\"1296\":1}}],[\"需要打开权限\",{\"1\":{\"807\":1,\"809\":1,\"813\":1,\"1212\":1,\"1214\":1,\"1218\":1}}],[\"需要在子类中重写equals才是比较内容\",{\"1\":{\"758\":1,\"1163\":1}}],[\"需要使用接口的实现类的对象来调用\",{\"1\":{\"719\":1,\"1124\":1}}],[\"需要使用static关键字修饰\",{\"1\":{\"682\":1,\"1087\":1}}],[\"需要类型转换\",{\"1\":{\"650\":1,\"1055\":1}}],[\"需要链接去的目的地\",{\"1\":{\"475\":1}}],[\"需要有网络\",{\"1\":{\"399\":1}}],[\"需要降低mysql的密码安全级别\",{\"1\":{\"398\":1}}],[\"需要写到\",{\"1\":{\"386\":1}}],[\"需要对虚拟机进行内存设置\",{\"1\":{\"384\":1}}],[\"需要对tomcat默认使用的8080端口进行放行\",{\"1\":{\"354\":1}}],[\"需要多个\",{\"1\":{\"381\":2}}],[\"需要关闭防火墙或放行80端口\",{\"1\":{\"356\":1}}],[\"需要java\",{\"1\":{\"352\":1}}],[\"需要找到自动生成的\",{\"1\":{\"321\":1}}],[\"需要加虚拟目录\",{\"1\":{\"313\":1}}],[\"需要手动提交\",{\"0\":{\"275\":1}}],[\"需要手动调用\",{\"1\":{\"215\":1}}],[\"需要遵守前后的顺序\",{\"1\":{\"267\":1}}],[\"需要先熟悉一些执行线程池执行任务的类型\",{\"1\":{\"220\":1}}],[\"需要别的线程调用同一个对象上的\",{\"1\":{\"207\":1}}],[\"需要调用futuretask\",{\"1\":{\"200\":1}}],[\"需要把老数组中的数据挪动到新的数组中没有hash冲突的节点\",{\"1\":{\"191\":1}}],[\"需要耗时10秒多\",{\"1\":{\"148\":1}}],[\"需要我们手动配置来开启慢日志查询\",{\"1\":{\"141\":1}}],[\"需要主角灵活运用java编程的知识解决\",{\"1\":{\"79\":1}}],[\"需要主角运用之前学到的java知识\",{\"1\":{\"77\":1}}],[\"需要主角运用图形界面编程的技巧来创造出一个全新的世界\",{\"1\":{\"38\":1}}],[\"需要过五关斩六将\",{\"1\":{\"29\":1}}],[\"需要巧妙地运用所学知识来解决\",{\"1\":{\"14\":1}}],[\"至少n次\",{\"1\":{\"819\":6,\"1224\":6}}],[\"至于为什么多态的父类不能调用子类的独有方法\",{\"0\":{\"731\":1,\"1136\":1}}],[\"至此zookeeper安装完成\",{\"1\":{\"375\":1}}],[\"至此\",{\"1\":{\"347\":1,\"350\":1,\"354\":1,\"356\":1,\"358\":1,\"360\":1}}],[\"至今\",{\"1\":{\"95\":1}}],[\"下一天的桃子\",{\"1\":{\"979\":1,\"1384\":1}}],[\"下一部分\",{\"1\":{\"781\":1,\"1186\":1}}],[\"下次新任务来了又要创建新线程\",{\"1\":{\"940\":1,\"1345\":1}}],[\"下面示例中将要讲到\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"下面的任务进入队列等待\",{\"1\":{\"948\":1,\"1353\":1}}],[\"下面的就不会执行\",{\"1\":{\"636\":1,\"1041\":1}}],[\"下面泛型就会表示成为学生\",{\"1\":{\"875\":1,\"1280\":1}}],[\"下面代码运行的结果是\",{\"1\":{\"743\":1,\"1148\":1}}],[\"下面这些功能都是基于在pom中导入jackson\",{\"1\":{\"566\":1}}],[\"下面列出几个常用的\",{\"1\":{\"481\":1}}],[\"下面全部的软件安装的相关流程\",{\"1\":{\"343\":1}}],[\"下划线\",{\"1\":{\"433\":1}}],[\"下翻页\",{\"1\":{\"433\":1}}],[\"下载并解压\",{\"1\":{\"392\":1}}],[\"下载并上传kafka的安装包\",{\"1\":{\"377\":1}}],[\"下载hbase安装包\",{\"1\":{\"389\":1}}],[\"下载hadoop安装包\",{\"1\":{\"386\":1}}],[\"下载安装包\",{\"1\":{\"377\":1,\"395\":1}}],[\"下载zookeeper安装包\",{\"1\":{\"375\":1}}],[\"下载tomcat安装包\",{\"1\":{\"354\":1}}],[\"下载jdk\",{\"1\":{\"353\":1}}],[\"下载jdk软件\",{\"1\":{\"353\":1}}],[\"下载maven并且配置环境变量后\",{\"1\":{\"251\":1}}],[\"下载\",{\"1\":{\"104\":1,\"375\":1,\"386\":1,\"389\":1}}],[\"放行6379端口\",{\"1\":{\"360\":1}}],[\"放行5672\",{\"1\":{\"358\":1}}],[\"放行防火墙\",{\"1\":{\"358\":1,\"360\":1}}],[\"放行tcp规则下的6379端口\",{\"1\":{\"360\":1}}],[\"放行tcp规则下的25672端口\",{\"1\":{\"358\":1}}],[\"放行tcp规则下的15672端口\",{\"1\":{\"358\":1}}],[\"放行tcp规则下的5672端口\",{\"1\":{\"358\":1}}],[\"放行tcp规则下的80端口\",{\"1\":{\"356\":1}}],[\"放行tomcat需要使用的8080端口的外部访问权限\",{\"1\":{\"354\":1}}],[\"放行80端口\",{\"1\":{\"356\":1}}],[\"放行8080端口的外部访问\",{\"1\":{\"354\":1}}],[\"放行端口\",{\"1\":{\"354\":1}}],[\"放行有2种操作方式\",{\"1\":{\"354\":1}}],[\"放行\",{\"1\":{\"338\":1}}],[\"放弃了segment臃肿的设计\",{\"1\":{\"217\":1}}],[\"敏感字符处理等等\",{\"1\":{\"337\":1}}],[\"过滤的是不符合形参的元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"过滤长度不是3的元素\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"过滤不是姓张的元素\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"过滤temporary\",{\"1\":{\"347\":1,\"350\":1}}],[\"过滤器\",{\"1\":{\"570\":1}}],[\"过滤器一般完成一些通用的操作\",{\"1\":{\"337\":1}}],[\"过滤器可以把对资源的请求拦截下来\",{\"1\":{\"337\":1}}],[\"过minidle指定的连接个数\",{\"1\":{\"240\":1}}],[\"小红取钱后剩余\",{\"1\":{\"930\":1,\"1335\":1}}],[\"小红取钱成功\",{\"1\":{\"930\":1,\"1335\":1}}],[\"小红\",{\"1\":{\"930\":2,\"937\":1,\"939\":2,\"1335\":2,\"1342\":1,\"1344\":2}}],[\"小黑\",{\"1\":{\"891\":1,\"1296\":1}}],[\"小张\",{\"1\":{\"888\":1,\"1009\":2,\"1293\":1,\"1414\":2}}],[\"小虎\",{\"1\":{\"887\":1,\"1292\":1}}],[\"小李\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"小杜\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"小数位数\",{\"1\":{\"819\":1,\"1224\":1}}],[\"小猴\",{\"1\":{\"816\":1,\"1221\":1}}],[\"小王\",{\"1\":{\"751\":1,\"822\":1,\"888\":1,\"897\":1,\"1021\":1,\"1156\":1,\"1227\":1,\"1293\":1,\"1302\":1,\"1471\":1}}],[\"小胡\",{\"1\":{\"751\":1,\"887\":1,\"888\":2,\"988\":1,\"1004\":1,\"1008\":1,\"1156\":1,\"1292\":1,\"1293\":2,\"1393\":1,\"1409\":1,\"1413\":1}}],[\"小白\",{\"1\":{\"526\":1}}],[\"小明和小红取钱\",{\"1\":{\"939\":1,\"1344\":1}}],[\"小明和小红是一对夫妻\",{\"1\":{\"929\":1,\"1334\":1}}],[\"小明取钱后剩余\",{\"1\":{\"930\":1,\"1335\":1}}],[\"小明取钱成功\",{\"1\":{\"930\":1,\"1335\":1}}],[\"小明\",{\"1\":{\"526\":1,\"664\":1,\"806\":2,\"808\":1,\"816\":1,\"930\":2,\"937\":1,\"939\":2,\"1069\":1,\"1211\":2,\"1213\":1,\"1221\":1,\"1335\":2,\"1342\":1,\"1344\":2}}],[\"小技巧快捷键\",{\"0\":{\"467\":1}}],[\"小写字母字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"小写\",{\"1\":{\"453\":1}}],[\"小结\",{\"0\":{\"336\":1}}],[\"小米科技有限公司\",{\"1\":{\"243\":1}}],[\"小米\",{\"1\":{\"243\":1}}],[\"钝化\",{\"1\":{\"335\":1}}],[\"活化\",{\"1\":{\"335\":2}}],[\"取出多少\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"取出数据即可\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"取钱线程\",{\"1\":{\"939\":1,\"1344\":1}}],[\"取钱案例出现的问题原因\",{\"1\":{\"931\":1,\"1336\":1}}],[\"取钱的线程类\",{\"1\":{\"930\":1,\"1335\":1}}],[\"取钱后剩余\",{\"1\":{\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":1}}],[\"取钱成功\",{\"1\":{\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":1}}],[\"取钱\",{\"1\":{\"930\":3,\"933\":1,\"936\":1,\"937\":2,\"939\":3,\"1335\":3,\"1338\":1,\"1341\":1,\"1342\":2,\"1344\":3}}],[\"取钱模型\",{\"0\":{\"929\":1,\"1334\":1}}],[\"取掉年龄重复的元素\",{\"1\":{\"891\":1,\"1296\":1}}],[\"取值\",{\"1\":{\"808\":1,\"1213\":1}}],[\"取中间索引\",{\"1\":{\"794\":1,\"1199\":1}}],[\"取数据\",{\"1\":{\"333\":1}}],[\"取决于\",{\"1\":{\"158\":1}}],[\"取决于其作用域和状态\",{\"1\":{\"158\":1}}],[\"零次或更多次\",{\"1\":{\"819\":3,\"1224\":3}}],[\"零\",{\"1\":{\"331\":1}}],[\"za\",{\"1\":{\"819\":2,\"1224\":2}}],[\"zabbix=4\",{\"1\":{\"399\":1}}],[\"zabbix\",{\"0\":{\"399\":1},\"1\":{\"396\":7,\"399\":1,\"400\":3,\"401\":4,\"402\":9,\"403\":2,\"404\":7,\"405\":1}}],[\"zip解压到\",{\"1\":{\"492\":1}}],[\"zip解压到当前目录\",{\"1\":{\"492\":1}}],[\"zip中\",{\"1\":{\"491\":2}}],[\"zip命令可以将文件压缩为zip压缩包\",{\"1\":{\"491\":1}}],[\"zip\",{\"0\":{\"491\":1},\"1\":{\"491\":5,\"492\":2}}],[\"z选项建议在开头\",{\"1\":{\"490\":1}}],[\"z选项如果需要使用一般处于第一个\",{\"1\":{\"490\":1}}],[\"z就是普通的tarball格式\",{\"1\":{\"490\":1}}],[\"zombie\",{\"1\":{\"481\":2}}],[\"zoo\",{\"1\":{\"375\":1}}],[\"zookeeper是已经启动了的\",{\"1\":{\"389\":1}}],[\"zookeeper是一款分布式的集群化软件\",{\"1\":{\"375\":1}}],[\"zookeeper是一个分布式的\",{\"1\":{\"374\":1}}],[\"zookeeper快照的存储位置\",{\"1\":{\"389\":1}}],[\"zookeeper集群部署\",{\"0\":{\"385\":1}}],[\"zookeeper的地址\",{\"1\":{\"389\":1}}],[\"zookeeper的工作者\",{\"1\":{\"381\":1}}],[\"zookeeper的进程\",{\"1\":{\"381\":1}}],[\"zookeeper数据存储目录\",{\"1\":{\"375\":1}}],[\"zookeeper\",{\"1\":{\"375\":20,\"377\":3,\"378\":1,\"389\":4}}],[\"zookeeper不论是大数据领域亦或是其它服务器开发领域\",{\"1\":{\"374\":1}}],[\"zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖\",{\"1\":{\"374\":1}}],[\"zq\",{\"1\":{\"437\":1}}],[\"z\",{\"1\":{\"437\":1,\"490\":2,\"819\":11,\"891\":1,\"1224\":11,\"1296\":1}}],[\"zz\",{\"1\":{\"437\":1}}],[\"zcvf\",{\"1\":{\"420\":1,\"490\":1}}],[\"zcat\",{\"1\":{\"402\":1}}],[\"zk=false\",{\"1\":{\"389\":1}}],[\"zkcli\",{\"1\":{\"375\":1}}],[\"zkserver\",{\"1\":{\"375\":1}}],[\"zero\",{\"1\":{\"358\":1}}],[\"zxvf\",{\"1\":{\"353\":1,\"354\":1,\"375\":1,\"377\":1,\"386\":1,\"389\":1,\"392\":1,\"395\":1,\"490\":1}}],[\"zs\",{\"1\":{\"329\":1,\"333\":1,\"466\":1}}],[\"zhangthree\",{\"1\":{\"821\":3,\"1020\":3,\"1226\":3,\"1470\":3}}],[\"zhanglist\",{\"1\":{\"821\":4,\"824\":2,\"1020\":4,\"1023\":2,\"1226\":4,\"1229\":2,\"1470\":4,\"1473\":2}}],[\"zhangsan\",{\"1\":{\"233\":2}}],[\"zh\",{\"1\":{\"261\":1,\"273\":1}}],[\"基础项目\",{\"0\":{\"537\":1}}],[\"基础查询\",{\"1\":{\"516\":1}}],[\"基本策略是进行左旋或者右旋\",{\"1\":{\"855\":1,\"1260\":1}}],[\"基本数据类型的数据和变量可以直接赋值给包装类型的变量\",{\"1\":{\"788\":1,\"1193\":1}}],[\"基本数据类型\",{\"1\":{\"788\":1,\"1193\":1}}],[\"基本类型就是在栈内存中的\",{\"1\":{\"654\":2,\"1059\":2}}],[\"基本类型的参数传输存储的\",{\"1\":{\"654\":2,\"1059\":2}}],[\"基本类型\",{\"1\":{\"646\":1,\"654\":1,\"703\":1,\"1051\":1,\"1059\":1,\"1108\":1}}],[\"基本类型和引用类型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"基本的命令有\",{\"1\":{\"434\":1}}],[\"基本介绍\",{\"0\":{\"427\":1}}],[\"基本上\",{\"1\":{\"431\":1}}],[\"基本上也是必备组件之一了\",{\"1\":{\"355\":1}}],[\"基本上都会和mysql打交道\",{\"1\":{\"344\":1}}],[\"基本使用\",{\"0\":{\"329\":1,\"333\":1}}],[\"基于一个线程的bs\",{\"1\":{\"1466\":1}}],[\"基于线程池\",{\"1\":{\"956\":1,\"1361\":1}}],[\"基于红黑树\",{\"1\":{\"892\":1,\"1297\":1}}],[\"基于红黑规则实现了自平衡的排序二叉树\",{\"1\":{\"856\":1,\"1261\":1}}],[\"基于哈希表和双链表\",{\"1\":{\"892\":1,\"1297\":1}}],[\"基于哈希表\",{\"1\":{\"892\":1,\"1297\":1}}],[\"基于链表\",{\"1\":{\"892\":1,\"1297\":1}}],[\"基于数组的\",{\"1\":{\"892\":1,\"1297\":1}}],[\"基于接口设计的\",{\"1\":{\"629\":1,\"1034\":1}}],[\"基于存储的数据提供出色的报表和数据可视化功能\",{\"1\":{\"396\":1}}],[\"基于请求\",{\"1\":{\"286\":1}}],[\"基于tcp协议\",{\"1\":{\"286\":1}}],[\"基于内存的\",{\"1\":{\"110\":1}}],[\"基于\",{\"1\":{\"95\":2,\"390\":1,\"393\":1}}],[\"形参列表\",{\"1\":{\"709\":1,\"872\":1,\"1114\":1,\"1277\":1}}],[\"形参列表必须与被重写的方法名称和参数列表一致\",{\"1\":{\"699\":1,\"1104\":1}}],[\"形成复杂的业务逻辑功能\",{\"1\":{\"326\":1}}],[\"形式务必和字符串中的形式一毛一样\",{\"1\":{\"781\":1,\"1186\":1}}],[\"形式\",{\"0\":{\"723\":1,\"1128\":1},\"1\":{\"287\":1,\"288\":1}}],[\"形式进行优化\",{\"1\":{\"148\":1}}],[\"层中的基本功能\",{\"1\":{\"326\":1}}],[\"组播\",{\"0\":{\"1451\":1},\"1\":{\"1452\":1}}],[\"组织数据的方式\",{\"1\":{\"849\":1,\"1254\":1}}],[\"组合函数\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"组合点数和花色\",{\"1\":{\"897\":1,\"1302\":1}}],[\"组合使用\",{\"1\":{\"440\":1}}],[\"组合数据访问层\",{\"1\":{\"326\":1}}],[\"组服务等\",{\"1\":{\"374\":1}}],[\"组队等功能\",{\"1\":{\"109\":1}}],[\"互联网协议地址\",{\"1\":{\"1428\":1}}],[\"互斥关系\",{\"0\":{\"712\":1,\"1117\":1}}],[\"互不影响\",{\"1\":{\"325\":1}}],[\"互动性更强的用户界面\",{\"1\":{\"57\":1}}],[\"职责单一\",{\"1\":{\"325\":1}}],[\"界面展示\",{\"1\":{\"325\":1}}],[\"占一位其值只有ture和false两个\",{\"1\":{\"646\":1,\"1051\":1}}],[\"占内存和磁盘\",{\"1\":{\"321\":1}}],[\"占位符的参数\",{\"1\":{\"240\":1}}],[\"占位符\",{\"1\":{\"233\":1}}],[\"占位符替代\",{\"1\":{\"233\":1}}],[\"阅读麻烦\",{\"1\":{\"321\":1}}],[\"书写麻烦\",{\"1\":{\"321\":1}}],[\"书中记述了有关对象的创建和使用的基本知识\",{\"1\":{\"42\":1}}],[\"又称为二叉排序树或者二叉搜索树\",{\"1\":{\"854\":1,\"1259\":1}}],[\"又不想储存\",{\"1\":{\"437\":1}}],[\"又或者一些软件项目中\",{\"1\":{\"374\":1}}],[\"又可以定义java代码\",{\"1\":{\"321\":1}}],[\"又带来一系列的重复消费\",{\"1\":{\"176\":1}}],[\"既可以遍历集合也可以遍历数组\",{\"1\":{\"845\":1,\"1250\":1}}],[\"既可以定义html标签\",{\"1\":{\"321\":1}}],[\"既然tomcat通过iso\",{\"1\":{\"309\":2}}],[\"之前使用匿名内部类方式来调用函数式接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"之前学习的字节流可以称为原始流\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"之一\",{\"1\":{\"337\":1}}],[\"之中\",{\"1\":{\"320\":1}}],[\"之后可以使用lambda表达式隐式的实现函数式接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"之后\",{\"1\":{\"309\":1}}],[\"范围是0\",{\"1\":{\"1434\":1}}],[\"范围为\",{\"1\":{\"1429\":1}}],[\"范围\",{\"1\":{\"318\":1,\"767\":1,\"819\":1,\"1172\":1,\"1224\":1}}],[\"范围查询的右边的列\",{\"1\":{\"150\":1}}],[\"范围查询右边的address的索引会失效\",{\"1\":{\"150\":1}}],[\"范围查询右边的列会索引失效\",{\"1\":{\"150\":1}}],[\"范围查询\",{\"1\":{\"142\":1}}],[\"概念\",{\"0\":{\"525\":1},\"1\":{\"317\":1,\"337\":1,\"526\":1}}],[\"概述\",{\"0\":{\"290\":1,\"723\":1,\"766\":1,\"788\":1,\"821\":1,\"940\":1,\"1128\":1,\"1171\":1,\"1193\":1,\"1226\":1,\"1345\":1}}],[\"浪费资源\",{\"1\":{\"316\":1}}],[\"工会\",{\"1\":{\"819\":1,\"1224\":1}}],[\"工厂模式\",{\"0\":{\"641\":1,\"1046\":1}}],[\"工厂只创建一次\",{\"1\":{\"316\":1}}],[\"工资\",{\"1\":{\"525\":1}}],[\"工人\",{\"1\":{\"381\":2}}],[\"工具类原理和延伸\",{\"0\":{\"679\":1,\"1084\":1}}],[\"工具类的案例\",{\"0\":{\"678\":1,\"1083\":1}}],[\"工具类\",{\"0\":{\"678\":1,\"1083\":1},\"1\":{\"97\":1,\"316\":1}}],[\"工具库\",{\"1\":{\"96\":1}}],[\"输出了\",{\"1\":{\"948\":1,\"1353\":1}}],[\"输出结果\",{\"1\":{\"930\":1,\"1335\":1}}],[\"输出student发现私有属性已经被修改\",{\"1\":{\"808\":1,\"1213\":1}}],[\"输出date3\",{\"1\":{\"776\":1,\"1181\":1}}],[\"输出\",{\"1\":{\"769\":1,\"897\":1,\"925\":1,\"1174\":1,\"1302\":1,\"1330\":1}}],[\"输出内容\",{\"1\":{\"743\":1,\"1148\":1}}],[\"输出的内容\",{\"1\":{\"457\":1}}],[\"输出的档案信息\",{\"1\":{\"437\":1}}],[\"输出重定向\",{\"1\":{\"424\":1}}],[\"输出重定向到\",{\"1\":{\"423\":1}}],[\"输出将附加到当前目录的\",{\"1\":{\"423\":1}}],[\"输出流\",{\"1\":{\"315\":1,\"1008\":1,\"1413\":1}}],[\"输出流不需要关闭\",{\"1\":{\"314\":1}}],[\"输入一个参数\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"输入的结尾\",{\"1\":{\"819\":2,\"1224\":2}}],[\"输入的开头\",{\"1\":{\"819\":1,\"1224\":1}}],[\"输入sz\",{\"1\":{\"488\":1}}],[\"输入字符\",{\"1\":{\"433\":1}}],[\"输入模式\",{\"0\":{\"433\":1},\"1\":{\"431\":1}}],[\"输入账户密码后\",{\"1\":{\"405\":1}}],[\"输入密码即可成功登陆\",{\"1\":{\"368\":1}}],[\"输入\",{\"1\":{\"354\":1}}],[\"输入流\",{\"1\":{\"315\":1,\"1008\":1,\"1413\":1}}],[\"输入输出流等基础技巧\",{\"1\":{\"58\":1}}],[\"输入输出流\",{\"0\":{\"53\":1}}],[\"ä¸\",{\"1\":{\"309\":2}}],[\"å¼\",{\"1\":{\"309\":2}}],[\"产生的对象\",{\"1\":{\"663\":1,\"1068\":1}}],[\"产生乱码\",{\"1\":{\"309\":2}}],[\"产生报告\",{\"1\":{\"254\":1}}],[\"乱码原因\",{\"1\":{\"309\":2}}],[\"值大于20\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"值不做要求\",{\"1\":{\"902\":1,\"903\":4,\"904\":1,\"906\":1,\"1307\":1,\"1308\":4,\"1309\":1,\"1311\":1}}],[\"值流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"值是确定的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"值传递\",{\"0\":{\"654\":1,\"1059\":1},\"1\":{\"654\":1,\"1059\":1}}],[\"值为3\",{\"1\":{\"652\":1,\"1057\":1}}],[\"值\",{\"1\":{\"308\":1}}],[\"值后\",{\"1\":{\"240\":1}}],[\"文本内容\",{\"1\":{\"995\":1,\"1400\":1}}],[\"文本\",{\"1\":{\"307\":2}}],[\"文件下载\",{\"1\":{\"1440\":1}}],[\"文件字符输入流\",{\"0\":{\"1004\":1,\"1409\":1}}],[\"文件字节输出流\",{\"0\":{\"997\":1,\"1402\":1}}],[\"文件字节输入流\",{\"0\":{\"993\":1,\"1398\":1}}],[\"文件拷贝\",{\"0\":{\"998\":1,\"1403\":1}}],[\"文件大小\",{\"1\":{\"996\":2,\"1401\":2}}],[\"文件搜索\",{\"0\":{\"980\":1,\"981\":1,\"1385\":1,\"1386\":1}}],[\"文件或文件夹\",{\"1\":{\"465\":1,\"466\":1}}],[\"文件路径\",{\"1\":{\"454\":2,\"455\":2}}],[\"文件名\",{\"1\":{\"446\":1}}],[\"文件名称\",{\"1\":{\"419\":2,\"447\":1,\"448\":1,\"455\":1}}],[\"文件不可写\",{\"1\":{\"423\":1}}],[\"文件中简单输出一个内容\",{\"1\":{\"486\":1}}],[\"文件中\",{\"1\":{\"423\":2}}],[\"文件中填写自动加载的配置类包路径\",{\"1\":{\"103\":1}}],[\"文件\",{\"1\":{\"419\":2,\"965\":1,\"981\":1,\"1370\":1,\"1386\":1}}],[\"文件的上传和下载\",{\"0\":{\"487\":1}}],[\"文件的查看\",{\"1\":{\"419\":1}}],[\"文件的创建\",{\"1\":{\"419\":1}}],[\"文件操作的奥秘\",{\"0\":{\"964\":1,\"1369\":1}}],[\"文件操作\",{\"0\":{\"419\":1},\"2\":{\"1016\":1,\"1421\":1}}],[\"文件夹链接到其他位置\",{\"1\":{\"475\":1}}],[\"文件夹所属的用户或root用户可以修改\",{\"1\":{\"465\":1}}],[\"文件夹的权限信息\",{\"1\":{\"465\":1}}],[\"文件夹的命令\",{\"1\":{\"449\":1}}],[\"文件夹\",{\"1\":{\"449\":1,\"450\":1,\"965\":2,\"1370\":2}}],[\"文件夹中创建文件\",{\"1\":{\"486\":1}}],[\"文件夹中\",{\"1\":{\"386\":1}}],[\"文件夹起名为\",{\"1\":{\"365\":1}}],[\"文件进行调试\",{\"1\":{\"321\":1}}],[\"文件占内存\",{\"1\":{\"321\":1}}],[\"文件占磁盘\",{\"1\":{\"321\":1}}],[\"文件读写\",{\"1\":{\"220\":1}}],[\"扩展性较差\",{\"1\":{\"923\":1,\"1328\":1}}],[\"扩展性强\",{\"1\":{\"919\":1,\"922\":1,\"923\":2,\"1324\":1,\"1327\":1,\"1328\":2}}],[\"扩展\",{\"1\":{\"350\":1,\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"扩展名匹配\",{\"1\":{\"302\":2}}],[\"扩容完毕之后再进行size++和元素的添加\",{\"1\":{\"831\":2,\"1236\":2}}],[\"扩容完毕之后再进行元素的添加\",{\"1\":{\"183\":2}}],[\"扩容时重新计算索引效率更高\",{\"1\":{\"193\":1}}],[\"扩容之后\",{\"1\":{\"191\":1}}],[\"目标\",{\"1\":{\"449\":1,\"763\":1,\"802\":1,\"887\":1,\"1018\":1,\"1168\":1,\"1207\":1,\"1292\":1,\"1461\":1,\"1464\":1,\"1465\":1,\"1468\":1}}],[\"目录结构介绍\",{\"0\":{\"426\":1}}],[\"目录拷贝的目标位置\",{\"1\":{\"418\":1}}],[\"目录的新位置\",{\"1\":{\"418\":1}}],[\"目录的操作命令\",{\"0\":{\"418\":1}}],[\"目录名称\",{\"1\":{\"418\":4}}],[\"目录\",{\"1\":{\"417\":1,\"418\":2}}],[\"目录切换\",{\"0\":{\"417\":1}}],[\"目录匹配\",{\"1\":{\"302\":2}}],[\"目前由其成立的公司\",{\"1\":{\"396\":1}}],[\"目的地ip和端口封装成数据包\",{\"1\":{\"1443\":1}}],[\"目的地数组\",{\"1\":{\"769\":1,\"1174\":1}}],[\"目的是为了弥补timer的缺陷\",{\"1\":{\"955\":1,\"1360\":1}}],[\"目的\",{\"1\":{\"265\":1,\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"思考\",{\"0\":{\"300\":1},\"1\":{\"308\":1,\"679\":1,\"1084\":1}}],[\"思维变得更加灵活\",{\"1\":{\"47\":1}}],[\"很突出\",{\"1\":{\"817\":2,\"1222\":2}}],[\"很快乐的啦\",{\"1\":{\"435\":1}}],[\"很多服务中的搜索功能\",{\"1\":{\"361\":1}}],[\"很少使用\",{\"1\":{\"298\":1}}],[\"很适用于缓存\",{\"1\":{\"110\":1}}],[\"责任在服务端\",{\"1\":{\"288\":1}}],[\"责任在客户端\",{\"1\":{\"288\":1}}],[\"速度快\",{\"1\":{\"286\":1,\"1443\":1}}],[\"速度很快\",{\"1\":{\"234\":1}}],[\"响应json数据\",{\"0\":{\"566\":1}}],[\"响应中\",{\"1\":{\"288\":1}}],[\"响应状态码\",{\"1\":{\"288\":1,\"571\":1}}],[\"响应体\",{\"1\":{\"288\":1,\"312\":1}}],[\"响应头\",{\"1\":{\"288\":1,\"312\":1,\"313\":1,\"330\":1}}],[\"响应数据\",{\"1\":{\"326\":1}}],[\"响应数据分为三部分\",{\"1\":{\"312\":1}}],[\"响应数据分为3部分\",{\"1\":{\"288\":1}}],[\"响应数据的第一行\",{\"1\":{\"288\":1}}],[\"响应行\",{\"1\":{\"288\":1,\"312\":1}}],[\"响应都是独立的\",{\"1\":{\"286\":1}}],[\"响应模型的\",{\"1\":{\"286\":1}}],[\"响应客户端\",{\"1\":{\"167\":1}}],[\"键找值\",{\"0\":{\"906\":1,\"1311\":1}}],[\"键无序\",{\"1\":{\"903\":1,\"904\":1,\"906\":1,\"1308\":1,\"1309\":1,\"1311\":1}}],[\"键值对集合\",{\"1\":{\"899\":1,\"1304\":1}}],[\"键值对元素\",{\"1\":{\"899\":1,\"1304\":1}}],[\"键值对\",{\"0\":{\"907\":1,\"1312\":1},\"1\":{\"835\":1,\"1240\":1}}],[\"键值对的形式存储数据\",{\"1\":{\"111\":1}}],[\"键流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"键\",{\"1\":{\"308\":1}}],[\"键名\",{\"1\":{\"281\":1}}],[\"元素按照键是排序的\",{\"1\":{\"903\":1,\"1308\":1}}],[\"元素按照键是有序的\",{\"1\":{\"903\":1,\"1308\":1}}],[\"元素按照键是无序的\",{\"1\":{\"903\":1,\"1308\":1}}],[\"元素3\",{\"1\":{\"900\":1,\"1305\":1}}],[\"元素2\",{\"1\":{\"900\":1,\"1305\":1}}],[\"元素1\",{\"1\":{\"900\":1,\"1305\":1}}],[\"元素内容\",{\"1\":{\"893\":1,\"1298\":1}}],[\"元素数据类型\",{\"1\":{\"845\":1,\"1250\":1}}],[\"元素搜索🔍\",{\"1\":{\"751\":1,\"1156\":1}}],[\"元素个数\",{\"1\":{\"750\":1,\"1155\":1}}],[\"元素会动态地在行首插入\",{\"1\":{\"277\":1}}],[\"元素也会将它们去除\",{\"1\":{\"273\":1}}],[\"元素只会在子元素返回任何内容的情况下才插入\",{\"1\":{\"273\":1}}],[\"若还是小于最小需要容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"若为\",{\"1\":{\"437\":1}}],[\"若为false\",{\"1\":{\"389\":1}}],[\"若曾修改过档案\",{\"1\":{\"437\":1}}],[\"若文件属性为\",{\"1\":{\"437\":1}}],[\"若想要编辑文本\",{\"1\":{\"432\":1}}],[\"若子句的开头为\",{\"1\":{\"273\":1}}],[\"若遇到哈希冲突\",{\"1\":{\"189\":1}}],[\"传输前\",{\"1\":{\"1439\":1}}],[\"传输控制协议\",{\"1\":{\"1438\":1}}],[\"传输层的2个常见协议\",{\"0\":{\"1438\":1}}],[\"传输参数非常灵活\",{\"1\":{\"893\":1,\"1298\":1}}],[\"传入一个消费方法\",{\"1\":{\"1027\":2,\"1477\":2}}],[\"传入一个减法并打印结果\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"传入一个加法并打印结果\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"传入一个指定泛型的参数\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"传递的是地址值\",{\"1\":{\"654\":1,\"1059\":1}}],[\"传递的是num的值\",{\"1\":{\"654\":1,\"1059\":1}}],[\"传送到\",{\"1\":{\"309\":2}}],[\"传到mapper的映射的xml\",{\"1\":{\"272\":1,\"281\":1}}],[\"传给\",{\"1\":{\"166\":1}}],[\"散装参数\",{\"1\":{\"272\":1,\"281\":2}}],[\"特点\",{\"0\":{\"738\":1,\"1143\":1},\"1\":{\"682\":2,\"852\":1,\"1000\":1,\"1087\":2,\"1257\":1,\"1405\":1}}],[\"特点是\",{\"1\":{\"145\":1}}],[\"特点是索引必须有对应的整行数据并且只有一个\",{\"1\":{\"145\":1}}],[\"特征的含义\",{\"0\":{\"669\":1,\"1074\":1}}],[\"特殊ip\",{\"0\":{\"1431\":1}}],[\"特殊构造\",{\"1\":{\"819\":1,\"1224\":1}}],[\"特殊路径符\",{\"0\":{\"444\":1}}],[\"特殊字符处理\",{\"1\":{\"271\":2}}],[\"特别注意\",{\"1\":{\"437\":1}}],[\"特别注意的是\",{\"1\":{\"436\":1}}],[\"特别是复杂的页面\",{\"1\":{\"321\":1}}],[\"拼接\",{\"1\":{\"764\":1,\"1169\":1}}],[\"拼接字符串性能好\",{\"1\":{\"764\":1,\"1169\":1}}],[\"拼接字符串性能差\",{\"1\":{\"764\":1,\"1169\":1}}],[\"拼sql\",{\"1\":{\"271\":2}}],[\"拼写检查等场景\",{\"1\":{\"118\":1}}],[\"映射的文件类型\",{\"1\":{\"270\":1}}],[\"起步依赖\",{\"0\":{\"618\":1}}],[\"起始索引\",{\"1\":{\"523\":3,\"769\":2,\"1174\":2}}],[\"起始路径\",{\"1\":{\"453\":2}}],[\"起始光标在内容的上一行\",{\"1\":{\"240\":1}}],[\"起别名\",{\"1\":{\"267\":1,\"268\":1,\"270\":1,\"517\":1}}],[\"细节\",{\"1\":{\"266\":1,\"267\":1,\"314\":1}}],[\"附上一张编译打包后的图片注意文件位置和原本的位置\",{\"1\":{\"266\":1}}],[\"步骤\",{\"0\":{\"266\":1},\"1\":{\"325\":1}}],[\"名称\",{\"1\":{\"662\":1,\"707\":1,\"762\":1,\"819\":1,\"1067\":1,\"1112\":1,\"1167\":1,\"1224\":1,\"1433\":1}}],[\"名称一致\",{\"1\":{\"281\":1}}],[\"名称空间\",{\"1\":{\"264\":1,\"270\":1}}],[\"名叫java大师\",{\"1\":{\"29\":1}}],[\"q开头的结束引用\",{\"1\":{\"819\":1,\"1224\":1}}],[\"qq\",{\"1\":{\"818\":9,\"1223\":9}}],[\"q\",{\"1\":{\"434\":1,\"437\":3,\"496\":1,\"819\":1,\"831\":1,\"897\":2,\"1224\":1,\"1236\":1,\"1302\":2}}],[\"quickstart<\",{\"1\":{\"557\":1}}],[\"quit\",{\"1\":{\"402\":1}}],[\"quorum<\",{\"1\":{\"389\":1}}],[\"quorumpeermain进程\",{\"1\":{\"381\":1}}],[\"quorumpeermain\",{\"1\":{\"375\":1,\"382\":3}}],[\"queued\",{\"1\":{\"948\":1,\"1353\":1}}],[\"queue\",{\"1\":{\"387\":1,\"865\":10,\"1270\":10}}],[\"querystring\",{\"1\":{\"307\":2}}],[\"query\",{\"1\":{\"141\":2,\"629\":4,\"1034\":4}}],[\"querywrapper\",{\"0\":{\"99\":1},\"1\":{\"99\":2}}],[\"qos\",{\"1\":{\"264\":3}}],[\"逻辑取反\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"逻辑运算符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"逻辑删除\",{\"0\":{\"552\":1}}],[\"逻辑分析\",{\"1\":{\"528\":1}}],[\"逻辑处理\",{\"1\":{\"262\":1}}],[\"逻辑过期法\",{\"1\":{\"125\":1}}],[\"页面内的java代码\",{\"1\":{\"322\":1}}],[\"页面展示\",{\"1\":{\"262\":1}}],[\"页面加载过慢\",{\"1\":{\"141\":1}}],[\"持久化存储\",{\"1\":{\"331\":1}}],[\"持久层\",{\"0\":{\"262\":1},\"1\":{\"262\":2}}],[\"持久性\",{\"1\":{\"151\":2,\"536\":1}}],[\"例举\",{\"1\":{\"749\":1,\"1154\":1}}],[\"例子\",{\"1\":{\"259\":1}}],[\"例如打印\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"例如打印整数97写出去就是97\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"例如一个16gb的内存去读一个100gb的文件\",{\"1\":{\"996\":1,\"1401\":1}}],[\"例如第一枪可以打多少血量\",{\"1\":{\"850\":1,\"1255\":1}}],[\"例如integer\",{\"1\":{\"840\":1,\"1245\":1}}],[\"例如student类获取的就是student\",{\"1\":{\"816\":1,\"1221\":1}}],[\"例如任务管理器\",{\"1\":{\"684\":1,\"1089\":1}}],[\"例如在线人数\",{\"1\":{\"675\":1,\"1080\":1}}],[\"例如是这样的代码\",{\"1\":{\"653\":1,\"1058\":1}}],[\"例如向下删除\",{\"1\":{\"435\":1}}],[\"例如向下移动\",{\"1\":{\"435\":1}}],[\"例如要在档案内搜寻\",{\"1\":{\"435\":1}}],[\"例如u盘\",{\"1\":{\"428\":1}}],[\"例如我们断开ssh连接都不会影响他的运行\",{\"1\":{\"424\":1}}],[\"例如小于号<\",{\"1\":{\"271\":2}}],[\"例如编译\",{\"1\":{\"254\":1}}],[\"例如mysql驱动\",{\"1\":{\"225\":1}}],[\"例如获取等待状态\",{\"1\":{\"215\":1}}],[\"例如性别和城市就不适合作为索引\",{\"1\":{\"149\":1}}],[\"例如\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"148\":1,\"216\":1,\"233\":1,\"256\":1,\"265\":1,\"326\":1,\"413\":1,\"435\":6,\"437\":1,\"453\":1,\"456\":1,\"648\":1,\"659\":1,\"726\":1,\"730\":1,\"823\":1,\"926\":1,\"1022\":1,\"1053\":1,\"1064\":1,\"1131\":1,\"1135\":1,\"1228\":1,\"1331\":1,\"1440\":1,\"1454\":1,\"1472\":1}}],[\"标记该接口必须满足函数式接口\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"标点符号\",{\"1\":{\"819\":1,\"1224\":1}}],[\"标签字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"标签中\",{\"1\":{\"258\":1}}],[\"标识正在计算机设备上运行的程序\",{\"1\":{\"1434\":1}}],[\"标识符\",{\"0\":{\"643\":1,\"1048\":1}}],[\"标识这个输出位置将会被本日志级别控制\",{\"1\":{\"264\":1}}],[\"标准javabean\",{\"0\":{\"668\":1,\"1073\":1}}],[\"标准输入\",{\"1\":{\"424\":1}}],[\"标准接口\",{\"1\":{\"237\":1}}],[\"安徽大学\",{\"1\":{\"704\":1,\"1109\":1}}],[\"安全问题\",{\"1\":{\"928\":1,\"1333\":1}}],[\"安全域管理和tomcat阀等\",{\"1\":{\"351\":1}}],[\"安全性\",{\"1\":{\"336\":1}}],[\"安全性等\",{\"1\":{\"108\":1}}],[\"安全\",{\"1\":{\"286\":1}}],[\"安装的方式\",{\"1\":{\"412\":1}}],[\"安装前总结预览\",{\"1\":{\"405\":1}}],[\"安装前准备\",{\"0\":{\"398\":1}}],[\"安装步骤\",{\"1\":{\"398\":1}}],[\"安装zabbixserver需要先安装好mysql数据库\",{\"1\":{\"398\":1}}],[\"安装zabbix\",{\"0\":{\"399\":1,\"400\":1,\"401\":1},\"1\":{\"397\":1}}],[\"安装整体步骤\",{\"1\":{\"397\":1}}],[\"安装部署环节中所构建的hadoop集群\",{\"1\":{\"390\":1,\"393\":1}}],[\"安装并部署了jdk和zookeeper服务\",{\"1\":{\"377\":1}}],[\"安装集群化软件\",{\"1\":{\"365\":1}}],[\"安装es\",{\"1\":{\"362\":1}}],[\"安装redis\",{\"1\":{\"360\":1}}],[\"安装rabbitmq\",{\"1\":{\"358\":1}}],[\"安装yum依赖程序\",{\"1\":{\"356\":1}}],[\"安装nginx的操作需要root身份\",{\"1\":{\"356\":1}}],[\"安装jdk环境\",{\"0\":{\"353\":1},\"1\":{\"352\":1}}],[\"安装完成后\",{\"1\":{\"346\":1,\"349\":1}}],[\"安装mysql8\",{\"1\":{\"349\":1}}],[\"安装mysql\",{\"1\":{\"346\":1,\"397\":1,\"398\":1}}],[\"安装操作需要root权限\",{\"1\":{\"345\":1,\"348\":1}}],[\"安装等\",{\"1\":{\"254\":1}}],[\"安装\",{\"0\":{\"346\":1,\"349\":1,\"352\":1,\"356\":1,\"358\":1,\"360\":1,\"362\":1,\"375\":1,\"377\":1,\"383\":1,\"389\":1,\"392\":1,\"395\":1,\"397\":1,\"407\":1,\"409\":1},\"1\":{\"253\":1,\"473\":1}}],[\"阿里云私服镜像\",{\"1\":{\"251\":1}}],[\"$1\",{\"1\":{\"495\":1}}],[\"$body\",{\"1\":{\"495\":1}}],[\"$basearch\",{\"1\":{\"356\":2,\"358\":2}}],[\"$time\",{\"1\":{\"495\":1}}],[\"$request\",{\"1\":{\"495\":1}}],[\"$remote\",{\"1\":{\"495\":2}}],[\"$releasever\",{\"1\":{\"356\":2}}],[\"$符号\",{\"0\":{\"485\":1}}],[\"$status\",{\"1\":{\"495\":1}}],[\"$s\",{\"1\":{\"435\":2}}],[\"$http\",{\"1\":{\"495\":3}}],[\"$home\",{\"1\":{\"423\":1}}],[\"$hadoop\",{\"1\":{\"386\":4}}],[\"$working\",{\"1\":{\"412\":2}}],[\"$path\",{\"1\":{\"389\":1}}],[\"$pwd\",{\"1\":{\"373\":1,\"377\":1,\"392\":2,\"485\":1}}],[\"$java\",{\"1\":{\"353\":1}}],[\"$\",{\"1\":{\"251\":1,\"271\":2,\"322\":3,\"323\":3,\"398\":1,\"413\":1,\"435\":1,\"485\":1,\"494\":3,\"496\":2,\"570\":4,\"615\":4,\"819\":1,\"1224\":1}}],[\"||\",{\"1\":{\"638\":1,\"756\":1,\"758\":1,\"818\":3,\"888\":1,\"891\":1,\"896\":1,\"1043\":1,\"1161\":1,\"1163\":1,\"1223\":3,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"|disable\",{\"1\":{\"474\":1}}],[\"|\",{\"0\":{\"456\":1},\"1\":{\"251\":3,\"320\":2,\"347\":1,\"350\":1,\"354\":1,\"362\":4,\"402\":1,\"456\":2,\"473\":2,\"474\":3,\"496\":12,\"949\":1,\"1354\":1}}],[\"<25\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"<friend>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<foreach\",{\"1\":{\"280\":1}}],[\"<=x\",{\"1\":{\"819\":1,\"1224\":1}}],[\"<=>\",{\"1\":{\"819\":1,\"1224\":1}}],[\"<=\",{\"1\":{\"794\":1,\"819\":6,\"921\":1,\"1199\":1,\"1224\":6,\"1326\":1}}],[\"<==\",{\"1\":{\"280\":1}}],[\"<80\",{\"1\":{\"751\":2,\"1156\":2}}],[\"<list>\",{\"1\":{\"601\":1}}],[\"<logger\",{\"1\":{\"264\":1}}],[\"<localrepository>\",{\"1\":{\"251\":2}}],[\"<keyname>\",{\"1\":{\"413\":1}}],[\"<value>boy<\",{\"1\":{\"601\":1}}],[\"<value>world<\",{\"1\":{\"601\":1}}],[\"<value>i11<\",{\"1\":{\"601\":1}}],[\"<value>itit<\",{\"1\":{\"601\":2}}],[\"<value>300<\",{\"1\":{\"601\":1}}],[\"<value>200<\",{\"1\":{\"601\":1}}],[\"<value>268435456<\",{\"1\":{\"386\":1}}],[\"<value>false<\",{\"1\":{\"389\":1}}],[\"<value>mapreduce\",{\"1\":{\"386\":1}}],[\"<value>org\",{\"1\":{\"386\":1}}],[\"<value>true<\",{\"1\":{\"386\":1,\"389\":1}}],[\"<value>hello<\",{\"1\":{\"601\":2}}],[\"<value>http\",{\"1\":{\"386\":1}}],[\"<value>hadoop\",{\"1\":{\"386\":3}}],[\"<value>hdfs\",{\"1\":{\"386\":1,\"389\":1}}],[\"<value>yarn<\",{\"1\":{\"386\":1}}],[\"<value>10800<\",{\"1\":{\"386\":1}}],[\"<value>100<\",{\"1\":{\"386\":1,\"601\":1}}],[\"<value>131072<\",{\"1\":{\"386\":1}}],[\"<value>node1<\",{\"1\":{\"386\":1}}],[\"<value>node1\",{\"1\":{\"386\":4,\"389\":1}}],[\"<value>\",{\"1\":{\"386\":7,\"389\":1}}],[\"<value>700<\",{\"1\":{\"386\":1}}],[\"<version>5\",{\"1\":{\"557\":1,\"570\":3,\"615\":3}}],[\"<version>2\",{\"1\":{\"293\":1,\"315\":1,\"318\":1,\"557\":1,\"566\":1,\"570\":2}}],[\"<version>3\",{\"1\":{\"264\":1,\"544\":1,\"557\":1,\"570\":2,\"615\":1}}],[\"<version>4\",{\"1\":{\"258\":1,\"259\":1,\"264\":1,\"295\":1,\"570\":1,\"615\":1}}],[\"<version>8\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<version>1\",{\"1\":{\"258\":2,\"264\":5,\"323\":2,\"557\":1,\"570\":4,\"615\":5}}],[\"<name>小李<\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<name>小王<\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<name>x\",{\"1\":{\"819\":1,\"1224\":1}}],[\"<name>hbase\",{\"1\":{\"389\":5}}],[\"<name>yarn\",{\"1\":{\"386\":11}}],[\"<name>mapreduce\",{\"1\":{\"386\":7}}],[\"<name>dfs\",{\"1\":{\"386\":6}}],[\"<name>io\",{\"1\":{\"386\":1}}],[\"<name>fs\",{\"1\":{\"386\":1}}],[\"<name>nexus\",{\"1\":{\"251\":1}}],[\"<bookname>西游记<\",{\"1\":{\"829\":3,\"1234\":3}}],[\"<book>\",{\"1\":{\"829\":3,\"1234\":3}}],[\"<books>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<body>\",{\"1\":{\"318\":1,\"320\":1}}],[\"<bean\",{\"1\":{\"601\":1}}],[\"<beans\",{\"1\":{\"601\":1}}],[\"<build>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<h1>禁用<\",{\"1\":{\"323\":1}}],[\"<h1>启用<\",{\"1\":{\"323\":1}}],[\"<h1>hello我的<\",{\"1\":{\"1466\":2}}],[\"<h1>hello\",{\"1\":{\"318\":1,\"320\":1}}],[\"<h1>你好<h1>\",{\"1\":{\"314\":1}}],[\"<head>\",{\"1\":{\"318\":1,\"320\":1}}],[\"<html>\",{\"1\":{\"318\":1,\"320\":1}}],[\"<html><header><header\",{\"1\":{\"312\":1}}],[\"<update\",{\"1\":{\"277\":1}}],[\"<url>http\",{\"1\":{\"251\":1}}],[\"<otherwise><\",{\"1\":{\"274\":1}}],[\"<when\",{\"1\":{\"274\":6}}],[\"<where><\",{\"1\":{\"274\":1}}],[\"<where>\",{\"1\":{\"273\":1}}],[\"<c\",{\"1\":{\"323\":3}}],[\"<choose>\",{\"1\":{\"274\":1}}],[\"<choose><\",{\"1\":{\"274\":1}}],[\"<configuration>\",{\"1\":{\"264\":2,\"267\":1,\"293\":1,\"386\":4,\"389\":1,\"557\":1,\"570\":1}}],[\"<result\",{\"1\":{\"270\":2}}],[\"<resultmap\",{\"1\":{\"270\":1}}],[\"<root\",{\"1\":{\"264\":1}}],[\"<root>可以包含零个或多个<appender\",{\"1\":{\"264\":1}}],[\"<insert\",{\"1\":{\"275\":1,\"276\":1}}],[\"<include\",{\"1\":{\"270\":1}}],[\"<if\",{\"1\":{\"273\":6,\"277\":5}}],[\"<id>nexus\",{\"1\":{\"251\":1}}],[\"<t>\",{\"1\":{\"629\":1,\"872\":1,\"873\":2,\"1034\":1,\"1277\":1,\"1278\":2}}],[\"<td>$\",{\"1\":{\"323\":4}}],[\"<tr\",{\"1\":{\"323\":1}}],[\"<transactionmanager\",{\"1\":{\"264\":1,\"267\":2}}],[\"<title>title<\",{\"1\":{\"318\":1,\"320\":1}}],[\"<typealiases>\",{\"1\":{\"267\":1}}],[\"<student>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<scope>provided<\",{\"1\":{\"295\":1,\"318\":1,\"557\":1,\"570\":1}}],[\"<scope>test<\",{\"1\":{\"258\":1,\"259\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<sectionname>\",{\"1\":{\"413\":1}}],[\"<session\",{\"1\":{\"335\":2}}],[\"<set>\",{\"1\":{\"277\":1,\"601\":1}}],[\"<select\",{\"1\":{\"264\":1,\"270\":3,\"271\":1,\"272\":1,\"273\":3,\"274\":2}}],[\"<sql>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<sql\",{\"1\":{\"270\":1}}],[\"<description>shuffle\",{\"1\":{\"386\":1}}],[\"<description>default\",{\"1\":{\"386\":1}}],[\"<description>comma\",{\"1\":{\"386\":2}}],[\"<description>configuration\",{\"1\":{\"386\":2}}],[\"<description>proxy\",{\"1\":{\"386\":1}}],[\"<description>path\",{\"1\":{\"386\":1}}],[\"<description>list\",{\"1\":{\"386\":1}}],[\"<description><\",{\"1\":{\"386\":12}}],[\"<delete\",{\"1\":{\"279\":1,\"280\":1}}],[\"<dependency>\",{\"1\":{\"258\":3,\"259\":1,\"264\":7,\"295\":1,\"315\":1,\"318\":1,\"323\":2,\"494\":1,\"544\":1,\"557\":2,\"566\":1,\"570\":11,\"615\":10}}],[\"<dependencies>\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"<datasource\",{\"1\":{\"264\":1,\"267\":2}}],[\"<entry\",{\"1\":{\"601\":4}}],[\"<environment\",{\"1\":{\"264\":1,\"267\":2}}],[\"<environments\",{\"1\":{\"264\":1,\"267\":1}}],[\"<encoder>\",{\"1\":{\"264\":1}}],[\"<price>100<\",{\"1\":{\"829\":3,\"1234\":3}}],[\"<prop\",{\"1\":{\"601\":4}}],[\"<props>\",{\"1\":{\"601\":1}}],[\"<properties>\",{\"1\":{\"557\":1,\"615\":1}}],[\"<property>\",{\"1\":{\"386\":26,\"389\":5}}],[\"<property\",{\"1\":{\"264\":4,\"267\":8,\"601\":5}}],[\"<project\",{\"1\":{\"258\":1,\"264\":1,\"557\":2,\"570\":1,\"615\":1}}],[\"<port>80<\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<plugin>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<plugins>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<p>\",{\"1\":{\"281\":3,\"309\":2}}],[\"<packaging>war<\",{\"1\":{\"557\":1,\"570\":1}}],[\"<package\",{\"1\":{\"267\":2}}],[\"<path>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<pattern>\",{\"1\":{\"264\":1}}],[\"<author>吴承恩<\",{\"1\":{\"829\":3,\"1234\":3}}],[\"<age>22<\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<age>20<\",{\"1\":{\"829\":1,\"1234\":1}}],[\"<array>\",{\"1\":{\"601\":1}}],[\"<artifactid>aspectjweaver<\",{\"1\":{\"615\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"570\":1,\"615\":1}}],[\"<artifactid>logback\",{\"1\":{\"264\":2}}],[\"<artifactid>flyway\",{\"1\":{\"494\":1}}],[\"<artifactid>spring\",{\"1\":{\"557\":1,\"570\":3,\"615\":4}}],[\"<artifactid>springmvc\",{\"1\":{\"557\":1,\"570\":1}}],[\"<artifactid>standard<\",{\"1\":{\"323\":1}}],[\"<artifactid>slf4j\",{\"1\":{\"264\":1}}],[\"<artifactid>commons\",{\"1\":{\"315\":1}}],[\"<artifactid>jackson\",{\"1\":{\"566\":1,\"570\":1}}],[\"<artifactid>javax\",{\"1\":{\"295\":1,\"557\":1,\"570\":1}}],[\"<artifactid>jstl<\",{\"1\":{\"323\":1}}],[\"<artifactid>jsp\",{\"1\":{\"318\":1}}],[\"<artifactid>junit<\",{\"1\":{\"258\":1,\"259\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<artifactid>tomcat7\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"<artifactid>druid<\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"544\":1,\"570\":1,\"615\":1}}],[\"<artifactid>mybatis<\",{\"1\":{\"264\":1,\"570\":1,\"615\":1}}],[\"<artifactid>mysql\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<artifactid>maven\",{\"1\":{\"258\":1,\"264\":1}}],[\"<appender\",{\"1\":{\"264\":3}}],[\"<groupid>taglibs<\",{\"1\":{\"323\":1}}],[\"<groupid>javax\",{\"1\":{\"295\":1,\"318\":1,\"323\":1,\"557\":1,\"570\":1}}],[\"<groupid>junit<\",{\"1\":{\"258\":1,\"259\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<groupid>ch\",{\"1\":{\"264\":2}}],[\"<groupid>commons\",{\"1\":{\"315\":1}}],[\"<groupid>com\",{\"1\":{\"258\":2,\"264\":2,\"544\":1,\"557\":1,\"566\":1,\"570\":3,\"615\":1}}],[\"<groupid>org\",{\"1\":{\"264\":2,\"293\":1,\"494\":1,\"557\":2,\"570\":7,\"615\":8}}],[\"<groupid>mysql<\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"<map>\",{\"1\":{\"601\":1}}],[\"<mapper\",{\"1\":{\"264\":2,\"267\":1,\"270\":1}}],[\"<mappers>\",{\"1\":{\"264\":1,\"267\":1}}],[\"<maven\",{\"1\":{\"557\":2,\"615\":2}}],[\"<modelversion>4\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"<mirrorof>central<\",{\"1\":{\"251\":1}}],[\"<mirror>\",{\"1\":{\"251\":1}}],[\"<\",{\"1\":{\"251\":2,\"258\":13,\"259\":3,\"264\":42,\"267\":21,\"270\":28,\"271\":6,\"272\":1,\"273\":11,\"274\":14,\"275\":2,\"276\":1,\"277\":7,\"279\":2,\"280\":4,\"293\":6,\"295\":2,\"315\":2,\"318\":7,\"320\":14,\"323\":15,\"335\":2,\"386\":52,\"389\":11,\"494\":2,\"533\":1,\"544\":1,\"557\":13,\"566\":1,\"570\":19,\"601\":13,\"615\":15,\"629\":1,\"638\":1,\"678\":1,\"679\":1,\"743\":2,\"750\":1,\"751\":2,\"769\":1,\"793\":1,\"794\":3,\"818\":3,\"819\":1,\"829\":19,\"831\":1,\"868\":1,\"870\":1,\"872\":1,\"895\":3,\"896\":2,\"897\":1,\"908\":2,\"914\":2,\"918\":2,\"920\":4,\"924\":2,\"925\":1,\"948\":2,\"1034\":1,\"1043\":1,\"1083\":1,\"1084\":1,\"1148\":2,\"1155\":1,\"1156\":2,\"1174\":1,\"1198\":1,\"1199\":3,\"1223\":3,\"1224\":1,\"1234\":19,\"1236\":1,\"1273\":1,\"1275\":1,\"1277\":1,\"1300\":3,\"1301\":2,\"1302\":1,\"1313\":2,\"1319\":2,\"1323\":2,\"1325\":4,\"1329\":2,\"1330\":1,\"1353\":2}}],[\"远程目标路径\",{\"1\":{\"373\":2}}],[\"远程的登陆到其它的主机上\",{\"1\":{\"368\":1}}],[\"远程仓库\",{\"1\":{\"250\":1}}],[\"远程过程调用\",{\"1\":{\"106\":1}}],[\"地址不一样\",{\"1\":{\"743\":1,\"1148\":1}}],[\"地址为\",{\"1\":{\"654\":4,\"1059\":4}}],[\"地址值不能改变\",{\"1\":{\"703\":1,\"1108\":1}}],[\"地址值\",{\"1\":{\"654\":2,\"1059\":2}}],[\"地址一样\",{\"1\":{\"648\":1,\"1053\":1}}],[\"地址\",{\"1\":{\"250\":1,\"1432\":1}}],[\"官网教程\",{\"1\":{\"553\":1}}],[\"官网直接复制\",{\"1\":{\"264\":1}}],[\"官网\",{\"1\":{\"249\":1,\"261\":1,\"290\":1,\"1013\":1,\"1418\":1}}],[\"官方默认按照大小进行升序排序\",{\"1\":{\"891\":1,\"1296\":1}}],[\"官方进行字符串比较的时候没有用对象自己的equals方法\",{\"1\":{\"758\":1,\"1163\":1}}],[\"官方文档\",{\"1\":{\"547\":1}}],[\"官方\",{\"1\":{\"237\":1}}],[\"插件\",{\"1\":{\"248\":1}}],[\"插入数据\",{\"1\":{\"389\":1,\"861\":1,\"1266\":1}}],[\"插入成功后\",{\"1\":{\"190\":1}}],[\"插入和删除元素的话\",{\"1\":{\"187\":2}}],[\"插入和删除是否受元素位置的影响\",{\"1\":{\"187\":1}}],[\"打乱list集合元素的顺序\",{\"1\":{\"895\":1,\"1300\":1}}],[\"打篮球\",{\"1\":{\"664\":1,\"1069\":1}}],[\"打开权限\",{\"1\":{\"812\":1,\"1217\":1}}],[\"打开属性的私有权限\",{\"1\":{\"808\":1,\"1213\":1}}],[\"打开私有权限\",{\"1\":{\"808\":1,\"1213\":1}}],[\"打开\",{\"1\":{\"405\":1}}],[\"打开官网下载页面\",{\"1\":{\"399\":1}}],[\"打开spark监控页面\",{\"1\":{\"392\":1}}],[\"打开一个终端页面\",{\"1\":{\"378\":1}}],[\"打开浏览器\",{\"1\":{\"354\":1}}],[\"打开maven文件夹\",{\"1\":{\"251\":1}}],[\"打印消费方法处理后的lisilist\",{\"1\":{\"1027\":2,\"1477\":2}}],[\"打印\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印功能与printstream的使用没有区别\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印任意类型的数据出去\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印boolean的true\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"打印流直接通向文件路径\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印流直接通向文件对象\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印流直接通向字节输出流管道\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"打印流一般是指\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"打印流可以实现方便\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"打印流\",{\"0\":{\"1010\":1,\"1415\":1}}],[\"打印数组内容\",{\"1\":{\"793\":1,\"1198\":1}}],[\"打印地址\",{\"1\":{\"793\":1,\"1198\":1}}],[\"打印出的是内容\",{\"1\":{\"747\":1,\"1152\":1}}],[\"打印输出\",{\"1\":{\"747\":1,\"1152\":1}}],[\"打印users\",{\"1\":{\"264\":1}}],[\"打印一下连接对象检查是否连接成功\",{\"1\":{\"240\":1}}],[\"打包压缩后的文件名\",{\"1\":{\"420\":1}}],[\"打包\",{\"1\":{\"248\":1,\"253\":1,\"254\":1}}],[\"测试此抽象路径表示的是file是否存在\",{\"1\":{\"966\":1,\"1371\":1}}],[\"测试此抽象路径表示的是file是否问文件\",{\"1\":{\"966\":1,\"1371\":1}}],[\"测试此抽象路径表示的是file是否问文件夹\",{\"1\":{\"966\":1,\"1371\":1}}],[\"测试电脑执行十万次循环所需要的时间\",{\"1\":{\"769\":1,\"1174\":1}}],[\"测试类\",{\"1\":{\"678\":1,\"1083\":1}}],[\"测试在zabbix\",{\"1\":{\"402\":1}}],[\"测试kafka能否正常使用\",{\"0\":{\"378\":1}}],[\"测试等各类岗位\",{\"1\":{\"344\":1}}],[\"测试classpath\",{\"1\":{\"259\":1}}],[\"测试环境的数据库\",{\"1\":{\"267\":1}}],[\"测试环境\",{\"1\":{\"259\":1,\"620\":1}}],[\"测试\",{\"1\":{\"248\":1,\"253\":1,\"254\":1,\"362\":1}}],[\"测试数据11111111\",{\"1\":{\"277\":1}}],[\"测试数据\",{\"1\":{\"245\":1,\"275\":3,\"277\":2}}],[\"测试用例\",{\"0\":{\"245\":1}}],[\"影响的行数\",{\"1\":{\"245\":2}}],[\"影响性能\",{\"1\":{\"240\":2}}],[\"增删首尾操作快\",{\"1\":{\"892\":1,\"1297\":1}}],[\"增删首位元素是非常快的\",{\"1\":{\"861\":1,\"1266\":1}}],[\"增删需要做元素位移操作\",{\"1\":{\"863\":1,\"1268\":1}}],[\"增删元素相对慢\",{\"1\":{\"861\":1,\"1266\":1}}],[\"增删比较快\",{\"1\":{\"853\":1,\"1258\":1}}],[\"增删数据都需要放弃原有的数组或者位移\",{\"1\":{\"833\":1,\"1238\":1}}],[\"增删改查性能好\",{\"1\":{\"891\":1,\"1296\":1}}],[\"增删改查性能都较好\",{\"1\":{\"890\":1,\"1295\":1}}],[\"增删改查\",{\"1\":{\"744\":1,\"1149\":1}}],[\"增删改查业务\",{\"1\":{\"245\":1}}],[\"增为\",{\"1\":{\"831\":2,\"1236\":2}}],[\"增强for循环遍历集合且直接用集合删除元素的时候可能出现问题\",{\"1\":{\"866\":1,\"1271\":1}}],[\"增强for循环\",{\"0\":{\"845\":1,\"1250\":1},\"1\":{\"845\":1,\"862\":1,\"1250\":1,\"1267\":1}}],[\"增强\",{\"1\":{\"751\":1,\"1156\":1}}],[\"增\",{\"1\":{\"419\":1}}],[\"增加效率极低\",{\"1\":{\"852\":1,\"1257\":1}}],[\"增加减少指定的值\",{\"1\":{\"784\":1,\"1189\":1}}],[\"增加目录\",{\"1\":{\"418\":1}}],[\"增加传输开销\",{\"1\":{\"111\":1}}],[\"描述\",{\"1\":{\"244\":1,\"245\":2,\"525\":1}}],[\"描述信息\",{\"1\":{\"243\":1}}],[\"构造\",{\"1\":{\"819\":1,\"1224\":1}}],[\"构造一个simpledateformat\",{\"1\":{\"780\":2,\"1185\":2}}],[\"构造代码块\",{\"1\":{\"682\":1,\"1087\":1}}],[\"构造器引用\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"构造器中代表当前对象的地址\",{\"1\":{\"661\":1,\"1066\":1}}],[\"构造器\",{\"1\":{\"660\":2,\"710\":2,\"780\":1,\"926\":2,\"954\":1,\"994\":1,\"1007\":1,\"1011\":1,\"1065\":2,\"1115\":2,\"1185\":1,\"1331\":2,\"1359\":1,\"1399\":1,\"1412\":1,\"1416\":1,\"1447\":1,\"1448\":1,\"1457\":1,\"1460\":1}}],[\"构造方法\",{\"0\":{\"588\":1,\"599\":1}}],[\"构造方法出现了循环依赖怎么解决\",{\"0\":{\"165\":1}}],[\"构建springboot的镜像\",{\"1\":{\"494\":1}}],[\"构建软链接\",{\"1\":{\"386\":1}}],[\"构建万物互联的智能世界\",{\"1\":{\"243\":1}}],[\"华为致力于把数字世界带入每个人\",{\"1\":{\"243\":1}}],[\"华为技术有限公司\",{\"1\":{\"243\":1}}],[\"华为\",{\"1\":{\"243\":1,\"272\":5,\"641\":1,\"1046\":1}}],[\"好吃\",{\"1\":{\"245\":2}}],[\"好吃不上火\",{\"1\":{\"243\":1}}],[\"好处\",{\"1\":{\"236\":1}}],[\"三要素概述\",{\"0\":{\"1426\":1}}],[\"三个字节的桶\",{\"1\":{\"995\":1,\"1400\":1}}],[\"三层架构\",{\"0\":{\"326\":1}}],[\"三只松鼠股份有限公司\",{\"1\":{\"243\":1}}],[\"三只松鼠\",{\"1\":{\"243\":1}}],[\"三级缓存\",{\"1\":{\"164\":1}}],[\"禁止使用构造方法\",{\"1\":{\"773\":1,\"1178\":1}}],[\"禁止访问等\",{\"1\":{\"288\":1}}],[\"禁止进行指令重排序\",{\"1\":{\"212\":2}}],[\"禁用\",{\"1\":{\"243\":1}}],[\"状态码分类\",{\"1\":{\"288\":1}}],[\"状态\",{\"0\":{\"962\":1,\"1367\":1},\"1\":{\"243\":1}}],[\"企业名称\",{\"1\":{\"243\":1}}],[\"品牌名称\",{\"1\":{\"243\":1}}],[\"建立socket通信管道\",{\"1\":{\"1461\":1}}],[\"建立连接\",{\"1\":{\"1441\":1}}],[\"建立第三张中间表\",{\"1\":{\"529\":1}}],[\"建包语句一般在第一行\",{\"1\":{\"701\":1,\"1106\":1}}],[\"建包有利于项目管理和维护\",{\"1\":{\"701\":1,\"1106\":1}}],[\"建表sql\",{\"1\":{\"243\":1}}],[\"建议使用共享资源作为锁对象\",{\"1\":{\"936\":1,\"1341\":1}}],[\"建议全部大写\",{\"1\":{\"707\":1,\"1112\":1}}],[\"建议重写方法都加上\",{\"1\":{\"698\":1,\"1103\":1}}],[\"建议将工具类的构造器私有\",{\"1\":{\"679\":1,\"1084\":1}}],[\"建议一个java文件只定义一个类\",{\"1\":{\"659\":1,\"1064\":1}}],[\"建议在最外层调用处集中捕获处理即可\",{\"1\":{\"637\":1,\"1042\":1}}],[\"建议配置root用户登录\",{\"1\":{\"365\":1}}],[\"建议同学们选择方式1\",{\"1\":{\"354\":1}}],[\"建议\",{\"0\":{\"282\":1,\"732\":1,\"1137\":1},\"1\":{\"679\":1,\"1084\":1}}],[\"建议值\",{\"1\":{\"240\":1}}],[\"建议先列举使用缓存可能出现的常见问题\",{\"1\":{\"115\":1}}],[\"练习\",{\"0\":{\"241\":1}}],[\"返还\",{\"1\":{\"240\":1}}],[\"返回ip地址字符串\",{\"1\":{\"1433\":1}}],[\"返回本主机的地址对象\",{\"1\":{\"1433\":1}}],[\"返回与原函数参数一致的结果\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"返回判断结果true\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"返回字符串\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"返回一个结果\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"返回一个指定泛型的对象\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"返回一个长度为0的数组\",{\"1\":{\"971\":1,\"1376\":1}}],[\"返回一个set集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"返回null\",{\"1\":{\"971\":3,\"1376\":3}}],[\"返回false\",{\"1\":{\"969\":1,\"1374\":1}}],[\"返回文件最后修改的时间毫秒值\",{\"1\":{\"966\":1,\"1371\":1}}],[\"返回由此抽象路径名表示的文件或文件夹名称\",{\"1\":{\"966\":1,\"1371\":1}}],[\"返回此抽象路径名的绝对路径名字符串\",{\"1\":{\"966\":1,\"1371\":1}}],[\"返回未来任务对象获取线程结果\",{\"1\":{\"948\":1,\"1353\":1}}],[\"返回对当前正在执行的线程对象的引用\",{\"1\":{\"926\":1,\"1331\":1}}],[\"返回对象的哈希值\",{\"1\":{\"886\":1,\"1291\":1}}],[\"返回对象内容长度\",{\"1\":{\"763\":1,\"1168\":1}}],[\"返回修改前的数据\",{\"1\":{\"861\":1,\"1266\":1}}],[\"返回指定索引处的元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"返回被修改的元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"返回被删除的元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"返回集合中的元素个数\",{\"1\":{\"842\":1,\"1247\":1}}],[\"返回单个成员方法对象\",{\"1\":{\"810\":2,\"1215\":2}}],[\"返回单个成员变量对象\",{\"1\":{\"808\":2,\"1213\":2}}],[\"返回单个构造器对象\",{\"1\":{\"804\":4,\"806\":1,\"1209\":4,\"1211\":1}}],[\"返回所有成员方法对象的数组\",{\"1\":{\"810\":2,\"1215\":2}}],[\"返回所有成员变量对象的数组\",{\"1\":{\"808\":2,\"1213\":2}}],[\"返回所有构造器对象的数组\",{\"1\":{\"804\":3,\"1209\":3}}],[\"返回当前系统的时间毫秒值的形式\",{\"1\":{\"769\":1,\"1174\":1}}],[\"返回a的b次幂的值\",{\"1\":{\"767\":1,\"1172\":1}}],[\"返回的是collection集合不是set集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"返回的是字符串\",{\"1\":{\"309\":1}}],[\"返回的就是true\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"返回的逻辑视图\",{\"1\":{\"167\":1}}],[\"返回作者信息等\",{\"1\":{\"298\":1}}],[\"返回添加数据的主键\",{\"0\":{\"276\":1}}],[\"返回结果的类型\",{\"1\":{\"264\":1,\"270\":1}}],[\"返回值为double的随机值\",{\"1\":{\"767\":1,\"1172\":1}}],[\"返回值为string字符串\",{\"1\":{\"309\":1}}],[\"返回值类型\",{\"1\":{\"709\":1,\"812\":1,\"1114\":1,\"1217\":1}}],[\"返回值\",{\"1\":{\"230\":2,\"758\":1,\"812\":1,\"926\":1,\"1025\":1,\"1163\":1,\"1217\":1,\"1331\":1,\"1475\":1}}],[\"返回给请求者\",{\"1\":{\"166\":1}}],[\"申请序列化的版本号\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"申请\",{\"1\":{\"240\":1}}],[\"池子数量\",{\"1\":{\"948\":1,\"1353\":1}}],[\"池在分配连接时\",{\"1\":{\"240\":1}}],[\"池中某个连接的空闲时长达到\",{\"1\":{\"240\":1}}],[\"应该声明线程任务执行完毕后的结果数据类型\",{\"1\":{\"921\":1,\"1326\":1}}],[\"应该插入的位置的索引+1\",{\"1\":{\"793\":1,\"1198\":1}}],[\"应替换为\",{\"1\":{\"413\":1}}],[\"应大于业务运行最长时间\",{\"1\":{\"240\":1}}],[\"应用程序在设备中的唯一标识\",{\"1\":{\"1427\":1}}],[\"应用场景\",{\"1\":{\"684\":1,\"1089\":1}}],[\"应用该模式的这个类永远只有一个实例\",{\"1\":{\"684\":1,\"1089\":1}}],[\"应用最为广泛的分布式计算引擎\",{\"1\":{\"394\":1}}],[\"应用在启动时创建一个\",{\"1\":{\"159\":1}}],[\"应用可用\",{\"1\":{\"159\":4}}],[\"应用\",{\"1\":{\"102\":1,\"159\":1,\"850\":1,\"851\":1,\"1255\":1,\"1256\":1}}],[\"应用解构\",{\"1\":{\"92\":1}}],[\"强制类型转换\",{\"0\":{\"652\":1,\"730\":1,\"1057\":1,\"1135\":1}}],[\"强制删除\",{\"1\":{\"451\":1}}],[\"强制退出\",{\"1\":{\"437\":1}}],[\"强制\",{\"1\":{\"437\":1}}],[\"强制写入该档案\",{\"1\":{\"437\":1}}],[\"强制回收连接的时限\",{\"1\":{\"240\":1}}],[\"强一致性\",{\"1\":{\"174\":1}}],[\"秒\",{\"1\":{\"331\":1,\"781\":1,\"944\":1,\"1186\":1,\"1349\":1}}],[\"秒后必须close\",{\"1\":{\"240\":1}}],[\"秒缩短至\",{\"1\":{\"109\":1}}],[\"程序结束\",{\"1\":{\"635\":1,\"636\":1,\"637\":1,\"1040\":1,\"1041\":1,\"1042\":1}}],[\"程序开始\",{\"1\":{\"635\":1,\"636\":1,\"637\":1,\"1040\":1,\"1041\":1,\"1042\":1}}],[\"程序可以继续往下执行\",{\"1\":{\"635\":1,\"1040\":1}}],[\"程序就会退出jvm虚拟机而终止\",{\"1\":{\"631\":1,\"1036\":1}}],[\"程序运行一半就意外结束了\",{\"1\":{\"422\":1}}],[\"程序默认并行计算的个数\",{\"1\":{\"395\":1}}],[\"程序\",{\"1\":{\"240\":2}}],[\"程序没有close连接且空闲时长超过\",{\"1\":{\"240\":1}}],[\"程序向连接池中请求连接时\",{\"1\":{\"240\":1}}],[\"见名知意\",{\"1\":{\"766\":1,\"1171\":1}}],[\"见说明部分\",{\"1\":{\"240\":1}}],[\"见证他在探险路上的精彩表现\",{\"1\":{\"58\":1}}],[\"超类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"超快检索\",{\"1\":{\"388\":1}}],[\"超快的检索速度\",{\"1\":{\"359\":1}}],[\"超过此\",{\"1\":{\"240\":1}}],[\"超过maxwait的值后\",{\"1\":{\"240\":1}}],[\"超时后线程会自动苏醒\",{\"1\":{\"207\":1}}],[\"启动临时线程\",{\"1\":{\"948\":1,\"1353\":1}}],[\"启动线程\",{\"1\":{\"918\":1,\"921\":1,\"1323\":1,\"1326\":1}}],[\"启动后可以动态变化\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"启动后浏览器输入linux服务器的ip地址或主机名即可访问\",{\"1\":{\"356\":1}}],[\"启动了\",{\"1\":{\"662\":1,\"1067\":1}}],[\"启动了15天\",{\"1\":{\"481\":1}}],[\"启动spring\",{\"1\":{\"494\":1}}],[\"启动spark集群\",{\"1\":{\"392\":1}}],[\"启动此进程的终端序号\",{\"1\":{\"478\":1}}],[\"启动该进程的其他进程\",{\"1\":{\"478\":1}}],[\"启动vim\",{\"1\":{\"432\":1}}],[\"启动mysql设置开机启动\",{\"1\":{\"398\":1}}],[\"启动mysql并配置开机自启动\",{\"1\":{\"346\":1,\"349\":1}}],[\"启动并开启开机自启动\",{\"1\":{\"397\":1}}],[\"启动flink\",{\"1\":{\"395\":1}}],[\"启动hbase\",{\"1\":{\"389\":1}}],[\"启动hadoop的yarn集群\",{\"1\":{\"386\":1}}],[\"启动hadoop的hdfs集群\",{\"1\":{\"386\":1}}],[\"启动web代理服务器\",{\"1\":{\"386\":1}}],[\"启动历史服务器\",{\"1\":{\"386\":1}}],[\"启动一个模拟的数据生产者\",{\"1\":{\"378\":1}}],[\"启动kafka\",{\"1\":{\"377\":1}}],[\"启动命令\",{\"1\":{\"375\":1}}],[\"启动zookeeper\",{\"1\":{\"375\":2}}],[\"启动es\",{\"1\":{\"362\":1}}],[\"启动redis\",{\"1\":{\"360\":1}}],[\"启动rabbitmq的web管理控制台\",{\"1\":{\"358\":1}}],[\"启动tomcat\",{\"1\":{\"354\":1}}],[\"启动\",{\"0\":{\"415\":1},\"1\":{\"295\":1,\"346\":1,\"349\":1,\"356\":2,\"358\":2,\"360\":1,\"404\":1,\"474\":1}}],[\"启动程序时\",{\"1\":{\"240\":1}}],[\"启用\",{\"1\":{\"243\":1}}],[\"启程开启新的探险\",{\"1\":{\"75\":1}}],[\"登录mysql\",{\"1\":{\"402\":1}}],[\"登录mysql数据库系统\",{\"1\":{\"350\":1}}],[\"登录数据库的用户密码\",{\"1\":{\"240\":1}}],[\"登录数据库的用户名\",{\"1\":{\"240\":1}}],[\"登陆\",{\"1\":{\"629\":1,\"1034\":1}}],[\"登陆失败\",{\"1\":{\"629\":1,\"1034\":1}}],[\"登陆成功\",{\"1\":{\"629\":1,\"1034\":1}}],[\"登陆中\",{\"1\":{\"629\":1,\"1034\":1}}],[\"登陆linux系统\",{\"1\":{\"353\":1}}],[\"登陆的用户\",{\"1\":{\"347\":1,\"350\":1}}],[\"登陆mysql数据库系统\",{\"1\":{\"347\":1}}],[\"登入案例的sql\",{\"1\":{\"233\":1}}],[\"示例5\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"示例4\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"示例3\",{\"1\":{\"1028\":1,\"1029\":1,\"1478\":1,\"1479\":1}}],[\"示例2\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"示例1\",{\"1\":{\"1026\":1,\"1029\":1,\"1476\":1,\"1479\":1}}],[\"示例\",{\"1\":{\"459\":1,\"465\":1,\"466\":1,\"475\":1,\"491\":1,\"492\":1,\"1024\":3,\"1027\":2,\"1028\":3,\"1029\":4,\"1474\":3,\"1477\":2,\"1478\":3,\"1479\":4}}],[\"示例如下\",{\"1\":{\"240\":1}}],[\"示例代码\",{\"1\":{\"112\":1}}],[\"示例代码如下\",{\"1\":{\"99\":1,\"113\":1}}],[\"导包格式\",{\"1\":{\"701\":1,\"1106\":1}}],[\"导入springmvc坐标和servlet坐标\",{\"1\":{\"557\":1}}],[\"导入servlet依赖坐标\",{\"1\":{\"295\":1}}],[\"导入servlet\",{\"1\":{\"295\":1}}],[\"导入仓库密钥\",{\"1\":{\"362\":1}}],[\"导入mysql仓库的密钥\",{\"1\":{\"346\":1}}],[\"导入jsp坐标\",{\"1\":{\"318\":1}}],[\"导入jar包\",{\"1\":{\"239\":1,\"240\":1}}],[\"导入坐标\",{\"1\":{\"264\":1,\"315\":1,\"323\":1}}],[\"导致栈内存溢出现象\",{\"1\":{\"974\":1,\"1379\":1}}],[\"导致静态页面资源访问不到的问题\",{\"1\":{\"568\":1}}],[\"导致失去连接\",{\"1\":{\"422\":1}}],[\"导致事务失效\",{\"1\":{\"162\":1}}],[\"导致索引失效\",{\"1\":{\"150\":1}}],[\"导致sentinel不能感知到master\",{\"1\":{\"137\":1}}],[\"导致大量的请求打到数据库中\",{\"1\":{\"126\":1}}],[\"导致大量请求落到数据库上\",{\"1\":{\"115\":1}}],[\"导致并发问题或重复执行\",{\"1\":{\"116\":1}}],[\"导致所有请求都穿透缓存直接访问数据库\",{\"1\":{\"115\":1}}],[\"资源就是实现了autocloseable接口的对象\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"资源释放的方式\",{\"0\":{\"999\":1,\"1404\":1}}],[\"资源b的路径\",{\"1\":{\"313\":1}}],[\"资源重用\",{\"1\":{\"236\":1}}],[\"资源的计算密集型任务\",{\"1\":{\"112\":1}}],[\"加锁\",{\"1\":{\"932\":1,\"1337\":1}}],[\"加工后的\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"加法\",{\"1\":{\"774\":1,\"1179\":1}}],[\"加载数据\",{\"1\":{\"897\":1,\"1302\":1}}],[\"加载一次\",{\"1\":{\"676\":1,\"1081\":1}}],[\"加载类的同时会加载静态成员变量\",{\"1\":{\"676\":1,\"1081\":1}}],[\"加载properties文件\",{\"0\":{\"602\":1}}],[\"加载spring容器配置\",{\"1\":{\"557\":1}}],[\"加载springmvc配置的\",{\"1\":{\"557\":1}}],[\"加载sql的映射文件\",{\"1\":{\"264\":1,\"267\":1}}],[\"加载controller对应的bean\",{\"1\":{\"557\":1}}],[\"加载前端的打包文件\",{\"1\":{\"495\":1}}],[\"加载和实例化\",{\"1\":{\"297\":1}}],[\"加载mybatis的核心配置文件\",{\"1\":{\"264\":1}}],[\"加载核心配置文件\",{\"1\":{\"264\":1}}],[\"加载配置文件\",{\"1\":{\"239\":1,\"240\":1,\"245\":1}}],[\"加上该注解后如果重写错误\",{\"1\":{\"698\":1,\"1103\":1}}],[\"加上\",{\"1\":{\"234\":1}}],[\"加深了对面向对象编程的理解\",{\"1\":{\"33\":1}}],[\"替换关键字\",{\"1\":{\"743\":1,\"1148\":1}}],[\"替换模式\",{\"1\":{\"433\":1}}],[\"替换java\",{\"1\":{\"323\":1}}],[\"替换map集合的默认的arg键名\",{\"1\":{\"281\":4}}],[\"替换连接信息\",{\"1\":{\"264\":1}}],[\"替换\",{\"1\":{\"233\":1}}],[\"李四\",{\"1\":{\"233\":1,\"514\":4,\"526\":1,\"873\":1,\"1024\":1,\"1027\":9,\"1028\":3,\"1278\":1,\"1474\":1,\"1477\":9,\"1478\":3}}],[\"赋值\",{\"1\":{\"233\":1,\"809\":1,\"1214\":1}}],[\"预定义字符类\",{\"1\":{\"819\":1,\"1224\":1}}],[\"预编译会把密码自动转义为\",{\"1\":{\"233\":1}}],[\"预编译sql\",{\"1\":{\"234\":1,\"240\":1}}],[\"预编译sql语句并执行\",{\"1\":{\"233\":1}}],[\"预编译sql的执行sql对象\",{\"1\":{\"229\":1}}],[\"预防sql注入问题\",{\"1\":{\"233\":1}}],[\"预期值\",{\"1\":{\"211\":1}}],[\"密码错误\",{\"1\":{\"629\":1,\"1034\":1}}],[\"密码长度最低4位即可\",{\"1\":{\"350\":1,\"398\":1}}],[\"密码安全级别低\",{\"1\":{\"350\":1,\"398\":1}}],[\"密码需要符合\",{\"1\":{\"347\":1,\"350\":2}}],[\"密码\",{\"1\":{\"228\":1,\"347\":1,\"350\":3,\"501\":1}}],[\"密集型任务\",{\"1\":{\"112\":3}}],[\"连通返回true\",{\"1\":{\"1433\":1}}],[\"连接成功返回socket对象与客户端建立端到端通信\",{\"1\":{\"1461\":1}}],[\"连接取消\",{\"1\":{\"1442\":1}}],[\"连接和通信数据的规则被称为网络通信协议\",{\"1\":{\"1436\":1}}],[\"连接信息\",{\"1\":{\"264\":1,\"267\":2}}],[\"连接属性\",{\"1\":{\"240\":1}}],[\"连接时\",{\"1\":{\"240\":2}}],[\"连接\",{\"1\":{\"240\":1,\"1439\":1}}],[\"连接池在下次检查空闲连接时\",{\"1\":{\"240\":1}}],[\"连接池中最多支持多少个活动会话\",{\"1\":{\"240\":1}}],[\"连接路径\",{\"1\":{\"228\":1}}],[\"连续向后删除\",{\"1\":{\"435\":1}}],[\"连续\",{\"1\":{\"159\":1}}],[\"驱动管理类\",{\"1\":{\"228\":1}}],[\"驱使着他们的\",{\"1\":{\"90\":1}}],[\"释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接连接而引起的数据库连接遗漏\",{\"1\":{\"236\":1}}],[\"释放资源\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"264\":2,\"997\":1,\"1402\":1}}],[\"释放锁\",{\"1\":{\"117\":1,\"131\":1,\"939\":1,\"1344\":1}}],[\"受影响的行数\",{\"1\":{\"226\":1,\"229\":1}}],[\"旧版mysql的url和driver的写法\",{\"1\":{\"226\":1}}],[\"旧位置\",{\"1\":{\"193\":1}}],[\"访问权限必须大于或者等于父类\",{\"1\":{\"699\":1,\"1104\":1}}],[\"访问这个目录来获取系统信息\",{\"1\":{\"428\":1}}],[\"访问web服务器的资源\",{\"1\":{\"327\":1}}],[\"访问路径\",{\"1\":{\"302\":4}}],[\"访问url\",{\"1\":{\"297\":1}}],[\"访问该servlet\",{\"1\":{\"295\":1}}],[\"访问\",{\"1\":{\"295\":1}}],[\"访问数据库的java代码基本不变\",{\"1\":{\"225\":1}}],[\"访问控制等\",{\"1\":{\"97\":1}}],[\"访问控制\",{\"1\":{\"92\":1,\"95\":1,\"102\":1,\"108\":1}}],[\"各个层级均出现异常\",{\"1\":{\"572\":1}}],[\"各个数据库厂商使用相同的接口\",{\"1\":{\"225\":1}}],[\"各类编程语言的客户端\",{\"1\":{\"110\":1}}],[\"征服面试海岛\",{\"1\":{\"223\":1}}],[\"征服异常的迷雾\",{\"0\":{\"45\":1}}],[\"弱引用与软引用的区别在于\",{\"1\":{\"222\":1}}],[\"假如我们不做任何措施的话\",{\"1\":{\"222\":1}}],[\"假设不存在\",{\"1\":{\"211\":1}}],[\"盒子中可以存储每个线程的私有数据\",{\"1\":{\"221\":1}}],[\"队列任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"队列线程满了而且核心线程还被占用着\",{\"1\":{\"948\":1,\"1353\":1}}],[\"队列线程2\",{\"1\":{\"948\":1,\"1353\":1}}],[\"队列线程1\",{\"1\":{\"948\":1,\"1353\":1}}],[\"队列的特点\",{\"1\":{\"851\":1,\"1256\":1}}],[\"队列\",{\"0\":{\"851\":1,\"1256\":1},\"1\":{\"848\":1,\"865\":1,\"1253\":1,\"1270\":1}}],[\"队列满会创建临时线程执行任务\",{\"1\":{\"219\":1}}],[\"队列中存储排队的线程\",{\"1\":{\"213\":1}}],[\"临时线程2\",{\"1\":{\"948\":1,\"1353\":1}}],[\"临时线程1\",{\"1\":{\"948\":1,\"1353\":1}}],[\"临时线程什么时候创建\",{\"0\":{\"946\":1,\"1351\":1}}],[\"临时线程的生存时间单位\",{\"1\":{\"219\":1}}],[\"临时线程的生存时间\",{\"1\":{\"219\":1}}],[\"临时设置\",{\"1\":{\"486\":1}}],[\"临时使用root身份执行\",{\"1\":{\"462\":1}}],[\"临时状态码\",{\"1\":{\"288\":1}}],[\"临时实例采用心跳模式\",{\"1\":{\"173\":1}}],[\"聊一下concurrenthashmap\",{\"0\":{\"217\":1}}],[\"怎么诊断出程序是否出现了死锁\",{\"1\":{\"216\":1}}],[\"怎么解决\",{\"0\":{\"152\":1}}],[\"做定时器\",{\"1\":{\"956\":1,\"1361\":1}}],[\"做牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"做信息的标志和信息的分类\",{\"1\":{\"706\":1,\"1111\":1}}],[\"做一些静态数据的初始化的操作\",{\"1\":{\"682\":1,\"1087\":1}}],[\"做了很多优化\",{\"1\":{\"215\":1}}],[\"做这个项目的目的是帮助用户寻找志同道合的人\",{\"1\":{\"121\":1}}],[\"做这个项目的目的是给后端用户提供方便的接口调用\",{\"1\":{\"121\":1}}],[\"公网地址\",{\"1\":{\"1429\":1}}],[\"公式\",{\"1\":{\"979\":1,\"1384\":1}}],[\"公司域名\",{\"1\":{\"701\":1,\"1106\":1}}],[\"公司名称\",{\"1\":{\"244\":1,\"245\":2}}],[\"公平锁\",{\"1\":{\"215\":1}}],[\"公共的数据模型抽象为公共模块\",{\"1\":{\"107\":1}}],[\"公共业务逻辑\",{\"1\":{\"102\":1}}],[\"公共业务等操作\",{\"1\":{\"96\":1}}],[\"公共模块在本地打包\",{\"1\":{\"98\":1}}],[\"公共模块\",{\"1\":{\"95\":1,\"97\":1}}],[\"二进制是可以转换成十进制的\",{\"1\":{\"983\":1,\"1388\":1}}],[\"二进制属性\",{\"1\":{\"819\":1,\"1224\":1}}],[\"二叉查找树\",{\"0\":{\"854\":1,\"1259\":1},\"1\":{\"848\":1,\"854\":1,\"1253\":1,\"1259\":1}}],[\"二叉树\",{\"0\":{\"854\":1,\"1259\":1},\"1\":{\"848\":1,\"854\":1,\"1253\":1,\"1259\":1}}],[\"二分查找\",{\"1\":{\"794\":2,\"1199\":2}}],[\"二分搜索技术\",{\"1\":{\"793\":1,\"1198\":1}}],[\"二分搜索数组中的数据\",{\"1\":{\"793\":1,\"1198\":1}}],[\"二\",{\"1\":{\"751\":1,\"1156\":1}}],[\"二者均属于悲观锁\",{\"1\":{\"215\":1}}],[\"二级缓存中的临时对象a清除\",{\"1\":{\"164\":1}}],[\"二级缓存\",{\"1\":{\"164\":1}}],[\"二级索引\",{\"0\":{\"145\":1},\"1\":{\"145\":1}}],[\"源码的做法\",{\"1\":{\"951\":1,\"1356\":1}}],[\"源码由\",{\"1\":{\"215\":1}}],[\"源码在\",{\"1\":{\"215\":1}}],[\"源码名称\",{\"1\":{\"164\":1}}],[\"像是reentrantlock\",{\"1\":{\"213\":1}}],[\"像开发\",{\"1\":{\"103\":1}}],[\"阻止外部网络流量访问系统内部\",{\"1\":{\"354\":1}}],[\"阻止其他读写操作越过屏障\",{\"1\":{\"212\":1}}],[\"阻塞状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"阻塞blocked\",{\"1\":{\"203\":1}}],[\"阻塞队列\",{\"1\":{\"112\":1}}],[\"修饰符\",{\"1\":{\"709\":2,\"715\":1,\"870\":1,\"872\":1,\"874\":1,\"1114\":2,\"1120\":1,\"1275\":1,\"1277\":1,\"1279\":1}}],[\"修饰的成员变量\",{\"1\":{\"704\":1,\"1109\":1}}],[\"修饰共享变量会在读\",{\"1\":{\"212\":1}}],[\"修改指定索引处的元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"修改指定位置的元素\",{\"1\":{\"750\":1,\"1155\":1}}],[\"修改日历中的某个字段信息\",{\"1\":{\"784\":1,\"1189\":1}}],[\"修改日历的某个字段信息\",{\"1\":{\"784\":1,\"1189\":1}}],[\"修改等操作字符串使用stringbuilder\",{\"1\":{\"764\":1,\"1169\":1}}],[\"修改等\",{\"1\":{\"761\":1,\"1166\":1}}],[\"修改后的内容\",{\"1\":{\"750\":1,\"1155\":1}}],[\"修改后的名称\",{\"1\":{\"282\":1}}],[\"修改事务的提交方式\",{\"1\":{\"536\":1}}],[\"修改列名和数据类型\",{\"1\":{\"512\":1}}],[\"修改数据类型\",{\"1\":{\"512\":1}}],[\"修改表名\",{\"1\":{\"512\":1}}],[\"修改文件\",{\"1\":{\"465\":1}}],[\"修改文件的内容\",{\"1\":{\"419\":1}}],[\"修改目录的名称\",{\"1\":{\"418\":1}}],[\"修改conf\",{\"1\":{\"389\":3}}],[\"修改workers文件\",{\"1\":{\"386\":1}}],[\"修改hadoop\",{\"1\":{\"386\":1}}],[\"修改kafka目录内的config目录内的server\",{\"1\":{\"377\":1}}],[\"修改内容为3\",{\"1\":{\"375\":1}}],[\"修改内容为2\",{\"1\":{\"375\":1}}],[\"修改myid文件\",{\"1\":{\"375\":2}}],[\"修改配置文件名称\",{\"1\":{\"392\":1}}],[\"修改配置文件\",{\"1\":{\"375\":1,\"386\":2,\"389\":3,\"392\":2,\"395\":2}}],[\"修改node2主机名为node3\",{\"1\":{\"365\":1}}],[\"修改node2主机名为node2\",{\"1\":{\"365\":1}}],[\"修改ip地址\",{\"1\":{\"365\":1}}],[\"修改主机名\",{\"1\":{\"365\":1}}],[\"修改主机名为node1\",{\"1\":{\"365\":1}}],[\"修改tomcat安装目录权限\",{\"1\":{\"354\":1}}],[\"修改root密码\",{\"1\":{\"350\":1}}],[\"修改root用户密码\",{\"1\":{\"347\":1,\"398\":1}}],[\"修改\",{\"0\":{\"277\":1,\"512\":1},\"1\":{\"241\":1,\"245\":1,\"277\":1,\"283\":1,\"366\":1,\"508\":1,\"514\":1,\"675\":1,\"1080\":1}}],[\"修改成功后然后再延迟删除缓存\",{\"1\":{\"127\":1}}],[\"修改队伍信息是需要保证及时生效的\",{\"1\":{\"127\":1}}],[\"被规定为一个16位的二进制\",{\"1\":{\"1434\":1}}],[\"被重写方法的方法体代码\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"被finally控制的语句最终一定会被执行\",{\"1\":{\"1000\":1,\"1405\":1}}],[\"被搜索的文件名称\",{\"1\":{\"981\":1,\"1386\":1}}],[\"被搜索的原目录\",{\"1\":{\"981\":1,\"1386\":1}}],[\"被修改的数据\",{\"1\":{\"861\":1,\"1266\":1}}],[\"被修改的\",{\"1\":{\"750\":1,\"1155\":1}}],[\"被共享访问\",{\"1\":{\"676\":1,\"1081\":1}}],[\"被代理对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"被创建或者被管理的对象在ioc容器中称为\",{\"1\":{\"582\":1}}],[\"被误当做controller\",{\"1\":{\"568\":1}}],[\"被链接的文件或文件夹\",{\"1\":{\"475\":1}}],[\"被统计的文件\",{\"1\":{\"455\":1}}],[\"被查找的文件名支持通配符\",{\"1\":{\"453\":1}}],[\"被查找的文件名\",{\"1\":{\"453\":1}}],[\"被tomcat所托管\",{\"1\":{\"351\":1}}],[\"被遍历的容器\",{\"1\":{\"323\":1}}],[\"被类直接包含\",{\"1\":{\"320\":1}}],[\"被volatile修饰后\",{\"1\":{\"212\":1}}],[\"被广泛应用于各大框架中\",{\"1\":{\"211\":1}}],[\"谈谈你对volatile关键字的理解\",{\"0\":{\"212\":1}}],[\"举例来说\",{\"1\":{\"435\":4,\"437\":1}}],[\"举例\",{\"1\":{\"424\":1}}],[\"举一个简单的例子\",{\"1\":{\"211\":1}}],[\"举个例子\",{\"1\":{\"111\":1}}],[\"拟写入的新值\",{\"1\":{\"211\":1}}],[\"比\",{\"1\":{\"831\":1,\"1236\":1}}],[\"比较浮点型可以这样写\",{\"1\":{\"793\":1,\"1198\":1}}],[\"比较字符串内容\",{\"1\":{\"758\":1,\"1163\":1}}],[\"比较本身内容\",{\"1\":{\"756\":1,\"1161\":1}}],[\"比较的是地址\",{\"1\":{\"743\":1,\"1148\":1}}],[\"比较的其实也是地址\",{\"1\":{\"743\":1,\"1148\":1}}],[\"比较与交换\",{\"1\":{\"211\":1}}],[\"比如修改数据\",{\"1\":{\"928\":1,\"1333\":1}}],[\"比如说io流中的资源释放\",{\"1\":{\"1000\":1,\"1405\":1}}],[\"比如说\",{\"1\":{\"726\":1,\"1131\":1}}],[\"比如说现在我们创建了3个线程分别是t1\",{\"1\":{\"205\":1}}],[\"比如老师的工资定义到父类中\",{\"1\":{\"691\":1,\"1096\":1}}],[\"比如老师有工资\",{\"1\":{\"691\":1,\"1096\":1}}],[\"比如学生和老师都可以继承人类\",{\"1\":{\"691\":1,\"1096\":1}}],[\"比如第一个case里面的值是1\",{\"1\":{\"653\":1,\"1058\":1}}],[\"比如安装mysql数据库则会在该目录下产生mysql的配置文件\",{\"1\":{\"428\":1}}],[\"比如26行\",{\"1\":{\"389\":1}}],[\"比如kafka\",{\"1\":{\"374\":1}}],[\"比如权限控制\",{\"1\":{\"337\":1}}],[\"比如设置一些数据库连接属性\",{\"1\":{\"240\":1}}],[\"比如设置一些连接池统计方面的配置\",{\"1\":{\"240\":1}}],[\"比如服务名称\",{\"1\":{\"172\":1}}],[\"比如a依赖于b\",{\"1\":{\"164\":1}}],[\"比如我们此时按下i\",{\"1\":{\"432\":1}}],[\"比如我们删除一条数据的时候\",{\"1\":{\"153\":1}}],[\"比如我们需要查找6对应的数据\",{\"1\":{\"144\":1}}],[\"比如查询6\",{\"1\":{\"144\":1}}],[\"比如给不同的key设置一个固定的过期时间再加上一个随机的时间\",{\"1\":{\"126\":1}}],[\"比如在项目中\",{\"1\":{\"117\":1}}],[\"比如针对更消耗\",{\"1\":{\"112\":1}}],[\"比如\",{\"1\":{\"99\":1,\"104\":1,\"108\":1,\"112\":1,\"158\":1,\"187\":1,\"368\":1,\"631\":1,\"831\":1,\"1036\":1,\"1236\":1}}],[\"比如使用\",{\"1\":{\"99\":1}}],[\"比如网关服务集中统计接口调用次数时通过\",{\"1\":{\"96\":1}}],[\"处于waiting状态的线程\",{\"1\":{\"210\":1}}],[\"处于blocked状态的线程\",{\"1\":{\"210\":1}}],[\"处理一些结果或数据\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"处理多个任务按照顺序执行\",{\"1\":{\"954\":1,\"1359\":1}}],[\"处理方式3\",{\"0\":{\"636\":1,\"1041\":1}}],[\"处理方式2\",{\"0\":{\"635\":1,\"1040\":1}}],[\"处理方式1\",{\"0\":{\"634\":1,\"1039\":1}}],[\"处理方法\",{\"1\":{\"627\":1}}],[\"处理servletcontainerinitconfig类中拦截的所有路径都归于springmvc管理\",{\"1\":{\"568\":1}}],[\"处理字符乱码\",{\"1\":{\"562\":1}}],[\"处理并发问题\",{\"0\":{\"553\":1}}],[\"处理请求\",{\"1\":{\"325\":1}}],[\"处理业务\",{\"1\":{\"325\":1}}],[\"处理发生错误\",{\"1\":{\"288\":2}}],[\"处理完成\",{\"1\":{\"288\":1}}],[\"处理参数\",{\"1\":{\"272\":1}}],[\"处理结果\",{\"1\":{\"226\":1,\"229\":1,\"231\":1}}],[\"处理实际请求的处理器\",{\"1\":{\"167\":1}}],[\"处理器适配器\",{\"1\":{\"167\":1}}],[\"处理器映射器\",{\"1\":{\"167\":1}}],[\"处理aware接口\",{\"1\":{\"163\":1}}],[\"处理策略\",{\"1\":{\"108\":1}}],[\"讲一下\",{\"0\":{\"210\":1}}],[\"讲述一下使用流程\",{\"0\":{\"107\":1}}],[\"讲述一下流程\",{\"0\":{\"104\":1}}],[\"讲述一下实现过程\",{\"0\":{\"103\":1}}],[\"讲述了主角在学习java知识后如何巧妙地运用这些知识解决实际问题的故事\",{\"1\":{\"68\":1}}],[\"种不同状态的其中一个状态\",{\"1\":{\"203\":1}}],[\">10\",{\"1\":{\"1029\":1,\"1479\":1}}],[\">integer\",{\"1\":{\"1029\":1,\"1479\":1}}],[\">y==60\",{\"1\":{\"1028\":1,\"1478\":1}}],[\">y<50\",{\"1\":{\"1028\":1,\"1478\":1}}],[\">y\",{\"1\":{\"1027\":1,\"1477\":1}}],[\">system\",{\"1\":{\"1027\":2,\"1477\":2}}],[\">str\",{\"1\":{\"1026\":1,\"1476\":1}}],[\">是语法形式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\">=\",{\"1\":{\"866\":1,\"891\":1,\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":2,\"1271\":1,\"1296\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":2}}],[\">x+10\",{\"1\":{\"1029\":4,\"1479\":4}}],[\">x<20\",{\"1\":{\"1028\":1,\"1478\":1}}],[\">x\",{\"1\":{\"819\":1,\"1029\":2,\"1224\":1,\"1479\":2}}],[\">public\",{\"1\":{\"702\":1,\"1107\":1}}],[\">protect\",{\"1\":{\"702\":1,\"1107\":1}}],[\">缺省\",{\"1\":{\"702\":1,\"1107\":1}}],[\">ccc2<\",{\"1\":{\"601\":1}}],[\">ccc1<\",{\"1\":{\"601\":1}}],[\">ccc<\",{\"1\":{\"601\":2}}],[\">core\",{\"1\":{\"582\":1}}],[\">将左边命令的结果\",{\"1\":{\"459\":1}}],[\">>将左边命令的结果\",{\"1\":{\"459\":1}}],[\">>\",{\"0\":{\"459\":1},\"1\":{\"377\":1,\"459\":1,\"486\":2,\"831\":2,\"1236\":2}}],[\"><html\",{\"1\":{\"312\":1}}],[\"><body><body\",{\"1\":{\"312\":1}}],[\"><\",{\"1\":{\"270\":3,\"274\":1}}],[\">标签\",{\"1\":{\"258\":1}}],[\">\",{\"0\":{\"459\":1},\"1\":{\"199\":1,\"205\":3,\"245\":3,\"251\":1,\"254\":3,\"258\":8,\"259\":2,\"264\":40,\"267\":31,\"270\":28,\"271\":4,\"272\":1,\"273\":10,\"274\":13,\"275\":2,\"276\":1,\"277\":6,\"279\":2,\"280\":4,\"293\":1,\"295\":1,\"302\":1,\"308\":2,\"309\":6,\"312\":1,\"315\":1,\"318\":3,\"320\":11,\"323\":9,\"335\":1,\"386\":16,\"389\":5,\"424\":1,\"459\":1,\"494\":1,\"496\":2,\"522\":2,\"533\":1,\"557\":4,\"562\":2,\"570\":4,\"579\":2,\"601\":12,\"615\":2,\"629\":1,\"638\":1,\"650\":5,\"695\":1,\"738\":2,\"749\":3,\"788\":1,\"793\":2,\"794\":2,\"804\":13,\"806\":2,\"807\":1,\"810\":2,\"813\":1,\"816\":1,\"818\":2,\"821\":3,\"823\":12,\"824\":1,\"829\":12,\"831\":2,\"846\":1,\"866\":1,\"868\":1,\"870\":1,\"872\":1,\"874\":1,\"895\":3,\"896\":5,\"897\":1,\"907\":1,\"908\":3,\"920\":1,\"948\":3,\"955\":1,\"981\":1,\"995\":4,\"1018\":3,\"1019\":3,\"1020\":3,\"1022\":12,\"1023\":1,\"1024\":1,\"1026\":1,\"1027\":3,\"1028\":2,\"1034\":1,\"1043\":1,\"1055\":5,\"1100\":1,\"1143\":2,\"1154\":3,\"1193\":1,\"1198\":2,\"1199\":2,\"1209\":13,\"1211\":2,\"1212\":1,\"1215\":2,\"1218\":1,\"1221\":1,\"1223\":2,\"1226\":3,\"1228\":12,\"1229\":1,\"1234\":12,\"1236\":2,\"1251\":1,\"1271\":1,\"1273\":1,\"1275\":1,\"1277\":1,\"1279\":1,\"1300\":3,\"1301\":5,\"1302\":1,\"1312\":1,\"1313\":3,\"1325\":1,\"1353\":3,\"1360\":1,\"1386\":1,\"1400\":4,\"1468\":3,\"1469\":3,\"1470\":3,\"1472\":12,\"1473\":1,\"1474\":1,\"1476\":1,\"1477\":3,\"1478\":2}}],[\"共享并非继承关系\",{\"1\":{\"695\":1,\"1100\":1}}],[\"共分为三种模式\",{\"1\":{\"431\":1}}],[\"共有四种方式可以创建线程\",{\"1\":{\"199\":1}}],[\"共同父类\",{\"1\":{\"628\":1,\"1033\":1}}],[\"共同点\",{\"1\":{\"173\":1,\"207\":1}}],[\"共同攻克迷宫中的难题\",{\"1\":{\"80\":1}}],[\"共同克服难关\",{\"1\":{\"80\":1}}],[\"上锁的内容\",{\"1\":{\"939\":1,\"1344\":1}}],[\"上锁\",{\"1\":{\"939\":2,\"1344\":2}}],[\"上场比赛结束\",{\"1\":{\"819\":1,\"1224\":1}}],[\"上下限\",{\"0\":{\"877\":1,\"1282\":1}}],[\"上下午\",{\"1\":{\"781\":1,\"1186\":1}}],[\"上下文切换指的是从一个线程切换到另一个线程\",{\"1\":{\"197\":1}}],[\"上面这些按键中\",{\"1\":{\"436\":1}}],[\"上面记载着一些java的概念和技巧\",{\"1\":{\"78\":1}}],[\"上\",{\"1\":{\"428\":1,\"433\":1}}],[\"上传下载好的jdk安装包\",{\"1\":{\"353\":1}}],[\"区块\",{\"1\":{\"819\":1,\"1224\":1}}],[\"区别\",{\"1\":{\"197\":1,\"207\":1,\"336\":1}}],[\"区分度不高\",{\"1\":{\"149\":1}}],[\"区分度越高\",{\"1\":{\"149\":1}}],[\"函数的具体实现则由调用者来实现\",{\"1\":{\"1030\":1,\"1480\":1}}],[\"函数型函数式接口\",{\"0\":{\"1029\":1,\"1479\":1}}],[\"函数式接口\",{\"1\":{\"1024\":2,\"1474\":2}}],[\"函数式接口定义\",{\"0\":{\"1024\":1,\"1474\":1}}],[\"函数名\",{\"1\":{\"521\":1}}],[\"函数所在的线程就是这个进程中的一个线程\",{\"1\":{\"197\":1}}],[\"函数时其实就是启动了一个\",{\"1\":{\"197\":1}}],[\"运算得到的结果是放在\",{\"1\":{\"743\":1,\"1148\":1}}],[\"运维\",{\"1\":{\"344\":1}}],[\"运行方法\",{\"1\":{\"812\":1,\"1217\":1}}],[\"运行的时候\",{\"1\":{\"798\":1,\"1203\":1}}],[\"运行的是\",{\"1\":{\"321\":1}}],[\"运行也看左边\",{\"1\":{\"725\":1,\"1130\":1}}],[\"运行看右边\",{\"1\":{\"725\":1,\"1130\":1}}],[\"运行时s2就已经是abc\",{\"1\":{\"743\":1,\"1148\":1}}],[\"运行时的异常处理\",{\"1\":{\"637\":1,\"1042\":1}}],[\"运行时异常编译阶段不报错\",{\"1\":{\"637\":1,\"1042\":1}}],[\"运行时异常处理形式\",{\"0\":{\"637\":1,\"1042\":1}}],[\"运行异常\",{\"1\":{\"632\":1,\"1037\":1}}],[\"运行spring\",{\"1\":{\"494\":1}}],[\"运行测试类\",{\"1\":{\"628\":1,\"1033\":1}}],[\"运行测试\",{\"1\":{\"378\":1}}],[\"运行状态\",{\"1\":{\"356\":1}}],[\"运行需要依赖各种环境\",{\"1\":{\"321\":1}}],[\"运行classpath\",{\"1\":{\"259\":1}}],[\"运行环境\",{\"1\":{\"259\":1}}],[\"运行到消亡的过程\",{\"1\":{\"197\":1}}],[\"运用数据结构和算法优化代码的性能\",{\"1\":{\"71\":1}}],[\"运用技巧\",{\"0\":{\"24\":1}}],[\"运用所学的知识和技能来解决实际问题\",{\"1\":{\"5\":1}}],[\"利用迭代器删除当前所在元素\",{\"1\":{\"866\":1,\"1271\":1}}],[\"利用反射技术获取成员方法对象的方式\",{\"1\":{\"813\":1,\"1218\":1}}],[\"利用反射技术获取成员变量的方式\",{\"1\":{\"809\":1,\"1214\":1}}],[\"利用反射技术获取构造器对象\",{\"1\":{\"807\":1,\"1212\":1}}],[\"利用反射机制创建对象\",{\"1\":{\"808\":1,\"1213\":1}}],[\"利用这两个功能按键\",{\"1\":{\"435\":1}}],[\"利用hashmap的key键进行存储\",{\"1\":{\"194\":1}}],[\"利用key的hashcode重新hash计算出当前对象的元素在数组中的下标\",{\"1\":{\"188\":1}}],[\"依然无法避免乱码\",{\"1\":{\"995\":1,\"1400\":1}}],[\"依然是在某个对象中触发该方法执行\",{\"1\":{\"813\":1,\"1218\":1}}],[\"依然是在某个对象中取值和赋值\",{\"1\":{\"809\":1,\"1214\":1}}],[\"依然是创建对象的\",{\"1\":{\"807\":1,\"1212\":1}}],[\"依靠这个接口下的实现类\",{\"1\":{\"566\":1}}],[\"依靠hashmap来存储元素值\",{\"1\":{\"194\":1}}],[\"依赖注入\",{\"0\":{\"583\":1,\"597\":1,\"608\":1}}],[\"依赖的传递性\",{\"0\":{\"540\":1}}],[\"依赖坐标\",{\"1\":{\"295\":1}}],[\"依赖jar包\",{\"1\":{\"264\":1}}],[\"依赖范围\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"依赖管理\",{\"0\":{\"257\":1}}],[\"依赖管理和项目生命周期\",{\"1\":{\"98\":1}}],[\"依赖开启对\",{\"1\":{\"114\":1}}],[\"依赖\",{\"1\":{\"104\":1,\"107\":1,\"110\":1}}],[\"次幂可以使用位与运算代替取模\",{\"1\":{\"193\":1}}],[\"遍历一级文件夹\",{\"1\":{\"981\":1,\"1386\":1}}],[\"遍历全部一级文件对象\",{\"1\":{\"981\":1,\"1386\":1}}],[\"遍历全部方法\",{\"1\":{\"812\":1,\"1217\":1}}],[\"遍历文件夹\",{\"0\":{\"970\":1,\"1375\":1}}],[\"遍历每个键\",{\"1\":{\"906\":1,\"1311\":1}}],[\"遍历set集合\",{\"1\":{\"906\":1,\"907\":1,\"1311\":1,\"1312\":1}}],[\"遍历第一个元素\",{\"1\":{\"844\":4,\"1249\":4}}],[\"遍历就是一个一个的把容器中的元素访问一遍\",{\"1\":{\"844\":1,\"1249\":1}}],[\"遍历\",{\"1\":{\"814\":1,\"1219\":1}}],[\"遍历构造器\",{\"1\":{\"804\":1,\"1209\":1}}],[\"遍历集合中的每一个元素\",{\"1\":{\"847\":1,\"1252\":1}}],[\"遍历集合中的影片对象\",{\"1\":{\"751\":1,\"1156\":1}}],[\"遍历集合相当于是迭代器的简化写法\",{\"1\":{\"845\":1,\"1250\":1}}],[\"遍历集合\",{\"1\":{\"751\":1,\"1156\":1}}],[\"遍历并删除元素\",{\"1\":{\"751\":1,\"1156\":1}}],[\"遍历结果\",{\"1\":{\"750\":1,\"1155\":1}}],[\"遍历字符串中的每个字符\",{\"1\":{\"743\":1,\"1148\":1}}],[\"遍历cookie对象方法获取数据\",{\"1\":{\"329\":1}}],[\"遍历数组\",{\"1\":{\"329\":1}}],[\"遍历产生的临时变量\",{\"1\":{\"323\":1}}],[\"遍历展现数据\",{\"1\":{\"321\":1}}],[\"遍历过程中若发现key已经存在直接覆盖value\",{\"1\":{\"190\":1}}],[\"遍历table\",{\"1\":{\"190\":1}}],[\"判断list里数是否满足条件\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"判断指定值是否符合条件\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"判断函数\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"判断dir是否是目录\",{\"1\":{\"981\":1,\"1386\":1}}],[\"判断文件名是否一样\",{\"1\":{\"981\":1,\"1386\":1}}],[\"判断文件是文件还是文件夹\",{\"1\":{\"966\":1,\"1371\":1}}],[\"判断文件类型\",{\"0\":{\"966\":1,\"1371\":1}}],[\"判断文件夹是否存在\",{\"1\":{\"965\":1,\"1370\":1}}],[\"判断路径是否存在\",{\"1\":{\"965\":2,\"1370\":2}}],[\"判断账户余额\",{\"1\":{\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":1}}],[\"判断集合中是否包含指定的值\",{\"1\":{\"904\":1,\"1309\":1}}],[\"判断集合中是否包含指定的键\",{\"1\":{\"904\":1,\"1309\":1}}],[\"判断集合中是否包含某个元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"判断集合是否为空\",{\"1\":{\"842\":1,\"904\":2,\"1247\":1,\"1309\":2}}],[\"判断不成立\",{\"1\":{\"831\":1,\"1236\":1}}],[\"判断不会成立\",{\"1\":{\"831\":1,\"1236\":1}}],[\"判断成立\",{\"1\":{\"831\":1,\"1236\":1}}],[\"判断当前位置是否为null\",{\"1\":{\"888\":1,\"1293\":1}}],[\"判断当前集合是否为空\",{\"1\":{\"842\":1,\"1247\":1}}],[\"判断当前集合中是否包含指定的对象\",{\"1\":{\"842\":1,\"1247\":1}}],[\"判断当前中间位置的元素和要找的大小情况\",{\"1\":{\"794\":1,\"1199\":1}}],[\"判断当前对象的真实类型\",{\"1\":{\"732\":1,\"1137\":1}}],[\"判断变量是否为null\",{\"1\":{\"759\":1,\"1164\":1}}],[\"判断类型是否一样\",{\"1\":{\"756\":1,\"1161\":1}}],[\"判断2个对象的内容是否一样\",{\"1\":{\"756\":1,\"1161\":1}}],[\"判断o是不是学生类型\",{\"1\":{\"756\":1,\"1161\":1}}],[\"判断是否能互通\",{\"1\":{\"1433\":1}}],[\"判断是否存在一级文件对象\",{\"1\":{\"981\":1,\"1386\":1}}],[\"判断是否是自己想要的\",{\"1\":{\"981\":1,\"1386\":1}}],[\"判断是否是文件\",{\"1\":{\"981\":1,\"1386\":1}}],[\"判断是否包含某个值\",{\"1\":{\"904\":1,\"1309\":1}}],[\"判断是否包含某个键\",{\"1\":{\"904\":1,\"1309\":1}}],[\"判断是否需要扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"判断是否有对应的class文件\",{\"1\":{\"168\":1}}],[\"判断是以什么开始\",{\"1\":{\"743\":1,\"1148\":1}}],[\"判断字符串中是否包含\",{\"1\":{\"743\":1,\"1148\":1}}],[\"判断关键字\",{\"1\":{\"732\":1,\"1137\":1}}],[\"判断标准和hashmap判断标准相同\",{\"1\":{\"194\":1}}],[\"判断\",{\"1\":{\"191\":1,\"507\":1,\"743\":1,\"1148\":1}}],[\"判断实际存在的键值对数量size是否超多了最大容量threshold\",{\"1\":{\"190\":1}}],[\"判断table\",{\"1\":{\"190\":3}}],[\"判断键值对数组table是否为空或为null\",{\"1\":{\"190\":1}}],[\"8之后新增的一个重要的函数接口\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"8之前\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"8之前接口中的成员只有\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"8之前采用的是拉链法\",{\"1\":{\"189\":1}}],[\"8占3个字节\",{\"1\":{\"994\":1,\"1399\":1}}],[\"8的字符集编码\",{\"1\":{\"986\":1,\"1391\":1}}],[\"8也要兼容ascii编码表\",{\"1\":{\"986\":1,\"1391\":1}}],[\"8编码中一个中文占3个字节\",{\"1\":{\"987\":1,\"1392\":1}}],[\"8编码后一个中文一般以三个字节的形式存储\",{\"1\":{\"986\":1,\"1391\":1}}],[\"8编码得到\",{\"1\":{\"309\":2}}],[\"8不支持\",{\"1\":{\"909\":1,\"1314\":1}}],[\"8`\",{\"1\":{\"831\":1,\"1236\":1}}],[\"8新增方法\",{\"1\":{\"721\":1,\"1126\":1}}],[\"8fc0a4b3b3a8\",{\"1\":{\"496\":2}}],[\"87\",{\"1\":{\"496\":1}}],[\"86\",{\"1\":{\"496\":1}}],[\"85\",{\"1\":{\"496\":1}}],[\"84\",{\"1\":{\"496\":1}}],[\"8484\",{\"1\":{\"315\":1,\"1014\":1,\"1419\":1}}],[\"83\",{\"1\":{\"496\":1}}],[\"82\",{\"1\":{\"496\":1,\"620\":1}}],[\"81\",{\"1\":{\"496\":1,\"620\":1}}],[\"80个学生的选择\",{\"1\":{\"908\":1,\"1313\":1}}],[\"8000\",{\"1\":{\"495\":1}}],[\"8020\",{\"1\":{\"389\":1}}],[\"8020<\",{\"1\":{\"386\":1}}],[\"8082\",{\"1\":{\"495\":1}}],[\"8081\",{\"1\":{\"392\":1,\"395\":3}}],[\"8088\",{\"1\":{\"387\":1,\"494\":2,\"495\":2,\"496\":14}}],[\"8089<\",{\"1\":{\"386\":1}}],[\"8080或http\",{\"1\":{\"354\":1}}],[\"8080\",{\"1\":{\"295\":1,\"302\":7,\"307\":2,\"354\":2,\"495\":1,\"1466\":2}}],[\"80\",{\"1\":{\"356\":2,\"495\":3,\"496\":3,\"620\":1,\"891\":1,\"908\":2,\"1296\":1,\"1313\":2}}],[\"80端口是访问网站的默认端口\",{\"1\":{\"356\":1}}],[\"8888\",{\"1\":{\"1449\":2,\"1450\":2}}],[\"88\",{\"1\":{\"354\":1,\"356\":2,\"358\":1,\"365\":4,\"366\":6,\"405\":1,\"496\":1,\"663\":1,\"751\":9,\"794\":1,\"1068\":1,\"1156\":9,\"1199\":1}}],[\"8859\",{\"1\":{\"309\":16,\"314\":1}}],[\"8u351\",{\"1\":{\"353\":2}}],[\"8对字节进行解码获取内容\",{\"1\":{\"309\":1}}],[\"89\",{\"1\":{\"309\":4,\"496\":1}}],[\"8进行url编码为\",{\"1\":{\"309\":2}}],[\"8将字节数组转换为字符串\",{\"1\":{\"309\":1}}],[\"8<\",{\"1\":{\"258\":1,\"264\":1,\"557\":3,\"570\":1,\"615\":1}}],[\"8中\",{\"1\":{\"217\":1}}],[\"8\",{\"0\":{\"1025\":1,\"1475\":1},\"1\":{\"217\":1,\"233\":1,\"251\":1,\"258\":1,\"264\":4,\"267\":1,\"270\":1,\"309\":9,\"314\":2,\"318\":1,\"320\":1,\"331\":2,\"344\":1,\"353\":1,\"386\":2,\"481\":4,\"494\":3,\"496\":7,\"557\":1,\"562\":1,\"570\":2,\"579\":1,\"601\":1,\"615\":1,\"647\":1,\"743\":1,\"808\":1,\"821\":1,\"829\":2,\"831\":1,\"847\":3,\"888\":2,\"896\":1,\"897\":1,\"904\":1,\"948\":1,\"981\":1,\"986\":2,\"997\":4,\"1020\":1,\"1024\":3,\"1052\":1,\"1148\":1,\"1213\":1,\"1226\":1,\"1234\":2,\"1236\":1,\"1252\":3,\"1293\":2,\"1301\":1,\"1302\":1,\"1309\":1,\"1353\":1,\"1386\":1,\"1391\":2,\"1402\":4,\"1466\":2,\"1470\":1,\"1474\":3}}],[\"8在解决哈希冲突时有了较大的变化\",{\"1\":{\"189\":1}}],[\"8有什么区别\",{\"0\":{\"189\":1}}],[\"出队3个后\",{\"1\":{\"865\":1,\"1270\":1}}],[\"出队\",{\"1\":{\"865\":1,\"1270\":1}}],[\"出队列\",{\"1\":{\"851\":1,\"1256\":1}}],[\"出栈\",{\"1\":{\"850\":1,\"865\":1,\"1255\":1,\"1270\":1}}],[\"出现无此元素异常\",{\"1\":{\"844\":1,\"1249\":1}}],[\"出现在成员方法\",{\"1\":{\"661\":1,\"1066\":1}}],[\"出现异常自己捕获处理\",{\"1\":{\"633\":1,\"1038\":1}}],[\"出现异常直接抛出去给调用者\",{\"1\":{\"633\":2,\"1038\":2}}],[\"出现异常了\",{\"1\":{\"573\":1}}],[\"出现冲突\",{\"1\":{\"188\":1}}],[\"出异常回滚事务\",{\"1\":{\"535\":1}}],[\"出错后\",{\"1\":{\"321\":1}}],[\"出口的启示\",{\"0\":{\"83\":1}}],[\"说了\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"说一说arraylist的扩容机制吧\",{\"1\":{\"831\":1,\"1236\":1}}],[\"说一下线程池的核心参数\",{\"0\":{\"219\":1}}],[\"说一下\",{\"0\":{\"188\":1}}],[\"说明重写了tostring方法\",{\"1\":{\"839\":1,\"840\":1,\"1244\":1,\"1245\":1}}],[\"说明arraylist重写了tostring方法\",{\"1\":{\"747\":1,\"1152\":1}}],[\"说明编译时进行了编译优化\",{\"1\":{\"743\":1,\"1148\":1}}],[\"说明\",{\"1\":{\"240\":1,\"288\":1,\"754\":1,\"762\":1,\"763\":1,\"767\":1,\"769\":1,\"773\":1,\"774\":1,\"780\":1,\"781\":1,\"784\":1,\"785\":1,\"804\":1,\"806\":1,\"808\":1,\"810\":1,\"812\":1,\"861\":1,\"865\":1,\"895\":1,\"896\":1,\"904\":1,\"925\":1,\"926\":2,\"939\":2,\"948\":1,\"954\":2,\"955\":2,\"965\":1,\"966\":1,\"968\":1,\"969\":1,\"970\":1,\"994\":2,\"1007\":1,\"1011\":2,\"1014\":1,\"1025\":1,\"1159\":1,\"1167\":1,\"1168\":1,\"1172\":1,\"1174\":1,\"1178\":1,\"1179\":1,\"1185\":1,\"1186\":1,\"1189\":1,\"1190\":1,\"1209\":1,\"1211\":1,\"1213\":1,\"1215\":1,\"1217\":1,\"1266\":1,\"1270\":1,\"1300\":1,\"1301\":1,\"1309\":1,\"1330\":1,\"1331\":2,\"1344\":2,\"1353\":1,\"1359\":2,\"1360\":2,\"1370\":1,\"1371\":1,\"1373\":1,\"1374\":1,\"1375\":1,\"1399\":2,\"1412\":1,\"1416\":2,\"1419\":1,\"1433\":1,\"1447\":1,\"1448\":1,\"1449\":1,\"1457\":1,\"1458\":1,\"1460\":1,\"1461\":1,\"1475\":1}}],[\"说说线程包含哪些状态\",{\"0\":{\"203\":1}}],[\"说到业余爱好的话我会经常整理学习过的知识以及整理博客\",{\"1\":{\"121\":1}}],[\"执行accept\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"执行add方法\",{\"1\":{\"814\":1,\"1219\":1}}],[\"执行add\",{\"1\":{\"187\":1}}],[\"执行输出\",{\"1\":{\"956\":2,\"1361\":2}}],[\"执行一次~~~\",{\"1\":{\"954\":1,\"1359\":1}}],[\"执行的线程\",{\"1\":{\"948\":1,\"1353\":1}}],[\"执行完毕以后自动解锁\",{\"1\":{\"937\":1,\"1342\":1}}],[\"执行完毕后自动解锁\",{\"1\":{\"933\":1,\"1338\":1}}],[\"执行完毕后\",{\"1\":{\"369\":1}}],[\"执行完毕后输入刚刚得到的初始密码\",{\"1\":{\"347\":1,\"350\":1}}],[\"执行任务\",{\"1\":{\"921\":1,\"948\":2,\"1326\":1,\"1353\":2}}],[\"执行不同的行为\",{\"0\":{\"724\":1,\"1129\":1}}],[\"执行语句\",{\"1\":{\"653\":2,\"1058\":2}}],[\"执行package之前建议执行clean\",{\"1\":{\"623\":1}}],[\"执行流程\",{\"0\":{\"576\":1}}],[\"执行顺序\",{\"1\":{\"522\":1}}],[\"执行时机不一样\",{\"1\":{\"522\":1}}],[\"执行时就不用再进行这些步骤了\",{\"1\":{\"234\":1}}],[\"执行如下命令启动nginx\",{\"1\":{\"495\":1}}],[\"执行如下命令验证yarn是否正常\",{\"1\":{\"387\":1}}],[\"执行visudo命令会自动通过vi编辑器打开\",{\"1\":{\"462\":1}}],[\"执行source\",{\"1\":{\"386\":1}}],[\"执行sql语句\",{\"1\":{\"230\":2,\"264\":2,\"265\":1}}],[\"执行sql\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":2}}],[\"执行redis\",{\"1\":{\"360\":1}}],[\"执行验证\",{\"1\":{\"353\":1}}],[\"执行后面的命令\",{\"1\":{\"254\":1}}],[\"执行查询的sql\",{\"1\":{\"240\":1}}],[\"执行docker\",{\"1\":{\"494\":2}}],[\"执行dql语句\",{\"1\":{\"230\":1}}],[\"执行dml\",{\"1\":{\"230\":1}}],[\"执行成功也可能返回\",{\"1\":{\"230\":1}}],[\"执行存储过程的对象\",{\"1\":{\"229\":1}}],[\"执行普通的sql对象\",{\"1\":{\"229\":1}}],[\"执行结束是终止状态\",{\"1\":{\"204\":1}}],[\"执行\",{\"1\":{\"198\":2,\"347\":1,\"350\":1,\"375\":1,\"387\":1,\"414\":1,\"629\":2,\"831\":1,\"948\":1,\"1034\":2,\"1236\":1,\"1353\":1}}],[\"执行这些方法\",{\"1\":{\"163\":1}}],[\"双方建立信任的过程\",{\"1\":{\"1441\":1}}],[\"双链表\",{\"1\":{\"853\":1,\"865\":1,\"1258\":1,\"1270\":1}}],[\"双列\",{\"1\":{\"835\":1,\"1240\":1}}],[\"双向链表\",{\"1\":{\"187\":1}}],[\"双写一致性\",{\"0\":{\"127\":1},\"1\":{\"127\":1}}],[\"转成小类\",{\"1\":{\"727\":1,\"1132\":1}}],[\"转\",{\"1\":{\"413\":1}}],[\"转大写\",{\"1\":{\"413\":1}}],[\"转发\",{\"1\":{\"313\":1}}],[\"转发地址栏的url不会变\",{\"1\":{\"310\":1}}],[\"转换真实类型\",{\"1\":{\"790\":1,\"1195\":1}}],[\"转换过程中可能导致溢出或损失精度\",{\"1\":{\"650\":1,\"1055\":1}}],[\"转换为字节数据\",{\"1\":{\"309\":1}}],[\"转换list之后修改数组会影响list吗\",{\"0\":{\"185\":1}}],[\"转义字符\",{\"1\":{\"271\":2,\"819\":1,\"1224\":1}}],[\"转眼间进入了挑战二\",{\"1\":{\"32\":1}}],[\"相同返回true\",{\"1\":{\"754\":1,\"1159\":1}}],[\"相反\",{\"1\":{\"437\":1}}],[\"相当于是一个单线程的效果了\",{\"1\":{\"917\":1,\"1322\":1}}],[\"相当于java\",{\"1\":{\"819\":4,\"1224\":4}}],[\"相当于创建的子类对象\",{\"1\":{\"738\":2,\"1143\":2}}],[\"相当于\",{\"1\":{\"435\":5}}],[\"相当于一个日志文件\",{\"1\":{\"424\":1}}],[\"相当于for循环\",{\"1\":{\"323\":1}}],[\"相当于default\",{\"1\":{\"274\":1}}],[\"相对路径\",{\"1\":{\"965\":1,\"1370\":1}}],[\"相对于synchronized它具备以下特点\",{\"1\":{\"214\":1}}],[\"相对来说会影响一部分的性能\",{\"1\":{\"182\":1}}],[\"相比于直接在\",{\"1\":{\"111\":1}}],[\"首尾操作的速度是极快的\",{\"1\":{\"864\":1,\"1269\":1}}],[\"首要条件就是要有多台linux服务器可用\",{\"1\":{\"365\":1}}],[\"首地址+i\",{\"1\":{\"182\":2}}],[\"首先客户端发请求\",{\"1\":{\"1441\":1}}],[\"首先客户端向服务器发出连接请求\",{\"1\":{\"1441\":1}}],[\"首先必须是接口\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"首先我们先了解单列集合\",{\"1\":{\"835\":1,\"1240\":1}}],[\"首先会向集合中加入一个大小为10的数组\",{\"1\":{\"863\":1,\"1268\":1}}],[\"首先会调用arrays\",{\"1\":{\"831\":1,\"1236\":1}}],[\"首先会查找本地仓库中是否有对应的jar包\",{\"1\":{\"250\":1}}],[\"首先把object类型的o强转为student类型的student\",{\"1\":{\"756\":1,\"1161\":1}}],[\"首先判断是不是已经创建了一个对象\",{\"1\":{\"688\":1,\"1093\":1}}],[\"首先user\",{\"1\":{\"676\":1,\"1081\":1}}],[\"首先方法区加载test\",{\"1\":{\"663\":1,\"1068\":1}}],[\"首先准备一个汽车类\",{\"1\":{\"662\":1,\"1067\":1}}],[\"首先需要安装\",{\"1\":{\"488\":1}}],[\"首先\",{\"1\":{\"354\":1,\"365\":1,\"375\":1}}],[\"首先中文参数通过浏览器的http协议发送到tomcat中\",{\"1\":{\"309\":2}}],[\"首先最简单的方法就是在t2线程中调用t1\",{\"1\":{\"205\":1}}],[\"首先获取key的hashcode值\",{\"1\":{\"192\":1}}],[\"首先在回答这个问题之前\",{\"1\":{\"182\":1}}],[\"首先在二级索引中找到arm对应的主键id\",{\"1\":{\"146\":1}}],[\"首先编写一个类并使用\",{\"1\":{\"160\":1}}],[\"首先要结合自己的项目业务来分析\",{\"1\":{\"127\":1}}],[\"首先大量的并发请求请求到一个key刚好在缓存中过期了\",{\"1\":{\"125\":1}}],[\"首先检查到redis中该id对应的缓存是空字符串\",{\"1\":{\"124\":1}}],[\"首先明确客户端\",{\"1\":{\"103\":1}}],[\"首先使用jps查看java线程id\",{\"1\":{\"216\":1}}],[\"首先使用\",{\"1\":{\"98\":1}}],[\"首先管理员创建接口后通过核心业务后端\",{\"1\":{\"97\":1}}],[\"数值类型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"数值\",{\"1\":{\"511\":1}}],[\"数字来说是够用的\",{\"1\":{\"984\":1,\"1389\":1}}],[\"数字式视频接口\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"数字加在动作之前\",{\"1\":{\"437\":1}}],[\"数字通常代表重复做几次的意思\",{\"1\":{\"437\":1}}],[\"数字是很有意义的\",{\"1\":{\"437\":1}}],[\"数字\",{\"1\":{\"435\":2}}],[\"数量大小\",{\"1\":{\"395\":1}}],[\"数组名为table\",{\"1\":{\"888\":1,\"1293\":1}}],[\"数组或collection集合\",{\"1\":{\"845\":1,\"1250\":1}}],[\"数组是不太合适的\",{\"1\":{\"833\":1,\"1238\":1}}],[\"数组容量扩为\",{\"1\":{\"831\":1,\"1236\":1}}],[\"数组容量为\",{\"1\":{\"831\":1,\"1236\":1}}],[\"数组获取流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"数组操作工具类\",{\"1\":{\"792\":1,\"1197\":1}}],[\"数组拷贝\",{\"1\":{\"769\":1,\"1174\":1}}],[\"数组源数组\",{\"1\":{\"769\":1,\"1174\":1}}],[\"数组定义完成并启动后\",{\"1\":{\"833\":1,\"1238\":1}}],[\"数组定义完\",{\"1\":{\"744\":1,\"1149\":1}}],[\"数组的手段\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"数组的缺陷就暴漏出来了\",{\"1\":{\"744\":1,\"1149\":1}}],[\"数组的特点\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"数组的寻址公式就是\",{\"1\":{\"182\":1}}],[\"数组遍历是不用挨个遍历的\",{\"1\":{\"653\":1,\"1058\":1}}],[\"数组索引越界\",{\"1\":{\"631\":1,\"1036\":1}}],[\"数组+红黑树+链表\",{\"1\":{\"217\":1}}],[\"数组里面可以存储具体的元素\",{\"1\":{\"217\":1}}],[\"数组长度必须是2的n次幂\",{\"1\":{\"192\":1}}],[\"数组长度\",{\"1\":{\"190\":1,\"191\":1}}],[\"数组长度达到64时\",{\"1\":{\"189\":1}}],[\"数组中每一格就是一个链表\",{\"1\":{\"189\":1}}],[\"数组中元素类型的大小\",{\"1\":{\"182\":1}}],[\"数组也不受影响\",{\"1\":{\"186\":1}}],[\"数组不会影响\",{\"1\":{\"186\":1}}],[\"数组受影响吗\",{\"0\":{\"186\":1}}],[\"数组调用arrays\",{\"0\":{\"185\":1}}],[\"数组转list\",{\"1\":{\"184\":1}}],[\"数组\",{\"0\":{\"181\":1,\"852\":1,\"1257\":1},\"1\":{\"181\":1,\"187\":1,\"280\":1,\"281\":2,\"308\":2,\"646\":1,\"824\":1,\"848\":1,\"873\":1,\"888\":1,\"1023\":1,\"1051\":1,\"1229\":1,\"1253\":1,\"1278\":1,\"1293\":1,\"1473\":1}}],[\"数据包对象\",{\"0\":{\"1447\":1}}],[\"数据在网络中传输的规则\",{\"1\":{\"1427\":1}}],[\"数据指向的下一个的地址\",{\"1\":{\"853\":1,\"1258\":1}}],[\"数据从前端离开队列称为\",{\"1\":{\"851\":1,\"1256\":1}}],[\"数据从后端进入队列称为\",{\"1\":{\"851\":1,\"1256\":1}}],[\"数据离开栈称为\",{\"1\":{\"850\":1,\"1255\":1}}],[\"数据进入栈称为\",{\"1\":{\"850\":1,\"1255\":1}}],[\"数据值不能改变\",{\"1\":{\"703\":1,\"1108\":1}}],[\"数据值\",{\"1\":{\"654\":2,\"1059\":2}}],[\"数据与属性的特点是什么\",{\"1\":{\"528\":1}}],[\"数据具体有哪些属性\",{\"1\":{\"528\":1}}],[\"数据是什么\",{\"1\":{\"528\":1}}],[\"数据控制语言\",{\"1\":{\"505\":1}}],[\"数据\",{\"1\":{\"505\":1,\"544\":1,\"835\":1,\"1240\":1}}],[\"数据大小\",{\"1\":{\"336\":1}}],[\"数据会携带来写带去的所以不安全\",{\"1\":{\"333\":1}}],[\"数据持久层\",{\"1\":{\"326\":1}}],[\"数据持久化\",{\"1\":{\"262\":1}}],[\"数据访问层\",{\"1\":{\"326\":2}}],[\"数据源信息\",{\"1\":{\"267\":1}}],[\"数据操纵语言\",{\"1\":{\"155\":1}}],[\"数据定义语言\",{\"1\":{\"155\":1,\"505\":1}}],[\"数据也能够保持不变\",{\"1\":{\"151\":1}}],[\"数据必须保持⼀致性状态\",{\"1\":{\"151\":1}}],[\"数据量大\",{\"1\":{\"149\":1}}],[\"数据复制和同步的延迟不能超过10秒\",{\"1\":{\"137\":1}}],[\"数据过期策略\",{\"1\":{\"129\":1}}],[\"数据过期之后就需要将数据从内存中删除\",{\"1\":{\"129\":1}}],[\"数据恢复稳健等场景\",{\"1\":{\"128\":1}}],[\"数据的持久化是怎么做的\",{\"0\":{\"128\":1}}],[\"数据结构是计算机底层存储\",{\"1\":{\"849\":1,\"1254\":1}}],[\"数据结构概述\",{\"0\":{\"849\":1,\"1254\":1},\"1\":{\"848\":1,\"1253\":1}}],[\"数据结构中的内容\",{\"1\":{\"793\":1,\"1198\":1}}],[\"数据结构跟hashmap的数据结构是一样的\",{\"1\":{\"217\":1}}],[\"数据结构来存储推荐用户列表\",{\"1\":{\"114\":1}}],[\"数据结构\",{\"0\":{\"114\":1},\"1\":{\"187\":1,\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"数据结构的奥秘\",{\"0\":{\"34\":1}}],[\"数据库设计步骤\",{\"0\":{\"528\":1}}],[\"数据库设计\",{\"0\":{\"527\":1}}],[\"数据库名称\",{\"1\":{\"507\":4}}],[\"数据库查询语言\",{\"1\":{\"505\":1}}],[\"数据库操作语言\",{\"1\":{\"505\":1}}],[\"数据库相关概念\",{\"0\":{\"498\":1}}],[\"数据库的事务是一种机制\",{\"1\":{\"535\":1}}],[\"数据库的迁移\",{\"1\":{\"496\":1}}],[\"数据库的jdbc连接地址\",{\"1\":{\"240\":1}}],[\"数据库迁移工具\",{\"1\":{\"494\":1}}],[\"数据库系统必须保证事务之间相互隔离\",{\"1\":{\"151\":1}}],[\"数据库系统维护了满足特定查找算法的数据结构\",{\"1\":{\"143\":1}}],[\"数据库中的数据可\",{\"1\":{\"151\":1}}],[\"数据库中也不存在\",{\"1\":{\"124\":1}}],[\"数据库中查询到数据之后写到缓存中然后返回数据\",{\"1\":{\"124\":1}}],[\"数据库连接池工具类\",{\"1\":{\"245\":2}}],[\"数据库连接池的配置文件\",{\"1\":{\"240\":1}}],[\"数据库连接池的实现\",{\"0\":{\"237\":1}}],[\"数据库连接池是一个容器\",{\"1\":{\"236\":1}}],[\"数据库连接池\",{\"0\":{\"235\":1}}],[\"数据库连接和图形界面开发等技能领域\",{\"1\":{\"58\":1}}],[\"数据库连接\",{\"0\":{\"56\":1}}],[\"数据库\",{\"1\":{\"49\":1,\"388\":1,\"402\":1,\"505\":1}}],[\"数据库和网络编程\",{\"1\":{\"46\":1}}],[\"数据类型\",{\"0\":{\"511\":1,\"644\":1,\"646\":1,\"1049\":1,\"1051\":1},\"1\":{\"22\":1,\"233\":1,\"512\":1,\"868\":1,\"893\":1,\"1273\":1,\"1298\":1}}],[\"限制生产者的生产速度\",{\"1\":{\"179\":1}}],[\"限流\",{\"1\":{\"108\":1}}],[\"顺序消费\",{\"1\":{\"176\":1}}],[\"削峰\",{\"1\":{\"176\":1}}],[\"除大写字母\",{\"1\":{\"819\":1,\"1224\":1}}],[\"除希腊语区块中的一个字符外的任何字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"除a\",{\"1\":{\"819\":1,\"1224\":1}}],[\"除数\",{\"1\":{\"774\":1,\"1179\":1}}],[\"除法\",{\"1\":{\"774\":2,\"1179\":2}}],[\"除非用户点击离线才进行关闭\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"除非jvm退出\",{\"1\":{\"1000\":1,\"1405\":1}}],[\"除非自定义类实现了比较规则的comparable接口\",{\"1\":{\"896\":1,\"1301\":1}}],[\"除非修改此文件夹权限\",{\"1\":{\"354\":1}}],[\"除非是整个网络环境都发生了故障\",{\"1\":{\"174\":1}}],[\"除了为hadoop和hbase提供协调服务外\",{\"1\":{\"374\":1}}],[\"除了提高网络\",{\"1\":{\"137\":1}}],[\"除了\",{\"1\":{\"99\":1}}],[\"仍然需要能够保证对外提供满足一致性和可用性的服务\",{\"1\":{\"174\":1}}],[\"仍有更多的知识等待他学习和探索\",{\"1\":{\"74\":1}}],[\"采用三次握手方式建立连接\",{\"1\":{\"1439\":1}}],[\"采用\",{\"1\":{\"217\":1}}],[\"采用互斥的方式让\",{\"1\":{\"210\":1}}],[\"采用链表存储\",{\"1\":{\"187\":1}}],[\"采用数组存储\",{\"1\":{\"187\":1}}],[\"采用cp模式\",{\"1\":{\"173\":1}}],[\"采⽤了⾮阻塞\",{\"1\":{\"139\":1}}],[\"④nacos集群默认采用ap方式\",{\"1\":{\"173\":1}}],[\"③nacos支持服务列表变更的消息推送模式\",{\"1\":{\"173\":1}}],[\"③三级缓存\",{\"1\":{\"164\":1}}],[\"②临时实例心跳不正常会被剔除\",{\"1\":{\"173\":1}}],[\"②二级缓存\",{\"1\":{\"164\":1}}],[\"①nacos支持服务端主动检测提供者状态\",{\"1\":{\"173\":1}}],[\"①一级缓存\",{\"1\":{\"164\":1}}],[\"选取元素后移位\",{\"1\":{\"844\":4,\"1249\":4}}],[\"选项用户组\",{\"1\":{\"466\":1}}],[\"选项用户\",{\"1\":{\"466\":1}}],[\"选项\",{\"1\":{\"449\":1,\"454\":1,\"460\":2,\"465\":1,\"466\":2}}],[\"选项表示\",{\"1\":{\"440\":1}}],[\"选中项目\",{\"1\":{\"293\":1}}],[\"选择排序\",{\"1\":{\"794\":1,\"1199\":1}}],[\"选择排序和二分查找\",{\"0\":{\"794\":1,\"1199\":1}}],[\"选择解压的目的地\",{\"1\":{\"490\":1}}],[\"选择对应的版本\",{\"1\":{\"399\":1}}],[\"选择web项目骨架\",{\"1\":{\"292\":1}}],[\"选择nacos还要一个重要原因就是它支持配置中心\",{\"1\":{\"173\":1}}],[\"选用了哪种\",{\"0\":{\"114\":1}}],[\"选用\",{\"1\":{\"95\":1,\"114\":1}}],[\"汇报健康状态\",{\"1\":{\"172\":1}}],[\"消费型函数式接口\",{\"0\":{\"1027\":1,\"1477\":1}}],[\"消费型\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"消费者端应该使用单线程模型\",{\"1\":{\"177\":1}}],[\"消费者向注册中心拉取服务列表信息\",{\"1\":{\"172\":1}}],[\"消息还没有发完\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"消息通信\",{\"1\":{\"912\":1,\"1317\":1}}],[\"消息堆积的问题产生的根源就是\",{\"1\":{\"179\":1}}],[\"消息堆积的问题\",{\"1\":{\"176\":1}}],[\"消息的订阅者就监听消息队列发现有消息则执行具体的下单操作修改数据库的信息\",{\"1\":{\"176\":1}}],[\"消息的重复消费以及消息堆积的问题\",{\"1\":{\"92\":1}}],[\"消息队列可以用来干什么\",{\"0\":{\"176\":1}}],[\"消息队列\",{\"0\":{\"175\":1},\"1\":{\"92\":1}}],[\"熔断降级\",{\"1\":{\"171\":1}}],[\"关羽\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"关机当前centos系统虚拟机\",{\"1\":{\"365\":1}}],[\"关闭资源\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"关闭对象资源\",{\"1\":{\"1449\":2}}],[\"关闭流\",{\"1\":{\"998\":1,\"1000\":1,\"1403\":1,\"1405\":1}}],[\"关闭后流就不能使用了\",{\"1\":{\"997\":1,\"1402\":1}}],[\"关闭线程池\",{\"1\":{\"948\":1,\"1353\":1}}],[\"关闭进程\",{\"0\":{\"479\":1}}],[\"关闭标准输入\",{\"1\":{\"424\":1}}],[\"关闭xshell\",{\"1\":{\"424\":1}}],[\"关闭\",{\"1\":{\"356\":1,\"358\":2,\"360\":2,\"819\":1,\"1224\":1}}],[\"关闭开机自启\",{\"1\":{\"356\":2,\"358\":2,\"360\":2}}],[\"关闭防火墙和selinux\",{\"0\":{\"371\":1}}],[\"关闭防火墙\",{\"1\":{\"354\":3,\"356\":1,\"358\":1,\"360\":1,\"362\":1,\"380\":1}}],[\"关联对方主键\",{\"1\":{\"529\":1}}],[\"关联的表\",{\"1\":{\"526\":1}}],[\"关联的monitor\",{\"1\":{\"210\":1}}],[\"关联\",{\"1\":{\"526\":1}}],[\"关联dept表的主键\",{\"1\":{\"526\":1}}],[\"关联调用了wait方法的线程\",{\"1\":{\"210\":1}}],[\"关联没有抢到锁的线程\",{\"1\":{\"210\":1}}],[\"关联monitor\",{\"1\":{\"210\":1}}],[\"关键\",{\"1\":{\"800\":1,\"1205\":1}}],[\"关键字建议使用大写\",{\"1\":{\"504\":1}}],[\"关键字\",{\"1\":{\"277\":1,\"454\":2,\"525\":1}}],[\"关键字的底层原理\",{\"0\":{\"210\":1}}],[\"关键的是内部就是读取了该项目和该项目引用的jar包的的classpath路径下meta\",{\"1\":{\"168\":1}}],[\"关系型数据库想要被java操作就必须自己去实现java写的jdbc接口\",{\"1\":{\"225\":1}}],[\"关系型数据库\",{\"0\":{\"503\":1},\"1\":{\"92\":1}}],[\"查阅jdk文档中的\",{\"1\":{\"818\":1,\"1223\":1}}],[\"查无此人\",{\"1\":{\"751\":2,\"1156\":2}}],[\"查找到了\",{\"1\":{\"981\":1,\"1386\":1}}],[\"查找到返回索引\",{\"1\":{\"793\":1,\"1198\":1}}],[\"查找不到返回\",{\"1\":{\"793\":1,\"1198\":1}}],[\"查找大于1g的文件\",{\"1\":{\"453\":1}}],[\"查找实际的\",{\"1\":{\"166\":1}}],[\"查\",{\"1\":{\"418\":1,\"419\":1}}],[\"查看本机ip\",{\"1\":{\"1430\":1}}],[\"查看list\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"查看linux中关于nginx的进程信息\",{\"1\":{\"456\":1}}],[\"查看事务的默认提交方式\",{\"1\":{\"536\":1}}],[\"查看表的结构\",{\"1\":{\"510\":1}}],[\"查看当前使用的数据库\",{\"1\":{\"507\":1}}],[\"查看当前所在的工作目录\",{\"1\":{\"443\":1}}],[\"查看系统资源占用\",{\"1\":{\"481\":1}}],[\"查看进程\",{\"0\":{\"478\":1}}],[\"查看所使用的一系列命令的程序文件存放在哪里\",{\"1\":{\"452\":1}}],[\"查看文件内容\",{\"1\":{\"447\":1}}],[\"查看目录信息\",{\"1\":{\"418\":1}}],[\"查看状态\",{\"1\":{\"358\":1,\"360\":1}}],[\"查看日志检查死锁\",{\"1\":{\"216\":1}}],[\"查询性能降低\",{\"1\":{\"888\":1,\"1293\":1}}],[\"查询性马的信息\",{\"1\":{\"518\":1}}],[\"查询慢\",{\"1\":{\"864\":1,\"1269\":1}}],[\"查询元素慢\",{\"1\":{\"861\":1,\"1266\":1}}],[\"查询速度快\",{\"1\":{\"852\":1,\"1257\":1}}],[\"查询全部\",{\"1\":{\"570\":1}}],[\"查询投影\",{\"0\":{\"546\":1}}],[\"查询条目数\",{\"1\":{\"523\":1}}],[\"查询条件构造器\",{\"1\":{\"99\":1}}],[\"查询其他的字段无任何意义\",{\"1\":{\"522\":1}}],[\"查询的字段为聚合函数和分组字段\",{\"1\":{\"522\":1}}],[\"查询英语成绩的最低分\",{\"1\":{\"521\":2}}],[\"查询数学成绩的平均分\",{\"1\":{\"521\":1}}],[\"查询数学成绩的总分\",{\"1\":{\"521\":1}}],[\"查询数学成绩的最高分\",{\"1\":{\"521\":1}}],[\"查询数学成绩按照降序排列\",{\"1\":{\"519\":1}}],[\"查询数据\",{\"1\":{\"389\":1}}],[\"查询学生信息\",{\"1\":{\"519\":1}}],[\"查询名字中包含德的信息\",{\"1\":{\"518\":1}}],[\"查询第二个字是花的信息\",{\"1\":{\"518\":1}}],[\"查询age在20到30之间的\",{\"1\":{\"518\":1}}],[\"查询语法\",{\"0\":{\"516\":1}}],[\"查询当前数据库下有哪些表的名称\",{\"1\":{\"509\":1}}],[\"查询表结构\",{\"1\":{\"509\":1}}],[\"查询表\",{\"0\":{\"509\":1}}],[\"查询user表中的所有数据\",{\"0\":{\"264\":1}}],[\"查询所有\",{\"1\":{\"245\":2}}],[\"查询所有数据库名称\",{\"1\":{\"504\":2}}],[\"查询所有数据\",{\"1\":{\"241\":1}}],[\"查询频繁的字段\",{\"1\":{\"149\":1}}],[\"查询排序的代价非常大\",{\"1\":{\"148\":1}}],[\"查询效率b+树稳定\",{\"1\":{\"144\":1}}],[\"查询mysql内置自带的表\",{\"1\":{\"142\":1}}],[\"查询中没有表\",{\"1\":{\"142\":1}}],[\"查询\",{\"1\":{\"56\":1,\"241\":1,\"283\":1,\"507\":1,\"508\":1,\"629\":1,\"1034\":1}}],[\"顾名思义\",{\"1\":{\"166\":1}}],[\"控制字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"控制一个对象能够被访问的范围\",{\"1\":{\"702\":1,\"1107\":1}}],[\"控制反转\",{\"0\":{\"582\":1}}],[\"控制流量的中转\",{\"1\":{\"355\":1}}],[\"控制器\",{\"1\":{\"166\":1,\"325\":2}}],[\"控制台观察到服务注册信息\",{\"1\":{\"107\":1}}],[\"去humeng中搜索\",{\"1\":{\"981\":1,\"1386\":1}}],[\"去除重复\",{\"1\":{\"517\":1}}],[\"去向下搜寻\",{\"1\":{\"435\":1}}],[\"去中心化的\",{\"1\":{\"376\":1}}],[\"去匹配查找能处理的\",{\"1\":{\"166\":1,\"167\":1}}],[\"去发现更多意想不到的惊喜和机遇\",{\"1\":{\"75\":1}}],[\"浏览器不能访问出现一直转圈的情况\",{\"1\":{\"495\":1}}],[\"浏览器打开\",{\"1\":{\"362\":1,\"387\":2,\"389\":1,\"392\":1,\"395\":1,\"415\":1}}],[\"浏览器打开管理控制台\",{\"1\":{\"358\":1}}],[\"浏览器携带cookie数据访问服务器的其他资源\",{\"1\":{\"329\":1}}],[\"浏览器请求访问控制器\",{\"1\":{\"325\":1}}],[\"浏览器使用\",{\"1\":{\"313\":1}}],[\"浏览器的路径地址栏url发生改变\",{\"1\":{\"313\":1}}],[\"浏览器对utf\",{\"1\":{\"309\":2}}],[\"浏览器数据\",{\"1\":{\"309\":2}}],[\"浏览器版本\",{\"1\":{\"307\":2}}],[\"浏览器输入url\",{\"1\":{\"295\":1}}],[\"浏览器\",{\"1\":{\"166\":2}}],[\"浏览接口\",{\"1\":{\"95\":1}}],[\"循环结束的时候的时间\",{\"1\":{\"769\":1,\"1174\":1}}],[\"循环开始的时候时间\",{\"1\":{\"769\":1,\"1174\":1}}],[\"循环\",{\"1\":{\"678\":1,\"679\":1,\"1083\":1,\"1084\":1}}],[\"循环依赖在spring中是允许存在\",{\"1\":{\"164\":1}}],[\"循环语句等基本概念\",{\"1\":{\"22\":1}}],[\"检查网络是否连通\",{\"1\":{\"1430\":1}}],[\"检查约束\",{\"1\":{\"525\":1}}],[\"检查确认没有问题就下一步\",{\"1\":{\"405\":1}}],[\"检查mysql服务状态\",{\"1\":{\"398\":1}}],[\"检查mysql的运行状态\",{\"1\":{\"346\":1,\"349\":1}}],[\"检查zookeeper进程是否启动\",{\"1\":{\"375\":1}}],[\"检查端口\",{\"1\":{\"347\":1,\"350\":1}}],[\"检查池中的连接是否仍可用的\",{\"1\":{\"240\":1}}],[\"检查空闲连接的频率\",{\"1\":{\"240\":1}}],[\"检查是否是initializingbean\",{\"1\":{\"163\":1}}],[\"检查异常\",{\"1\":{\"162\":1}}],[\"抛出方法内部的异常\",{\"1\":{\"638\":1,\"1043\":1}}],[\"抛出一个异常给对象调用者\",{\"1\":{\"638\":1,\"1043\":1}}],[\"抛出异常格式\",{\"1\":{\"634\":1,\"1039\":1}}],[\"抛出检查异常\",{\"1\":{\"162\":1}}],[\"抛出和处理异常\",{\"1\":{\"37\":1}}],[\"校验qq号\",{\"1\":{\"818\":1,\"1223\":1}}],[\"校验当前用户是否是管理员使用aop是在around中写\",{\"1\":{\"160\":1}}],[\"校验登录用户是否是管理员\",{\"1\":{\"160\":1}}],[\"抽取并且封装成一个可重用的模块\",{\"1\":{\"160\":1}}],[\"抽象方法没有方法体\",{\"1\":{\"710\":1,\"1115\":1}}],[\"抽象方法\",{\"1\":{\"709\":1,\"713\":1,\"714\":1,\"721\":1,\"1114\":1,\"1118\":1,\"1119\":1,\"1126\":1}}],[\"抽象类不能被创建对象\",{\"1\":{\"738\":1,\"1143\":1}}],[\"抽象类中不一定有抽象方法\",{\"1\":{\"710\":1,\"1115\":1}}],[\"抽象类都具备\",{\"1\":{\"710\":1,\"1115\":1}}],[\"抽象类存在构造器而且还是公有的\",{\"1\":{\"710\":1,\"1115\":1}}],[\"抽象类为什么不能创建对象\",{\"1\":{\"710\":1,\"1115\":1}}],[\"抽象类特征\",{\"0\":{\"710\":1,\"1115\":1}}],[\"抽象类必须使用abstract修饰\",{\"1\":{\"709\":1,\"1114\":1}}],[\"抽象类其实是一种不完全的设计图\",{\"1\":{\"709\":1,\"1114\":1}}],[\"抽象类\",{\"0\":{\"709\":1,\"1114\":1}}],[\"抽象公共模块的主要目的是为了复用代码\",{\"1\":{\"107\":1}}],[\"抽象模型层和业务层代码为公共模块\",{\"1\":{\"95\":1}}],[\"推荐观看黑马视频解析\",{\"1\":{\"855\":1,\"1260\":1}}],[\"推荐使用类名访问\",{\"1\":{\"677\":1,\"1082\":1}}],[\"推荐\",{\"1\":{\"220\":2,\"356\":1,\"358\":1,\"360\":1}}],[\"推荐的一种方式\",{\"1\":{\"158\":1}}],[\"推荐伙伴列表\",{\"1\":{\"109\":1}}],[\"几乎所有的应用程序都需要用到这些共享库\",{\"1\":{\"428\":1}}],[\"几乎所有场景的\",{\"1\":{\"158\":1}}],[\"几乎不丢失数据\",{\"1\":{\"128\":1}}],[\"记录每次读取的字节数\",{\"1\":{\"995\":1,\"1400\":1}}],[\"记录每一次操作的事务id\",{\"1\":{\"154\":1}}],[\"记录牌的大小\",{\"1\":{\"897\":1,\"1302\":1}}],[\"记录日志\",{\"1\":{\"573\":2}}],[\"记录运行过程中的输出\",{\"1\":{\"424\":1}}],[\"记录到日志中\",{\"1\":{\"240\":1}}],[\"记录请求日志\",{\"1\":{\"160\":1}}],[\"记录不同事务修改数据的版本\",{\"1\":{\"154\":1}}],[\"记录慢查询日志\",{\"1\":{\"141\":1}}],[\"排队是排在最后一个位置\",{\"1\":{\"865\":1,\"1270\":1}}],[\"排队\",{\"1\":{\"851\":1,\"931\":1,\"1256\":1,\"1336\":1}}],[\"排序方式\",{\"1\":{\"519\":1}}],[\"排序方式2\",{\"1\":{\"519\":1}}],[\"排序方式1\",{\"1\":{\"519\":1}}],[\"排序查询语法\",{\"1\":{\"519\":1}}],[\"排序查询\",{\"0\":{\"519\":1},\"1\":{\"516\":1}}],[\"排序\",{\"1\":{\"244\":1,\"245\":2,\"793\":1,\"881\":1,\"890\":1,\"897\":1,\"1198\":1,\"1286\":1,\"1295\":1,\"1302\":1}}],[\"排序字段名2\",{\"1\":{\"519\":1}}],[\"排序字段名1\",{\"1\":{\"519\":1}}],[\"排序字段\",{\"1\":{\"243\":1,\"516\":1}}],[\"排序字段order\",{\"1\":{\"149\":1}}],[\"排它锁\",{\"1\":{\"154\":1}}],[\"串行化\",{\"1\":{\"152\":1}}],[\"读写功能上并无变化\",{\"1\":{\"1007\":2,\"1412\":2}}],[\"读写文件数据\",{\"1\":{\"965\":1,\"1370\":1}}],[\"读多少\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1449\":1,\"1450\":1}}],[\"读多少倒多少\",{\"1\":{\"995\":1,\"1400\":1}}],[\"读了几个字节\",{\"1\":{\"995\":4,\"1400\":4}}],[\"读入另一个档案的数据\",{\"1\":{\"437\":1}}],[\"读取一个字符返回\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"读取一个字节\",{\"1\":{\"994\":1,\"1399\":1}}],[\"读取一个字节返回\",{\"1\":{\"994\":1,\"1399\":1}}],[\"读取中文输入使用字符流更合适\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"读取了多少个字节\",{\"1\":{\"996\":1,\"1401\":1}}],[\"读取桶这么大小的文件返回字节的长度\",{\"1\":{\"996\":1,\"1401\":1}}],[\"读取完毕\",{\"1\":{\"995\":1,\"1400\":1}}],[\"读取完毕返回\",{\"1\":{\"994\":1,\"1399\":1}}],[\"读取数据\",{\"1\":{\"995\":1,\"1400\":1}}],[\"读取properties中的属性\",{\"1\":{\"602\":1}}],[\"读取hdfs上文件和运行yarn集群\",{\"1\":{\"392\":1}}],[\"读取文件中的数据\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"读取文件\",{\"1\":{\"315\":1}}],[\"读视图\",{\"1\":{\"154\":1}}],[\"读已提交\",{\"1\":{\"152\":1}}],[\"读未提交\",{\"1\":{\"152\":1}}],[\"读锁\",{\"1\":{\"127\":1}}],[\"丢失更新\",{\"1\":{\"152\":1}}],[\"幻读\",{\"1\":{\"152\":1}}],[\"幻读等问题\",{\"1\":{\"151\":1}}],[\"脏读\",{\"1\":{\"152\":1}}],[\"⼀旦事务提交\",{\"1\":{\"151\":1}}],[\"⼀致性\",{\"1\":{\"151\":1}}],[\"⽐如出现脏读\",{\"1\":{\"151\":1}}],[\"隔离级别不同\",{\"1\":{\"151\":1}}],[\"隔离性\",{\"1\":{\"151\":2,\"536\":1}}],[\"障\",{\"1\":{\"151\":1}}],[\"造成了以下问题\",{\"1\":{\"321\":1}}],[\"造成sql语法错误\",{\"1\":{\"273\":1}}],[\"造成索引失效\",{\"1\":{\"150\":1}}],[\"造成数据库压力激增\",{\"1\":{\"115\":2}}],[\"匹配什么\",{\"1\":{\"819\":1,\"1224\":1}}],[\"匹配\",{\"1\":{\"819\":1,\"1224\":1}}],[\"匹配业务层的所有方法\",{\"1\":{\"615\":1}}],[\"匹配任何以test结尾的内容\",{\"1\":{\"451\":1}}],[\"匹配任何以test开头的内容\",{\"1\":{\"451\":1}}],[\"匹配最左前缀法则\",{\"1\":{\"150\":1}}],[\"匹配伙伴\",{\"1\":{\"109\":1}}],[\"什么时候会开始拒绝任务\",{\"0\":{\"947\":1,\"1352\":1}}],[\"什么时候需要对象再进行bean对象的创建\",{\"1\":{\"165\":1}}],[\"什么东西\",{\"1\":{\"743\":1,\"1148\":1}}],[\"什么情况下会导致索引失效\",{\"1\":{\"150\":1}}],[\"什么情况下索引会失效\",{\"0\":{\"150\":1}}],[\"什么是网络编程\",{\"0\":{\"1423\":1}}],[\"什么是函数式接口\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"什么是方法递归\",{\"1\":{\"972\":1,\"1377\":1}}],[\"什么是线程通信\",{\"1\":{\"939\":1,\"1344\":1}}],[\"什么是线程和进程\",{\"0\":{\"197\":1}}],[\"什么是不可变集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"什么是stream流\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"什么是接口\",{\"1\":{\"713\":1,\"1118\":1}}],[\"什么是继承\",{\"1\":{\"690\":1,\"1095\":1}}],[\"什么是异常\",{\"0\":{\"631\":1,\"1036\":1}}],[\"什么是mybatis\",{\"0\":{\"261\":1}}],[\"什么是坐标\",{\"1\":{\"256\":1}}],[\"什么是aqs\",{\"0\":{\"213\":1}}],[\"什么是aop\",{\"0\":{\"160\":1}}],[\"什么是cas\",{\"0\":{\"211\":1}}],[\"什么是cap理论\",{\"0\":{\"174\":1}}],[\"什么是覆盖索引\",{\"0\":{\"147\":1}}],[\"什么是回表查询\",{\"0\":{\"146\":1}}],[\"什么是非聚簇索引\",{\"0\":{\"145\":1}}],[\"什么是聚簇索引\",{\"0\":{\"145\":1}}],[\"什么是索引\",{\"0\":{\"143\":1}}],[\"什么是缓存雪崩\",{\"0\":{\"126\":1}}],[\"什么是缓存击穿\",{\"0\":{\"125\":1}}],[\"什么是\",{\"0\":{\"101\":1,\"106\":1}}],[\"尽量建立唯一索引\",{\"1\":{\"149\":1}}],[\"尽量选择区分度较高的列作为索引\",{\"1\":{\"149\":1}}],[\"尽量引入相同的依赖和配置\",{\"1\":{\"107\":1}}],[\"走代理\",{\"1\":{\"629\":1,\"1034\":1}}],[\"走红黑树的添加\",{\"1\":{\"191\":1}}],[\"走索引的案例\",{\"1\":{\"150\":1}}],[\"走的覆盖索引\",{\"1\":{\"148\":1}}],[\"走出迷宫\",{\"1\":{\"83\":1}}],[\"走出困境\",{\"1\":{\"78\":1}}],[\"确认收发信息都没有问题\",{\"1\":{\"1441\":1}}],[\"确实会有很大的内存压力哦\",{\"1\":{\"384\":1}}],[\"确定了id之后\",{\"1\":{\"148\":1}}],[\"确保目标存在\",{\"1\":{\"450\":1}}],[\"确保已经跟随前面的\",{\"1\":{\"377\":1}}],[\"确保如下目录存在\",{\"1\":{\"375\":1}}],[\"确保数据一致性\",{\"1\":{\"115\":1}}],[\"确保只有一个线程重新生成缓存\",{\"1\":{\"115\":1}}],[\"条件\",{\"0\":{\"531\":1,\"532\":1},\"1\":{\"531\":2,\"532\":2,\"533\":1}}],[\"条件列表\",{\"1\":{\"516\":1}}],[\"条件查询null判断\",{\"0\":{\"545\":1}}],[\"条件查询\",{\"0\":{\"272\":1,\"518\":1,\"547\":1},\"1\":{\"272\":2,\"281\":1,\"516\":1}}],[\"条件成立\",{\"1\":{\"190\":1}}],[\"条件语句\",{\"1\":{\"22\":1}}],[\"条的记录\",{\"1\":{\"148\":1}}],[\"9a\",{\"1\":{\"819\":1,\"1224\":1}}],[\"9才支持的\",{\"1\":{\"721\":1,\"1126\":1}}],[\"9才开始有的\",{\"1\":{\"721\":1,\"1126\":1}}],[\"9f13b2a470dc\",{\"1\":{\"496\":3}}],[\"97\",{\"1\":{\"496\":1,\"628\":2,\"995\":4,\"1011\":1,\"1033\":2,\"1400\":4,\"1416\":1}}],[\"942ca52b8eb6\",{\"1\":{\"496\":1}}],[\"94\",{\"1\":{\"496\":1}}],[\"93\",{\"1\":{\"496\":1}}],[\"91\",{\"1\":{\"496\":1}}],[\"95\",{\"1\":{\"481\":2,\"496\":1}}],[\"98个睡眠\",{\"1\":{\"481\":1}}],[\"98\",{\"1\":{\"481\":3,\"496\":1,\"628\":1,\"652\":1,\"995\":4,\"997\":3,\"1033\":1,\"1057\":1,\"1400\":4,\"1402\":3}}],[\"9870\",{\"1\":{\"387\":1}}],[\"9980\",{\"1\":{\"641\":1,\"1046\":1}}],[\"9999\",{\"1\":{\"641\":1,\"1046\":1,\"1453\":2,\"1454\":1}}],[\"99个进程\",{\"1\":{\"481\":1}}],[\"99\",{\"1\":{\"481\":3,\"496\":1,\"628\":1,\"647\":1,\"794\":1,\"845\":1,\"995\":11,\"997\":2,\"1004\":1,\"1008\":1,\"1033\":1,\"1052\":1,\"1199\":1,\"1250\":1,\"1400\":11,\"1402\":2,\"1409\":1,\"1413\":1}}],[\"9代表强制关闭\",{\"1\":{\"479\":1}}],[\"9092\",{\"1\":{\"377\":3,\"378\":2}}],[\"90\",{\"1\":{\"343\":1,\"496\":1,\"751\":9,\"1156\":9}}],[\"9000010\",{\"1\":{\"148\":1}}],[\"9000000\",{\"1\":{\"148\":2}}],[\"96\",{\"1\":{\"309\":4,\"496\":1,\"1433\":1}}],[\"9\",{\"1\":{\"281\":1,\"375\":8,\"460\":1,\"479\":1,\"496\":3,\"615\":1,\"743\":1,\"751\":2,\"818\":1,\"819\":4,\"847\":3,\"896\":1,\"897\":2,\"904\":1,\"981\":1,\"1028\":2,\"1148\":1,\"1156\":2,\"1223\":1,\"1224\":4,\"1252\":3,\"1301\":1,\"1302\":2,\"1309\":1,\"1386\":1,\"1478\":2}}],[\"9<\",{\"1\":{\"264\":1,\"615\":1}}],[\"9200\",{\"1\":{\"362\":1}}],[\"92\",{\"1\":{\"109\":1,\"496\":1}}],[\"指向老元素\",{\"1\":{\"888\":1,\"1293\":1}}],[\"指向\",{\"1\":{\"665\":1,\"1070\":1}}],[\"指向上一个版本的事务版本记录地址\",{\"1\":{\"154\":1}}],[\"指令行的储存\",{\"1\":{\"437\":1}}],[\"指java企业级开发的技术规范总和\",{\"1\":{\"285\":1}}],[\"指查询使用了索引\",{\"1\":{\"147\":1}}],[\"指定线程忙\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定线程池可以支持的最大线程数量\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定线程池的线程数量\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定用哪个线程工厂创建线程\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定任务队列\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定存活时间的单位\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定临时线程的最大存活时间\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"指定最终格式化的形式\",{\"1\":{\"781\":1,\"1186\":1}}],[\"指定后端springboot服务对应的ip和端口号\",{\"1\":{\"495\":1}}],[\"指定spark老大master的ip和提交任务的通信端口\",{\"1\":{\"392\":1}}],[\"指定zookeeper的三个节点\",{\"1\":{\"377\":3}}],[\"指定kafka数据的位置\",{\"1\":{\"377\":3}}],[\"指定\",{\"1\":{\"377\":3}}],[\"指定broker的id\",{\"1\":{\"377\":3}}],[\"指定数量最好是超过哨兵数量的一半\",{\"1\":{\"136\":1}}],[\"指定了\",{\"1\":{\"113\":1}}],[\"指定查询排序规则等\",{\"1\":{\"99\":1}}],[\"udp如何实现组播\",{\"0\":{\"1454\":1}}],[\"udp如何实现广播\",{\"0\":{\"1453\":1}}],[\"udp的三种通信方式\",{\"0\":{\"1452\":1}}],[\"udp2\",{\"1\":{\"1450\":2}}],[\"udp通信\",{\"0\":{\"1445\":1}}],[\"udp是一种无连接\",{\"1\":{\"1443\":1}}],[\"udp协议通信场景\",{\"0\":{\"1444\":1}}],[\"udp协议\",{\"0\":{\"1443\":1}}],[\"udp\",{\"1\":{\"1438\":1,\"1449\":2}}],[\"u3000\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u2029\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u2028\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u202f\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u205f\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u200a\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u2000\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u180e\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u1680\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u001b\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u0007\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u000c\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u000d\",{\"1\":{\"819\":2,\"1224\":2}}],[\"u000a\",{\"1\":{\"819\":2,\"1224\":2}}],[\"u0009\",{\"1\":{\"819\":1,\"1224\":1}}],[\"uhhhhh\",{\"1\":{\"819\":1,\"1224\":1}}],[\"u=rwx\",{\"1\":{\"465\":2}}],[\"upper\",{\"1\":{\"819\":2,\"1224\":2}}],[\"upstream\",{\"1\":{\"495\":2}}],[\"up\",{\"1\":{\"404\":1,\"433\":1,\"435\":1,\"481\":3,\"494\":1,\"496\":3,\"774\":1,\"1179\":1}}],[\"updates\",{\"1\":{\"280\":1}}],[\"update>\",{\"1\":{\"277\":1}}],[\"update\",{\"1\":{\"226\":1,\"229\":1,\"245\":2,\"277\":4,\"283\":1,\"326\":1,\"496\":1,\"508\":1,\"514\":4,\"570\":8,\"571\":2,\"613\":3,\"615\":3,\"875\":3,\"1280\":3}}],[\"uzabbix\",{\"1\":{\"402\":1}}],[\"ui\",{\"0\":{\"405\":1}}],[\"ui页面\",{\"1\":{\"389\":1}}],[\"uid\",{\"1\":{\"240\":2,\"478\":1}}],[\"usually\",{\"1\":{\"831\":1,\"1236\":1}}],[\"usb接口\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"usb\",{\"1\":{\"714\":1,\"715\":2,\"721\":1,\"1119\":1,\"1120\":2,\"1126\":1}}],[\"us\",{\"1\":{\"481\":3}}],[\"using\",{\"1\":{\"413\":1,\"495\":1}}],[\"usr\",{\"1\":{\"353\":2,\"402\":1,\"417\":2,\"428\":6,\"474\":1,\"495\":3,\"496\":15}}],[\"usegeneratedkeys=\",{\"1\":{\"276\":2}}],[\"use\",{\"1\":{\"251\":1,\"320\":1,\"386\":4,\"507\":1}}],[\"useserverprepstmts=true\",{\"1\":{\"229\":1,\"234\":2}}],[\"usessl=false\",{\"1\":{\"226\":1,\"494\":1}}],[\"useunicode=true\",{\"1\":{\"226\":2}}],[\"usercontroller\",{\"1\":{\"557\":1}}],[\"userdel删除用户\",{\"1\":{\"464\":1}}],[\"usermod修改用户组\",{\"1\":{\"464\":1}}],[\"usermod\",{\"0\":{\"464\":1}}],[\"usermapper\",{\"1\":{\"264\":2,\"265\":4,\"267\":1,\"544\":1}}],[\"user的意思\",{\"1\":{\"428\":1}}],[\"user=true\",{\"1\":{\"413\":1}}],[\"user=root\",{\"1\":{\"386\":6}}],[\"useradd添加用户\",{\"1\":{\"464\":1}}],[\"useradd和userdel\",{\"0\":{\"464\":1}}],[\"useradd\",{\"1\":{\"354\":1}}],[\"userserviceproxy\",{\"1\":{\"629\":3,\"1034\":3}}],[\"userserviceimpl\",{\"1\":{\"629\":3,\"1034\":3}}],[\"userservice\",{\"1\":{\"629\":12,\"1034\":12}}],[\"users\",{\"1\":{\"251\":1,\"264\":2,\"265\":2,\"315\":1,\"635\":3,\"636\":1,\"965\":2,\"969\":3,\"971\":1,\"981\":1,\"998\":2,\"1000\":2,\"1001\":2,\"1014\":5,\"1040\":3,\"1041\":1,\"1370\":2,\"1374\":3,\"1376\":1,\"1386\":1,\"1403\":2,\"1405\":2,\"1406\":2,\"1419\":5}}],[\"userpassword\",{\"1\":{\"231\":2}}],[\"usernamebytes\",{\"1\":{\"309\":2}}],[\"username=zhangsan\",{\"1\":{\"307\":4}}],[\"username=\",{\"1\":{\"264\":1}}],[\"username=root\",{\"1\":{\"240\":1,\"494\":1,\"570\":1}}],[\"username\",{\"1\":{\"226\":2,\"228\":2,\"229\":2,\"231\":2,\"233\":6,\"240\":1,\"264\":10,\"267\":2,\"308\":3,\"309\":5,\"329\":2,\"333\":4,\"494\":1,\"510\":1,\"514\":3,\"570\":3,\"615\":3,\"743\":7,\"1148\":7}}],[\"user\",{\"1\":{\"146\":1,\"148\":3,\"226\":2,\"231\":5,\"233\":4,\"240\":6,\"251\":1,\"264\":8,\"302\":5,\"307\":3,\"320\":1,\"347\":1,\"350\":3,\"358\":2,\"398\":2,\"413\":2,\"461\":1,\"474\":1,\"481\":3,\"494\":1,\"495\":3,\"510\":2,\"514\":9,\"518\":4,\"519\":2,\"521\":6,\"529\":4,\"557\":1,\"672\":3,\"829\":3,\"1012\":1,\"1077\":3,\"1234\":3,\"1417\":1}}],[\"used\",{\"1\":{\"115\":1,\"481\":3}}],[\"uvh\",{\"1\":{\"346\":1,\"349\":1,\"398\":1,\"400\":1}}],[\"utf8\",{\"1\":{\"402\":2,\"414\":2}}],[\"utf\",{\"1\":{\"258\":1,\"264\":4,\"267\":1,\"270\":1,\"309\":6,\"331\":2,\"386\":2,\"557\":1,\"562\":1,\"570\":2,\"579\":1,\"601\":1,\"615\":1,\"829\":2,\"986\":2,\"987\":1,\"997\":4,\"1234\":2,\"1391\":2,\"1392\":1,\"1402\":4}}],[\"utils\",{\"1\":{\"245\":2,\"309\":1,\"356\":1,\"496\":2,\"894\":1,\"1299\":1}}],[\"util\",{\"1\":{\"184\":1,\"199\":7,\"231\":2,\"240\":1,\"245\":3,\"264\":1,\"308\":2,\"316\":1,\"570\":5,\"613\":1,\"615\":3,\"628\":1,\"635\":1,\"636\":1,\"672\":1,\"678\":1,\"679\":1,\"743\":1,\"747\":1,\"749\":1,\"750\":1,\"751\":5,\"756\":1,\"759\":1,\"776\":1,\"781\":2,\"784\":2,\"793\":5,\"794\":3,\"814\":3,\"821\":3,\"822\":2,\"823\":3,\"824\":3,\"839\":4,\"840\":3,\"842\":3,\"844\":4,\"845\":3,\"846\":3,\"847\":2,\"861\":2,\"865\":1,\"866\":4,\"871\":1,\"878\":1,\"881\":3,\"887\":1,\"888\":3,\"891\":4,\"893\":1,\"896\":4,\"897\":4,\"903\":3,\"904\":1,\"906\":4,\"907\":3,\"908\":7,\"909\":3,\"921\":2,\"939\":2,\"948\":1,\"949\":1,\"951\":2,\"954\":2,\"956\":5,\"988\":1,\"995\":1,\"1012\":2,\"1019\":2,\"1020\":3,\"1021\":2,\"1022\":3,\"1023\":3,\"1025\":3,\"1033\":1,\"1040\":1,\"1041\":1,\"1077\":1,\"1083\":1,\"1084\":1,\"1148\":1,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":5,\"1161\":1,\"1164\":1,\"1181\":1,\"1186\":2,\"1189\":2,\"1198\":5,\"1199\":3,\"1219\":3,\"1226\":3,\"1227\":2,\"1228\":3,\"1229\":3,\"1244\":4,\"1245\":3,\"1247\":3,\"1249\":4,\"1250\":3,\"1251\":3,\"1252\":2,\"1266\":2,\"1270\":1,\"1271\":4,\"1276\":1,\"1283\":1,\"1286\":3,\"1292\":1,\"1293\":3,\"1296\":4,\"1298\":1,\"1301\":4,\"1302\":4,\"1308\":3,\"1309\":1,\"1311\":4,\"1312\":3,\"1313\":7,\"1314\":3,\"1326\":2,\"1344\":2,\"1353\":1,\"1354\":1,\"1356\":2,\"1359\":2,\"1361\":5,\"1393\":1,\"1400\":1,\"1417\":2,\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":2,\"1466\":1,\"1469\":2,\"1470\":3,\"1471\":2,\"1472\":3,\"1473\":3,\"1475\":3}}],[\"uroot\",{\"1\":{\"347\":1,\"350\":1,\"402\":1}}],[\"url<\",{\"1\":{\"386\":1}}],[\"urldecoder\",{\"1\":{\"331\":1}}],[\"url解码\",{\"1\":{\"331\":1}}],[\"urlencoder\",{\"1\":{\"331\":1}}],[\"url编码\",{\"1\":{\"331\":2}}],[\"urlpattern\",{\"1\":{\"302\":1}}],[\"urlpattern配置规则\",{\"1\":{\"302\":1}}],[\"urlpattern配置\",{\"0\":{\"302\":1}}],[\"urlpatterns\",{\"1\":{\"297\":1,\"302\":1}}],[\"url>\",{\"1\":{\"251\":1}}],[\"url=jdbc\",{\"1\":{\"240\":1,\"494\":1,\"570\":1}}],[\"url\",{\"1\":{\"226\":4,\"228\":2,\"229\":2,\"231\":2,\"233\":2,\"234\":1,\"240\":1,\"264\":1,\"267\":2,\"307\":2,\"494\":2,\"570\":3,\"615\":3,\"627\":1}}],[\"uri=\",{\"1\":{\"323\":1}}],[\"uri\",{\"1\":{\"166\":1,\"167\":1}}],[\"unchange\",{\"1\":{\"909\":1,\"1314\":1}}],[\"uncomment\",{\"1\":{\"404\":1}}],[\"un\",{\"1\":{\"649\":1,\"1054\":1}}],[\"un==false\",{\"1\":{\"649\":1,\"1054\":1}}],[\"uname\",{\"1\":{\"496\":2}}],[\"unzip\",{\"0\":{\"492\":1},\"1\":{\"492\":3}}],[\"unsafe\",{\"1\":{\"389\":1}}],[\"unless\",{\"1\":{\"386\":4}}],[\"unlock\",{\"1\":{\"215\":1,\"939\":3,\"1344\":3}}],[\"under\",{\"1\":{\"386\":12}}],[\"undo\",{\"0\":{\"153\":1},\"1\":{\"153\":1,\"154\":2}}],[\"unicode是万国码\",{\"1\":{\"986\":1,\"1391\":1}}],[\"unicode是计算机科学领域里的一项业界字符编码标准\",{\"1\":{\"986\":1,\"1391\":1}}],[\"unicode会先通过utf\",{\"1\":{\"986\":1,\"1391\":1}}],[\"unicode码表\",{\"0\":{\"986\":1,\"1391\":1}}],[\"unicode脚本\",{\"1\":{\"819\":1,\"1224\":1}}],[\"unicode\",{\"1\":{\"496\":6}}],[\"unit\",{\"1\":{\"219\":2,\"944\":2,\"948\":1,\"949\":1,\"955\":1,\"1349\":2,\"1353\":1,\"1354\":1,\"1360\":1}}],[\"unique\",{\"1\":{\"145\":1,\"525\":2,\"529\":2}}],[\"u\",{\"1\":{\"148\":2,\"347\":1,\"350\":1,\"398\":1,\"435\":3,\"501\":1,\"819\":1,\"1224\":1}}],[\"聚合\",{\"0\":{\"541\":1}}],[\"聚合函数排除了null\",{\"1\":{\"521\":1}}],[\"聚合函数语法\",{\"1\":{\"521\":1}}],[\"聚合函数分类\",{\"1\":{\"521\":1}}],[\"聚合函数\",{\"0\":{\"521\":1},\"1\":{\"521\":1,\"522\":1}}],[\"聚合查询\",{\"1\":{\"141\":1}}],[\"聚集索引的选举规则\",{\"1\":{\"145\":1}}],[\"聚集索引\",{\"0\":{\"145\":1},\"1\":{\"145\":1}}],[\"磁盘读写代价b+树更低\",{\"1\":{\"144\":1}}],[\"索引值\",{\"1\":{\"794\":1,\"1199\":1}}],[\"索引列上进行运算操作\",{\"1\":{\"150\":1}}],[\"索引会失效\",{\"1\":{\"150\":1}}],[\"索引不会失效\",{\"1\":{\"150\":1}}],[\"索引失效的案例\",{\"1\":{\"150\":1}}],[\"索引作为聚集索引\",{\"1\":{\"145\":1}}],[\"索引结构的叶子节点关联的的主键\",{\"1\":{\"145\":1}}],[\"索引结构的叶子节点关联的是对应的主键\",{\"1\":{\"145\":1}}],[\"索引结构的叶子结点保存了行数据\",{\"1\":{\"145\":1}}],[\"索引底层的数据结构是b+树\",{\"1\":{\"144\":1}}],[\"索引的底层数据结构是什么样的\",{\"0\":{\"144\":1}}],[\"索引\",{\"1\":{\"143\":1,\"793\":1,\"926\":1,\"1198\":1,\"1331\":1}}],[\"索引树扫描\",{\"1\":{\"142\":1}}],[\"索引查询要快\",{\"1\":{\"892\":1,\"1297\":1}}],[\"索引查询\",{\"1\":{\"142\":1}}],[\"调取get\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"调整虚拟机内存\",{\"0\":{\"384\":1}}],[\"调试困难\",{\"1\":{\"321\":1}}],[\"调试阶段\",{\"1\":{\"141\":1}}],[\"调用accept方法\",{\"1\":{\"1461\":1}}],[\"调用arrays类的tostring方法快速打印出数组\",{\"1\":{\"839\":1,\"840\":1,\"1244\":1,\"1245\":1}}],[\"调用当前function之后调用\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"调用当前function之前调用\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"调用的时候才关心\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"调用的是objects里面的equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"调用前将num1或num更改了\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"调用方法来处理定时任务\",{\"1\":{\"954\":1,\"1359\":1}}],[\"调用方法返回不同特点的线程池对象\",{\"1\":{\"943\":1,\"1348\":1}}],[\"调用方法的传递的参数\",{\"1\":{\"812\":1,\"1217\":1}}],[\"调用thread的start方法启动线程\",{\"1\":{\"921\":1,\"1326\":1}}],[\"调用线程对象的start\",{\"1\":{\"914\":1,\"918\":1,\"1319\":1,\"1323\":1}}],[\"调用此方法代表已经开始扩容了\",{\"1\":{\"831\":1,\"1236\":1}}],[\"调用grow方法进行扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"调用math\",{\"1\":{\"831\":1,\"1236\":1}}],[\"调用了arraylist类的无参构造方法创建了一个arraylist对象实例\",{\"1\":{\"831\":1,\"1236\":1}}],[\"调用class类中的一个静态方法\",{\"1\":{\"802\":1,\"1207\":1}}],[\"调用objects的equals比较内容需要重写equals\",{\"1\":{\"760\":1,\"1165\":1}}],[\"调用吃骨头\",{\"0\":{\"731\":1,\"1136\":1}}],[\"调用构造器时执行\",{\"1\":{\"682\":1,\"1087\":1}}],[\"调用构造函数实例化bean\",{\"1\":{\"163\":1}}],[\"调用者收到异常后直接捕获处理\",{\"1\":{\"636\":1,\"1041\":1}}],[\"调用者处理异常\",{\"1\":{\"633\":1,\"1038\":1}}],[\"调用者也继续抛出去\",{\"1\":{\"633\":1,\"1038\":1}}],[\"调用业务逻辑层\",{\"1\":{\"326\":1}}],[\"调用模型和视图\",{\"1\":{\"325\":1}}],[\"调用不同的doxxx方法\",{\"1\":{\"301\":1}}],[\"调用不同的方法\",{\"1\":{\"300\":1}}],[\"调用该方法\",{\"1\":{\"298\":1}}],[\"调用对应的方法完成sql的执行\",{\"1\":{\"266\":1}}],[\"调用start方法执行线程中的run方法\",{\"1\":{\"914\":1,\"1319\":1}}],[\"调用start\",{\"1\":{\"204\":1}}],[\"调用\",{\"1\":{\"107\":1,\"166\":1,\"202\":1}}],[\"调用接口服务完成次数扣减\",{\"1\":{\"96\":1}}],[\"表单提要字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"表单提交\",{\"1\":{\"570\":1}}],[\"表现出不同的行为特征\",{\"0\":{\"724\":1,\"1129\":1}}],[\"表现层处理异常\",{\"1\":{\"572\":1}}],[\"表现层数据封装\",{\"0\":{\"571\":1}}],[\"表现层\",{\"1\":{\"262\":2,\"326\":2}}],[\"表2\",{\"0\":{\"532\":1},\"1\":{\"531\":2,\"532\":2}}],[\"表1\",{\"0\":{\"532\":1},\"1\":{\"531\":2,\"532\":2}}],[\"表的关系\",{\"0\":{\"529\":1}}],[\"表的优化\",{\"1\":{\"528\":1}}],[\"表的列名\",{\"1\":{\"270\":1}}],[\"表名前缀\",{\"0\":{\"550\":1}}],[\"表名列表\",{\"1\":{\"516\":1}}],[\"表名\",{\"0\":{\"531\":1},\"1\":{\"512\":5,\"513\":2,\"517\":2,\"519\":1,\"522\":1,\"523\":1}}],[\"表名称\",{\"1\":{\"509\":1}}],[\"表\",{\"1\":{\"505\":1,\"521\":1,\"533\":2}}],[\"表达式\",{\"0\":{\"846\":1,\"1251\":1}}],[\"表达式里面的值可以直接匹配到case里面的值\",{\"1\":{\"653\":1,\"1058\":1}}],[\"表达式语言\",{\"1\":{\"322\":1}}],[\"表达式来定义执行定时任务的时间周期\",{\"1\":{\"116\":1}}],[\"表达式来定义查询条件\",{\"1\":{\"99\":1}}],[\"表示收到客户端取消请求\",{\"1\":{\"1442\":1}}],[\"表示对给定参数执行定义操作后\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"表示对象工厂\",{\"1\":{\"164\":2}}],[\"表示有元素\",{\"1\":{\"888\":1,\"1293\":1}}],[\"表示5到10位\",{\"1\":{\"818\":1,\"1223\":1}}],[\"表示全是数字\",{\"1\":{\"818\":1,\"1223\":1}}],[\"表示取消访问检查\",{\"1\":{\"806\":1,\"1211\":1}}],[\"表示该成员变量只在内存中存储一份\",{\"1\":{\"675\":1,\"1080\":1}}],[\"表示该线程获取锁成功\",{\"1\":{\"210\":1}}],[\"表示的是一个字符串\",{\"1\":{\"648\":1,\"1053\":1}}],[\"表示员工所在的部门\",{\"1\":{\"526\":1}}],[\"表示非终端启动\",{\"1\":{\"478\":1}}],[\"表示需要切换的用户\",{\"1\":{\"461\":1}}],[\"表示是否在切换用户后加载环境变量\",{\"1\":{\"461\":1}}],[\"表示查看尾部多少行\",{\"1\":{\"460\":1}}],[\"表示持续跟踪\",{\"1\":{\"460\":1}}],[\"表示过滤的关键字\",{\"1\":{\"454\":1}}],[\"表示在结果中显示匹配的行的行号\",{\"1\":{\"454\":1}}],[\"表示kb\",{\"1\":{\"453\":1}}],[\"表示大于和小于\",{\"1\":{\"453\":1}}],[\"表示匹配任何包括test的内容\",{\"1\":{\"451\":1}}],[\"表示通配符\",{\"1\":{\"451\":1}}],[\"表示被跟踪的文件路径\",{\"1\":{\"460\":1}}],[\"表示被移动的文件或文件夹\",{\"1\":{\"450\":1}}],[\"表示被复制的文件或文件夹\",{\"1\":{\"449\":1}}],[\"表示要过滤内容的文件路径\",{\"1\":{\"454\":1}}],[\"表示要删除的文件或文件夹\",{\"1\":{\"451\":1}}],[\"表示要移动到的地方\",{\"1\":{\"450\":1}}],[\"表示要复制到的地方\",{\"1\":{\"449\":1}}],[\"表示要切换到哪个路径\",{\"1\":{\"442\":1}}],[\"表示递归\",{\"1\":{\"449\":1}}],[\"表示自动创建不存在的父目录\",{\"1\":{\"445\":1}}],[\"表示linux路径\",{\"1\":{\"445\":1}}],[\"表示home路径\",{\"1\":{\"444\":1}}],[\"表示上一级目录\",{\"1\":{\"444\":1}}],[\"表示当前路径\",{\"1\":{\"444\":1}}],[\"表示当前的日志信息是可以输出到控制台的\",{\"1\":{\"264\":1}}],[\"表示\",{\"1\":{\"423\":1,\"435\":1}}],[\"表示使用密码登陆\",{\"1\":{\"347\":1,\"350\":1}}],[\"表示请求已经被成功接收\",{\"1\":{\"288\":1}}],[\"表示请求已接受\",{\"1\":{\"288\":1}}],[\"表示请求资源路径\",{\"1\":{\"287\":1}}],[\"表示协议版本\",{\"1\":{\"287\":1}}],[\"表中的数据要超过10万以上\",{\"1\":{\"149\":1}}],[\"表象\",{\"1\":{\"141\":1}}],[\"表数据量过大查询\",{\"1\":{\"141\":1}}],[\"慢查询一般发生在如下查询场景\",{\"1\":{\"141\":1}}],[\"操作成功\",{\"1\":{\"636\":1,\"1041\":1}}],[\"操作的可见性\",{\"1\":{\"536\":1}}],[\"操作表\",{\"0\":{\"508\":1}}],[\"操作数据库\",{\"0\":{\"507\":1}}],[\"操作一个变量时\",{\"1\":{\"211\":1}}],[\"操作失败\",{\"1\":{\"211\":1,\"636\":1,\"1041\":1}}],[\"操作系统会⾃动将其回滚到事务执⾏之前的状态\",{\"1\":{\"151\":1}}],[\"操作系统控制\",{\"1\":{\"128\":1}}],[\"操作却是通过\",{\"1\":{\"139\":1}}],[\"⽽\",{\"1\":{\"139\":1}}],[\"⽽是返回错误\",{\"1\":{\"130\":1}}],[\"事件\",{\"1\":{\"139\":2}}],[\"事务一旦提交或回滚\",{\"1\":{\"536\":1}}],[\"事务完成时\",{\"1\":{\"536\":1}}],[\"事务把所有的命令作为一个整体一起向系统提交或撤销操作的请求\",{\"1\":{\"535\":1}}],[\"事务管理员负责协调所有对数据库的操作\",{\"1\":{\"616\":1}}],[\"事务管理\",{\"1\":{\"229\":1}}],[\"事务不知道出现了异常\",{\"1\":{\"162\":1}}],[\"事务id\",{\"1\":{\"154\":1}}],[\"事务的四大特征\",{\"0\":{\"536\":1}}],[\"事务的信息\",{\"1\":{\"267\":1}}],[\"事务的隔离性是由锁和mvcc实现的\",{\"1\":{\"154\":1}}],[\"事务的特性是acid\",{\"1\":{\"151\":1}}],[\"事务的特性是什么\",{\"0\":{\"151\":1}}],[\"事务中的隔离性是如何保证的呢\",{\"0\":{\"154\":1}}],[\"事务执⾏结束后\",{\"1\":{\"151\":1}}],[\"事务是不可分割的最小操作单位\",{\"1\":{\"536\":1}}],[\"事务是一个不可分割的工作逻辑单元\",{\"1\":{\"535\":1}}],[\"事务是一组操作的集合\",{\"1\":{\"151\":1}}],[\"事务是⼀个原⼦操作\",{\"1\":{\"151\":1}}],[\"事务会把所有的操作视为一个整体一起向系统提交或撤销操作的请求\",{\"1\":{\"151\":1}}],[\"事务\",{\"0\":{\"534\":1},\"1\":{\"92\":1}}],[\"单台主机与单台主机之间的通信\",{\"1\":{\"1452\":1}}],[\"单播\",{\"1\":{\"1452\":1}}],[\"单链表\",{\"1\":{\"853\":1,\"1258\":1}}],[\"单列\",{\"1\":{\"835\":1,\"1240\":1}}],[\"单词边界\",{\"1\":{\"819\":1,\"1224\":1}}],[\"单词字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"单词数\",{\"1\":{\"455\":1}}],[\"单词数量等\",{\"1\":{\"455\":1}}],[\"单独的类称为父类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"单例必须私有构造器\",{\"1\":{\"686\":1,\"1091\":1}}],[\"单例模式\",{\"1\":{\"684\":1,\"1089\":1}}],[\"单例模式介绍\",{\"0\":{\"684\":1,\"1089\":1}}],[\"单例池\",{\"1\":{\"164\":2}}],[\"单引号用来表示字符常量\",{\"1\":{\"648\":1,\"1053\":1}}],[\"单行单列\",{\"1\":{\"533\":1}}],[\"单行注释\",{\"1\":{\"504\":1}}],[\"单个值\",{\"1\":{\"308\":1}}],[\"单个参数\",{\"1\":{\"281\":1}}],[\"单条件的动态查询\",{\"0\":{\"274\":1}}],[\"单位为毫秒\",{\"1\":{\"925\":1,\"1330\":1}}],[\"单位kb\",{\"1\":{\"481\":1}}],[\"单位\",{\"1\":{\"331\":1}}],[\"单位秒\",{\"1\":{\"240\":1}}],[\"单位毫秒\",{\"1\":{\"240\":2,\"926\":1,\"1331\":1}}],[\"单线程操作\",{\"1\":{\"139\":1}}],[\"单节点的redis的并发能力是有限的\",{\"1\":{\"135\":1}}],[\"绝对路径创建一个文件对象\",{\"1\":{\"966\":1,\"1371\":1}}],[\"绝⼤部分请求是纯粹的内存操作\",{\"1\":{\"139\":1}}],[\"绝地之地散布着各种难题和考验\",{\"1\":{\"72\":1}}],[\"绝地反击\",{\"0\":{\"25\":1},\"1\":{\"0\":1}}],[\"硬件等方法外\",{\"1\":{\"137\":1}}],[\"原材料\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"原始类\",{\"1\":{\"628\":1,\"1033\":1}}],[\"原列名\",{\"1\":{\"517\":2}}],[\"原文件\",{\"1\":{\"449\":1}}],[\"原因接口的静态方法只能接口自己调用\",{\"1\":{\"717\":1,\"1122\":1}}],[\"原因通过response获取的字符字符输出流默认编码\",{\"1\":{\"314\":1}}],[\"原因\",{\"1\":{\"309\":1}}],[\"原理\",{\"0\":{\"234\":1},\"1\":{\"889\":1,\"933\":1,\"937\":1,\"1294\":1,\"1338\":1,\"1342\":1}}],[\"原理是给\",{\"1\":{\"134\":1}}],[\"原值为\",{\"1\":{\"211\":1}}],[\"原子操作\",{\"1\":{\"211\":1}}],[\"原子性\",{\"1\":{\"151\":1,\"536\":1}}],[\"原来的hashcode值\",{\"1\":{\"192\":1}}],[\"原来的那个老的主节点就变成了新选举出来的主节点的从节点\",{\"1\":{\"137\":1}}],[\"原⼦性\",{\"1\":{\"151\":1}}],[\"都存在of方法\",{\"1\":{\"909\":1,\"1314\":1}}],[\"都能返回特点内容\",{\"1\":{\"873\":1,\"1278\":1}}],[\"都能够通过这本书\",{\"1\":{\"8\":1}}],[\"都加工为一个学生对象\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"都可以直接得到这个类全部成分\",{\"1\":{\"798\":1,\"1203\":1}}],[\"都可以让objectfactory来生产对应的对象\",{\"1\":{\"164\":1}}],[\"都采用它\",{\"1\":{\"361\":1}}],[\"都会执行该代码块中的代码\",{\"1\":{\"682\":1,\"1087\":1}}],[\"都会调用该方法\",{\"1\":{\"298\":1}}],[\"都会回收它的内存\",{\"1\":{\"222\":1}}],[\"都使用\",{\"1\":{\"282\":1}}],[\"都具备基本的互斥\",{\"1\":{\"215\":1}}],[\"都支持重入\",{\"1\":{\"214\":1}}],[\"都支持服务提供者心跳方式做健康检测\",{\"1\":{\"173\":1}}],[\"都是不死线程\",{\"1\":{\"951\":1,\"1356\":1}}],[\"都是不同步的\",{\"1\":{\"187\":1}}],[\"都是直接用类名调用即可\",{\"1\":{\"768\":1,\"1173\":1}}],[\"都是以单机模式运行的\",{\"1\":{\"363\":1}}],[\"都是基于es来实现的\",{\"1\":{\"361\":1}}],[\"都是取自软件自身的官方网站\",{\"1\":{\"343\":1}}],[\"都是针对http协议\",{\"1\":{\"299\":1}}],[\"都是扩容之前容量的2倍\",{\"1\":{\"191\":1}}],[\"都认为该实例主观下线\",{\"1\":{\"136\":1}}],[\"客户离线\",{\"1\":{\"1450\":1}}],[\"客户端再次发送确认消息\",{\"1\":{\"1442\":1}}],[\"客户端再次向服务端发出确认信息\",{\"1\":{\"1441\":1}}],[\"客户端向服务器发出取消连接请求\",{\"1\":{\"1442\":1}}],[\"客户端收响应\",{\"1\":{\"1441\":1}}],[\"客户端会话技术\",{\"1\":{\"329\":1}}],[\"客户端会话跟踪技术\",{\"1\":{\"327\":1}}],[\"客户端未被授权\",{\"1\":{\"288\":1}}],[\"客户端的请求一个不存在的资源\",{\"1\":{\"288\":1}}],[\"客户端的请求是由⼀个单线程来处理的\",{\"1\":{\"139\":1}}],[\"客户端错误\",{\"1\":{\"288\":1}}],[\"客户端可以访问集群的任意节点\",{\"1\":{\"138\":1}}],[\"客户端标识\",{\"1\":{\"117\":1}}],[\"客户端\",{\"0\":{\"1456\":1},\"1\":{\"95\":1,\"97\":1,\"101\":1,\"105\":1,\"166\":1,\"1449\":1}}],[\"客观下线\",{\"1\":{\"136\":1}}],[\"哨兵有多个\",{\"1\":{\"136\":1}}],[\"哨兵基于心跳机制检测服务的状态\",{\"1\":{\"136\":1}}],[\"哨兵怎么监控redis的服务状态的\",{\"1\":{\"136\":1}}],[\"哨兵充当redis客户端的服务发现来源\",{\"1\":{\"136\":1}}],[\"哨兵会将一个slave提升为master\",{\"1\":{\"136\":1}}],[\"哨兵会不断的检查你的master和slave是否按照预期工作\",{\"1\":{\"136\":1}}],[\"故障自动恢复\",{\"1\":{\"136\":1}}],[\"故事以探索未知的世界作为结尾\",{\"1\":{\"49\":1}}],[\"故事的开头在启程\",{\"1\":{\"49\":1}}],[\"故事并没有结束\",{\"1\":{\"40\":1}}],[\"故事未完\",{\"1\":{\"27\":1}}],[\"想要提高redis的并发能力\",{\"1\":{\"135\":1}}],[\"介绍\",{\"0\":{\"363\":1}}],[\"介绍一下redis中哨兵的作用\",{\"0\":{\"136\":1}}],[\"介绍一下缓存穿透\",{\"0\":{\"124\":1}}],[\"介绍redis的主从同步\",{\"0\":{\"135\":1}}],[\"该方法的参数mincapacity为1\",{\"1\":{\"831\":1,\"1236\":1}}],[\"该方法就可以接收这父类的一切子类对象\",{\"1\":{\"726\":1,\"1131\":1}}],[\"该方法只会被调用一次\",{\"1\":{\"297\":1}}],[\"该项目可以在学习完spring\",{\"1\":{\"537\":1}}],[\"该项目的前端使用的是vue3+vant组件库开发的\",{\"1\":{\"121\":1}}],[\"该项目的技术难点是如何保证接口不被恶意调用\",{\"1\":{\"121\":1}}],[\"该目录下安装了2\",{\"1\":{\"428\":1}}],[\"该目录存放一些服务器启动之后所需要提取的数据\",{\"1\":{\"428\":1}}],[\"该目录为系统管理员\",{\"1\":{\"428\":1}}],[\"该实例随后会被java的垃圾收集器回收\",{\"1\":{\"297\":1}}],[\"该实体类\",{\"1\":{\"270\":1}}],[\"该章节目前共有\",{\"1\":{\"223\":1}}],[\"该元素的位置要么停留在原始位置\",{\"1\":{\"191\":1}}],[\"该类的构造方法中接收一个数组\",{\"1\":{\"185\":1}}],[\"该内部类实现了abstractlist接口但是并没有重写add\",{\"1\":{\"184\":1}}],[\"该注解通过\",{\"1\":{\"168\":1}}],[\"该\",{\"1\":{\"159\":3}}],[\"该如何解决\",{\"0\":{\"137\":1}}],[\"该锁自带了watchdog机制可以自动续期\",{\"1\":{\"132\":1}}],[\"添加元素\",{\"1\":{\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"904\":2,\"906\":1,\"907\":1,\"908\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1309\":2,\"1311\":1,\"1312\":1,\"1313\":1}}],[\"添加元素是无序的\",{\"0\":{\"839\":1,\"1244\":1}}],[\"添加元素是有序的\",{\"0\":{\"838\":1,\"1243\":1}}],[\"添加元素之前\",{\"1\":{\"831\":1,\"1236\":1}}],[\"添加一个指定的元素到此集合末尾\",{\"1\":{\"747\":1,\"1152\":1}}],[\"添加一列\",{\"1\":{\"512\":1}}],[\"添加分页拦截器\",{\"1\":{\"544\":1}}],[\"添加具体拦截器\",{\"1\":{\"544\":1}}],[\"添加员工\",{\"1\":{\"526\":1}}],[\"添加部门\",{\"1\":{\"526\":1}}],[\"添加外键\",{\"1\":{\"526\":1}}],[\"添加约束\",{\"1\":{\"526\":1}}],[\"添加依赖\",{\"1\":{\"494\":1}}],[\"添加如下内容\",{\"1\":{\"389\":1}}],[\"添加快照\",{\"0\":{\"372\":1}}],[\"添加yum源\",{\"1\":{\"362\":1}}],[\"添加yum仓库\",{\"1\":{\"362\":1}}],[\"添加admin用户\",{\"1\":{\"358\":1}}],[\"添加logback\",{\"1\":{\"264\":2}}],[\"添加slf4j日志api\",{\"1\":{\"264\":1}}],[\"添加数据并返回stringbuilder对象本身\",{\"1\":{\"763\":1,\"1168\":1}}],[\"添加数据\",{\"0\":{\"747\":1,\"1152\":1},\"1\":{\"243\":1,\"264\":1,\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"添加品牌\",{\"1\":{\"241\":1}}],[\"添加\",{\"0\":{\"275\":1},\"1\":{\"241\":1,\"245\":1,\"275\":3,\"283\":1,\"423\":1,\"514\":1,\"910\":1,\"1315\":1}}],[\"添加事务通知的前提条件是该方法是public的\",{\"1\":{\"162\":1}}],[\"添加锁\",{\"1\":{\"131\":1}}],[\"添加交互功能和设计界面布局等操作\",{\"1\":{\"39\":1}}],[\"此类表示internet协议\",{\"1\":{\"1432\":1}}],[\"此示例中返回的结果引用的对象num1和num2其实是不能更改的\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"此包下有很多类来支持java的函数式编程\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"此处泛型变量t可以随便写为任意的标志\",{\"1\":{\"870\":1,\"1275\":1}}],[\"此方法内部起始执行了double的tostring\",{\"1\":{\"773\":1,\"1178\":1}}],[\"此方法会阻塞主进程的继续往下执行\",{\"1\":{\"200\":1}}],[\"此进程cpu占用率\",{\"1\":{\"478\":1}}],[\"此状态下敲击键盘动作会被vim识别为命令\",{\"1\":{\"432\":1}}],[\"此文件是配置一些hadoop用到的环境变量\",{\"1\":{\"386\":1}}],[\"此文件夹如果不存在需先创建\",{\"1\":{\"377\":1}}],[\"此配置仅仅是用于测试环境或学习环境的mysql\",{\"1\":{\"350\":1}}],[\"此线程资源会释放\",{\"1\":{\"219\":1}}],[\"此时才会创建临时线程\",{\"1\":{\"946\":1,\"1351\":1}}],[\"此时相当于还是单线程执行\",{\"1\":{\"916\":1,\"1321\":1}}],[\"此时已近不存在泛型了\",{\"1\":{\"815\":1,\"1220\":1}}],[\"此时是可以为集合存入其他任意类型的元素的\",{\"1\":{\"814\":1,\"1219\":1}}],[\"此时集合的泛型将不能产生约束了\",{\"1\":{\"814\":1,\"1219\":1}}],[\"此时\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"907\":1,\"1312\":1}}],[\"此时我们用对象仅仅只是要调用方法\",{\"1\":{\"679\":1,\"1084\":1}}],[\"此时有两种情况\",{\"1\":{\"188\":1}}],[\"此时再向redis中添加新的key的时候\",{\"1\":{\"130\":1}}],[\"此外\",{\"1\":{\"100\":1,\"106\":1,\"110\":1,\"111\":1,\"119\":1,\"120\":1,\"139\":1}}],[\"两者的实现\",{\"1\":{\"214\":1}}],[\"两者都可以暂停线程的执行\",{\"1\":{\"207\":1}}],[\"两值相等才会进行更新\",{\"1\":{\"211\":1}}],[\"两个对象的内容一样\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"两个对象内存分析\",{\"0\":{\"663\":1,\"1068\":1},\"1\":{\"663\":1,\"1068\":1}}],[\"两个变量指向同一个对象内存图\",{\"0\":{\"664\":1,\"1069\":1}}],[\"两个及两个以上的作业在同一\",{\"1\":{\"198\":2}}],[\"两个元素的hashcode相等并且通过equals\",{\"1\":{\"194\":1}}],[\"两个或两个以上的bean互相持有对方\",{\"1\":{\"164\":1}}],[\"两个字\",{\"1\":{\"43\":1}}],[\"两次请求\",{\"1\":{\"313\":1}}],[\"两次\",{\"1\":{\"159\":1}}],[\"两种策略进行配合使用\",{\"1\":{\"129\":1}}],[\"难以确定删除操作执行的时长和频率\",{\"1\":{\"129\":1}}],[\"难度逐渐攀升\",{\"0\":{\"79\":1}}],[\"那子类里面是不是就可以什么都不定义了\",{\"1\":{\"691\":1,\"1096\":1}}],[\"那就是\",{\"1\":{\"437\":1}}],[\"那就存在线程安全问题\",{\"1\":{\"158\":1}}],[\"那\",{\"1\":{\"435\":1}}],[\"那个惊叹号\",{\"1\":{\"437\":1}}],[\"那个是数字的\",{\"1\":{\"435\":1}}],[\"那个\",{\"1\":{\"435\":1}}],[\"那么线程池会补充一个新的线程池\",{\"1\":{\"951\":1,\"1356\":1}}],[\"那么线程池就会补充一个新的线程代替他\",{\"1\":{\"951\":1,\"1356\":1}}],[\"那么它的子节点必须是黑色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"那么就把最小需要容量当作数组的新容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"那么就具备了两层语义\",{\"1\":{\"212\":1}}],[\"那么这个公式就等价于\",{\"1\":{\"978\":1,\"1383\":1}}],[\"那么这个类必须重写完抽象类中的所有方法\",{\"1\":{\"710\":1,\"1115\":1}}],[\"那么这些key就会一直存在内存中从而占用大量的内存\",{\"1\":{\"129\":1}}],[\"那么我们用这个对象调用抽象类中的抽象方法\",{\"1\":{\"710\":1,\"1115\":1}}],[\"那么我们怎么通过命令行进行呢\",{\"1\":{\"488\":1}}],[\"那么学生也就有工资了\",{\"1\":{\"691\":1,\"1096\":1}}],[\"那么继承自父类的其他子类都会有这些属性方法\",{\"1\":{\"691\":1,\"1096\":1}}],[\"那么原本的第\",{\"1\":{\"435\":1}}],[\"那么按下\",{\"1\":{\"435\":1}}],[\"那么访问这个变量的每个线程都会有这个变量的本地副本\",{\"1\":{\"221\":1}}],[\"那么寻址公式就变为了首地址+\",{\"1\":{\"182\":1}}],[\"那么创建b对象调用b对象的构造函数生成一个半成品的b对象然后初始化b对象发现b对象中有a对象需要到spring容器中找a对象但是a对象并没有初始化完毕\",{\"1\":{\"164\":1}}],[\"那么redis就会按照某一种规则将内存中的数据删除掉\",{\"1\":{\"130\":1}}],[\"那里有着许许多多的星球和宇宙生物\",{\"1\":{\"24\":1}}],[\"那里有各种技能的提升任务等待着他\",{\"1\":{\"23\":1}}],[\"反斜杠字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"反转\",{\"1\":{\"763\":1,\"1168\":1}}],[\"反转内容\",{\"1\":{\"763\":1,\"1168\":1}}],[\"反之false\",{\"1\":{\"732\":1,\"759\":1,\"842\":1,\"844\":1,\"1137\":1,\"1164\":1,\"1247\":1,\"1249\":1}}],[\"反之则返回该key的值\",{\"1\":{\"129\":1}}],[\"反编译后的class文件\",{\"1\":{\"707\":1,\"1112\":1}}],[\"反引号`\",{\"0\":{\"458\":1}}],[\"反向\",{\"1\":{\"435\":1}}],[\"反射为何可以给约定了泛型的集合存入其他类型的元素\",{\"1\":{\"815\":1,\"1220\":1}}],[\"反射得到成员方法可以做什么\",{\"1\":{\"813\":1,\"1218\":1}}],[\"反射得到成员变量可以做什么\",{\"1\":{\"809\":1,\"1214\":1}}],[\"反射得到构造器可以做什么\",{\"1\":{\"807\":1,\"1212\":1}}],[\"反射可以破坏封装性\",{\"1\":{\"807\":1,\"1212\":1}}],[\"反射获取方法对象\",{\"0\":{\"810\":1,\"1215\":1}}],[\"反射获取成员变量对象\",{\"0\":{\"808\":1,\"1213\":1}}],[\"反射获取构造器对象\",{\"0\":{\"804\":1,\"1209\":1}}],[\"反射获取类对象\",{\"0\":{\"801\":1,\"1206\":1}}],[\"反射第一步\",{\"0\":{\"802\":1,\"1207\":1}}],[\"反射第一步都是先得到编译后的class类对象\",{\"1\":{\"799\":1,\"1204\":1}}],[\"反射是作用在运行的时候的技术\",{\"1\":{\"815\":1,\"1220\":1}}],[\"反射是作用在运行时的技术\",{\"1\":{\"814\":1,\"1219\":1}}],[\"反射是在运行的时候获取字节码文件对象\",{\"1\":{\"800\":1,\"1205\":1}}],[\"反射是指对于任何一个class类\",{\"1\":{\"798\":1,\"1203\":1}}],[\"反射的作用\",{\"0\":{\"814\":1,\"816\":1,\"1219\":1,\"1221\":1},\"1\":{\"817\":1,\"1222\":1}}],[\"反射的第一步是获取类对象\",{\"1\":{\"808\":1,\"1213\":1}}],[\"反射的第一步是先得到类对象\",{\"1\":{\"804\":1,\"810\":1,\"1209\":1,\"1215\":1}}],[\"反射的第一步是什么\",{\"1\":{\"803\":1,\"1208\":1}}],[\"反射的第一步\",{\"1\":{\"802\":1,\"1207\":1}}],[\"反射的核心思想和关键就是\",{\"1\":{\"800\":1,\"1205\":1}}],[\"反射的基本作用\",{\"1\":{\"800\":1,\"1205\":1}}],[\"反射的关键\",{\"0\":{\"799\":1,\"1204\":1}}],[\"反射概述\",{\"0\":{\"798\":1,\"1203\":1}}],[\"反射\",{\"0\":{\"797\":1,\"1202\":1},\"1\":{\"92\":1,\"747\":1,\"1152\":1}}],[\"惰性删除\",{\"1\":{\"129\":3}}],[\"备份\",{\"1\":{\"128\":1}}],[\"适用于连续创建多级目录\",{\"1\":{\"445\":1}}],[\"适用于高并发和低延迟的场景\",{\"1\":{\"106\":1}}],[\"适配执行对应的\",{\"1\":{\"167\":1}}],[\"适合⽤于数据可靠性要求⾼\",{\"1\":{\"128\":1}}],[\"适合⽤于数据集较⼤\",{\"1\":{\"128\":1}}],[\"缺点\",{\"1\":{\"128\":1,\"129\":2,\"286\":1,\"915\":1,\"919\":1,\"922\":1,\"923\":1,\"1320\":1,\"1324\":1,\"1327\":1,\"1328\":1}}],[\"缺点是可能存在误判\",{\"1\":{\"124\":1}}],[\"缺点是可能会造成短暂的缓存与数据不一致的情况\",{\"1\":{\"124\":1}}],[\"e>\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"etkv是在定义泛型的时候使用的\",{\"1\":{\"877\":1,\"1282\":1}}],[\"etc\",{\"1\":{\"353\":2,\"356\":2,\"358\":5,\"362\":2,\"365\":1,\"366\":2,\"371\":1,\"386\":8,\"389\":2,\"392\":2,\"403\":1,\"404\":1,\"409\":2,\"412\":1,\"428\":1,\"462\":1,\"474\":1,\"475\":2,\"486\":3,\"494\":2,\"495\":1,\"496\":14}}],[\"e或f\",{\"1\":{\"819\":1,\"1224\":1}}],[\"eee\",{\"1\":{\"781\":1,\"1186\":1}}],[\"eat\",{\"1\":{\"730\":2,\"732\":2,\"812\":6,\"1135\":2,\"1137\":2,\"1217\":6}}],[\"earlysingletonobjects\",{\"1\":{\"164\":1}}],[\"ec626f3344d3\",{\"1\":{\"496\":3}}],[\"echo\",{\"0\":{\"457\":1},\"1\":{\"457\":1,\"458\":3,\"459\":2,\"485\":2,\"486\":3}}],[\"event\",{\"1\":{\"1025\":2,\"1475\":2}}],[\"events\",{\"1\":{\"495\":1}}],[\"everysec\",{\"1\":{\"128\":2}}],[\"email\",{\"1\":{\"494\":1,\"511\":1}}],[\"empty\",{\"1\":{\"831\":2,\"1236\":2}}],[\"emp\",{\"1\":{\"226\":1,\"229\":1,\"525\":7,\"526\":9,\"531\":8}}],[\"ef列出所有进程信息并且配合管道符和过滤命令使用\",{\"1\":{\"478\":1}}],[\"ef\",{\"1\":{\"456\":1,\"496\":10}}],[\"effect\",{\"1\":{\"410\":1}}],[\"edit\",{\"1\":{\"403\":1,\"404\":1}}],[\"either\",{\"1\":{\"386\":4}}],[\"esc\",{\"1\":{\"433\":1,\"436\":2}}],[\"es\",{\"1\":{\"361\":1}}],[\"established的设置\",{\"1\":{\"240\":1}}],[\"epel则为服务器版本提供大量的rpm包\",{\"1\":{\"360\":1}}],[\"epel之后\",{\"1\":{\"360\":1}}],[\"epel是由\",{\"1\":{\"360\":1}}],[\"epel\",{\"1\":{\"360\":2}}],[\"epoll\",{\"1\":{\"139\":1}}],[\"err\",{\"1\":{\"571\":4}}],[\"error\",{\"1\":{\"264\":1,\"495\":10,\"743\":5,\"1148\":5}}],[\"erlang\",{\"1\":{\"358\":12}}],[\"e4\",{\"1\":{\"309\":4}}],[\"e5\",{\"1\":{\"309\":4}}],[\"ejb\",{\"1\":{\"285\":1}}],[\"ele\",{\"1\":{\"866\":2,\"1271\":2}}],[\"elements\",{\"1\":{\"895\":1,\"1300\":1}}],[\"elementdata\",{\"1\":{\"831\":11,\"1236\":11}}],[\"element\",{\"1\":{\"187\":2,\"747\":1,\"750\":1,\"829\":5,\"861\":2,\"1152\":1,\"1155\":1,\"1234\":5,\"1266\":2}}],[\"elastic\",{\"1\":{\"362\":3}}],[\"elasticsearch简称es\",{\"1\":{\"361\":1}}],[\"elasticsearch\",{\"1\":{\"361\":1,\"362\":8}}],[\"el7\",{\"1\":{\"346\":1,\"349\":1,\"358\":2,\"398\":1,\"400\":1}}],[\"el\",{\"1\":{\"322\":1,\"358\":4}}],[\"el表达式获取数据\",{\"1\":{\"322\":1}}],[\"el表达式\",{\"0\":{\"322\":1}}],[\"else\",{\"1\":{\"233\":1,\"323\":1,\"638\":1,\"732\":1,\"743\":4,\"751\":1,\"756\":2,\"794\":2,\"873\":1,\"897\":2,\"908\":1,\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":3,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"1043\":1,\"1137\":1,\"1148\":4,\"1156\":1,\"1161\":2,\"1199\":2,\"1278\":1,\"1302\":2,\"1313\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":3,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1}}],[\"e=1\",{\"1\":{\"211\":1}}],[\"ensureexplicitcapacity\",{\"1\":{\"831\":2,\"1236\":2}}],[\"ensurecapacityinternal\",{\"1\":{\"831\":2,\"1236\":2}}],[\"ens33\",{\"1\":{\"365\":1}}],[\"enum类\",{\"1\":{\"708\":1,\"1113\":1}}],[\"enum<day02\",{\"1\":{\"707\":1,\"1112\":1}}],[\"enum\",{\"1\":{\"707\":10,\"963\":1,\"1112\":10,\"1368\":1}}],[\"ename\",{\"1\":{\"525\":2}}],[\"enableaspectjautoproxy\",{\"1\":{\"615\":1}}],[\"enableautoconfiguration是实现自动化配置的核心注解\",{\"1\":{\"168\":1}}],[\"enableautoconfiguration\",{\"1\":{\"168\":1}}],[\"enabletransactionmanagement\",{\"1\":{\"570\":2}}],[\"enablewebmvc\",{\"1\":{\"566\":1,\"570\":2,\"579\":4}}],[\"enablewebmvc如下\",{\"1\":{\"566\":1}}],[\"enable<\",{\"1\":{\"386\":1}}],[\"enabled=0\",{\"1\":{\"356\":1}}],[\"enabled=1\",{\"1\":{\"356\":1,\"358\":4,\"362\":1,\"409\":1}}],[\"enabledubbo\",{\"1\":{\"107\":1}}],[\"enable\",{\"1\":{\"346\":1,\"349\":1,\"356\":1,\"358\":2,\"360\":1,\"362\":1,\"386\":2,\"398\":1,\"404\":1,\"415\":1,\"474\":2,\"544\":1}}],[\"english\",{\"1\":{\"519\":1,\"521\":2}}],[\"engine\",{\"1\":{\"355\":1,\"496\":1}}],[\"endtime\",{\"1\":{\"769\":3,\"1174\":3}}],[\"endindex\",{\"1\":{\"743\":1,\"1148\":1}}],[\"end\",{\"1\":{\"433\":1,\"435\":1}}],[\"enhanced\",{\"1\":{\"428\":1}}],[\"enforce<\",{\"1\":{\"389\":1}}],[\"env<\",{\"1\":{\"386\":3}}],[\"env\",{\"1\":{\"386\":4,\"389\":1,\"392\":3}}],[\"environment\",{\"1\":{\"494\":2}}],[\"environments\",{\"1\":{\"267\":1}}],[\"environments>\",{\"1\":{\"264\":1,\"267\":1}}],[\"environment>\",{\"1\":{\"264\":1,\"267\":2}}],[\"entries\",{\"1\":{\"907\":3,\"1312\":3}}],[\"entryset\",{\"1\":{\"822\":1,\"907\":2,\"1021\":1,\"1227\":1,\"1312\":2,\"1471\":1}}],[\"entry<string\",{\"1\":{\"822\":1,\"907\":3,\"1021\":1,\"1227\":1,\"1312\":3,\"1471\":1}}],[\"entry\",{\"1\":{\"222\":1,\"907\":4,\"1312\":4}}],[\"entrylist关联的是处于阻塞状态的线程\",{\"1\":{\"210\":1}}],[\"entrylist\",{\"1\":{\"210\":2}}],[\"enter\",{\"1\":{\"398\":1,\"402\":1,\"433\":1}}],[\"enterprise\",{\"1\":{\"360\":1}}],[\"en\",{\"1\":{\"264\":2,\"267\":1,\"270\":1}}],[\"encoding\",{\"1\":{\"495\":1,\"1014\":1,\"1419\":1}}],[\"encoding=\",{\"1\":{\"258\":1,\"264\":4,\"267\":1,\"270\":1,\"386\":2,\"557\":1,\"570\":1,\"601\":1,\"615\":1,\"829\":2,\"1234\":2}}],[\"encode\",{\"1\":{\"331\":1}}],[\"encoder>\",{\"1\":{\"264\":1}}],[\"e\",{\"0\":{\"404\":1},\"1\":{\"187\":10,\"191\":2,\"205\":4,\"211\":1,\"229\":2,\"245\":2,\"316\":2,\"478\":2,\"481\":2,\"496\":6,\"629\":6,\"635\":10,\"636\":2,\"637\":2,\"638\":2,\"747\":3,\"749\":2,\"750\":4,\"816\":2,\"819\":3,\"831\":3,\"842\":4,\"861\":5,\"865\":11,\"870\":1,\"921\":4,\"939\":8,\"948\":2,\"949\":2,\"956\":2,\"998\":2,\"1000\":6,\"1001\":2,\"1007\":2,\"1008\":2,\"1034\":6,\"1040\":10,\"1041\":2,\"1042\":2,\"1043\":2,\"1152\":3,\"1154\":2,\"1155\":4,\"1221\":2,\"1224\":3,\"1236\":3,\"1247\":4,\"1266\":5,\"1270\":11,\"1275\":1,\"1326\":4,\"1344\":8,\"1353\":2,\"1354\":2,\"1361\":2,\"1403\":2,\"1405\":6,\"1406\":2,\"1412\":2,\"1413\":2,\"1458\":2,\"1461\":4,\"1464\":6,\"1465\":6,\"1466\":8}}],[\"eureka采用ap方式\",{\"1\":{\"173\":1}}],[\"equivalent\",{\"1\":{\"758\":1,\"1163\":1}}],[\"equals判断第一个test与第二个test方法相同\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"equalsignorecase\",{\"1\":{\"743\":6,\"1148\":6}}],[\"equals在object里面被重写了\",{\"1\":{\"743\":1,\"1148\":1}}],[\"equals若没有重写\",{\"1\":{\"743\":1,\"1148\":1}}],[\"equals\",{\"0\":{\"756\":1,\"758\":1,\"1161\":1,\"1163\":1},\"1\":{\"329\":1,\"629\":2,\"743\":9,\"751\":1,\"754\":1,\"756\":7,\"758\":10,\"760\":1,\"866\":4,\"888\":2,\"891\":2,\"896\":2,\"1027\":2,\"1034\":2,\"1148\":9,\"1156\":1,\"1159\":1,\"1161\":7,\"1163\":10,\"1165\":1,\"1271\":4,\"1293\":2,\"1296\":2,\"1301\":2,\"1450\":2,\"1461\":2,\"1464\":2,\"1465\":2,\"1477\":2}}],[\"eq\",{\"1\":{\"142\":2}}],[\"example<\",{\"1\":{\"615\":1}}],[\"examples\",{\"1\":{\"387\":1,\"392\":3,\"395\":1}}],[\"exec\",{\"1\":{\"496\":4}}],[\"executor\",{\"1\":{\"948\":1,\"951\":1,\"1353\":1,\"1356\":1}}],[\"executors的方法\",{\"1\":{\"955\":1,\"1360\":1}}],[\"executors的底层也是基于线程池的实现类threadpoolexecutor创建线程池对象的\",{\"1\":{\"951\":1,\"1356\":1}}],[\"executors使用可能存在的陷阱\",{\"0\":{\"952\":1,\"1357\":1}}],[\"executors得到线程对象的常用方法\",{\"0\":{\"951\":1,\"1356\":1}}],[\"executors工具类实现线程池\",{\"0\":{\"950\":1,\"1355\":1}}],[\"executorservice的常用方法\",{\"1\":{\"948\":1,\"1353\":1}}],[\"executorservice\",{\"1\":{\"942\":1,\"948\":2,\"949\":1,\"951\":7,\"952\":3,\"1347\":1,\"1353\":2,\"1354\":1,\"1356\":7,\"1357\":3,\"1465\":1,\"1466\":1}}],[\"executors\",{\"1\":{\"199\":2,\"948\":2,\"949\":2,\"951\":4,\"956\":2,\"1353\":2,\"1354\":2,\"1356\":4,\"1361\":2,\"1465\":1,\"1466\":1}}],[\"execution\",{\"1\":{\"615\":1}}],[\"executionexception\",{\"1\":{\"199\":2,\"949\":1,\"1354\":1}}],[\"execute\",{\"1\":{\"948\":12,\"951\":8,\"1353\":12,\"1356\":8,\"1465\":1,\"1466\":1}}],[\"executeupdata\",{\"1\":{\"233\":1}}],[\"executeupdate\",{\"1\":{\"226\":1,\"229\":1,\"230\":1,\"245\":3}}],[\"executequery\",{\"1\":{\"230\":1,\"231\":1,\"233\":2,\"240\":1,\"245\":1}}],[\"except\",{\"1\":{\"386\":4}}],[\"exceptiondemo5\",{\"1\":{\"638\":1,\"1043\":1}}],[\"exceptiondemo4\",{\"1\":{\"637\":1,\"1042\":1}}],[\"exceptiondemo3\",{\"1\":{\"636\":1,\"1041\":1}}],[\"exceptiondemo2\",{\"1\":{\"635\":1,\"1040\":1}}],[\"exceptionhandler\",{\"1\":{\"573\":4}}],[\"exception\",{\"1\":{\"199\":1,\"226\":1,\"229\":2,\"231\":1,\"233\":1,\"240\":1,\"245\":6,\"264\":1,\"272\":2,\"316\":1,\"573\":11,\"579\":4,\"634\":1,\"635\":1,\"636\":2,\"637\":1,\"638\":1,\"802\":1,\"806\":1,\"808\":3,\"812\":1,\"814\":1,\"816\":1,\"921\":4,\"925\":1,\"939\":4,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":2,\"1011\":1,\"1012\":2,\"1014\":1,\"1039\":1,\"1040\":1,\"1041\":2,\"1042\":1,\"1043\":1,\"1207\":1,\"1211\":1,\"1213\":3,\"1217\":1,\"1219\":1,\"1221\":1,\"1326\":4,\"1330\":1,\"1344\":4,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":2,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":3}}],[\"exit\",{\"1\":{\"347\":1,\"350\":1,\"769\":1,\"1174\":1,\"1450\":2,\"1461\":2,\"1464\":2,\"1465\":2}}],[\"exists\",{\"1\":{\"243\":1,\"494\":2,\"507\":2,\"513\":1,\"525\":1,\"526\":2,\"965\":1,\"966\":1,\"1370\":1,\"1371\":1}}],[\"explicit\",{\"1\":{\"494\":1}}],[\"express\",{\"1\":{\"386\":4}}],[\"expression\",{\"1\":{\"322\":1}}],[\"expire=300\",{\"1\":{\"358\":4}}],[\"export\",{\"1\":{\"353\":9,\"354\":6,\"373\":7,\"375\":18,\"377\":20,\"378\":3,\"386\":37,\"387\":1,\"389\":17,\"392\":15,\"395\":9,\"413\":3,\"486\":2}}],[\"expected\",{\"1\":{\"211\":1}}],[\"extension\",{\"1\":{\"544\":2}}],[\"extends\",{\"1\":{\"199\":1,\"299\":1,\"307\":1,\"308\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"329\":2,\"333\":2,\"557\":1,\"562\":1,\"570\":1,\"579\":2,\"628\":2,\"638\":1,\"641\":2,\"707\":1,\"709\":2,\"732\":2,\"738\":1,\"755\":1,\"756\":1,\"802\":1,\"814\":1,\"877\":1,\"878\":3,\"914\":1,\"924\":1,\"930\":1,\"939\":2,\"1029\":2,\"1033\":2,\"1043\":1,\"1046\":2,\"1112\":1,\"1114\":2,\"1137\":2,\"1143\":1,\"1160\":1,\"1161\":1,\"1207\":1,\"1219\":1,\"1282\":1,\"1283\":3,\"1319\":1,\"1329\":1,\"1335\":1,\"1344\":2,\"1464\":1,\"1466\":1,\"1479\":2}}],[\"extra\",{\"1\":{\"142\":1,\"360\":1}}],[\"ex是设置锁的失效时间\",{\"1\":{\"131\":1}}],[\"ex\",{\"1\":{\"131\":1,\"579\":1}}],[\"追加数据\",{\"1\":{\"997\":1,\"1402\":1}}],[\"追加写入到符号右边的指定文件中\",{\"1\":{\"459\":1}}],[\"追加如下两行\",{\"1\":{\"389\":1}}],[\"追加文件\",{\"1\":{\"128\":1}}],[\"追求技术的极致\",{\"1\":{\"75\":1}}],[\"新增的函数式接口\",{\"0\":{\"1025\":1,\"1475\":1}}],[\"新任务过来的时候才会开始任务拒绝\",{\"1\":{\"947\":1,\"1352\":1}}],[\"新任务提交时发现核心线程都在忙\",{\"1\":{\"946\":1,\"1351\":1}}],[\"新任务来了怎么办\",{\"1\":{\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"新牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"新容量没有大于数组最大\",{\"1\":{\"831\":1,\"1236\":1}}],[\"新容量大小则为\",{\"1\":{\"831\":1,\"1236\":1}}],[\"新数据类型\",{\"1\":{\"512\":1}}],[\"新列名\",{\"1\":{\"512\":1}}],[\"新目录名称\",{\"1\":{\"418\":1}}],[\"新建状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"新建文件夹\",{\"1\":{\"365\":1}}],[\"新建new\",{\"1\":{\"203\":1}}],[\"新版mysql驱动的url必须设置时区\",{\"1\":{\"226\":1}}],[\"新来任务会加入到此队列排队\",{\"1\":{\"219\":1}}],[\"新选举出来的主节点无法同步数据\",{\"1\":{\"137\":1}}],[\"新开一个线程监视业务是否执行完毕\",{\"1\":{\"132\":1}}],[\"新开启一个子进程执行备份的操作\",{\"1\":{\"128\":1}}],[\"新的api的类型几乎全部都是不变类型\",{\"1\":{\"785\":1,\"1190\":1}}],[\"新的数据类型\",{\"1\":{\"512\":1}}],[\"新的表名\",{\"1\":{\"512\":1}}],[\"新的起点\",{\"0\":{\"74\":1}}],[\"新的征程\",{\"0\":{\"67\":1}}],[\"新的挑战与成长\",{\"0\":{\"48\":1}}],[\"新的挑战和奇遇在等待着主角\",{\"1\":{\"40\":1}}],[\"恢复数据和迁移数据等场景\",{\"1\":{\"128\":1}}],[\"恢复数据\",{\"1\":{\"128\":1}}],[\"把字节输入流包装成缓冲字节输入流\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"把字符串时间解析成时间对象\",{\"1\":{\"781\":1,\"1186\":1}}],[\"把字符串转换成字符数组\",{\"1\":{\"743\":1,\"1148\":1}}],[\"把低级的字节流包装成打印流\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"把低级的字符输入流包装成高级的字符缓冲输入流\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"把原始的字节输入流管道包装成高级的缓冲字节输入流\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"把磁盘文件中的数据以字节的形式读取到内存中去\",{\"1\":{\"994\":1,\"995\":1,\"1399\":1,\"1400\":1}}],[\"把出现线程安全问题的核心方法给上锁\",{\"1\":{\"937\":1,\"1342\":1}}],[\"把出现线程安全问题的核心代码给上锁\",{\"1\":{\"933\":1,\"1338\":1}}],[\"把共享资源进行上锁\",{\"1\":{\"932\":1,\"1337\":1}}],[\"把runnable对象交给线程对象\",{\"1\":{\"926\":2,\"1331\":2}}],[\"把callable任务对象交给futuretask对象\",{\"1\":{\"921\":1,\"1326\":1}}],[\"把class文件反编译后\",{\"1\":{\"743\":1,\"1148\":1}}],[\"把线程任务对象交给thread处理\",{\"1\":{\"921\":1,\"1326\":1}}],[\"把任务对象交给thread对象处理\",{\"1\":{\"918\":1,\"1323\":1}}],[\"把myrunnable任务对象交给thread处理\",{\"1\":{\"918\":1,\"1323\":1}}],[\"把map转换成set集合的形式\",{\"1\":{\"907\":1,\"1312\":1}}],[\"把map2中的集合拷贝到map1中\",{\"1\":{\"904\":1,\"1309\":1}}],[\"把键和值封装成一个类型整体给set集合\",{\"1\":{\"908\":1,\"1313\":1}}],[\"把键转为set集合\",{\"1\":{\"906\":1,\"1311\":1}}],[\"把大小王放到牌中\",{\"1\":{\"897\":1,\"1302\":1}}],[\"把大类\",{\"1\":{\"727\":1,\"1132\":1}}],[\"把等于零的情况取掉了\",{\"1\":{\"891\":1,\"1296\":1}}],[\"把运行时期的问题提前到了编译期间\",{\"1\":{\"869\":1,\"1274\":1}}],[\"把list2中的元素拷贝到list中\",{\"1\":{\"842\":1,\"1247\":1}}],[\"把list包装为线程安全的list\",{\"1\":{\"187\":1}}],[\"把集合转换为数组\",{\"1\":{\"842\":1,\"1247\":1}}],[\"把集合中的元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"把给定的对象在当前集合中删除\",{\"1\":{\"842\":1,\"1247\":1}}],[\"把给定的对象添加到当前集合中\",{\"1\":{\"842\":1,\"1247\":1}}],[\"把所有的名称\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"把所有的硬件用文件的形式存储\",{\"1\":{\"428\":1}}],[\"把date2的毫秒值转成日期对象\",{\"1\":{\"776\":1,\"1181\":1}}],[\"把date1转为时间毫秒值再加上1小时100秒\",{\"1\":{\"776\":1,\"1181\":1}}],[\"把毫秒值转换成秒\",{\"1\":{\"769\":1,\"1174\":1}}],[\"把学生对象加入到集合中\",{\"1\":{\"751\":1,\"1156\":1}}],[\"把对象加入到集合中\",{\"1\":{\"751\":1,\"1156\":1}}],[\"把静态成员变量设为私有\",{\"1\":{\"688\":1,\"1093\":1}}],[\"把构造器私有\",{\"1\":{\"686\":1,\"688\":1,\"1091\":1,\"1093\":1}}],[\"把现实中的事物全部看成一个个的对象来解决问题\",{\"1\":{\"658\":1,\"1063\":1}}],[\"把前端项目打包后的dist目录下的所有文件上传到服务器的指定目录下\",{\"1\":{\"495\":1}}],[\"把打包完毕的jar包上传到服务器app文件夹下的target文件夹下\",{\"1\":{\"494\":1}}],[\"把该文件设置为全局可执行命令\",{\"1\":{\"486\":1}}],[\"把要转发的数据存储到request对象中\",{\"1\":{\"310\":1}}],[\"把这个配置类的所有的bean放入spring容器中使用\",{\"1\":{\"168\":1}}],[\"把\",{\"1\":{\"166\":1}}],[\"把返回的\",{\"1\":{\"166\":1}}],[\"把方法改为public\",{\"1\":{\"162\":1}}],[\"把内存中的所有数据都记录到磁盘中\",{\"1\":{\"128\":1}}],[\"把下标该为1\",{\"1\":{\"124\":1}}],[\"店铺信息允许出现短暂的数据不一致情况\",{\"1\":{\"127\":1}}],[\"写出去就是true\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"写中文\",{\"1\":{\"997\":1,\"1402\":1}}],[\"写一个字节数组的一部分\",{\"1\":{\"997\":1,\"1402\":1}}],[\"写一个字节数组出去\",{\"1\":{\"997\":1,\"1402\":1}}],[\"写一个主线程\",{\"1\":{\"914\":1,\"1319\":1}}],[\"写在finally中\",{\"1\":{\"939\":2,\"1344\":2}}],[\"写数据一定要刷新数据\",{\"1\":{\"997\":1,\"1402\":1}}],[\"写数据\",{\"1\":{\"314\":1,\"315\":1}}],[\"写共享变量时加入不同的屏障\",{\"1\":{\"212\":1}}],[\"写入新数据\",{\"1\":{\"997\":1,\"1402\":1}}],[\"写入到从库的中继日志\",{\"1\":{\"155\":1}}],[\"写入数据\",{\"1\":{\"53\":1,\"997\":1,\"1402\":1}}],[\"写命令执行完毕后先放入aof缓冲区\",{\"1\":{\"128\":1}}],[\"写命令执行完毕先放入aof缓冲区\",{\"1\":{\"128\":1}}],[\"写锁\",{\"1\":{\"127\":1}}],[\"另一个bigdecimal对象\",{\"1\":{\"774\":1,\"1179\":1}}],[\"另一个空着~\",{\"1\":{\"715\":1,\"1120\":1}}],[\"另一个则是重做一次～\",{\"1\":{\"435\":1}}],[\"另一个字段是roll\",{\"1\":{\"154\":1}}],[\"另一种方式突破泛型\",{\"1\":{\"814\":1,\"1219\":1}}],[\"另一种方法是使用stream流来把数组收集为list集合\",{\"1\":{\"184\":1}}],[\"另一种是使用bgsave\",{\"1\":{\"128\":1}}],[\"另一种是允许数据短暂的不一致\",{\"1\":{\"127\":1}}],[\"另一种是逻辑过期的方法解决缓存击穿\",{\"1\":{\"125\":1}}],[\"另外由于aof记录的是命令序列\",{\"1\":{\"128\":1}}],[\"另外一个是a的代理对象\",{\"1\":{\"164\":1}}],[\"另外一个项目是伙伴匹配系统\",{\"1\":{\"121\":1}}],[\"另外一种方案是读操作和写操作都加同一个分布式锁\",{\"1\":{\"127\":1}}],[\"某个任务的执行情况下不会影响其他定时任务的执行\",{\"1\":{\"956\":1,\"1361\":1}}],[\"某个父类知道其所有的子类要完成某个功能\",{\"1\":{\"709\":1,\"1114\":1}}],[\"某个key设置了过期时间\",{\"1\":{\"125\":1}}],[\"某些敏感数据可能不应该被缓存\",{\"1\":{\"115\":1}}],[\"因其更加专注于数据的吞吐能力\",{\"1\":{\"376\":1}}],[\"因其更加专注于消息的延迟和容错\",{\"1\":{\"376\":1}}],[\"因此可以使用这四个按钮来移动光标\",{\"1\":{\"435\":1}}],[\"因此仍要依靠底线命令模式输入更多命令\",{\"1\":{\"432\":1}}],[\"因此将nohup和\",{\"1\":{\"424\":1}}],[\"因此我们可以使用sudo命令\",{\"1\":{\"462\":1}}],[\"因此我们使用session把数据保存到服务端\",{\"1\":{\"333\":1}}],[\"因此我们需要会话跟踪技术来实现会话内数据共享\",{\"1\":{\"327\":1}}],[\"因此不一定会很快发现那些只具有弱引用的对象\",{\"1\":{\"222\":1}}],[\"因此进程是动态的\",{\"1\":{\"197\":1}}],[\"因此单线程处理请求也能够保证⾜够的性能\",{\"1\":{\"139\":1}}],[\"因此在设计\",{\"1\":{\"105\":1}}],[\"因为服务端现在只有一个线程\",{\"1\":{\"1462\":1}}],[\"因为这个swimming接口中只有一个抽象方法\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"因为字节流读取中文会出现乱码或者内存溢出\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"因为字符串常量池中已经有\",{\"1\":{\"743\":1,\"1148\":1}}],[\"因为是前面的桶中剩余的水是\",{\"1\":{\"995\":1,\"1400\":1}}],[\"因为后面文件都是自动创建的\",{\"1\":{\"969\":1,\"1374\":1}}],[\"因为后面的一种name可能为空\",{\"1\":{\"758\":1,\"1163\":1}}],[\"因为会影响到其他无关线程的执行\",{\"1\":{\"935\":1,\"1340\":1}}],[\"因为会有大量重复的数据\",{\"1\":{\"149\":1}}],[\"因为怕值出现一样的时候用set会出现值的丢失\",{\"1\":{\"904\":1,\"1309\":1}}],[\"因为map集合和set集合的特点是一样的\",{\"1\":{\"904\":1,\"1309\":1}}],[\"因为编译阶段类型就确定下来\",{\"1\":{\"869\":1,\"1274\":1}}],[\"因为编译器有一套算法\",{\"1\":{\"653\":1,\"1058\":1}}],[\"因为删除后就元素会前移\",{\"1\":{\"866\":1,\"1271\":1}}],[\"因为list集合存在索引\",{\"1\":{\"862\":1,\"1267\":1}}],[\"因为当前所需容量小于10所以不需要扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"因为当前元素大小为2没有超过10所以并不需要扩容\",{\"1\":{\"183\":1}}],[\"因为第一次这个时候mincapacity=10\",{\"1\":{\"831\":1,\"1236\":1}}],[\"因为牵一发而动全身\",{\"1\":{\"784\":1,\"1189\":1}}],[\"因为此时的o就是学生类型且不为空\",{\"1\":{\"756\":1,\"1161\":1}}],[\"因为要删除时\",{\"1\":{\"751\":1,\"1156\":1}}],[\"因为要存放直接后继和直接前驱以及数据\",{\"1\":{\"187\":1}}],[\"因为s2是一个变量\",{\"1\":{\"743\":1,\"1148\":1}}],[\"因为s1和s2的地址不同\",{\"1\":{\"743\":1,\"1148\":1}}],[\"因为sa与sb是通过string对象new出来的\",{\"1\":{\"648\":1,\"1053\":1}}],[\"因为a此时的类型是animal\",{\"1\":{\"730\":1,\"1135\":1}}],[\"因为抽象类不能创建对象的\",{\"1\":{\"738\":2,\"1143\":2}}],[\"因为抽象类的构造器私有化而导致抽象类不能创建对象的\",{\"1\":{\"710\":1,\"1115\":1}}],[\"因为抽象类如果能创建对象\",{\"1\":{\"710\":1,\"1115\":1}}],[\"因为子类继承抽象类就要首先调用抽象类的构造器\",{\"1\":{\"710\":1,\"1115\":1}}],[\"因为它懒\",{\"1\":{\"688\":1,\"1093\":1}}],[\"因为可以节约内存\",{\"1\":{\"679\":1,\"1084\":1}}],[\"因为可以上面编写的都在同一docker网络下\",{\"1\":{\"494\":1}}],[\"因为静态成员变量属于类\",{\"1\":{\"676\":1,\"1081\":1}}],[\"因为java是强类型的语言\",{\"1\":{\"650\":1,\"1055\":1}}],[\"因为创建的都是同一个对象\",{\"1\":{\"648\":1,\"1053\":1}}],[\"因为优先级的原因\",{\"1\":{\"494\":1}}],[\"因为更好的技术替代了jsp\",{\"1\":{\"321\":1}}],[\"因为get和post方式代码中只有一部分获取用户传输的数据不一样\",{\"1\":{\"308\":1}}],[\"因为get和post的请求消息不一样\",{\"1\":{\"300\":1}}],[\"因为我们自定义的servlet类是实现了servlet接口并且重写其方法\",{\"1\":{\"296\":1}}],[\"因为tomcat中已经自带了servlet的jar包\",{\"1\":{\"295\":1}}],[\"因为中间是or连接\",{\"1\":{\"233\":1}}],[\"因为同一进程中的线程极有可能会相互影响\",{\"1\":{\"197\":1}}],[\"因为需要先移动到指定位置再插入和删除\",{\"1\":{\"187\":1}}],[\"因为在进行上述操作的时候集合中第\",{\"1\":{\"187\":1}}],[\"因为超过数组的长度10\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"因为bs架构浏览器请求已经服务器响应是非常快的\",{\"1\":{\"1466\":1}}],[\"因为b对象已经创建完成\",{\"1\":{\"164\":1}}],[\"因为b+树的叶子节点使用双向指针相互连接\",{\"1\":{\"144\":1}}],[\"因为索引失效了\",{\"1\":{\"150\":1}}],[\"因为查询id的时候\",{\"1\":{\"148\":1}}],[\"因为执行的时候mysql需要排序前9000010记录\",{\"1\":{\"148\":1}}],[\"因为非叶子节点上没有数据\",{\"1\":{\"144\":1}}],[\"因为主键和唯一索引不能重复\",{\"1\":{\"142\":1}}],[\"因为保存到缓存中的数据都是读多写少的数据\",{\"1\":{\"127\":1}}],[\"因为数组长度是固定的\",{\"1\":{\"124\":1}}],[\"防火墙的配置非常复杂\",{\"1\":{\"354\":1}}],[\"防御sql注入\",{\"1\":{\"240\":1}}],[\"防⽌了⽤户恶意请求加⼊超出限制数量的队伍\",{\"1\":{\"123\":1}}],[\"防止还没有创建流对象的时候就出现异常出现空指针异常\",{\"1\":{\"1000\":2,\"1405\":2}}],[\"防止出现bug然后被锁死\",{\"1\":{\"939\":2,\"1344\":2}}],[\"防止出现死锁\",{\"1\":{\"125\":1}}],[\"防止毫秒值过大越界\",{\"1\":{\"781\":1,\"1186\":1}}],[\"防止别人调用这个啥都没有的静态变量\",{\"1\":{\"688\":1,\"1093\":1}}],[\"防止docker\",{\"1\":{\"494\":1}}],[\"防止刷新的时候登入表单的重复提交\",{\"1\":{\"310\":1}}],[\"防止冲突\",{\"1\":{\"295\":1}}],[\"防止sql注入\",{\"1\":{\"229\":1,\"233\":1,\"234\":1}}],[\"防止展示出来的还是原本的数据\",{\"1\":{\"127\":1}}],[\"防止业务还没有处理完毕就自动把锁释放了\",{\"1\":{\"125\":1}}],[\"防止已经被其他线程缓存重构过了\",{\"1\":{\"125\":1}}],[\"防止锁在操作过程中被自动释放\",{\"1\":{\"117\":1}}],[\"防止多个用户同时操作或重复提交带来的数据不一致\",{\"1\":{\"117\":1}}],[\"防止恶意用户篡改请求数据\",{\"1\":{\"101\":1}}],[\"防止未经授权的用户访问\",{\"1\":{\"101\":1}}],[\"配合自定义注解authcheck中的mustrole必须是admin才可以执行方法\",{\"1\":{\"160\":1}}],[\"配合\",{\"1\":{\"123\":1,\"435\":1}}],[\"配置application\",{\"1\":{\"494\":1}}],[\"配置系统的\",{\"1\":{\"486\":1}}],[\"配置当前用户的~\",{\"1\":{\"486\":1}}],[\"配置说明\",{\"0\":{\"410\":1}}],[\"配置完成\",{\"1\":{\"405\":1}}],[\"配置完毕后重启\",{\"1\":{\"141\":1}}],[\"配置server细节\",{\"1\":{\"405\":1}}],[\"配置ssh免密登录\",{\"0\":{\"367\":1}}],[\"配置db连接\",{\"1\":{\"405\":1}}],[\"配置zabbix的php前端\",{\"0\":{\"404\":1}}],[\"配置zabbix\",{\"0\":{\"405\":1},\"1\":{\"397\":1}}],[\"配置在\",{\"1\":{\"389\":1}}],[\"配置环境变量\",{\"1\":{\"386\":1,\"389\":1}}],[\"配置hadoop安装路径\",{\"1\":{\"386\":1}}],[\"配置软链接\",{\"1\":{\"386\":1,\"389\":2,\"395\":1}}],[\"配置维护\",{\"1\":{\"374\":1}}],[\"配置三台linux服务器之间的免密码互相ssh登陆\",{\"1\":{\"369\":1}}],[\"配置连接到node1\",{\"1\":{\"365\":1}}],[\"配置finalshell\",{\"1\":{\"365\":1}}],[\"配置多台linux虚拟机\",{\"0\":{\"365\":1}}],[\"配置主机名映射等前置操作\",{\"1\":{\"380\":1}}],[\"配置主机名映射\",{\"1\":{\"363\":1}}],[\"配置集群master节点\",{\"1\":{\"362\":1}}],[\"配置es\",{\"1\":{\"362\":1}}],[\"配置epel仓库\",{\"1\":{\"360\":1}}],[\"配置防火墙放行\",{\"1\":{\"356\":1}}],[\"配置防火墙规则\",{\"1\":{\"354\":1}}],[\"配置jdk环境\",{\"0\":{\"370\":1}}],[\"配置jdk的软链接\",{\"1\":{\"353\":1}}],[\"配置java安装路径\",{\"1\":{\"386\":1}}],[\"配置java执行程序的软链接\",{\"1\":{\"353\":1}}],[\"配置java\",{\"1\":{\"353\":1}}],[\"配置root的简单密码\",{\"1\":{\"350\":1}}],[\"配置rollbackfor属性为exception\",{\"1\":{\"162\":1}}],[\"配置myid\",{\"1\":{\"375\":1}}],[\"配置mysqlq的yum仓库\",{\"1\":{\"346\":1}}],[\"配置mybatis\",{\"1\":{\"264\":1}}],[\"配置yum仓库\",{\"1\":{\"346\":1,\"349\":1}}],[\"配置路径\",{\"1\":{\"302\":4}}],[\"配置访问路径\",{\"1\":{\"295\":1}}],[\"配置该servlet的访问路径\",{\"1\":{\"295\":1}}],[\"配置\",{\"0\":{\"347\":1,\"350\":1},\"1\":{\"295\":1,\"386\":5,\"397\":1}}],[\"配置文件\",{\"1\":{\"486\":1}}],[\"配置文件在\",{\"1\":{\"412\":2}}],[\"配置文件路径\",{\"0\":{\"412\":1}}],[\"配置文件注释\",{\"0\":{\"411\":1}}],[\"配置文件都在这里\",{\"1\":{\"386\":1}}],[\"配置文件完成复杂功能\",{\"1\":{\"284\":1}}],[\"配置文件中填写客户端配置\",{\"1\":{\"104\":1}}],[\"配置文件中读取配置\",{\"1\":{\"103\":1}}],[\"配置各个标签的时候\",{\"1\":{\"267\":1}}],[\"配置数据库连接环境信息\",{\"1\":{\"267\":1}}],[\"配置pom\",{\"1\":{\"264\":1}}],[\"配置管理和服务管理平台\",{\"1\":{\"171\":1}}],[\"配置如下\",{\"1\":{\"141\":1}}],[\"配置项\",{\"1\":{\"128\":1}}],[\"配置类来创建自定义的\",{\"1\":{\"113\":1}}],[\"配置给父项目指定子模块\",{\"1\":{\"98\":1}}],[\"非规律化递归案例\",{\"0\":{\"980\":1,\"1385\":1}}],[\"非俘获的团体\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非字边界\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非单词字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非垂直空格字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非水平空格字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非数字\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非零表示异常终止\",{\"1\":{\"769\":1,\"1174\":1}}],[\"非空格字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"非空\",{\"1\":{\"525\":2}}],[\"非空且唯一\",{\"1\":{\"525\":1}}],[\"非空约束\",{\"1\":{\"525\":1}}],[\"非常专业\",{\"1\":{\"939\":2,\"1344\":2}}],[\"非常有用\",{\"0\":{\"790\":1,\"1195\":1}}],[\"非常复杂\",{\"1\":{\"371\":1}}],[\"非常期待能与大家成为同事\",{\"1\":{\"121\":1}}],[\"非正整数时表示不进行检查\",{\"1\":{\"240\":1}}],[\"非公平\",{\"1\":{\"210\":1}}],[\"非临时实例则不会被剔除\",{\"1\":{\"173\":1}}],[\"非临时实例采用主动检测模式\",{\"1\":{\"173\":1}}],[\"非public方法\",{\"1\":{\"162\":1}}],[\"非聚集索引\",{\"0\":{\"145\":1}}],[\"非叶子节点上保存的是指针\",{\"1\":{\"144\":1}}],[\"非叶子节点上只存储指针不存储数据\",{\"1\":{\"144\":1}}],[\"非关系型数据库\",{\"1\":{\"92\":1}}],[\"方向键\",{\"1\":{\"433\":1}}],[\"方便\",{\"1\":{\"893\":1,\"939\":1,\"1298\":1,\"1344\":1}}],[\"方便操作集合\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"方便创建子类对象\",{\"1\":{\"736\":1,\"1141\":1}}],[\"方便系统维护\",{\"1\":{\"704\":1,\"1109\":1}}],[\"方便进行权限的统一管理\",{\"1\":{\"463\":1}}],[\"方便起见\",{\"1\":{\"354\":1}}],[\"方便用户查看整个队伍中的志同道合的人\",{\"1\":{\"121\":1}}],[\"方式的原因\",{\"0\":{\"928\":1,\"1333\":1}}],[\"方式的参数乱码的工具类\",{\"1\":{\"309\":1}}],[\"方式\",{\"1\":{\"923\":1,\"1328\":1}}],[\"方式三\",{\"0\":{\"921\":1,\"1326\":1}}],[\"方式二\",{\"0\":{\"918\":1,\"937\":1,\"1323\":1,\"1342\":1},\"1\":{\"943\":1,\"953\":1,\"1348\":1,\"1358\":1}}],[\"方式一\",{\"0\":{\"914\":1,\"933\":1,\"1319\":1,\"1338\":1},\"1\":{\"891\":1,\"896\":1,\"943\":1,\"953\":1,\"1296\":1,\"1301\":1,\"1348\":1,\"1358\":1}}],[\"方式2\",{\"1\":{\"354\":1,\"356\":1,\"358\":1,\"360\":1,\"377\":1}}],[\"方式1\",{\"1\":{\"354\":1,\"356\":1,\"358\":1,\"360\":1,\"377\":1}}],[\"方案二\",{\"1\":{\"141\":1}}],[\"方案一\",{\"1\":{\"141\":1}}],[\"方法实现一个函数\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"方法源码\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"方法获取一个结果\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"方法型\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"方法递归\",{\"1\":{\"974\":3,\"1379\":3}}],[\"方法递归存在的问题\",{\"0\":{\"974\":1,\"1379\":1}}],[\"方法自己调用自己\",{\"1\":{\"973\":1,\"1378\":1}}],[\"方法直接调用自己或者简介调用自己的形式成为方法递归\",{\"1\":{\"972\":1,\"1377\":1}}],[\"方法直接将异常通过throws抛出去给调用者\",{\"1\":{\"636\":1,\"1041\":1}}],[\"方法启动线程\",{\"1\":{\"914\":1,\"918\":1,\"1319\":1,\"1323\":1}}],[\"方法更具有通用性\",{\"1\":{\"872\":1,\"1277\":1}}],[\"方法返回的哈希值是相同的\",{\"1\":{\"887\":1,\"1292\":1}}],[\"方法返回值\",{\"1\":{\"872\":1,\"1277\":1}}],[\"方法返回true\",{\"1\":{\"194\":1}}],[\"方法时\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法中可以使用泛型接收一切实际类型的参数\",{\"1\":{\"872\":1,\"1277\":1}}],[\"方法中\",{\"1\":{\"831\":2,\"1236\":2}}],[\"方法中的\",{\"1\":{\"763\":1,\"1168\":1}}],[\"方法进行扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法进入等待状态\",{\"1\":{\"204\":1}}],[\"方法判断是否需要扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法得到最小扩容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法引用\",{\"1\":{\"823\":2,\"1022\":2,\"1228\":2,\"1472\":2}}],[\"方法二\",{\"1\":{\"751\":2,\"1156\":2}}],[\"方法一\",{\"1\":{\"751\":2,\"1156\":2}}],[\"方法调用其他方法\",{\"1\":{\"973\":1,\"1378\":1}}],[\"方法调用\",{\"1\":{\"725\":1,\"1130\":1}}],[\"方法调用之后\",{\"1\":{\"297\":1}}],[\"方法参数传递机制\",{\"0\":{\"654\":1,\"1059\":1},\"1\":{\"654\":1,\"1059\":1}}],[\"方法名\",{\"1\":{\"754\":1,\"767\":1,\"769\":1,\"774\":1,\"793\":1,\"842\":1,\"861\":1,\"1159\":1,\"1172\":1,\"1174\":1,\"1179\":1,\"1198\":1,\"1247\":1,\"1266\":1}}],[\"方法名称\",{\"1\":{\"709\":1,\"763\":1,\"812\":1,\"865\":1,\"872\":1,\"895\":1,\"925\":1,\"926\":1,\"939\":1,\"948\":1,\"951\":1,\"952\":1,\"994\":1,\"1114\":1,\"1168\":1,\"1217\":1,\"1270\":1,\"1277\":1,\"1300\":1,\"1330\":1,\"1331\":1,\"1344\":1,\"1353\":1,\"1356\":1,\"1357\":1,\"1399\":1}}],[\"方法名都被称为标识符\",{\"1\":{\"643\":1,\"1048\":1}}],[\"方法名就是sql映射文件中sql语句的id\",{\"1\":{\"266\":1}}],[\"方法花费了\",{\"1\":{\"629\":2,\"1034\":2}}],[\"方法耗时\",{\"1\":{\"615\":1}}],[\"方法之后mincapacity为10\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法之外\",{\"1\":{\"320\":1}}],[\"方法之中\",{\"1\":{\"320\":1}}],[\"方法然后读一行reader\",{\"1\":{\"308\":1}}],[\"方法完成资源的释放\",{\"1\":{\"297\":1}}],[\"方法对请求进行处理\",{\"1\":{\"297\":1}}],[\"方法对比\",{\"0\":{\"207\":1}}],[\"方法初始化这个对象\",{\"1\":{\"297\":1}}],[\"方法总共输入一句话\",{\"1\":{\"295\":1}}],[\"方法来比较\",{\"1\":{\"831\":1,\"1236\":1}}],[\"方法来获取默认值或将其值更改为当前线程所存的副本的值\",{\"1\":{\"221\":1}}],[\"方法来使数组转换为list\",{\"1\":{\"184\":1}}],[\"方法释放锁\",{\"1\":{\"215\":1}}],[\"方法释放了锁\",{\"1\":{\"207\":1}}],[\"方法强行停止\",{\"1\":{\"208\":1}}],[\"方法执行完成后\",{\"1\":{\"207\":1}}],[\"方法被调用后\",{\"1\":{\"207\":1}}],[\"方法没有释放锁\",{\"1\":{\"207\":1}}],[\"方法和\",{\"0\":{\"207\":1}}],[\"方法等待t2线程结束\",{\"1\":{\"205\":1}}],[\"方法等待t1线程结束\",{\"1\":{\"205\":1}}],[\"方法转变为可执行状态\",{\"1\":{\"204\":1}}],[\"方法方可启动线程并使线程进入就绪状态\",{\"1\":{\"202\":1}}],[\"方法吗\",{\"0\":{\"202\":1}}],[\"方法允许抛出异常\",{\"1\":{\"200\":1}}],[\"方法的具体实现不关心\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"方法的具体流程\",{\"0\":{\"190\":1}}],[\"方法的返回值\",{\"1\":{\"812\":1,\"1217\":1}}],[\"方法的话不会以多线程的方式执行\",{\"1\":{\"202\":1}}],[\"方法的异常只能在内部消化\",{\"1\":{\"200\":1}}],[\"方法的时候\",{\"1\":{\"187\":1,\"222\":1}}],[\"方法\",{\"1\":{\"184\":1,\"187\":1,\"204\":1,\"207\":1,\"210\":1,\"222\":1,\"308\":1,\"634\":2,\"662\":1,\"710\":1,\"773\":1,\"784\":1,\"804\":1,\"806\":1,\"808\":1,\"810\":1,\"812\":1,\"831\":2,\"896\":1,\"904\":1,\"914\":1,\"918\":1,\"939\":1,\"954\":1,\"965\":1,\"966\":1,\"968\":1,\"969\":1,\"970\":1,\"1011\":1,\"1014\":1,\"1027\":2,\"1028\":2,\"1029\":1,\"1039\":2,\"1067\":1,\"1115\":1,\"1178\":1,\"1189\":1,\"1209\":1,\"1211\":1,\"1213\":1,\"1215\":1,\"1217\":1,\"1236\":2,\"1301\":1,\"1309\":1,\"1319\":1,\"1323\":1,\"1344\":1,\"1359\":1,\"1370\":1,\"1371\":1,\"1373\":1,\"1374\":1,\"1375\":1,\"1416\":1,\"1419\":1,\"1449\":1,\"1458\":1,\"1461\":1,\"1477\":2,\"1478\":2,\"1479\":1}}],[\"方法b中也加了同一把锁\",{\"1\":{\"133\":1}}],[\"方法a中加了锁\",{\"1\":{\"133\":1}}],[\"方法指定根据描述模糊查询\",{\"1\":{\"99\":1}}],[\"到读了几个字节read2\",{\"1\":{\"995\":1,\"1400\":1}}],[\"到一个文件对象数组中去返回\",{\"1\":{\"970\":1,\"1375\":1}}],[\"到一个字符串数组中去返回\",{\"1\":{\"970\":1,\"1375\":1}}],[\"到底是哪一类具体的动物\",{\"1\":{\"730\":1,\"1135\":1}}],[\"到底能不能写入\",{\"1\":{\"437\":1}}],[\"到指令行模式下执行\",{\"1\":{\"437\":1}}],[\"到该行的最前面一个字符\",{\"1\":{\"435\":1}}],[\"到该行的最后一个字符\",{\"1\":{\"435\":1}}],[\"到\",{\"1\":{\"435\":1,\"437\":1}}],[\"到命令的尾部\",{\"1\":{\"423\":1}}],[\"到时间自动删除\",{\"1\":{\"331\":1}}],[\"到时间后可切换为可执行状态\",{\"1\":{\"204\":1}}],[\"到目前已经熟练掌握了java基础\",{\"1\":{\"121\":1}}],[\"到项目前\",{\"1\":{\"107\":1}}],[\"镜像打\",{\"1\":{\"119\":1}}],[\"镜像一键快速启动项目\",{\"1\":{\"119\":1}}],[\"镜像想象成应用的安装包\",{\"1\":{\"119\":1}}],[\"制作了项目的安装包\",{\"1\":{\"119\":1}}],[\"仅限us\",{\"1\":{\"819\":1,\"1224\":1}}],[\"仅仅这一次\",{\"1\":{\"806\":1,\"1211\":1}}],[\"仅需1个即可\",{\"1\":{\"381\":5}}],[\"仅是被告知失败\",{\"1\":{\"211\":1}}],[\"仅存储对象\",{\"1\":{\"194\":1}}],[\"仅在当前应用启动时间内有效\",{\"1\":{\"159\":1}}],[\"仅在当前\",{\"1\":{\"159\":2}}],[\"仅\",{\"1\":{\"159\":4}}],[\"仅做了解即可\",{\"1\":{\"118\":1}}],[\"仅用户本人可查看自己的密钥对\",{\"1\":{\"101\":1}}],[\"允许请求的任务队列长度是integer\",{\"1\":{\"952\":1,\"1357\":1}}],[\"允许用户为几乎任何事件配置基于邮件的告警\",{\"1\":{\"396\":1}}],[\"允许用户通过编程的方式构建复杂的查询条件\",{\"1\":{\"99\":1}}],[\"允许外网访问\",{\"1\":{\"362\":1}}],[\"允许root远程登录会带来安全风险\",{\"1\":{\"350\":1}}],[\"允许root远程登录\",{\"1\":{\"350\":1}}],[\"允许同一客户端多次获取同一个锁\",{\"1\":{\"117\":1}}],[\"允许其他客户端获取锁\",{\"1\":{\"117\":1}}],[\"锁被占用\",{\"1\":{\"963\":1,\"1368\":1}}],[\"锁对象是唯一不可替换的\",{\"1\":{\"939\":2,\"1344\":2}}],[\"锁对象的规范要求\",{\"0\":{\"936\":1,\"1341\":1}}],[\"锁对象用任意唯一的对象好不好呢\",{\"0\":{\"935\":1,\"1340\":1}}],[\"锁对象只要对于当前同时执行的线程来说是同一个对象即可\",{\"1\":{\"934\":1,\"1339\":1}}],[\"锁对象要求\",{\"0\":{\"934\":1,\"1339\":1}}],[\"锁重入功能\",{\"1\":{\"215\":1}}],[\"锁\",{\"1\":{\"154\":1,\"210\":1}}],[\"锁才会被完全释放\",{\"1\":{\"117\":1}}],[\"锁的重入\",{\"1\":{\"133\":1}}],[\"锁的超时时间即将到期\",{\"1\":{\"117\":1}}],[\"锁的续期\",{\"1\":{\"117\":1}}],[\"锁的可重入性\",{\"1\":{\"117\":1}}],[\"锁的标识\",{\"1\":{\"117\":1}}],[\"锁超时\",{\"1\":{\"117\":1}}],[\"争用锁\",{\"1\":{\"117\":1}}],[\"脚本\",{\"1\":{\"117\":1,\"819\":1,\"1224\":1}}],[\"先清空之前的数据\",{\"1\":{\"997\":1,\"1402\":1}}],[\"先定位出的应该是一级文件对象\",{\"1\":{\"981\":1,\"1386\":1}}],[\"先学会使用file类定位文件以及操作文件本身\",{\"1\":{\"965\":1,\"1370\":1}}],[\"先要定位文件\",{\"1\":{\"965\":1,\"1370\":1}}],[\"先把map集合装换成set集合\",{\"1\":{\"907\":1,\"1312\":1}}],[\"先获取map集合的全部键的set集合\",{\"1\":{\"906\":1,\"1311\":1}}],[\"先获取arraylist\",{\"1\":{\"814\":1,\"1219\":1}}],[\"先拿到当前循环一次的牌对象\",{\"1\":{\"897\":1,\"1302\":1}}],[\"先进先出\",{\"1\":{\"851\":1,\"1256\":1}}],[\"先进后出\",{\"1\":{\"850\":1,\"1255\":1}}],[\"先调用ensurecapacityinternal方法\",{\"1\":{\"831\":1,\"1236\":1}}],[\"先得到集合的stream流\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"先输出一下\",{\"1\":{\"776\":1,\"1181\":1}}],[\"先判断了是不是自己和自己比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"先尝试自己重写equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"先在子类局部范围找\",{\"1\":{\"696\":1,\"1101\":1}}],[\"先在本地启动\",{\"1\":{\"107\":1}}],[\"先通过getbytes\",{\"1\":{\"309\":1}}],[\"先去计算key的hash值\",{\"1\":{\"217\":1}}],[\"先去抢锁\",{\"1\":{\"116\":1}}],[\"先让lock\",{\"1\":{\"210\":1}}],[\"先实例a对象\",{\"1\":{\"164\":1}}],[\"先来介绍一下项目中使用aop记录请求日志\",{\"1\":{\"160\":1}}],[\"先分页查询数据的id字段\",{\"1\":{\"148\":1}}],[\"先查询缓存\",{\"1\":{\"125\":1}}],[\"类实现comparable接口\",{\"1\":{\"891\":1,\"1296\":1}}],[\"类自定义比较规则\",{\"1\":{\"891\":1,\"896\":1,\"1296\":1,\"1301\":1}}],[\"类别\",{\"1\":{\"819\":1,\"1224\":1}}],[\"类别和二进制属性的类\",{\"1\":{\"819\":1,\"1224\":1}}],[\"类对象\",{\"1\":{\"802\":1,\"1207\":1}}],[\"类有的成员\",{\"1\":{\"710\":1,\"1115\":1}}],[\"类中的所有的构造器\",{\"1\":{\"808\":1,\"1213\":1}}],[\"类中可以定义的5大成分\",{\"1\":{\"660\":1,\"1065\":1}}],[\"类中成分\",{\"0\":{\"660\":1,\"1065\":1}}],[\"类是相同事物共同特征的描述\",{\"1\":{\"658\":1,\"1063\":1}}],[\"类名注意首字母大写\",{\"1\":{\"659\":1,\"1064\":1}}],[\"类名\",{\"1\":{\"643\":1,\"701\":1,\"709\":1,\"802\":1,\"803\":1,\"870\":1,\"936\":1,\"1048\":1,\"1106\":1,\"1114\":1,\"1207\":1,\"1208\":1,\"1275\":1,\"1341\":1}}],[\"类似之前写的普通实例方法\",{\"1\":{\"719\":1,\"1124\":1}}],[\"类似于集合的作用\",{\"1\":{\"870\":1,\"1275\":1}}],[\"类似于传送带\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"类似于文件夹\",{\"1\":{\"701\":1,\"1106\":1}}],[\"类似于windows中的任务管理器\",{\"1\":{\"481\":1}}],[\"类似于windows系统的快捷方式\",{\"1\":{\"475\":1}}],[\"类似于windows的设备管理器\",{\"1\":{\"428\":1}}],[\"类似于windows下的program\",{\"1\":{\"428\":1}}],[\"类似另存新档\",{\"1\":{\"437\":1}}],[\"类似windows的exe\",{\"1\":{\"360\":1}}],[\"类似\",{\"1\":{\"214\":1}}],[\"类的权限名\",{\"1\":{\"754\":1,\"1159\":1}}],[\"类的静态成员变量\",{\"1\":{\"212\":1}}],[\"类的静态本地方法\",{\"1\":{\"207\":1}}],[\"类的成员变量\",{\"1\":{\"212\":1}}],[\"类的本地方法\",{\"1\":{\"207\":1}}],[\"类的\",{\"0\":{\"202\":1}}],[\"类型也可以选择不固定\",{\"1\":{\"833\":1,\"1238\":1}}],[\"类型也可以选择不固定的\",{\"1\":{\"744\":1,\"1149\":1}}],[\"类型\",{\"1\":{\"793\":3,\"1198\":3}}],[\"类型确定\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"类型转换满足的规则\",{\"1\":{\"650\":1,\"1055\":1}}],[\"类型转换\",{\"0\":{\"650\":1,\"1055\":1},\"1\":{\"150\":1}}],[\"类型存储用户信息\",{\"1\":{\"111\":1}}],[\"类\",{\"1\":{\"116\":1,\"646\":1,\"785\":1,\"1051\":1,\"1190\":1}}],[\"优缺点\",{\"0\":{\"915\":1,\"919\":1,\"922\":1,\"1320\":1,\"1324\":1,\"1327\":1}}],[\"优化二叉树可能出现的瘸子现象\",{\"1\":{\"855\":1,\"1260\":1}}],[\"优化性能\",{\"1\":{\"115\":1}}],[\"优势\",{\"0\":{\"726\":1,\"1131\":1}}],[\"优雅\",{\"1\":{\"698\":1,\"1103\":1}}],[\"优先使用集合自带的比较器\",{\"1\":{\"891\":1,\"1296\":1}}],[\"优先推荐入参为string的构造方法\",{\"1\":{\"773\":1,\"1178\":1}}],[\"优先级\",{\"1\":{\"302\":1}}],[\"优先级0最大\",{\"1\":{\"297\":1}}],[\"优先启动服务提供者项目\",{\"1\":{\"107\":1}}],[\"优点\",{\"1\":{\"128\":1,\"129\":2,\"286\":1,\"915\":1,\"919\":1,\"922\":2,\"923\":1,\"1320\":1,\"1324\":1,\"1327\":2,\"1328\":1}}],[\"优点是实现起来简单\",{\"1\":{\"124\":1}}],[\"定位操作系统的文件对象\",{\"1\":{\"965\":1,\"969\":1,\"1370\":1,\"1374\":1}}],[\"定位文件\",{\"1\":{\"965\":1,\"1370\":1}}],[\"定位某个有参构造器\",{\"1\":{\"804\":1,\"806\":1,\"1209\":1,\"1211\":1}}],[\"定时器本身就是一个单线程\",{\"1\":{\"954\":1,\"1359\":1}}],[\"定时器的实现方式\",{\"0\":{\"953\":1,\"1358\":1}}],[\"定时器是一种控制任务延时调用\",{\"1\":{\"952\":1,\"1357\":1}}],[\"定时邮件发送\",{\"1\":{\"952\":1,\"1357\":1}}],[\"定时任务和分布式锁\",{\"0\":{\"116\":1}}],[\"定时任务来实现缓存预热\",{\"1\":{\"109\":1}}],[\"定义len记录每次读取的字节数\",{\"1\":{\"995\":1,\"1400\":1}}],[\"定义线程类\",{\"1\":{\"930\":1,\"1335\":1}}],[\"定义主线程\",{\"1\":{\"918\":1,\"920\":1,\"1323\":1,\"1325\":1}}],[\"定义完成之后不可修改\",{\"1\":{\"910\":1,\"1315\":1}}],[\"定义3个玩家\",{\"1\":{\"897\":1,\"1302\":1}}],[\"定义静态代码块\",{\"1\":{\"897\":1,\"1302\":1}}],[\"定义三个玩家\",{\"1\":{\"897\":1,\"1302\":1}}],[\"定义方法的同时定义了泛型方法就是泛型方法\",{\"1\":{\"872\":1,\"1277\":1}}],[\"定义方法的时候\",{\"1\":{\"726\":1,\"1131\":1}}],[\"定义类实现callable接口\",{\"1\":{\"921\":1,\"1326\":1}}],[\"定义类时\",{\"1\":{\"870\":1,\"1275\":1}}],[\"定义类的注意事项\",{\"0\":{\"659\":1,\"1064\":1}}],[\"定义while循环\",{\"1\":{\"844\":1,\"1249\":1}}],[\"定义这个的时候就会得到一个该集合的迭代器\",{\"1\":{\"844\":1,\"1249\":1}}],[\"定义左右位置\",{\"1\":{\"794\":1,\"1199\":1}}],[\"定义字符串使用string\",{\"1\":{\"764\":1,\"1169\":1}}],[\"定义在方法中\",{\"1\":{\"735\":1,\"1140\":1}}],[\"定义bean\",{\"1\":{\"557\":1}}],[\"定义controller\",{\"1\":{\"557\":1}}],[\"定义mp拦截器\",{\"1\":{\"544\":1}}],[\"定义一个死循环\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"定义一个funciton\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"定义一个消费方法\",{\"1\":{\"1027\":2,\"1477\":2}}],[\"定义一个和文件大小相同的桶buffer\",{\"1\":{\"996\":1,\"1401\":1}}],[\"定义一个与文件大小一样的字节数组\",{\"1\":{\"996\":1,\"1401\":1}}],[\"定义一个只能装3滴水的桶\",{\"1\":{\"995\":1,\"1400\":1}}],[\"定义一个字节数组\",{\"1\":{\"995\":1,\"996\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1400\":1,\"1401\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"定义一个变量\",{\"1\":{\"994\":1,\"1399\":1}}],[\"定义一个变量用于存储验证码\",{\"1\":{\"678\":1,\"679\":1,\"1083\":1,\"1084\":1}}],[\"定义一个任务类\",{\"1\":{\"921\":1,\"1326\":1}}],[\"定义一个线程任务类\",{\"1\":{\"918\":1,\"1323\":1}}],[\"定义一个线程任务类myrunnable实现runnable接口\",{\"1\":{\"918\":1,\"1323\":1}}],[\"定义一个线程类继承thread类\",{\"1\":{\"914\":1,\"1319\":1}}],[\"定义一个子类mythread继承线程类java\",{\"1\":{\"914\":1,\"1319\":1}}],[\"定义一个map集合\",{\"1\":{\"908\":1,\"1313\":1}}],[\"定义一个静态的集合存储54张牌\",{\"1\":{\"897\":1,\"1302\":1}}],[\"定义一个静态变量\",{\"1\":{\"686\":1,\"688\":2,\"1091\":1,\"1093\":2}}],[\"定义一个静态变量存储这个类的一个对象\",{\"1\":{\"686\":1,\"1091\":1}}],[\"定义一个集合对象存储电影\",{\"1\":{\"847\":1,\"1252\":1}}],[\"定义一个电影类\",{\"1\":{\"847\":1,\"1252\":1}}],[\"定义一个电脑接口\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"定义一个arraylist类存储学生对象\",{\"1\":{\"751\":1,\"1156\":1}}],[\"定义一个arraylist类存储这些影片\",{\"1\":{\"751\":1,\"1156\":1}}],[\"定义一个接口\",{\"1\":{\"738\":1,\"1143\":1}}],[\"定义一个\",{\"1\":{\"732\":1,\"1137\":1}}],[\"定义一个抽象类的动物\",{\"1\":{\"732\":1,\"1137\":1}}],[\"定义一个单例类\",{\"1\":{\"686\":1,\"1091\":1}}],[\"定义一个方法\",{\"1\":{\"641\":1,\"688\":1,\"1026\":1,\"1027\":1,\"1046\":1,\"1093\":1,\"1476\":1,\"1477\":1}}],[\"定义一个servlet容器启动的配置类\",{\"1\":{\"557\":1}}],[\"定义一个类\",{\"1\":{\"295\":1,\"686\":1,\"688\":1,\"1091\":1,\"1093\":1}}],[\"定义一个volatile\",{\"1\":{\"208\":1}}],[\"定义与sql映射文件同名的mapper接口\",{\"1\":{\"266\":1}}],[\"定义pojo类\",{\"1\":{\"264\":1}}],[\"定义坐标的\",{\"1\":{\"258\":1}}],[\"定义当前项目的版本号\",{\"1\":{\"256\":1}}],[\"定义当前maven项目名称\",{\"1\":{\"256\":1}}],[\"定义当前的maven项目隶属组织的名称\",{\"1\":{\"256\":1}}],[\"定义配置文件\",{\"1\":{\"239\":1,\"240\":1}}],[\"定义sql语句\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1}}],[\"定期清理有两种模式\",{\"1\":{\"129\":1}}],[\"定期删除能有效释放过期键占用的内存\",{\"1\":{\"129\":1}}],[\"定期删除\",{\"1\":{\"129\":3}}],[\"定期调整缓存配置\",{\"1\":{\"115\":1}}],[\"内的方法就是这个\",{\"1\":{\"865\":1,\"1270\":1}}],[\"内连接查询语法\",{\"1\":{\"531\":1}}],[\"内连接\",{\"0\":{\"531\":1}}],[\"内置和第三方\",{\"1\":{\"474\":1}}],[\"内\",{\"1\":{\"353\":1,\"373\":2}}],[\"内执行\",{\"1\":{\"198\":1}}],[\"内存中的一段连续空间\",{\"1\":{\"852\":1,\"1257\":1}}],[\"内存地址\",{\"1\":{\"754\":1,\"1159\":1}}],[\"内存机制\",{\"0\":{\"662\":1,\"1067\":1}}],[\"内存的使用情况\",{\"1\":{\"481\":1}}],[\"内存大小\",{\"1\":{\"395\":2}}],[\"内存释放\",{\"1\":{\"331\":1}}],[\"内存泄露问题是怎么导致的\",{\"0\":{\"222\":1}}],[\"内存空间占用\",{\"1\":{\"187\":1}}],[\"内存占用等性能指标\",{\"1\":{\"115\":1}}],[\"内部类就是一个定义在一个类里面的类\",{\"1\":{\"734\":1,\"1139\":1}}],[\"内部类\",{\"0\":{\"734\":1,\"1139\":1},\"1\":{\"660\":1,\"1065\":1}}],[\"内部会对数组进行一个长度为10的扩容\",{\"1\":{\"183\":1}}],[\"内部是通过lua脚本进行实现的\",{\"1\":{\"132\":1}}],[\"内有效\",{\"1\":{\"159\":2}}],[\"内容也一样\",{\"1\":{\"648\":1,\"1053\":1}}],[\"内容重点关注的\",{\"1\":{\"481\":1}}],[\"内容会放到\",{\"1\":{\"320\":1}}],[\"内容会放到out\",{\"1\":{\"320\":1}}],[\"内容会直接放到\",{\"1\":{\"320\":1}}],[\"内容\",{\"1\":{\"108\":1,\"320\":1}}],[\"7才有的\",{\"1\":{\"757\":1,\"1162\":1}}],[\"7<\",{\"1\":{\"615\":1}}],[\"79\",{\"1\":{\"496\":1,\"751\":8,\"1156\":8}}],[\"79848\",{\"1\":{\"481\":1}}],[\"78\",{\"1\":{\"496\":1,\"751\":6,\"1156\":6}}],[\"7777\",{\"1\":{\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":2}}],[\"77a993af29ad\",{\"1\":{\"496\":2}}],[\"77\",{\"1\":{\"496\":1}}],[\"74\",{\"1\":{\"496\":1}}],[\"74行\",{\"1\":{\"362\":1}}],[\"71\",{\"1\":{\"496\":1}}],[\"70c1e15bc759\",{\"1\":{\"496\":2}}],[\"70\",{\"1\":{\"496\":1,\"751\":5,\"1156\":5}}],[\"7077\",{\"1\":{\"392\":1}}],[\"7代表rwx\",{\"1\":{\"465\":1}}],[\"73\",{\"1\":{\"460\":2,\"496\":1}}],[\"7月\",{\"1\":{\"460\":1}}],[\"7版本在centos系统安装\",{\"0\":{\"345\":1}}],[\"7版本安装\",{\"1\":{\"344\":1}}],[\"72\",{\"1\":{\"309\":4,\"496\":1}}],[\"75b84c92\",{\"1\":{\"654\":1,\"1059\":1}}],[\"755\",{\"1\":{\"486\":1}}],[\"751\",{\"1\":{\"465\":1}}],[\"75\",{\"1\":{\"190\":1,\"191\":1,\"496\":1}}],[\"7和jdk1\",{\"0\":{\"189\":1}}],[\"7\",{\"1\":{\"115\":1,\"217\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"264\":1,\"346\":1,\"358\":4,\"362\":3,\"392\":6,\"398\":2,\"400\":1,\"481\":2,\"496\":1,\"525\":2,\"743\":1,\"794\":1,\"808\":1,\"812\":1,\"819\":3,\"842\":1,\"888\":1,\"897\":1,\"904\":1,\"966\":1,\"981\":1,\"1148\":1,\"1199\":1,\"1213\":1,\"1217\":1,\"1224\":3,\"1247\":1,\"1293\":1,\"1302\":1,\"1309\":1,\"1371\":1,\"1386\":1}}],[\"76\",{\"1\":{\"109\":1,\"496\":1}}],[\"策略或淘汰算法来淘汰不常用的缓存数据\",{\"1\":{\"115\":1}}],[\"避免乱码\",{\"0\":{\"996\":1,\"1401\":1}}],[\"避免对系统造成损坏\",{\"1\":{\"462\":1}}],[\"避免导致后面的软件运行出现问题即可\",{\"1\":{\"371\":1}}],[\"避免数据库连接遗漏\",{\"1\":{\"236\":1}}],[\"避免了少元素的情况\",{\"1\":{\"891\":1,\"1296\":1}}],[\"避免了强制类型转换可能出现的异常\",{\"1\":{\"869\":1,\"1274\":1}}],[\"避免了在servlet中直接输出html标签\",{\"1\":{\"317\":1}}],[\"避免了频繁的上下⽂切换\",{\"1\":{\"139\":1}}],[\"避免了⾸⻚加载过慢⽤户体验差的情况\",{\"1\":{\"123\":1}}],[\"避免了程序的崩溃\",{\"1\":{\"52\":1}}],[\"避免请求重放给系统带来不必要的开销\",{\"1\":{\"121\":1}}],[\"避免缓存敏感数据\",{\"1\":{\"115\":1}}],[\"避免缓存数据过多\",{\"1\":{\"115\":1}}],[\"避免缓存数据长时间不更新\",{\"1\":{\"115\":1}}],[\"设备在网络中的地址\",{\"1\":{\"1427\":1}}],[\"设定之后\",{\"1\":{\"437\":1}}],[\"设置线程名称\",{\"1\":{\"926\":1,\"1331\":1}}],[\"设置名称setname\",{\"1\":{\"924\":1,\"1329\":1}}],[\"设置过滤器\",{\"1\":{\"562\":1}}],[\"设置环境变量\",{\"0\":{\"486\":1}}],[\"设置软链接\",{\"1\":{\"392\":1}}],[\"设置java安装目录\",{\"1\":{\"392\":1}}],[\"设置ip为192\",{\"1\":{\"365\":2}}],[\"设置节点名称\",{\"1\":{\"362\":1}}],[\"设置集群名称\",{\"1\":{\"362\":1}}],[\"设置cookie存活时间\",{\"1\":{\"331\":1}}],[\"设置数据\",{\"1\":{\"329\":1}}],[\"设置字节数据的响应体\",{\"1\":{\"315\":1}}],[\"设置字符数据的响应体\",{\"1\":{\"314\":1}}],[\"设置字符输入流的编码\",{\"1\":{\"309\":2}}],[\"设置状态码\",{\"1\":{\"313\":1}}],[\"设置响应头location\",{\"1\":{\"313\":1}}],[\"设置响应头键值对\",{\"1\":{\"312\":1}}],[\"设置响应状态码\",{\"1\":{\"313\":1}}],[\"设置响应码\",{\"1\":{\"312\":1}}],[\"设置响应数据格式以及字符集\",{\"1\":{\"314\":1}}],[\"设置响应数据\",{\"1\":{\"304\":1}}],[\"设置默认的解码方式为utf\",{\"1\":{\"309\":1}}],[\"设置输入流的编码\",{\"1\":{\"309\":1}}],[\"设置为true\",{\"1\":{\"806\":1,\"1211\":1}}],[\"设置为false\",{\"1\":{\"389\":1}}],[\"设置为大于等于0的数在服务器启动的时候创建servlet对象并且执行init初始化方法\",{\"1\":{\"297\":1}}],[\"设置为一个特定的值\",{\"1\":{\"117\":1}}],[\"设置sql映射文件的namespace属性为mapper接口的全限名\",{\"1\":{\"266\":1}}],[\"设置druid\",{\"1\":{\"240\":1}}],[\"设置\",{\"1\":{\"240\":2}}],[\"设置参数\",{\"1\":{\"233\":1}}],[\"设置慢日志的时间为2秒\",{\"1\":{\"141\":1}}],[\"设置一个key当该key过期的时候\",{\"1\":{\"129\":1}}],[\"设置定时任务将⾸⻚数据缓存到\",{\"1\":{\"123\":1}}],[\"设置了锁的超时时间\",{\"1\":{\"117\":1}}],[\"设置合理的内存限制\",{\"1\":{\"115\":1}}],[\"设置合理的缓存失效时间\",{\"1\":{\"115\":1}}],[\"设计一个框架可以保存所有类型对象的属性和值\",{\"1\":{\"816\":1,\"1221\":1}}],[\"设计一个方法来返回一个明星对象的代理对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"设计步骤\",{\"0\":{\"686\":1,\"688\":1,\"1091\":1,\"1093\":1}}],[\"设计模式\",{\"0\":{\"683\":1,\"684\":1,\"1088\":1,\"1089\":1},\"1\":{\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"设计技巧\",{\"1\":{\"105\":1}}],[\"设计得过于繁重\",{\"1\":{\"103\":1}}],[\"设计\",{\"1\":{\"95\":1}}],[\"整理出李四后\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"整理出来\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"整句运算式的结果就是将新容量更新为旧容量的1\",{\"1\":{\"831\":1,\"1236\":1}}],[\"整型和其他泛型不能添加到string的arraylist集合中\",{\"1\":{\"749\":1,\"1154\":1}}],[\"整型\",{\"1\":{\"647\":1,\"1052\":1}}],[\"整型拓展\",{\"0\":{\"647\":1,\"1052\":1}}],[\"整数型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"整行数据\",{\"1\":{\"146\":1}}],[\"整合多个接口为同一个接口\",{\"1\":{\"716\":1,\"1121\":1}}],[\"整合mybatis\",{\"0\":{\"626\":1}}],[\"整合junit\",{\"0\":{\"625\":1}}],[\"整合\",{\"1\":{\"114\":1}}],[\"整个大陆都是陌生的\",{\"1\":{\"9\":1}}],[\"直到另一个线程调用notify方法或者notifyall方法\",{\"1\":{\"939\":2,\"1344\":2}}],[\"直到线程跑完才取出结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"直到\",{\"1\":{\"819\":1,\"1224\":1}}],[\"直到按下\",{\"1\":{\"436\":1}}],[\"直到有一方断开连接\",{\"1\":{\"327\":1}}],[\"直到找到为止\",{\"1\":{\"322\":1}}],[\"直到操作完成\",{\"1\":{\"211\":1}}],[\"直到添加到第10个元素之后\",{\"1\":{\"183\":1}}],[\"直到达到最大线程数\",{\"1\":{\"112\":1}}],[\"直接递归形式\",{\"1\":{\"974\":1,\"1379\":1}}],[\"直接递归\",{\"1\":{\"973\":1,\"1378\":1}}],[\"直接后移\",{\"1\":{\"866\":1,\"1271\":1}}],[\"直接通过类名\",{\"1\":{\"802\":1,\"1207\":1}}],[\"直接比较地址\",{\"1\":{\"758\":1,\"1163\":1}}],[\"直接输出对象变量\",{\"1\":{\"755\":1,\"1160\":1}}],[\"直接输入rz进行上传\",{\"1\":{\"488\":1}}],[\"直接输入top即可\",{\"1\":{\"481\":1}}],[\"直接删除元素\",{\"1\":{\"750\":1,\"1155\":1}}],[\"直接转为\",{\"1\":{\"743\":1,\"1148\":1}}],[\"直接调用静态方法\",{\"1\":{\"678\":1,\"1083\":1}}],[\"直接关闭防火墙一劳永逸\",{\"1\":{\"354\":1}}],[\"直接执行\",{\"1\":{\"202\":1}}],[\"直接新建节点添加\",{\"1\":{\"190\":1}}],[\"直接找到hash值对应的下标\",{\"1\":{\"188\":1}}],[\"直接返回数据不存在\",{\"1\":{\"124\":1}}],[\"直接使用即可打印出当前工作目录\",{\"1\":{\"443\":1}}],[\"直接使用utf\",{\"1\":{\"309\":1}}],[\"直接使用\",{\"1\":{\"114\":1,\"281\":3}}],[\"●\",{\"1\":{\"114\":2,\"115\":14}}],[\"所谓线程通信就是线程间互相发送数据\",{\"1\":{\"939\":1,\"1344\":1}}],[\"所谓泛型就是类\",{\"1\":{\"840\":1,\"1245\":1}}],[\"所谓特征就是已经成为java设计代码的特点\",{\"0\":{\"670\":1,\"1075\":1}}],[\"所属用户权限\",{\"1\":{\"441\":1}}],[\"所管辖的内存区域的过程中\",{\"1\":{\"222\":1}}],[\"所有车参加比赛\",{\"1\":{\"878\":1,\"1283\":1}}],[\"所有ascii\",{\"1\":{\"819\":1,\"1224\":1}}],[\"所有请求归springmvc处理\",{\"1\":{\"557\":1}}],[\"所有我们想在dopost中写this\",{\"1\":{\"308\":1}}],[\"所有我们就要使用动态的条件查询了\",{\"1\":{\"272\":1}}],[\"所有ide创建的maven项目可以通用\",{\"1\":{\"248\":1}}],[\"所有的汽车都能一起参加比赛\",{\"1\":{\"878\":1,\"1283\":1}}],[\"所有的变量必须先定义后才能使用\",{\"1\":{\"645\":1,\"1050\":1}}],[\"所有的异常均抛出到表现层进行处理\",{\"1\":{\"572\":1}}],[\"所有的系统管理所需要的配置文件和子目录\",{\"1\":{\"428\":1}}],[\"所有的ide使用maven构建的项目结构完全一样\",{\"1\":{\"248\":1}}],[\"所有的外部请求都要先经过\",{\"1\":{\"108\":1}}],[\"所有节点在同一时间的数据完全一致\",{\"1\":{\"174\":1}}],[\"所以是不可靠的\",{\"1\":{\"1443\":1}}],[\"所以是可靠的\",{\"1\":{\"1439\":1}}],[\"所以是false\",{\"1\":{\"743\":1,\"1148\":1}}],[\"所以永远无法避免中文乱码问题\",{\"1\":{\"994\":1,\"1399\":1}}],[\"所以读取中文也可以\",{\"1\":{\"994\":1,\"1399\":1}}],[\"所以读中文数据的时候乱码\",{\"1\":{\"309\":3}}],[\"所以使用线程池可以处理很多请求和响应\",{\"1\":{\"1466\":1}}],[\"所以使用collection集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"所以使用这种方法得到的集合不能进行修改\",{\"1\":{\"184\":1}}],[\"所以多了很多首尾操作的特有api\",{\"1\":{\"864\":1,\"1269\":1}}],[\"所以多了很多索引操作的独特api\",{\"1\":{\"861\":1,\"1266\":1}}],[\"所以转成了object\",{\"1\":{\"842\":1,\"1247\":1}}],[\"所以会按照原先的1\",{\"1\":{\"831\":1,\"1236\":1}}],[\"所以会按照原先数组长度的1\",{\"1\":{\"183\":1}}],[\"所以肯定需要扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"所以效率低\",{\"1\":{\"764\":1,\"1169\":1}}],[\"所以效率可以提升很多\",{\"1\":{\"148\":1}}],[\"所以出现了bug\",{\"1\":{\"751\":1,\"1156\":1}}],[\"所以要约定一个泛型\",{\"1\":{\"748\":1,\"1153\":1}}],[\"所以system不能被实例化\",{\"1\":{\"768\":1,\"1173\":1}}],[\"所以s1\",{\"1\":{\"743\":1,\"1148\":1}}],[\"所以s2并没有在字符串常量池中再创建一个同样的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"所以spring中的事务是通过aop来实现的\",{\"1\":{\"161\":1}}],[\"所以只能狗吃骨头\",{\"0\":{\"731\":1,\"1136\":1}}],[\"所以用default修饰可以在接口中进行添加方法体\",{\"1\":{\"721\":1,\"1126\":1}}],[\"所以用分布式锁来保证定时任务执行的唯一性\",{\"1\":{\"116\":1}}],[\"所以抽象类不能创建对象\",{\"1\":{\"710\":1,\"1115\":1}}],[\"所以有时候进行运算的时候\",{\"1\":{\"650\":1,\"1055\":1}}],[\"所以返回true\",{\"1\":{\"648\":1,\"1053\":1}}],[\"所以返回false\",{\"1\":{\"648\":1,\"1053\":1}}],[\"所以上面的转账案例需要在转账业务方法上单独配置\",{\"1\":{\"616\":1}}],[\"所以上面的查询只命中了name和status两个索引\",{\"1\":{\"150\":1}}],[\"所以environment中如果配置一定要配置正确\",{\"1\":{\"494\":1}}],[\"所以本课程也是基于linux系统来讲解\",{\"1\":{\"409\":1}}],[\"所以可以无论当前目录在哪\",{\"1\":{\"389\":1}}],[\"所以可以在任意位置执行start\",{\"1\":{\"386\":1}}],[\"所以可以在任意位置执行hadoop命令哦\",{\"1\":{\"386\":1}}],[\"所以课程将以3台服务器\",{\"1\":{\"376\":1}}],[\"所以后续我们所安装的软件服务\",{\"1\":{\"363\":1}}],[\"所以后面无需跟随端口号\",{\"1\":{\"356\":1}}],[\"所以这两个版本我们都演示安装一遍\",{\"1\":{\"344\":1}}],[\"所以不会产生二义性\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"所以不可以直接使用foreach遍历集合\",{\"1\":{\"907\":1,\"1312\":1}}],[\"所以不可以使用设置字符输入流的编码\",{\"1\":{\"309\":1}}],[\"所以不能使用普通的for循环遍历\",{\"1\":{\"880\":1,\"1285\":1}}],[\"所以不能使用双等号比较内容是否一样\",{\"1\":{\"743\":1,\"1148\":1}}],[\"所以不存在线程安全问题\",{\"1\":{\"158\":1}}],[\"所以我们就可以利用反射绕过编译阶段对集合添加其他泛型的数据\",{\"1\":{\"814\":1,\"1219\":1}}],[\"所以我们就需要在子类中重写equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"所以我们就需要在student类中重写tostring让它可以输出内容\",{\"1\":{\"755\":1,\"1160\":1}}],[\"所以我们就需要利用集合\",{\"1\":{\"744\":1,\"1149\":1}}],[\"所以我们需要学习object类中的方法\",{\"1\":{\"753\":1,\"1158\":1}}],[\"所以我们需要对animal进行判断\",{\"1\":{\"732\":1,\"1137\":1}}],[\"所以我们需要手动构建yum仓库\",{\"1\":{\"358\":1}}],[\"所以我们不知道\",{\"1\":{\"730\":1,\"1135\":1}}],[\"所以我们为每一台机器都配置jdk环境\",{\"1\":{\"370\":1}}],[\"所以我们通过上述rpm命令\",{\"1\":{\"346\":1}}],[\"所以我们要使用相同的方式去获取不同方式传输的数据\",{\"1\":{\"308\":1}}],[\"所以我们自定义的servlet\",{\"1\":{\"299\":1}}],[\"所以我通过新建\",{\"1\":{\"113\":1}}],[\"所以\",{\"1\":{\"222\":1,\"354\":1,\"363\":1,\"831\":1,\"995\":1,\"1236\":1,\"1400\":1}}],[\"所以hashset也不允许出现重复值\",{\"1\":{\"194\":1}}],[\"所以在头尾插入或者删除元素不受元素位置的影响\",{\"1\":{\"187\":1}}],[\"所以在添加消费者的同时也要添加主题中的队列\",{\"1\":{\"179\":1}}],[\"所以插入和删除元素的时间复杂度受元素位置的影响\",{\"1\":{\"187\":1}}],[\"所以即使list修改了以后\",{\"1\":{\"186\":1}}],[\"所以修改数组会影响到使用该方法得到的list\",{\"1\":{\"185\":1}}],[\"所以造成了循环依赖\",{\"1\":{\"164\":1}}],[\"所以需要使用\",{\"1\":{\"272\":1,\"281\":1}}],[\"所以需要再次查询聚集索引找到主键对应的整行数据\",{\"1\":{\"146\":1}}],[\"所以需要指定序列化器\",{\"1\":{\"113\":1}}],[\"所以name就是二级索引\",{\"1\":{\"146\":1}}],[\"所以查询的效率更稳定\",{\"1\":{\"144\":1}}],[\"所以通过选举的方式提升了一个从节点为主\",{\"1\":{\"137\":1}}],[\"默认线程工厂\",{\"1\":{\"948\":1,\"949\":1,\"1353\":1,\"1354\":1}}],[\"默认线程名称为thread\",{\"1\":{\"926\":1,\"1331\":1}}],[\"默认按照首字符的编号升序排序\",{\"1\":{\"891\":1,\"1296\":1}}],[\"默认升序\",{\"1\":{\"793\":1,\"1198\":1}}],[\"默认比较地址是否相同\",{\"1\":{\"756\":1,\"1161\":1}}],[\"默认可以省略tostring\",{\"1\":{\"755\":1,\"1160\":1}}],[\"默认会public修饰\",{\"1\":{\"719\":1,\"720\":1,\"1124\":1,\"1125\":1}}],[\"默认方法\",{\"0\":{\"719\":1,\"1124\":1}}],[\"默认方案\",{\"1\":{\"128\":1}}],[\"默认为0\",{\"1\":{\"525\":1}}],[\"默认为空\",{\"1\":{\"428\":1}}],[\"默认约束\",{\"1\":{\"525\":1}}],[\"默认每5秒刷新一次\",{\"1\":{\"481\":1}}],[\"默认输出对象的地址\",{\"1\":{\"755\":1,\"1160\":1}}],[\"默认输出\",{\"1\":{\"455\":1}}],[\"默认账户密码\",{\"1\":{\"415\":1}}],[\"默认不进行预分配\",{\"1\":{\"395\":1}}],[\"默认键名\",{\"1\":{\"282\":1}}],[\"默认\",{\"1\":{\"280\":1,\"395\":1,\"412\":1}}],[\"默认debug\",{\"1\":{\"264\":1}}],[\"默认值为\",{\"1\":{\"297\":1}}],[\"默认值\",{\"1\":{\"259\":1,\"331\":1,\"519\":1}}],[\"默认是比较当前对象与另一个对象的地址是否相同\",{\"1\":{\"754\":1,\"1159\":1}}],[\"默认是返回当前对象在堆内存中的地址信息\",{\"1\":{\"754\":1,\"1159\":1}}],[\"默认是16\",{\"1\":{\"217\":1}}],[\"默认是0\",{\"1\":{\"213\":1}}],[\"默认是no\",{\"1\":{\"128\":1}}],[\"默认都是单例的\",{\"1\":{\"159\":1}}],[\"默认使用public\",{\"1\":{\"721\":1,\"1126\":1}}],[\"默认使用父类的\",{\"1\":{\"717\":1,\"1122\":1}}],[\"默认使用\",{\"1\":{\"113\":1}}],[\"默认情况下\",{\"1\":{\"112\":1,\"297\":1,\"331\":1,\"335\":1,\"350\":1,\"616\":1,\"887\":1,\"1292\":1}}],[\"n的和\",{\"0\":{\"978\":1,\"1383\":1}}],[\"n的阶乘\",{\"0\":{\"976\":1,\"1381\":1}}],[\"nthreads\",{\"1\":{\"951\":4,\"952\":1,\"1356\":4,\"1357\":1}}],[\"nike=1\",{\"1\":{\"904\":1,\"906\":1,\"907\":3,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":3,\"1313\":1}}],[\"nike\",{\"1\":{\"903\":1,\"904\":4,\"906\":1,\"907\":1,\"908\":1,\"1308\":1,\"1309\":4,\"1311\":1,\"1312\":1,\"1313\":1}}],[\"ni\",{\"1\":{\"481\":2}}],[\"nio\",{\"1\":{\"309\":1,\"997\":2,\"1025\":1,\"1402\":2,\"1475\":1}}],[\"n表示大小数字\",{\"1\":{\"453\":1}}],[\"nyy\",{\"1\":{\"435\":1}}],[\"ndd\",{\"1\":{\"435\":1}}],[\"n2\",{\"1\":{\"435\":2,\"437\":2}}],[\"n2s\",{\"1\":{\"435\":1}}],[\"n1\",{\"1\":{\"435\":3,\"437\":2}}],[\"ng\",{\"1\":{\"435\":1}}],[\"nginx会实现负载均衡\",{\"1\":{\"495\":1}}],[\"nginx安装配置完成\",{\"1\":{\"356\":1}}],[\"nginx默认绑定80端口\",{\"1\":{\"356\":1}}],[\"nginx自动注册了systemctl系统服务\",{\"1\":{\"356\":1}}],[\"nginx的yum仓库\",{\"1\":{\"356\":1}}],[\"nginx同样需要配置额外的yum仓库\",{\"1\":{\"356\":1}}],[\"nginx在web开发领域\",{\"1\":{\"355\":1}}],[\"nginx可以托管用户编写的web应用程序成为可访问的网页服务\",{\"1\":{\"355\":1}}],[\"nginx\",{\"1\":{\"355\":1,\"356\":15,\"456\":8,\"474\":3,\"495\":9,\"496\":38}}],[\"num2\",{\"1\":{\"1026\":2,\"1476\":2}}],[\"number���\\u001d\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"numberoftaskslots\",{\"1\":{\"395\":1}}],[\"nums\",{\"1\":{\"893\":2,\"1298\":2}}],[\"num1\",{\"1\":{\"789\":1,\"1026\":2,\"1194\":1,\"1476\":2}}],[\"num\",{\"1\":{\"460\":2,\"653\":1,\"654\":7,\"789\":1,\"1027\":2,\"1058\":1,\"1059\":7,\"1194\":1,\"1477\":2}}],[\"nu\",{\"1\":{\"435\":1,\"437\":2}}],[\"null\",{\"1\":{\"142\":2,\"222\":2,\"245\":1,\"272\":2,\"273\":6,\"274\":6,\"277\":5,\"494\":2,\"525\":5,\"529\":1,\"544\":1,\"557\":1,\"573\":3,\"641\":1,\"688\":1,\"751\":2,\"756\":1,\"758\":2,\"759\":3,\"818\":1,\"873\":1,\"875\":2,\"888\":1,\"891\":1,\"896\":1,\"903\":2,\"904\":1,\"981\":2,\"1000\":4,\"1008\":1,\"1046\":1,\"1093\":1,\"1156\":2,\"1161\":1,\"1163\":2,\"1164\":3,\"1223\":1,\"1278\":1,\"1280\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1308\":2,\"1309\":1,\"1386\":2,\"1405\":4,\"1413\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"nn\",{\"1\":{\"386\":1}}],[\"nn<\",{\"1\":{\"386\":1}}],[\"nm\",{\"1\":{\"386\":8}}],[\"n<=\",{\"1\":{\"819\":3,\"1224\":3}}],[\"n<\",{\"1\":{\"264\":1}}],[\"nf\",{\"1\":{\"240\":1}}],[\"n为计算机的cpu核数\",{\"1\":{\"220\":2}}],[\"n=6\",{\"1\":{\"211\":1}}],[\"negate\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"needs\",{\"1\":{\"386\":1,\"410\":1}}],[\"nexus\",{\"1\":{\"251\":1}}],[\"nextline\",{\"1\":{\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"nextint\",{\"1\":{\"678\":1,\"679\":1,\"908\":1,\"1083\":1,\"1084\":1,\"1313\":1}}],[\"next\",{\"1\":{\"231\":1,\"233\":1,\"240\":1,\"245\":1,\"495\":1,\"743\":2,\"751\":1,\"844\":6,\"866\":1,\"1148\":2,\"1156\":1,\"1249\":6,\"1271\":1}}],[\"new2\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"newline\",{\"1\":{\"1008\":2,\"1413\":2}}],[\"newly\",{\"1\":{\"402\":1}}],[\"newscheduledthreadpool\",{\"1\":{\"951\":1,\"952\":1,\"955\":1,\"956\":1,\"1356\":1,\"1357\":1,\"1360\":1,\"1361\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"951\":1,\"952\":1,\"1356\":1,\"1357\":1}}],[\"newfixedthreadpool\",{\"1\":{\"951\":4,\"952\":1,\"1356\":4,\"1357\":1}}],[\"newcachedthreadpool\",{\"1\":{\"951\":1,\"952\":1,\"1356\":1,\"1357\":1}}],[\"newcapacity\",{\"1\":{\"831\":10,\"1236\":10}}],[\"newcapacity为新容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"newcap\",{\"1\":{\"191\":1}}],[\"new一个新线程对象\",{\"1\":{\"914\":1,\"1319\":1}}],[\"newinstance\",{\"1\":{\"806\":3,\"807\":1,\"808\":1,\"1211\":3,\"1212\":1,\"1213\":1}}],[\"newproxyinstance\",{\"1\":{\"629\":3,\"1034\":3}}],[\"newusername\",{\"1\":{\"309\":1}}],[\"new\",{\"0\":{\"731\":1,\"1136\":1,\"1492\":1,\"1499\":1},\"1\":{\"162\":1,\"187\":1,\"199\":10,\"205\":5,\"211\":1,\"231\":2,\"240\":3,\"245\":4,\"264\":1,\"272\":1,\"275\":2,\"277\":2,\"279\":1,\"280\":1,\"309\":5,\"315\":2,\"316\":1,\"329\":2,\"544\":3,\"557\":2,\"562\":5,\"570\":9,\"573\":3,\"579\":5,\"615\":3,\"616\":2,\"628\":3,\"629\":5,\"635\":6,\"636\":2,\"638\":1,\"641\":2,\"654\":1,\"663\":2,\"664\":1,\"678\":1,\"679\":1,\"686\":1,\"688\":1,\"708\":1,\"715\":1,\"721\":1,\"724\":2,\"726\":2,\"730\":1,\"732\":1,\"737\":1,\"738\":5,\"743\":2,\"747\":1,\"748\":1,\"749\":3,\"750\":1,\"751\":10,\"755\":1,\"756\":2,\"759\":1,\"763\":2,\"773\":2,\"776\":4,\"777\":2,\"781\":4,\"782\":2,\"793\":12,\"802\":1,\"812\":1,\"814\":2,\"816\":4,\"821\":3,\"822\":2,\"823\":5,\"824\":1,\"831\":1,\"839\":2,\"840\":4,\"842\":2,\"844\":1,\"845\":1,\"846\":2,\"847\":4,\"861\":1,\"865\":2,\"866\":1,\"871\":2,\"873\":1,\"878\":12,\"881\":2,\"888\":5,\"891\":9,\"893\":1,\"896\":5,\"897\":7,\"903\":2,\"904\":4,\"906\":2,\"907\":1,\"908\":5,\"914\":1,\"918\":2,\"920\":5,\"921\":6,\"924\":2,\"930\":3,\"939\":8,\"948\":7,\"949\":8,\"951\":10,\"954\":2,\"956\":2,\"963\":1,\"965\":3,\"966\":1,\"969\":5,\"971\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":9,\"996\":5,\"997\":2,\"998\":4,\"1000\":4,\"1001\":4,\"1002\":1,\"1003\":3,\"1004\":1,\"1007\":5,\"1008\":6,\"1009\":5,\"1011\":3,\"1012\":4,\"1014\":5,\"1018\":1,\"1019\":1,\"1020\":3,\"1021\":2,\"1022\":5,\"1023\":1,\"1024\":1,\"1027\":16,\"1028\":9,\"1033\":3,\"1034\":5,\"1040\":6,\"1041\":2,\"1043\":1,\"1046\":2,\"1059\":1,\"1068\":2,\"1069\":1,\"1083\":1,\"1084\":1,\"1091\":1,\"1093\":1,\"1113\":1,\"1120\":1,\"1126\":1,\"1129\":2,\"1131\":2,\"1135\":1,\"1137\":1,\"1142\":1,\"1143\":5,\"1148\":2,\"1152\":1,\"1153\":1,\"1154\":3,\"1155\":1,\"1156\":10,\"1160\":1,\"1161\":2,\"1164\":1,\"1168\":2,\"1178\":2,\"1181\":4,\"1182\":2,\"1186\":4,\"1187\":2,\"1198\":12,\"1207\":1,\"1217\":1,\"1219\":2,\"1221\":4,\"1226\":3,\"1227\":2,\"1228\":5,\"1229\":1,\"1236\":1,\"1244\":2,\"1245\":4,\"1247\":2,\"1249\":1,\"1250\":1,\"1251\":2,\"1252\":4,\"1266\":1,\"1270\":2,\"1271\":1,\"1276\":2,\"1278\":1,\"1283\":12,\"1286\":2,\"1293\":5,\"1296\":9,\"1298\":1,\"1301\":5,\"1302\":7,\"1308\":2,\"1309\":4,\"1311\":2,\"1312\":1,\"1313\":5,\"1319\":1,\"1323\":2,\"1325\":5,\"1326\":6,\"1329\":2,\"1335\":3,\"1344\":8,\"1353\":7,\"1354\":8,\"1356\":10,\"1359\":2,\"1361\":2,\"1368\":1,\"1370\":3,\"1371\":1,\"1374\":5,\"1376\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":9,\"1401\":5,\"1402\":2,\"1403\":4,\"1405\":4,\"1406\":4,\"1407\":1,\"1408\":3,\"1409\":1,\"1412\":5,\"1413\":6,\"1414\":5,\"1416\":3,\"1417\":4,\"1419\":5,\"1449\":6,\"1450\":7,\"1458\":2,\"1461\":6,\"1464\":7,\"1465\":10,\"1466\":9,\"1468\":1,\"1469\":1,\"1470\":3,\"1471\":2,\"1472\":5,\"1473\":1,\"1474\":1,\"1477\":16,\"1478\":9}}],[\"networks\",{\"1\":{\"494\":4}}],[\"network\",{\"0\":{\"1498\":1},\"1\":{\"362\":1,\"365\":4,\"494\":4,\"496\":4}}],[\"netstat\",{\"1\":{\"347\":1,\"350\":1,\"354\":1}}],[\"netfilter\",{\"1\":{\"240\":1}}],[\"net\",{\"1\":{\"118\":1,\"240\":1,\"1433\":1,\"1449\":5,\"1450\":5,\"1458\":1,\"1461\":3,\"1464\":4,\"1465\":4,\"1466\":5}}],[\"nx=\",{\"1\":{\"652\":1,\"1057\":1}}],[\"nx是互斥\",{\"1\":{\"131\":1}}],[\"nx\",{\"1\":{\"131\":1,\"435\":1}}],[\"native\",{\"1\":{\"350\":3,\"494\":1}}],[\"name1\",{\"1\":{\"887\":3,\"1292\":3}}],[\"names\",{\"1\":{\"971\":2,\"1376\":2}}],[\"namestream\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"namespace=\",{\"1\":{\"264\":1,\"270\":1}}],[\"namespace\",{\"1\":{\"264\":1,\"270\":1,\"386\":1}}],[\"name4\",{\"1\":{\"743\":2,\"1148\":2}}],[\"name3\",{\"1\":{\"743\":4,\"1148\":4}}],[\"name2\",{\"1\":{\"743\":3,\"1148\":3}}],[\"name属性\",{\"0\":{\"585\":1}}],[\"name表示这个zabbix服务的名字\",{\"1\":{\"405\":1}}],[\"name<\",{\"1\":{\"386\":1}}],[\"namenode\",{\"1\":{\"382\":1,\"386\":6}}],[\"namenode进程\",{\"1\":{\"381\":1}}],[\"name=com\",{\"1\":{\"494\":1}}],[\"name=my\",{\"1\":{\"413\":1}}],[\"name=grafana\",{\"1\":{\"409\":1}}],[\"name=root\",{\"1\":{\"387\":1}}],[\"name=rabbitmq\",{\"1\":{\"358\":4}}],[\"name=elasticsearch\",{\"1\":{\"362\":1}}],[\"name=nginx\",{\"1\":{\"356\":2}}],[\"name=\",{\"1\":{\"264\":6,\"267\":10,\"601\":5,\"672\":1,\"751\":2,\"755\":1,\"756\":1,\"793\":1,\"804\":1,\"806\":2,\"816\":2,\"888\":1,\"891\":1,\"896\":1,\"1009\":2,\"1077\":1,\"1156\":2,\"1160\":1,\"1161\":1,\"1198\":1,\"1209\":1,\"1211\":2,\"1221\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1414\":2}}],[\"name>\",{\"1\":{\"251\":1,\"386\":26,\"389\":5,\"829\":2,\"1234\":2}}],[\"name\",{\"1\":{\"129\":1,\"146\":1,\"231\":2,\"233\":2,\"240\":2,\"243\":4,\"245\":6,\"270\":6,\"272\":6,\"273\":7,\"274\":4,\"275\":2,\"276\":2,\"277\":2,\"307\":2,\"308\":2,\"310\":3,\"312\":1,\"320\":2,\"329\":2,\"333\":3,\"362\":2,\"386\":1,\"413\":1,\"453\":1,\"494\":4,\"495\":5,\"496\":14,\"511\":1,\"518\":3,\"526\":4,\"531\":2,\"570\":7,\"613\":6,\"615\":1,\"629\":9,\"641\":5,\"660\":8,\"662\":5,\"663\":4,\"664\":2,\"672\":6,\"704\":4,\"709\":5,\"714\":2,\"715\":1,\"721\":2,\"743\":10,\"751\":18,\"755\":9,\"756\":16,\"758\":6,\"793\":9,\"804\":9,\"808\":6,\"809\":1,\"810\":2,\"812\":10,\"813\":1,\"816\":20,\"821\":5,\"822\":2,\"873\":3,\"887\":3,\"888\":12,\"891\":12,\"896\":12,\"924\":2,\"926\":3,\"930\":6,\"933\":3,\"936\":3,\"937\":4,\"939\":12,\"971\":2,\"988\":2,\"1009\":9,\"1020\":5,\"1021\":2,\"1024\":5,\"1034\":9,\"1046\":5,\"1065\":8,\"1067\":5,\"1068\":4,\"1069\":2,\"1077\":6,\"1109\":4,\"1114\":5,\"1119\":2,\"1120\":1,\"1126\":2,\"1148\":10,\"1156\":18,\"1160\":9,\"1161\":16,\"1163\":6,\"1198\":9,\"1209\":9,\"1213\":6,\"1214\":1,\"1215\":2,\"1217\":10,\"1218\":1,\"1221\":20,\"1226\":5,\"1227\":2,\"1278\":3,\"1292\":3,\"1293\":12,\"1296\":12,\"1301\":12,\"1329\":2,\"1331\":3,\"1335\":6,\"1338\":3,\"1341\":3,\"1342\":4,\"1344\":12,\"1376\":2,\"1393\":2,\"1414\":9,\"1470\":5,\"1471\":2,\"1474\":5}}],[\"nacos与eureka的区别\",{\"1\":{\"173\":1}}],[\"nacos与eureka都支持服务注册和服务拉取\",{\"1\":{\"173\":1}}],[\"nacos和eureka的区别\",{\"0\":{\"173\":1}}],[\"nacos\",{\"1\":{\"92\":1,\"96\":1,\"107\":3,\"171\":1}}],[\"nosuchmethodexception\",{\"1\":{\"804\":2,\"1209\":2}}],[\"nosql\",{\"1\":{\"388\":1}}],[\"noargsconstructor\",{\"1\":{\"570\":2,\"615\":2}}],[\"noarch\",{\"1\":{\"346\":1,\"349\":1,\"358\":1,\"398\":1,\"400\":1}}],[\"nopush\",{\"1\":{\"495\":1}}],[\"nopassword\",{\"1\":{\"462\":1}}],[\"nobody\",{\"1\":{\"495\":1}}],[\"nonu\",{\"1\":{\"437\":1}}],[\"nowage\",{\"1\":{\"808\":2,\"1213\":2}}],[\"now2\",{\"1\":{\"786\":3,\"1191\":3}}],[\"now1\",{\"1\":{\"786\":2,\"1191\":2}}],[\"now\",{\"1\":{\"404\":1,\"786\":7,\"1191\":7}}],[\"notnull\",{\"1\":{\"842\":1,\"1247\":1}}],[\"notice\",{\"1\":{\"495\":1}}],[\"notifyall\",{\"1\":{\"207\":1,\"939\":4,\"1344\":4}}],[\"notifyall唤醒所有的wait线程\",{\"1\":{\"206\":1}}],[\"notify\",{\"1\":{\"207\":1}}],[\"notify随机唤醒一个wait线程\",{\"1\":{\"206\":1}}],[\"notify和notifyall有什么区别\",{\"0\":{\"206\":1}}],[\"note\",{\"1\":{\"410\":1}}],[\"not\",{\"1\":{\"386\":4,\"494\":4,\"507\":1,\"525\":4,\"529\":1,\"552\":1,\"758\":1,\"1163\":1}}],[\"nohup的作用\",{\"0\":{\"422\":1}}],[\"nohup和\",{\"0\":{\"421\":1}}],[\"nohup\",{\"0\":{\"424\":1},\"1\":{\"377\":1,\"422\":4,\"423\":5,\"424\":4}}],[\"nodemanager\",{\"1\":{\"382\":3,\"386\":7}}],[\"nodemanager进程\",{\"1\":{\"381\":1}}],[\"node3操作\",{\"1\":{\"395\":1}}],[\"node3上部署hbase集群\",{\"1\":{\"388\":1}}],[\"node3上通过jps验证进程是否都启动成功\",{\"1\":{\"387\":1}}],[\"node3上分别执行\",{\"1\":{\"375\":2}}],[\"node3修改\",{\"1\":{\"386\":1}}],[\"node3执行\",{\"1\":{\"386\":1,\"389\":2,\"392\":1}}],[\"node3<\",{\"1\":{\"386\":1,\"389\":1}}],[\"node3之间将完成root用户之间的免密互通\",{\"1\":{\"369\":1}}],[\"node3\",{\"1\":{\"366\":2,\"369\":1,\"375\":1,\"377\":5,\"382\":1,\"386\":1,\"389\":2,\"392\":2,\"395\":2}}],[\"node3的连接\",{\"1\":{\"365\":1}}],[\"node2\",{\"1\":{\"365\":1,\"366\":2,\"368\":2,\"369\":2,\"373\":4,\"375\":3,\"377\":5,\"382\":1,\"386\":5,\"387\":1,\"388\":1,\"389\":5,\"392\":3,\"395\":3}}],[\"node2和node3设置2gb或以上内存\",{\"1\":{\"384\":1}}],[\"node2和node3\",{\"1\":{\"365\":1}}],[\"node1操作\",{\"1\":{\"395\":5}}],[\"node1执行\",{\"1\":{\"389\":7,\"392\":7,\"395\":1}}],[\"node1设置4gb或以上内存\",{\"1\":{\"384\":1}}],[\"node1上操作\",{\"1\":{\"375\":6}}],[\"node1\",{\"1\":{\"365\":1,\"366\":2,\"369\":2,\"377\":1,\"378\":3,\"382\":1,\"386\":3,\"387\":2,\"389\":4,\"392\":3,\"395\":3,\"415\":1}}],[\"nodes\",{\"1\":{\"362\":1}}],[\"node\",{\"1\":{\"362\":3}}],[\"noeviction\",{\"1\":{\"130\":1}}],[\"no\",{\"1\":{\"128\":2,\"354\":2,\"422\":1}}],[\"n\",{\"1\":{\"112\":3,\"115\":2,\"134\":1,\"187\":3,\"192\":1,\"193\":1,\"211\":1,\"240\":2,\"435\":24,\"453\":1,\"454\":2,\"678\":3,\"679\":3,\"758\":3,\"819\":14,\"921\":5,\"976\":4,\"977\":3,\"978\":8,\"997\":4,\"1004\":1,\"1008\":1,\"1083\":3,\"1084\":3,\"1163\":3,\"1224\":14,\"1326\":5,\"1381\":4,\"1382\":3,\"1383\":8,\"1402\":4,\"1409\":1,\"1413\":1}}],[\"倍左右\",{\"1\":{\"831\":2,\"1236\":2}}],[\"倍\",{\"1\":{\"112\":1,\"831\":1,\"1236\":1}}],[\"针对以上的两种格式均可以使用tar命令进行压缩和解压操作\",{\"1\":{\"490\":1}}],[\"针对所有用户生效\",{\"1\":{\"486\":1}}],[\"针对当前用户\",{\"1\":{\"486\":1}}],[\"针对缓存失效时的并发请求使用分布式锁\",{\"1\":{\"115\":1}}],[\"针对更消耗网络等\",{\"1\":{\"112\":1}}],[\"针对每类不同的业务\",{\"1\":{\"112\":1}}],[\"充分利用系统资源\",{\"1\":{\"112\":1}}],[\"常常具有\",{\"1\":{\"437\":1}}],[\"常见ip分为\",{\"1\":{\"1428\":1}}],[\"常见字符集\",{\"0\":{\"982\":1,\"1387\":1}}],[\"常见数据结构\",{\"0\":{\"848\":1,\"1253\":1}}],[\"常见问题\",{\"0\":{\"623\":1}}],[\"常见集合篇\",{\"0\":{\"180\":1}}],[\"常见的协议有udp协议和tcp协议\",{\"1\":{\"1427\":1}}],[\"常见的通信模式有如下2中形式\",{\"1\":{\"1424\":1}}],[\"常见的比如\",{\"1\":{\"870\":1,\"1275\":1}}],[\"常见的关系型数据库管理系统\",{\"0\":{\"499\":1}}],[\"常见的数据库连接池有\",{\"1\":{\"237\":1}}],[\"常见的有两种解决办法\",{\"1\":{\"158\":1}}],[\"常见的拒绝策略有abortpolicy\",{\"1\":{\"112\":1}}],[\"常用api\",{\"1\":{\"750\":1,\"1155\":1}}],[\"常用api的魔力\",{\"1\":{\"741\":1,\"1146\":1}}],[\"常用的是ps\",{\"1\":{\"478\":1}}],[\"常用的插件有\",{\"1\":{\"240\":1}}],[\"常用\",{\"1\":{\"428\":10,\"435\":20,\"436\":5,\"437\":3,\"802\":2,\"970\":1,\"1207\":2,\"1375\":1}}],[\"常用注解有哪些\",{\"0\":{\"169\":1}}],[\"常用于字符串相似度比较\",{\"1\":{\"118\":1}}],[\"常量池地址\",{\"1\":{\"743\":1,\"1148\":1}}],[\"常量池\",{\"1\":{\"743\":2,\"1148\":2}}],[\"常量命名规范\",{\"1\":{\"704\":1,\"1109\":1}}],[\"常量的作用和好处\",{\"1\":{\"704\":1,\"1109\":1}}],[\"常量是使用了public\",{\"1\":{\"704\":1,\"1109\":1}}],[\"常量\",{\"0\":{\"704\":1,\"1109\":1},\"1\":{\"107\":1,\"713\":1,\"714\":1,\"721\":1,\"1118\":1,\"1119\":1,\"1126\":1}}],[\"会出现端口号冲突的\",{\"1\":{\"1434\":1}}],[\"会出现递归死循环\",{\"1\":{\"974\":1,\"1379\":1}}],[\"会出现大量的请求请求到数据库这就是缓存穿透\",{\"1\":{\"124\":1}}],[\"会删除照片下的一级文件对象的\",{\"1\":{\"971\":1,\"1376\":1}}],[\"会等待全部任务执行完毕之后再关闭\",{\"1\":{\"948\":1,\"1353\":1}}],[\"会丢失任务的\",{\"1\":{\"948\":1,\"1353\":1}}],[\"会漏删除\",{\"1\":{\"866\":1,\"1271\":1}}],[\"会遍历插入的元素后面的元素然后后移一位\",{\"1\":{\"863\":1,\"1268\":1}}],[\"会按照当前的1\",{\"1\":{\"863\":1,\"1268\":1}}],[\"会默认删除第一个\",{\"1\":{\"842\":1,\"1247\":1}}],[\"会默认在将指定的元素追加到此列表的末尾\",{\"1\":{\"187\":1}}],[\"会报空指针异常\",{\"1\":{\"758\":1,\"1163\":1}}],[\"会牵一发而动全身\",{\"1\":{\"721\":1,\"1126\":1}}],[\"会坑到人的\",{\"1\":{\"688\":1,\"1093\":1}}],[\"会定期自动清理\",{\"1\":{\"665\":1,\"1070\":1}}],[\"会在堆内存中创建多个stringbuilder对象\",{\"1\":{\"764\":1,\"1169\":1}}],[\"会在每一行的前缀显示该行的行号\",{\"1\":{\"437\":1}}],[\"会在日志文件中生成root用户的一个随机密码\",{\"1\":{\"398\":1}}],[\"会检查相应的设置是否都正常\",{\"1\":{\"405\":1}}],[\"会进入设置页面\",{\"1\":{\"405\":1}}],[\"会把\",{\"1\":{\"743\":1,\"1148\":1}}],[\"会把jsessionid=xxxxxxx发送给服务端\",{\"1\":{\"334\":1}}],[\"会把数据变更记录在二进制日志文件\",{\"1\":{\"155\":1}}],[\"会依次从这4个域中寻找\",{\"1\":{\"322\":1}}],[\"会随着response对象销毁\",{\"1\":{\"314\":1}}],[\"会对中文进行url编码\",{\"1\":{\"309\":2}}],[\"会继承httpservlet\",{\"1\":{\"299\":1}}],[\"会强制回收该\",{\"1\":{\"240\":1}}],[\"会清理掉\",{\"1\":{\"222\":1}}],[\"会被清理掉\",{\"1\":{\"222\":1}}],[\"会触发拒绝策略\",{\"1\":{\"219\":1}}],[\"会先判断当前segment对应下标位置是否有线程进行操作\",{\"1\":{\"217\":1}}],[\"会新创建一个数组\",{\"1\":{\"191\":1}}],[\"会影响list的\",{\"1\":{\"185\":1}}],[\"会影响到事务\",{\"1\":{\"151\":1}}],[\"会减少库存之后就向消息队列中发送下单优惠券的消息\",{\"1\":{\"176\":1}}],[\"会返回一个\",{\"1\":{\"166\":1}}],[\"会话跟踪\",{\"1\":{\"327\":1}}],[\"会话跟踪技术\",{\"0\":{\"327\":1}}],[\"会话结束\",{\"1\":{\"327\":1}}],[\"会话建立\",{\"1\":{\"327\":1}}],[\"会话产生一个新的\",{\"1\":{\"159\":1}}],[\"会话\",{\"1\":{\"159\":1,\"327\":1}}],[\"会导致不需要的数据也会被读取到造成磁盘读写的浪费\",{\"1\":{\"144\":1}}],[\"会将其参数替换为\",{\"1\":{\"271\":2}}],[\"会将最新的消息推送给redis的客户端\",{\"1\":{\"136\":1}}],[\"会将存储到\",{\"1\":{\"113\":1}}],[\"会自动配置为名称叫做\",{\"1\":{\"346\":1,\"349\":1}}],[\"会自动通过cookie发送到客户端浏览器\",{\"1\":{\"334\":1}}],[\"会自动释放锁\",{\"1\":{\"117\":1}}],[\"会自动创建一个客户端调用对象\",{\"1\":{\"104\":1}}],[\"会向下继续搜寻下一个名称为\",{\"1\":{\"435\":1}}],[\"会向\",{\"1\":{\"117\":1}}],[\"会根据逻辑\",{\"1\":{\"166\":1}}],[\"会根据这些定义\",{\"1\":{\"116\":1}}],[\"会根据设置的拒绝策略进行处理\",{\"1\":{\"112\":1}}],[\"拒绝策略被触发\",{\"1\":{\"948\":1,\"1353\":1}}],[\"拒绝策略\",{\"1\":{\"112\":1,\"219\":1}}],[\"线程是属于进程的\",{\"1\":{\"958\":1,\"1363\":1}}],[\"线程是进程划分成的更小的运行单位\",{\"1\":{\"197\":1}}],[\"线程数可能会随着任务1\",{\"1\":{\"952\":1,\"1357\":1}}],[\"线程数量随着任务的增加而增加\",{\"1\":{\"951\":1,\"1356\":1}}],[\"线程处理callable任务\",{\"0\":{\"949\":1,\"1354\":1}}],[\"线程5\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程4\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程3\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程2\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程1\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程进入休眠了\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程通信常见的形式\",{\"1\":{\"939\":1,\"1344\":1}}],[\"线程同步核心思想\",{\"0\":{\"932\":1,\"1337\":1}}],[\"线程同步\",{\"0\":{\"931\":1,\"1336\":1}}],[\"线程安全问题发生的原因是什么\",{\"1\":{\"930\":1,\"1335\":1}}],[\"线程安全是什么\",{\"0\":{\"928\":1,\"1333\":1}}],[\"线程安全\",{\"0\":{\"927\":1,\"1332\":1}}],[\"线程启动方法\",{\"1\":{\"926\":1,\"1331\":1}}],[\"线程任务方法\",{\"1\":{\"926\":1,\"1331\":1}}],[\"线程任务类只是实现接口\",{\"1\":{\"922\":1,\"1327\":1}}],[\"线程任务只是实现接口\",{\"1\":{\"919\":1,\"1324\":1}}],[\"线程执行完毕后\",{\"1\":{\"921\":1,\"1326\":1}}],[\"线程执行开销小\",{\"1\":{\"197\":1}}],[\"线程类已经继承thread\",{\"1\":{\"915\":1,\"1320\":1}}],[\"线程\",{\"1\":{\"211\":1}}],[\"线程获得b对象锁\",{\"1\":{\"216\":1}}],[\"线程获得a对象锁\",{\"1\":{\"216\":1}}],[\"线程获得锁需要使用对象\",{\"1\":{\"210\":1}}],[\"线程获取到了cpu的执行权\",{\"1\":{\"204\":1}}],[\"线程中并发安全的问题\",{\"0\":{\"209\":1}}],[\"线程会自动苏醒\",{\"1\":{\"207\":1}}],[\"线程不会自动苏醒\",{\"1\":{\"207\":1}}],[\"线程状态之间是如何变化的\",{\"0\":{\"204\":1}}],[\"线程在运行的生命周期中的指定时刻只可能处于下面\",{\"1\":{\"203\":1}}],[\"线程的状态\",{\"1\":{\"962\":1,\"1367\":1}}],[\"线程的生命周期\",{\"0\":{\"961\":1,\"1366\":1}}],[\"线程的并发与并行\",{\"0\":{\"957\":1,\"1362\":1}}],[\"线程的\",{\"0\":{\"201\":1}}],[\"线程的基础知识\",{\"0\":{\"196\":1}}],[\"线程上下文切换成本一般上要比进程上下文切换低\",{\"1\":{\"197\":1}}],[\"线程更轻量\",{\"1\":{\"197\":1}}],[\"线程和进程最大的不同在于基本上各进程是独立的\",{\"1\":{\"197\":1}}],[\"线程与进程相似\",{\"1\":{\"197\":1}}],[\"线程工厂\",{\"1\":{\"112\":1,\"219\":1}}],[\"线程池优化\",{\"0\":{\"1465\":1}}],[\"线程池处理\",{\"1\":{\"948\":1,\"1353\":1}}],[\"线程池处理runnable任务\",{\"0\":{\"948\":1,\"1353\":1}}],[\"线程池常见面试题\",{\"0\":{\"945\":1,\"1350\":1}}],[\"线程池工具类通过调用方法返回不同类型的线程池对象\",{\"1\":{\"951\":1,\"1356\":1}}],[\"线程池工具类\",{\"1\":{\"943\":1,\"1348\":1}}],[\"线程池实现的api\",{\"0\":{\"941\":1,\"1346\":1}}],[\"线程池就是一个可以复用线程的技术\",{\"1\":{\"940\":1,\"1345\":1}}],[\"线程池的执行原理知道吗\",{\"0\":{\"219\":1}}],[\"线程池的内容\",{\"0\":{\"218\":1}}],[\"线程池创建线程\",{\"1\":{\"199\":1}}],[\"线程池会创建新的线程\",{\"1\":{\"112\":1}}],[\"线程池中允许存在的最大线程数\",{\"1\":{\"112\":1}}],[\"线程池中一直保持活动的线程数\",{\"1\":{\"112\":1}}],[\"线程池\",{\"1\":{\"92\":1}}],[\"空格或标签页\",{\"1\":{\"819\":1,\"1224\":1}}],[\"空格字符\",{\"1\":{\"819\":2,\"1224\":2}}],[\"空指针异常\",{\"1\":{\"631\":1,\"1036\":1}}],[\"空闲\",{\"1\":{\"481\":1}}],[\"空闲线程存活时间\",{\"1\":{\"112\":1}}],[\"空字符串\",{\"1\":{\"298\":1}}],[\"空间浪费的问题\",{\"1\":{\"109\":1}}],[\"让客户端稍等一会\",{\"1\":{\"1442\":1}}],[\"让多个线程实现先后依次访问共享资源\",{\"1\":{\"931\":1,\"1336\":1}}],[\"让线程休眠指定的时间\",{\"1\":{\"926\":1,\"1331\":1}}],[\"让当前线程进入等待\",{\"1\":{\"939\":2,\"1344\":2}}],[\"让当前线程进入休眠状态\",{\"1\":{\"925\":1,\"1330\":1}}],[\"让当前线程休眠指定的时间后再继续执行\",{\"1\":{\"925\":1,\"1330\":1}}],[\"让值加一\",{\"1\":{\"908\":1,\"1313\":1}}],[\"让树尽可能矮小\",{\"1\":{\"855\":1,\"1260\":1}}],[\"让它可以创建对象\",{\"1\":{\"806\":1,\"1211\":1}}],[\"让它们互不影响\",{\"1\":{\"112\":1}}],[\"让他加一个空字符串\",{\"1\":{\"789\":1,\"1194\":1}}],[\"让用户不断输入学号\",{\"1\":{\"751\":1,\"1156\":1}}],[\"让其他地方可以调用获取一个对象\",{\"1\":{\"688\":1,\"1093\":1}}],[\"让明星\",{\"1\":{\"629\":1,\"1034\":1}}],[\"让一个线程对共享变量的修改对另一个线程可见\",{\"1\":{\"212\":1}}],[\"让我们从mysql开始\",{\"1\":{\"344\":1}}],[\"让我们一同踏上这个充满挑战和奇迹的java之旅吧\",{\"1\":{\"75\":1}}],[\"让我们一起探索java大陆\",{\"1\":{\"8\":1}}],[\"让我们跟随主角的脚步\",{\"1\":{\"68\":1}}],[\"让我们拭目以待\",{\"1\":{\"58\":1}}],[\"存钱线程\",{\"1\":{\"939\":1,\"1344\":1}}],[\"存钱\",{\"1\":{\"939\":3,\"1344\":3}}],[\"存入到集合容器\",{\"1\":{\"897\":1,\"1302\":1}}],[\"存入一级缓存singletonobjects\",{\"1\":{\"164\":1}}],[\"存数据\",{\"1\":{\"333\":1}}],[\"存放的是启动linux时需要的一些核心文件\",{\"1\":{\"428\":1}}],[\"存放普通用户的主目录\",{\"1\":{\"428\":1}}],[\"存放在\",{\"1\":{\"356\":1}}],[\"存放数据\",{\"1\":{\"288\":1}}],[\"存放请求参数\",{\"1\":{\"287\":1}}],[\"存放任务\",{\"1\":{\"112\":1}}],[\"存在才可以遍历\",{\"1\":{\"981\":1,\"1386\":1}}],[\"存在延时与设置定时器的时间有出入\",{\"1\":{\"954\":1,\"1359\":1}}],[\"存在问题\",{\"1\":{\"952\":1,\"1357\":1}}],[\"存在就可以拿到\",{\"1\":{\"810\":2,\"1215\":2}}],[\"存在就能拿到\",{\"1\":{\"804\":4,\"806\":1,\"808\":2,\"1209\":4,\"1211\":1,\"1213\":2}}],[\"存在返回\",{\"1\":{\"793\":1,\"1198\":1}}],[\"存在精度损失风险\",{\"1\":{\"773\":1,\"1178\":1}}],[\"存在元素相同的情况下\",{\"1\":{\"750\":1,\"1155\":1}}],[\"存在于每个对象中\",{\"1\":{\"675\":1,\"1080\":1}}],[\"存在null\",{\"1\":{\"521\":1}}],[\"存在sql注入问题\",{\"1\":{\"271\":2}}],[\"存在本地的jar包\",{\"1\":{\"259\":1}}],[\"存储顺序不一致\",{\"1\":{\"880\":1,\"1285\":1}}],[\"存储的元素可以重复\",{\"1\":{\"860\":1,\"1265\":1}}],[\"存储的是键值对\",{\"1\":{\"194\":1}}],[\"存储和去除的元素顺序一致\",{\"1\":{\"860\":1,\"1265\":1}}],[\"存储到数组中\",{\"1\":{\"842\":1,\"1247\":1}}],[\"存储到request域中\",{\"1\":{\"322\":1}}],[\"存储自定义类型\",{\"1\":{\"751\":1,\"1156\":1}}],[\"存储一个对象\",{\"1\":{\"688\":1,\"1093\":1}}],[\"存储一个对象即可\",{\"1\":{\"686\":1,\"1091\":1}}],[\"存储位置\",{\"1\":{\"336\":1}}],[\"存储数据到session域中\",{\"1\":{\"333\":1}}],[\"存储数据到request域中\",{\"1\":{\"310\":1}}],[\"存储流程\",{\"1\":{\"217\":1}}],[\"存储结构\",{\"1\":{\"217\":1}}],[\"存储当前\",{\"1\":{\"210\":1}}],[\"存储时间\",{\"1\":{\"336\":1}}],[\"存储时\",{\"1\":{\"188\":1}}],[\"存储老版本数据\",{\"1\":{\"154\":1}}],[\"存储方式有哪些区别\",{\"0\":{\"111\":1}}],[\"存储用户信息\",{\"0\":{\"111\":1}}],[\"存储\",{\"1\":{\"110\":1}}],[\"存储中间件\",{\"1\":{\"110\":1}}],[\"代表操作系统的文件对象\",{\"1\":{\"965\":1,\"1370\":1}}],[\"代表小明和小红同时进来了\",{\"1\":{\"930\":1,\"1335\":1}}],[\"代表线程\",{\"1\":{\"914\":1,\"1319\":1}}],[\"代表的是时间戳\",{\"1\":{\"785\":1,\"1190\":1}}],[\"代表当前系统此刻的时间对象\",{\"1\":{\"776\":1,\"1181\":1}}],[\"代表这个方法的参数\",{\"1\":{\"629\":1,\"1034\":1}}],[\"代表多个占位符\",{\"1\":{\"518\":1}}],[\"代表一个占位符\",{\"1\":{\"518\":1}}],[\"代表重复前一个搜寻的动作\",{\"1\":{\"435\":1}}],[\"代理对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"代理服务器角色\",{\"1\":{\"381\":1}}],[\"代理方式\",{\"1\":{\"267\":1}}],[\"代替取模\",{\"1\":{\"192\":1}}],[\"代替\",{\"0\":{\"111\":1}}],[\"代码优雅\",{\"1\":{\"764\":1,\"1169\":1}}],[\"代码安全\",{\"1\":{\"698\":1,\"1103\":1}}],[\"代码块中\",{\"1\":{\"735\":1,\"1140\":1}}],[\"代码块分为\",{\"0\":{\"682\":1,\"1087\":1}}],[\"代码块\",{\"0\":{\"681\":1,\"1086\":1},\"1\":{\"660\":1,\"710\":1,\"1065\":1,\"1115\":1}}],[\"代码要精简易读\",{\"1\":{\"649\":1,\"1054\":1}}],[\"代码2\",{\"1\":{\"648\":1,\"1053\":1}}],[\"代码1\",{\"1\":{\"648\":1,\"1053\":1}}],[\"代码书写量巨大且意义不强\",{\"1\":{\"572\":1}}],[\"代码区\",{\"0\":{\"570\":1}}],[\"代码重复\",{\"1\":{\"316\":1}}],[\"代码进入synchorized代码块\",{\"1\":{\"210\":1}}],[\"代码到本地\",{\"1\":{\"104\":1}}],[\"代码\",{\"0\":{\"579\":1},\"1\":{\"92\":1}}],[\"代码能力也在不断精进\",{\"1\":{\"13\":1}}],[\"本案例的多发多收\",{\"0\":{\"1462\":1}}],[\"本机所在网段的其他主机的程序只要匹配端口成功就可以收到消息了\",{\"1\":{\"1453\":1}}],[\"本机ip\",{\"1\":{\"1431\":1}}],[\"本机路径\",{\"1\":{\"373\":2}}],[\"本任务与线程绑定了\",{\"1\":{\"948\":1,\"1353\":1}}],[\"本方式不可以直接对自定义类型的list排序\",{\"1\":{\"896\":1,\"1301\":1}}],[\"本质上是一个没有名字的局部内部类\",{\"1\":{\"735\":1,\"1140\":1}}],[\"本小节的操作\",{\"1\":{\"390\":1,\"393\":1}}],[\"本次安装使用tomcat版本是\",{\"1\":{\"352\":1}}],[\"本次课程分为2个版本进行安装\",{\"1\":{\"344\":1}}],[\"本地仓库的位置\",{\"1\":{\"251\":1}}],[\"本地仓库\",{\"1\":{\"250\":1}}],[\"本地的\",{\"1\":{\"110\":1}}],[\"本项目中\",{\"1\":{\"110\":1}}],[\"本项目的所有依赖都是由\",{\"1\":{\"98\":1}}],[\"t=1095\",{\"1\":{\"888\":1,\"1293\":1}}],[\"t=1826\",{\"1\":{\"855\":1,\"1260\":1}}],[\"t=340\",{\"1\":{\"281\":1}}],[\"t>\",{\"1\":{\"823\":1,\"1022\":1,\"1027\":2,\"1028\":2,\"1029\":2,\"1228\":1,\"1472\":1,\"1477\":2,\"1478\":2,\"1479\":2}}],[\"tty\",{\"1\":{\"478\":1}}],[\"ttl\",{\"1\":{\"130\":1}}],[\"tcshrc\",{\"1\":{\"460\":2}}],[\"tcp通信模型\",{\"0\":{\"1465\":1}}],[\"tcp通信\",{\"0\":{\"1455\":1,\"1463\":1}}],[\"tcp四次挥手断开连接\",{\"0\":{\"1442\":1}}],[\"tcp三次握手确立连接\",{\"0\":{\"1441\":1}}],[\"tcp协议通信场景\",{\"0\":{\"1440\":1}}],[\"tcp协议特点\",{\"0\":{\"1439\":1}}],[\"tcp表示放行8080端口的tcp访问\",{\"1\":{\"354\":1}}],[\"tcp\",{\"1\":{\"240\":1,\"354\":1,\"356\":1,\"358\":3,\"360\":1,\"495\":1,\"1438\":1}}],[\"txt压缩到test\",{\"1\":{\"490\":2,\"491\":1}}],[\"txt文件的权限修改为rwxr\",{\"1\":{\"465\":1}}],[\"txt文件的权限修改为rwxrwxr\",{\"1\":{\"465\":1}}],[\"txt\",{\"1\":{\"387\":8,\"455\":2,\"456\":2,\"459\":5,\"460\":4,\"465\":2,\"466\":2,\"490\":10,\"491\":5,\"816\":1,\"965\":1,\"966\":1,\"969\":2,\"994\":1,\"995\":1,\"996\":1,\"997\":2,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":2,\"1008\":2,\"1009\":2,\"1011\":2,\"1221\":1,\"1370\":1,\"1371\":1,\"1374\":2,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":2,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":2,\"1413\":2,\"1414\":2,\"1416\":2}}],[\"tmp\",{\"1\":{\"386\":1,\"428\":1}}],[\"tmp<\",{\"1\":{\"386\":1}}],[\"tmocat\",{\"0\":{\"289\":1}}],[\"tgz\",{\"1\":{\"377\":2,\"392\":2,\"395\":2}}],[\"tls\",{\"1\":{\"358\":4,\"409\":1}}],[\"td>\",{\"1\":{\"323\":4}}],[\"tiger\",{\"1\":{\"709\":1,\"738\":2,\"1114\":1,\"1143\":2}}],[\"title\",{\"1\":{\"529\":1}}],[\"title>\",{\"1\":{\"318\":1,\"320\":1}}],[\"tinyint\",{\"1\":{\"511\":1,\"529\":3}}],[\"ticktime=2000\",{\"1\":{\"375\":1}}],[\"timed\",{\"1\":{\"963\":1,\"1368\":1}}],[\"timerdemo2\",{\"1\":{\"956\":1,\"1361\":1}}],[\"timerdemo1\",{\"1\":{\"954\":1,\"1359\":1}}],[\"timer是单线程\",{\"1\":{\"954\":1,\"1359\":1}}],[\"timertask\",{\"1\":{\"954\":3,\"956\":3,\"1359\":3,\"1361\":3}}],[\"timer定时器的特点和存在的问题\",{\"1\":{\"954\":1,\"1359\":1}}],[\"timer定时器的使用和了解\",{\"1\":{\"954\":1,\"1359\":1}}],[\"timer定时器\",{\"0\":{\"954\":1,\"1359\":1}}],[\"timer\",{\"1\":{\"953\":1,\"954\":7,\"956\":1,\"1358\":1,\"1359\":7,\"1361\":1}}],[\"timeinmillis\",{\"1\":{\"784\":2,\"1189\":2}}],[\"timestamp=true\",{\"1\":{\"494\":1}}],[\"timezone\",{\"1\":{\"404\":2}}],[\"time\",{\"1\":{\"240\":1,\"320\":1,\"386\":1,\"478\":1,\"615\":2,\"629\":4,\"769\":1,\"777\":3,\"781\":5,\"782\":1,\"784\":2,\"786\":4,\"925\":1,\"926\":1,\"966\":2,\"1034\":4,\"1174\":1,\"1182\":3,\"1186\":5,\"1187\":1,\"1189\":2,\"1191\":4,\"1330\":1,\"1331\":1,\"1371\":2}}],[\"timebetweenevictionrunsmillis\",{\"1\":{\"240\":1}}],[\"timeout=10s\",{\"1\":{\"495\":2}}],[\"timeout>\",{\"1\":{\"335\":1}}],[\"timeout>30<\",{\"1\":{\"335\":1}}],[\"timeout\",{\"1\":{\"207\":1,\"240\":1,\"495\":5,\"1433\":1}}],[\"timeunit\",{\"1\":{\"199\":2,\"219\":1,\"944\":1,\"948\":3,\"949\":2,\"951\":1,\"955\":1,\"956\":3,\"1349\":1,\"1353\":3,\"1354\":2,\"1356\":1,\"1360\":1,\"1361\":3,\"1465\":1,\"1466\":1}}],[\"time=2\",{\"1\":{\"141\":1}}],[\"teacherdata\",{\"1\":{\"875\":1,\"1280\":1}}],[\"teacher\",{\"1\":{\"816\":8,\"875\":6,\"1221\":8,\"1280\":6}}],[\"tel\",{\"1\":{\"511\":1}}],[\"terminated\",{\"1\":{\"963\":1,\"1368\":1}}],[\"term\",{\"1\":{\"460\":1}}],[\"technologies\",{\"1\":{\"353\":1}}],[\"temp\",{\"1\":{\"794\":2,\"1199\":2}}],[\"temporary\",{\"1\":{\"347\":1,\"350\":1,\"398\":1}}],[\"templates\",{\"1\":{\"320\":1}}],[\"template\",{\"1\":{\"320\":1,\"392\":2}}],[\"text\",{\"1\":{\"312\":1,\"314\":3,\"318\":1,\"320\":1,\"386\":3,\"635\":2,\"636\":1,\"781\":3,\"966\":1,\"1040\":2,\"1041\":1,\"1186\":3,\"1371\":1,\"1466\":2}}],[\"test6\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"test5\",{\"1\":{\"1028\":4,\"1478\":4}}],[\"test4\",{\"1\":{\"1027\":3,\"1477\":3}}],[\"test3\",{\"1\":{\"974\":2,\"1026\":1,\"1379\":2,\"1476\":1}}],[\"testaddallclass\",{\"1\":{\"816\":1,\"1221\":1}}],[\"testreflectdemo\",{\"1\":{\"816\":1,\"1221\":1}}],[\"testmethod1\",{\"1\":{\"812\":1,\"1217\":1}}],[\"testfielddemo2\",{\"1\":{\"808\":1,\"1213\":1}}],[\"testfielddemo1\",{\"1\":{\"808\":1,\"1213\":1}}],[\"testfindall\",{\"1\":{\"615\":1}}],[\"testfindbyid\",{\"1\":{\"615\":1}}],[\"teststudent02\",{\"1\":{\"806\":1,\"1211\":1}}],[\"teststudent01\",{\"1\":{\"804\":1,\"1209\":1}}],[\"test1\",{\"1\":{\"755\":1,\"769\":1,\"781\":2,\"786\":1,\"794\":1,\"818\":1,\"866\":1,\"1024\":1,\"1160\":1,\"1174\":1,\"1186\":2,\"1191\":1,\"1199\":1,\"1223\":1,\"1271\":1,\"1474\":1}}],[\"test2\",{\"1\":{\"738\":1,\"756\":1,\"759\":1,\"794\":1,\"974\":3,\"1024\":1,\"1143\":1,\"1161\":1,\"1164\":1,\"1199\":1,\"1379\":3,\"1474\":1}}],[\"test02\",{\"1\":{\"664\":1,\"708\":5,\"1069\":1,\"1113\":5}}],[\"test01\",{\"1\":{\"663\":1,\"678\":1,\"771\":1,\"774\":1,\"1068\":1,\"1083\":1,\"1176\":1,\"1179\":1}}],[\"testgetall\",{\"1\":{\"570\":1}}],[\"testgetbyid\",{\"1\":{\"570\":1}}],[\"testgetbypage\",{\"1\":{\"544\":1}}],[\"test<\",{\"1\":{\"570\":1,\"615\":1}}],[\"test将test文件夹以及文件夹中所有的文件和文件夹的所属用户修改为zs\",{\"1\":{\"466\":1}}],[\"test对test文件夹以及文件夹内部的全部内容的权限修改为rwxrwxr\",{\"1\":{\"465\":1}}],[\"test=\",{\"1\":{\"273\":6,\"274\":6,\"277\":5,\"323\":2}}],[\"testcrud\",{\"1\":{\"245\":1}}],[\"test\",{\"1\":{\"244\":1,\"245\":9,\"253\":1,\"254\":1,\"259\":1,\"267\":1,\"272\":1,\"275\":2,\"277\":1,\"279\":1,\"280\":1,\"378\":3,\"387\":3,\"389\":4,\"405\":1,\"424\":6,\"451\":3,\"455\":2,\"456\":2,\"459\":5,\"460\":4,\"466\":1,\"486\":4,\"490\":5,\"491\":3,\"492\":2,\"544\":1,\"570\":5,\"615\":6,\"620\":1,\"629\":2,\"708\":2,\"721\":1,\"732\":3,\"738\":1,\"763\":2,\"802\":1,\"804\":5,\"806\":2,\"808\":5,\"812\":3,\"816\":2,\"823\":1,\"871\":1,\"974\":3,\"1022\":1,\"1024\":2,\"1026\":1,\"1027\":3,\"1028\":7,\"1029\":4,\"1034\":2,\"1113\":2,\"1126\":1,\"1137\":3,\"1143\":1,\"1168\":2,\"1207\":1,\"1209\":5,\"1211\":2,\"1213\":5,\"1217\":3,\"1221\":2,\"1228\":1,\"1276\":1,\"1379\":3,\"1472\":1,\"1474\":2,\"1476\":1,\"1477\":3,\"1478\":7,\"1479\":4}}],[\"testonreturn\",{\"1\":{\"240\":1}}],[\"testonborrow\",{\"1\":{\"240\":1}}],[\"testwhileidle\",{\"1\":{\"240\":1}}],[\"task2\",{\"1\":{\"921\":3,\"1326\":3}}],[\"task\",{\"1\":{\"921\":3,\"948\":1,\"954\":1,\"1326\":3,\"1353\":1,\"1359\":1}}],[\"tasks\",{\"1\":{\"481\":3,\"948\":2,\"1353\":2}}],[\"taskmanager\",{\"1\":{\"395\":5}}],[\"tail\",{\"0\":{\"460\":1},\"1\":{\"419\":1,\"460\":3}}],[\"take\",{\"1\":{\"410\":1}}],[\"tar到指定的\",{\"1\":{\"490\":1}}],[\"tar到当前目录\",{\"1\":{\"490\":1}}],[\"tar解压常用的组合为\",{\"1\":{\"490\":1}}],[\"tar文件中\",{\"1\":{\"490\":1}}],[\"tar压缩常用的组合为\",{\"1\":{\"490\":1}}],[\"targetref\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"target>8<\",{\"1\":{\"615\":1}}],[\"target>\",{\"1\":{\"557\":1,\"615\":1}}],[\"target>1\",{\"1\":{\"557\":1}}],[\"target\",{\"1\":{\"474\":1,\"494\":3,\"496\":1,\"743\":1,\"918\":2,\"920\":2,\"926\":2,\"948\":12,\"1148\":1,\"1323\":2,\"1325\":2,\"1331\":2,\"1353\":12,\"1465\":2}}],[\"tar\",{\"0\":{\"490\":1},\"1\":{\"353\":3,\"354\":4,\"375\":3,\"377\":1,\"386\":3,\"389\":3,\"392\":1,\"395\":1,\"420\":1,\"490\":14}}],[\"tablelogic\",{\"1\":{\"552\":1}}],[\"tables\",{\"1\":{\"509\":1}}],[\"table2\",{\"1\":{\"494\":1}}],[\"table1\",{\"1\":{\"494\":1}}],[\"table\",{\"1\":{\"243\":2,\"494\":5,\"510\":1,\"511\":1,\"512\":5,\"513\":2,\"525\":2,\"526\":6,\"529\":8,\"552\":1}}],[\"tags\",{\"1\":{\"358\":1}}],[\"taglib\",{\"1\":{\"323\":1}}],[\"tag\",{\"1\":{\"119\":1}}],[\"that\",{\"1\":{\"386\":1,\"758\":1,\"1163\":1}}],[\"them\",{\"1\":{\"413\":1}}],[\"then\",{\"1\":{\"413\":1}}],[\"the\",{\"1\":{\"251\":2,\"386\":38,\"404\":1,\"494\":2,\"495\":1,\"758\":6,\"819\":1,\"1163\":6,\"1224\":1}}],[\"this是主调的对象\",{\"1\":{\"756\":1,\"1161\":1}}],[\"this就代表哪个对象\",{\"1\":{\"661\":1,\"1066\":1}}],[\"this出现在构造器或者方法中\",{\"1\":{\"661\":1,\"1066\":1}}],[\"this关键字\",{\"0\":{\"661\":1,\"1066\":1}}],[\"this\",{\"1\":{\"244\":12,\"264\":10,\"307\":1,\"308\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"320\":1,\"329\":2,\"333\":2,\"386\":7,\"571\":8,\"628\":1,\"629\":3,\"641\":2,\"660\":4,\"672\":4,\"694\":1,\"709\":1,\"751\":14,\"755\":6,\"756\":13,\"758\":6,\"793\":6,\"804\":4,\"812\":2,\"816\":14,\"831\":2,\"888\":7,\"891\":9,\"896\":8,\"897\":6,\"921\":1,\"930\":8,\"933\":3,\"936\":4,\"937\":3,\"939\":27,\"1009\":6,\"1012\":1,\"1033\":1,\"1034\":3,\"1046\":2,\"1065\":4,\"1077\":4,\"1099\":1,\"1114\":1,\"1156\":14,\"1160\":6,\"1161\":13,\"1163\":6,\"1198\":6,\"1209\":4,\"1217\":2,\"1221\":14,\"1236\":2,\"1293\":7,\"1296\":9,\"1301\":8,\"1302\":6,\"1326\":1,\"1335\":8,\"1338\":3,\"1341\":4,\"1342\":3,\"1344\":27,\"1414\":6,\"1417\":1,\"1464\":1,\"1465\":1,\"1466\":2}}],[\"thin\",{\"1\":{\"240\":1}}],[\"throwable\",{\"1\":{\"615\":1,\"629\":3,\"1034\":3}}],[\"throw\",{\"1\":{\"205\":2,\"638\":2,\"1043\":2}}],[\"throws\",{\"0\":{\"634\":1,\"1039\":1},\"1\":{\"199\":2,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"245\":5,\"264\":1,\"272\":2,\"275\":2,\"277\":2,\"279\":1,\"280\":1,\"295\":1,\"299\":2,\"307\":2,\"308\":2,\"309\":1,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4,\"338\":2,\"579\":3,\"615\":1,\"629\":3,\"634\":3,\"636\":1,\"638\":2,\"781\":1,\"802\":1,\"804\":2,\"806\":1,\"808\":3,\"812\":1,\"814\":1,\"921\":2,\"925\":1,\"969\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1008\":1,\"1009\":2,\"1011\":1,\"1012\":2,\"1014\":1,\"1034\":3,\"1039\":3,\"1041\":1,\"1043\":2,\"1186\":1,\"1207\":1,\"1209\":2,\"1211\":1,\"1213\":3,\"1217\":1,\"1219\":1,\"1326\":2,\"1330\":1,\"1374\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1413\":1,\"1414\":2,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2}}],[\"threads\",{\"1\":{\"948\":1,\"1353\":1}}],[\"threadpooldemo2\",{\"1\":{\"949\":1,\"1354\":1}}],[\"threadpooldemo1\",{\"1\":{\"948\":1,\"951\":1,\"1353\":1,\"1356\":1}}],[\"threadpool\",{\"1\":{\"948\":2,\"949\":1,\"951\":1,\"1353\":2,\"1354\":1,\"1356\":1}}],[\"threadpoolexecutor创建线程池对象实例\",{\"1\":{\"948\":1,\"1353\":1}}],[\"threadpoolexecutor构造器的参数说明\",{\"0\":{\"944\":1,\"1349\":1}}],[\"threadpoolexecutor\",{\"1\":{\"112\":1,\"199\":7,\"219\":1,\"944\":1,\"948\":5,\"949\":3,\"951\":1,\"1349\":1,\"1353\":5,\"1354\":3,\"1356\":1,\"1465\":2,\"1466\":2}}],[\"threaddemo\",{\"1\":{\"939\":1,\"1344\":1}}],[\"thread类的线程休眠方法\",{\"0\":{\"925\":1,\"1330\":1}}],[\"thread常用方法\",{\"1\":{\"924\":1,\"926\":1,\"1329\":1,\"1331\":1}}],[\"thread的常用方法\",{\"0\":{\"924\":1,\"1329\":1}}],[\"thread2\",{\"1\":{\"921\":2,\"1326\":2}}],[\"thread\",{\"0\":{\"202\":1},\"1\":{\"199\":9,\"205\":6,\"207\":1,\"264\":1,\"629\":3,\"914\":3,\"918\":2,\"920\":6,\"921\":6,\"924\":6,\"925\":1,\"926\":6,\"930\":5,\"937\":1,\"939\":12,\"948\":3,\"954\":1,\"956\":3,\"1034\":3,\"1319\":3,\"1323\":2,\"1325\":6,\"1326\":6,\"1329\":6,\"1330\":1,\"1331\":6,\"1335\":5,\"1342\":1,\"1344\":12,\"1353\":3,\"1359\":1,\"1361\":3,\"1464\":1,\"1466\":1}}],[\"threadfactory\",{\"1\":{\"112\":1,\"219\":3,\"944\":3,\"948\":2,\"949\":2,\"1349\":3,\"1353\":2,\"1354\":2}}],[\"threadlocal方法后最好手动调用remove\",{\"1\":{\"222\":1}}],[\"threadlocalmap\",{\"1\":{\"222\":3}}],[\"threadlocal类主要解决的就是让每个线程绑定自己的值\",{\"1\":{\"221\":1}}],[\"threadlocal\",{\"0\":{\"221\":1,\"222\":1},\"1\":{\"92\":1,\"158\":2,\"222\":2}}],[\"treemap\",{\"1\":{\"903\":1,\"1308\":1}}],[\"treeset<>\",{\"1\":{\"891\":4,\"1296\":4}}],[\"treeset无法直接排序\",{\"1\":{\"891\":1,\"1296\":1}}],[\"treeset集合自定义排序规则有几种方式\",{\"1\":{\"891\":1,\"1296\":1}}],[\"treeset集合特点\",{\"1\":{\"891\":1,\"1296\":1}}],[\"treeset集合默认的排序规则\",{\"0\":{\"891\":1,\"1296\":1}}],[\"treeset集合底层是基于红黑树的数据结构实现排序的\",{\"1\":{\"890\":1,\"1295\":1}}],[\"treeset集合\",{\"0\":{\"890\":1,\"1295\":1}}],[\"treeset\",{\"1\":{\"881\":1,\"891\":1,\"1286\":1,\"1296\":1}}],[\"tr>\",{\"1\":{\"323\":1}}],[\"trim\",{\"1\":{\"273\":1}}],[\"transient\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"transient修饰的成员变量不参与序列化\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"transactional\",{\"1\":{\"570\":2,\"616\":2}}],[\"transactional注解来开启事务\",{\"1\":{\"161\":1}}],[\"transactionmanager\",{\"1\":{\"570\":1}}],[\"transaction\",{\"1\":{\"535\":1,\"570\":3}}],[\"transactions\",{\"1\":{\"386\":1}}],[\"trace\",{\"1\":{\"240\":1,\"264\":1}}],[\"true给定对象表示与此string等效的字符串\",{\"1\":{\"758\":1,\"1163\":1}}],[\"true和false\",{\"1\":{\"649\":1,\"1054\":1}}],[\"true是分布式模式\",{\"1\":{\"389\":1}}],[\"true\",{\"1\":{\"240\":4,\"276\":2,\"280\":1,\"389\":1,\"494\":1,\"570\":3,\"579\":1,\"629\":1,\"648\":1,\"743\":1,\"751\":1,\"756\":2,\"758\":5,\"806\":2,\"808\":2,\"812\":1,\"814\":2,\"816\":2,\"818\":1,\"831\":3,\"839\":7,\"840\":7,\"842\":1,\"888\":1,\"891\":1,\"896\":1,\"904\":1,\"939\":2,\"997\":2,\"1004\":1,\"1008\":1,\"1011\":2,\"1034\":1,\"1053\":1,\"1148\":1,\"1156\":1,\"1161\":2,\"1163\":5,\"1211\":2,\"1213\":2,\"1217\":1,\"1219\":2,\"1221\":2,\"1223\":1,\"1236\":3,\"1244\":7,\"1245\":7,\"1247\":1,\"1293\":1,\"1296\":1,\"1301\":1,\"1309\":1,\"1344\":2,\"1402\":2,\"1409\":1,\"1413\":1,\"1416\":2,\"1450\":2,\"1461\":1,\"1464\":2,\"1465\":2,\"1466\":2}}],[\"true为自动提交\",{\"1\":{\"229\":1}}],[\"try\",{\"0\":{\"635\":1,\"1000\":1,\"1001\":1,\"1040\":1,\"1405\":1,\"1406\":1},\"1\":{\"205\":2,\"229\":1,\"245\":1,\"316\":1,\"476\":1,\"629\":3,\"635\":4,\"636\":1,\"637\":1,\"638\":1,\"816\":1,\"921\":2,\"939\":6,\"948\":1,\"949\":1,\"956\":1,\"998\":1,\"1000\":4,\"1001\":1,\"1007\":1,\"1008\":1,\"1034\":3,\"1040\":4,\"1041\":1,\"1042\":1,\"1043\":1,\"1221\":1,\"1326\":2,\"1344\":6,\"1353\":1,\"1354\":1,\"1361\":1,\"1403\":1,\"1405\":4,\"1406\":1,\"1412\":1,\"1413\":1,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":4}}],[\"t1\",{\"1\":{\"205\":4,\"216\":1,\"924\":4,\"1329\":4}}],[\"t3按照顺序执行\",{\"1\":{\"205\":1}}],[\"t3\",{\"1\":{\"205\":4}}],[\"t2\",{\"1\":{\"205\":6,\"216\":1,\"924\":4,\"1329\":4}}],[\"t\",{\"1\":{\"184\":1,\"280\":3,\"369\":1,\"481\":2,\"494\":1,\"496\":7,\"629\":3,\"793\":2,\"804\":4,\"806\":2,\"819\":5,\"870\":1,\"871\":6,\"872\":2,\"873\":3,\"875\":5,\"895\":3,\"896\":5,\"914\":2,\"918\":2,\"948\":2,\"1025\":4,\"1027\":2,\"1028\":2,\"1029\":2,\"1034\":3,\"1198\":2,\"1209\":4,\"1211\":2,\"1224\":5,\"1275\":1,\"1276\":6,\"1277\":2,\"1278\":3,\"1280\":5,\"1300\":3,\"1301\":5,\"1319\":2,\"1323\":2,\"1353\":2,\"1475\":4,\"1477\":2,\"1478\":2,\"1479\":2}}],[\"tbl\",{\"1\":{\"570\":5,\"613\":5}}],[\"tb\",{\"1\":{\"148\":3,\"231\":1,\"233\":4,\"240\":1,\"243\":4,\"245\":4,\"264\":1,\"270\":3,\"271\":5,\"272\":3,\"273\":4,\"274\":4,\"275\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":2,\"283\":2,\"510\":2,\"514\":9,\"518\":4,\"519\":2,\"521\":6,\"529\":11,\"829\":3,\"1234\":3}}],[\"toarray方法可以把集合转换成数组\",{\"1\":{\"839\":1,\"840\":1,\"1244\":1,\"1245\":1}}],[\"toarray\",{\"1\":{\"839\":1,\"840\":1,\"842\":2,\"1244\":1,\"1245\":1,\"1247\":2}}],[\"tochararray\",{\"1\":{\"743\":2,\"1004\":1,\"1008\":1,\"1148\":2,\"1409\":1,\"1413\":1}}],[\"total\",{\"1\":{\"481\":6}}],[\"top交互式选项可以通过键盘按键控制内容\",{\"1\":{\"481\":1}}],[\"top命令名称\",{\"1\":{\"481\":1}}],[\"top显示的信息详解\",{\"1\":{\"481\":1}}],[\"top\",{\"0\":{\"481\":1},\"1\":{\"481\":2,\"496\":5}}],[\"topic\",{\"1\":{\"378\":3}}],[\"topics\",{\"1\":{\"378\":1}}],[\"touch\",{\"0\":{\"446\":1},\"1\":{\"419\":1,\"446\":1,\"486\":1,\"496\":1}}],[\"tostring\",{\"0\":{\"755\":1,\"1160\":1},\"1\":{\"244\":1,\"264\":1,\"307\":1,\"308\":1,\"628\":1,\"660\":1,\"672\":2,\"751\":2,\"754\":1,\"755\":5,\"756\":3,\"759\":1,\"763\":2,\"793\":8,\"794\":2,\"804\":1,\"816\":2,\"839\":1,\"840\":1,\"842\":1,\"871\":2,\"873\":1,\"888\":1,\"891\":1,\"893\":1,\"896\":1,\"897\":1,\"988\":1,\"1009\":1,\"1019\":1,\"1033\":1,\"1065\":1,\"1077\":2,\"1156\":2,\"1159\":1,\"1160\":5,\"1161\":3,\"1164\":1,\"1168\":2,\"1198\":8,\"1199\":2,\"1209\":1,\"1221\":2,\"1244\":1,\"1245\":1,\"1247\":1,\"1276\":2,\"1278\":1,\"1293\":1,\"1296\":1,\"1298\":1,\"1301\":1,\"1302\":1,\"1393\":1,\"1414\":1,\"1449\":1,\"1469\":1}}],[\"tolist\",{\"0\":{\"185\":1},\"1\":{\"184\":2,\"185\":1,\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"tolerance\",{\"1\":{\"174\":1}}],[\"to\",{\"1\":{\"137\":1,\"251\":3,\"280\":2,\"320\":1,\"386\":8,\"398\":1,\"402\":3,\"410\":2,\"474\":1,\"494\":1,\"495\":1,\"512\":1,\"758\":3,\"831\":1,\"1163\":3,\"1236\":1}}],[\"tomcat安装部署环节\",{\"1\":{\"370\":1}}],[\"tomcat安装配置完成\",{\"1\":{\"354\":1}}],[\"tomcat启动在8080端口\",{\"1\":{\"354\":1}}],[\"tomcat用以部署\",{\"1\":{\"354\":1}}],[\"tomcat建议使用非root用户安装并启动\",{\"1\":{\"354\":1}}],[\"tomcat的安装非常简单\",{\"1\":{\"352\":1}}],[\"tomcat的插件\",{\"1\":{\"293\":1}}],[\"tomcat会自动将session数据写入到硬盘文件中去\",{\"1\":{\"335\":1}}],[\"tomcat会把hello\",{\"1\":{\"319\":1}}],[\"tomcat8\",{\"1\":{\"309\":1}}],[\"tomcat中\",{\"1\":{\"309\":2}}],[\"tomcat需要解析请求数据\",{\"1\":{\"306\":1}}],[\"tomcat定义的实现类\",{\"1\":{\"306\":1,\"311\":1}}],[\"tomcat7对url解码\",{\"1\":{\"309\":2}}],[\"tomcat7默认的编解码字符集为iso\",{\"1\":{\"309\":1}}],[\"tomcat7\",{\"1\":{\"293\":1}}],[\"tomcat是一个web应用程序的托管平台\",{\"1\":{\"351\":1}}],[\"tomcat是一个开源的免费的轻量级的web服务器\",{\"1\":{\"291\":1}}],[\"tomcat是apache软件基金会的一个核心项目\",{\"1\":{\"290\":1}}],[\"tomcat称为web容器\",{\"1\":{\"290\":1}}],[\"tomcat\",{\"1\":{\"110\":1,\"290\":1,\"293\":1,\"295\":2,\"307\":2,\"319\":2,\"351\":1,\"354\":16,\"557\":1,\"570\":1}}],[\"types\",{\"1\":{\"495\":1}}],[\"typealiases>\",{\"1\":{\"267\":1}}],[\"type=rpm\",{\"1\":{\"362\":1}}],[\"type=\",{\"1\":{\"264\":2,\"267\":4,\"270\":1,\"386\":3}}],[\"type\",{\"1\":{\"110\":1,\"142\":1,\"270\":1,\"312\":1,\"314\":1,\"495\":2,\"529\":1,\"552\":1,\"570\":5,\"613\":4,\"714\":2,\"715\":2,\"721\":2,\"1119\":2,\"1120\":2,\"1126\":2,\"1466\":2}}],[\"其内部原来是一个iterator迭代器\",{\"1\":{\"845\":1,\"1250\":1}}],[\"其效果相当于oldcapacity\",{\"1\":{\"831\":1,\"1236\":1}}],[\"其真实类型都是arraylist了\",{\"1\":{\"814\":1,\"1219\":1}}],[\"其次接口中有且仅有一个抽象方法的形式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"其次\",{\"1\":{\"785\":1,\"1190\":1}}],[\"其对象可以用于在程序中封装数据\",{\"0\":{\"672\":1,\"1077\":1}}],[\"其作用类似于windows里的dll文件\",{\"1\":{\"428\":1}}],[\"其主要的功能就是\",{\"1\":{\"373\":1}}],[\"其特点是\",{\"1\":{\"344\":1}}],[\"其实就是在调用第二种的键值对方法\",{\"1\":{\"908\":1,\"1313\":1}}],[\"其实就是一个泛型类\",{\"1\":{\"749\":1,\"1154\":1}}],[\"其实就是一个接口\",{\"1\":{\"294\":1}}],[\"其实我们完全可以这样\",{\"1\":{\"789\":1,\"1194\":1}}],[\"其实是毫无意义的\",{\"1\":{\"755\":1,\"1160\":1}}],[\"其实springmvc已经替我们想到了\",{\"1\":{\"572\":1}}],[\"其实session在服务端是有一个唯一的标识\",{\"1\":{\"334\":1}}],[\"其实request已经这样做好了\",{\"1\":{\"308\":1}}],[\"其生命周期由容器来管理\",{\"1\":{\"297\":1}}],[\"其生态也非常广泛\",{\"1\":{\"110\":1}}],[\"其范围不超\",{\"1\":{\"240\":1}}],[\"其余均会失败\",{\"1\":{\"211\":1}}],[\"其所做的修改必须永久保存到数据库中\",{\"1\":{\"151\":1}}],[\"其中重要的四个接口function\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"其中最常见的是utf\",{\"1\":{\"986\":1,\"1391\":1}}],[\"其中一个\",{\"1\":{\"819\":1,\"1224\":1}}],[\"其中s1是在堆内存中的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"其中sectionname是方括号内的文本\",{\"1\":{\"413\":1}}],[\"其中u表示user所属用户权限\",{\"1\":{\"465\":1}}],[\"其中既可以定义html\",{\"1\":{\"317\":1}}],[\"其中http\",{\"1\":{\"288\":1}}],[\"其中get表示请求方式\",{\"1\":{\"287\":1}}],[\"其中我们主要关注的有\",{\"1\":{\"142\":1}}],[\"其中我使用网关来做统一请求\",{\"1\":{\"121\":1}}],[\"其中有api开放平台\",{\"1\":{\"121\":1}}],[\"其中\",{\"1\":{\"112\":1,\"168\":1,\"325\":1}}],[\"其读写性能非常高\",{\"1\":{\"110\":1}}],[\"其他方法又回调方法自己\",{\"1\":{\"973\":1,\"1378\":1}}],[\"其他collection的功能list也继承了\",{\"1\":{\"861\":1,\"1266\":1}}],[\"其他命令\",{\"1\":{\"462\":1}}],[\"其他用户权限\",{\"1\":{\"441\":1}}],[\"其他都一样\",{\"1\":{\"308\":1}}],[\"其他类型\",{\"1\":{\"281\":1}}],[\"其他线程才可以进来执行\",{\"1\":{\"933\":1,\"937\":1,\"1338\":1,\"1342\":1}}],[\"其他线程进入fifo队列中等待\",{\"1\":{\"213\":1}}],[\"其他线程调用notify\",{\"1\":{\"204\":1}}],[\"其他事务就不能再获取该行的其他锁\",{\"1\":{\"154\":1}}],[\"其他的记录丢弃\",{\"1\":{\"148\":1}}],[\"其他客户端的\",{\"1\":{\"117\":1}}],[\"其他开发者可通过\",{\"1\":{\"103\":1}}],[\"其他本地项目引入\",{\"1\":{\"103\":1}}],[\"由实现类决定操作哪些信息\",{\"1\":{\"875\":1,\"1280\":1}}],[\"由名称就知道该动作了吧\",{\"1\":{\"436\":1}}],[\"由\",{\"1\":{\"396\":1}}],[\"由小到大\",{\"1\":{\"322\":1,\"702\":1,\"890\":1,\"1107\":1,\"1295\":1}}],[\"由jsp容器\",{\"1\":{\"319\":2}}],[\"由服务器关闭\",{\"1\":{\"314\":1}}],[\"由容器创建servlet对象\",{\"1\":{\"297\":1}}],[\"由maven团队维护的全球唯一的仓库\",{\"1\":{\"250\":1}}],[\"由第三方组织实现此接口\",{\"1\":{\"237\":1}}],[\"由注册中心来保存这些信息\",{\"1\":{\"172\":1}}],[\"由操作系统决定何时将缓冲区内容写入aof文件\",{\"1\":{\"128\":1}}],[\"由于cpu切换的速度很快\",{\"1\":{\"959\":1,\"1364\":1}}],[\"由于cookie是保存在客户端\",{\"1\":{\"333\":1}}],[\"由于我们配置了环境变量export\",{\"1\":{\"389\":1}}],[\"由于配置了环境变量path\",{\"1\":{\"386\":2}}],[\"由于mysql并不在centos的官方仓库中\",{\"1\":{\"346\":1}}],[\"由于mysql5\",{\"1\":{\"344\":1}}],[\"由于jsp页面内\",{\"1\":{\"321\":1}}],[\"由于解决post方式请求参数乱码可以直接通过设置字符输入流的编码进行解决\",{\"1\":{\"309\":1}}],[\"由于get请求底层获取参数为getquerystring\",{\"1\":{\"309\":1}}],[\"由于垃圾回收器是一个优先级很低的线程\",{\"1\":{\"222\":1}}],[\"由于bean的生命周期中构造函数是第一个执行的\",{\"1\":{\"165\":1}}],[\"由于该sql语句查询的是\",{\"1\":{\"146\":1}}],[\"由于name添加了索引\",{\"1\":{\"146\":1}}],[\"由于脑裂是由网络等原因造成的\",{\"1\":{\"137\":1}}],[\"由于\",{\"1\":{\"113\":1,\"139\":1}}],[\"由于基于内存\",{\"1\":{\"110\":1}}],[\"由网关给请求加上特定的请求头参数\",{\"1\":{\"108\":1}}],[\"v>\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"v等\",{\"1\":{\"870\":1,\"1275\":1}}],[\"verifytool\",{\"1\":{\"678\":2,\"679\":2,\"1083\":2,\"1084\":2}}],[\"version>\",{\"1\":{\"258\":4,\"259\":1,\"264\":8,\"293\":1,\"295\":1,\"315\":1,\"318\":1,\"323\":2,\"544\":1,\"557\":4,\"566\":1,\"570\":13,\"615\":11}}],[\"version=7\",{\"1\":{\"399\":1}}],[\"version=\",{\"1\":{\"258\":1,\"264\":4,\"267\":1,\"270\":1,\"386\":4,\"557\":1,\"570\":1,\"601\":1,\"615\":1,\"829\":2,\"1234\":2}}],[\"version\",{\"0\":{\"553\":1},\"1\":{\"256\":1,\"258\":1,\"353\":2,\"386\":4,\"494\":1,\"495\":1,\"496\":3}}],[\"vm\",{\"1\":{\"456\":3,\"458\":2,\"459\":5,\"460\":2,\"474\":1,\"476\":4,\"485\":3}}],[\"vbird\",{\"1\":{\"435\":13}}],[\"vladishev\",{\"1\":{\"396\":1}}],[\"vd\",{\"1\":{\"281\":1,\"888\":1,\"1293\":1}}],[\"virtual\",{\"1\":{\"495\":1}}],[\"vi\",{\"0\":{\"431\":1,\"435\":1},\"1\":{\"431\":1,\"432\":1,\"436\":1,\"437\":5}}],[\"vi和vim快速入门\",{\"0\":{\"429\":1}}],[\"viminfo\",{\"1\":{\"460\":2}}],[\"vim\",{\"0\":{\"431\":1,\"435\":1},\"1\":{\"356\":1,\"358\":1,\"362\":2,\"365\":1,\"371\":1,\"375\":4,\"409\":1,\"419\":1,\"431\":1,\"432\":1,\"437\":2,\"496\":20}}],[\"video\",{\"1\":{\"281\":1,\"855\":1,\"888\":1,\"1260\":1,\"1293\":1}}],[\"viewresolver\",{\"1\":{\"166\":1,\"167\":1}}],[\"view\",{\"1\":{\"166\":6,\"325\":1}}],[\"volumes\",{\"1\":{\"494\":3}}],[\"volatile\",{\"1\":{\"130\":3,\"212\":1}}],[\"void\",{\"1\":{\"199\":6,\"205\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"244\":6,\"245\":4,\"264\":6,\"272\":1,\"275\":2,\"277\":1,\"279\":1,\"280\":1,\"295\":1,\"298\":3,\"299\":2,\"307\":2,\"308\":2,\"309\":1,\"310\":6,\"312\":2,\"313\":4,\"314\":2,\"315\":2,\"320\":1,\"329\":4,\"333\":6,\"338\":3,\"544\":1,\"570\":5,\"571\":3,\"579\":5,\"613\":3,\"615\":10,\"628\":1,\"629\":6,\"635\":2,\"636\":2,\"637\":2,\"638\":2,\"641\":6,\"652\":1,\"654\":3,\"660\":2,\"662\":3,\"663\":1,\"664\":1,\"672\":4,\"678\":1,\"704\":1,\"708\":2,\"709\":4,\"714\":4,\"715\":5,\"721\":8,\"726\":1,\"732\":7,\"737\":1,\"738\":10,\"743\":6,\"747\":2,\"749\":1,\"750\":1,\"751\":10,\"755\":4,\"756\":4,\"759\":1,\"763\":2,\"769\":3,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":3,\"786\":1,\"793\":7,\"794\":2,\"802\":1,\"804\":6,\"806\":2,\"808\":3,\"809\":1,\"812\":6,\"814\":1,\"816\":9,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"831\":3,\"839\":1,\"840\":1,\"842\":2,\"844\":1,\"845\":1,\"846\":2,\"847\":1,\"861\":2,\"865\":4,\"866\":1,\"871\":3,\"872\":1,\"873\":2,\"875\":9,\"878\":2,\"881\":1,\"887\":1,\"888\":4,\"891\":4,\"893\":2,\"895\":1,\"896\":6,\"897\":5,\"903\":1,\"904\":2,\"906\":1,\"907\":1,\"908\":3,\"909\":1,\"914\":2,\"918\":2,\"920\":3,\"921\":1,\"924\":2,\"925\":2,\"926\":4,\"930\":5,\"937\":3,\"939\":12,\"948\":4,\"949\":1,\"951\":1,\"954\":3,\"956\":3,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":5,\"976\":1,\"978\":1,\"979\":1,\"981\":2,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":5,\"1011\":2,\"1012\":2,\"1014\":3,\"1018\":4,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1024\":4,\"1026\":1,\"1027\":5,\"1028\":4,\"1029\":4,\"1033\":1,\"1034\":6,\"1040\":2,\"1041\":2,\"1042\":2,\"1043\":2,\"1046\":6,\"1057\":1,\"1059\":3,\"1065\":2,\"1067\":3,\"1068\":1,\"1069\":1,\"1077\":4,\"1083\":1,\"1109\":1,\"1113\":2,\"1114\":4,\"1119\":4,\"1120\":5,\"1126\":8,\"1131\":1,\"1137\":7,\"1142\":1,\"1143\":10,\"1148\":6,\"1152\":2,\"1154\":1,\"1155\":1,\"1156\":10,\"1160\":4,\"1161\":4,\"1164\":1,\"1168\":2,\"1174\":3,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":3,\"1191\":1,\"1198\":7,\"1199\":2,\"1207\":1,\"1209\":6,\"1211\":2,\"1213\":3,\"1214\":1,\"1217\":6,\"1219\":1,\"1221\":9,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1236\":3,\"1244\":1,\"1245\":1,\"1247\":2,\"1249\":1,\"1250\":1,\"1251\":2,\"1252\":1,\"1266\":2,\"1270\":4,\"1271\":1,\"1276\":3,\"1277\":1,\"1278\":2,\"1280\":9,\"1283\":2,\"1286\":1,\"1292\":1,\"1293\":4,\"1296\":4,\"1298\":2,\"1300\":1,\"1301\":6,\"1302\":5,\"1308\":1,\"1309\":2,\"1311\":1,\"1312\":1,\"1313\":3,\"1314\":1,\"1319\":2,\"1323\":2,\"1325\":3,\"1326\":1,\"1329\":2,\"1330\":2,\"1331\":4,\"1335\":5,\"1342\":3,\"1344\":12,\"1353\":4,\"1354\":1,\"1356\":1,\"1359\":3,\"1361\":3,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":5,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":2,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":5,\"1416\":2,\"1417\":2,\"1419\":3,\"1433\":1,\"1449\":4,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":4,\"1468\":4,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1,\"1474\":4,\"1476\":1,\"1477\":5,\"1478\":4,\"1479\":4}}],[\"val\",{\"1\":{\"772\":1,\"1177\":1}}],[\"validate\",{\"1\":{\"350\":2,\"398\":2}}],[\"validationquery\",{\"1\":{\"240\":1}}],[\"value`\",{\"1\":{\"831\":1,\"1236\":1}}],[\"valueof\",{\"1\":{\"707\":1,\"772\":1,\"773\":1,\"774\":4,\"775\":1,\"790\":2,\"1112\":1,\"1177\":1,\"1178\":1,\"1179\":4,\"1180\":1,\"1195\":2}}],[\"value>\",{\"1\":{\"386\":26,\"389\":5,\"601\":10}}],[\"value数据库\",{\"1\":{\"359\":1}}],[\"value=\",{\"1\":{\"264\":4,\"267\":8,\"601\":4}}],[\"valuestream\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"values\",{\"1\":{\"243\":1,\"245\":1,\"275\":1,\"276\":1,\"308\":2,\"514\":4,\"525\":4,\"526\":2,\"570\":1,\"613\":1,\"707\":1,\"822\":1,\"904\":3,\"1021\":1,\"1112\":1,\"1227\":1,\"1309\":3,\"1471\":1}}],[\"value放入链表或红黑树中\",{\"1\":{\"188\":1}}],[\"value\",{\"1\":{\"111\":1,\"163\":1,\"222\":3,\"287\":1,\"288\":1,\"299\":1,\"308\":2,\"312\":1,\"329\":3,\"331\":3,\"404\":1,\"552\":3,\"570\":6,\"613\":1,\"615\":5,\"758\":4,\"784\":1,\"809\":1,\"816\":2,\"819\":1,\"831\":2,\"835\":1,\"904\":2,\"907\":1,\"952\":2,\"1163\":4,\"1189\":1,\"1214\":1,\"1221\":2,\"1224\":1,\"1236\":2,\"1240\":1,\"1309\":2,\"1312\":1,\"1357\":2}}],[\"var=\",{\"1\":{\"323\":1}}],[\"varchar\",{\"1\":{\"243\":3,\"494\":2,\"510\":2,\"511\":3,\"525\":1,\"526\":3,\"529\":4}}],[\"var\",{\"1\":{\"141\":1,\"211\":1,\"323\":1,\"347\":2,\"350\":2,\"398\":1,\"428\":1,\"494\":1,\"496\":6}}],[\"v3\",{\"1\":{\"128\":2}}],[\"v2\",{\"1\":{\"128\":2,\"389\":1,\"758\":2,\"1163\":2}}],[\"v10\",{\"1\":{\"354\":2}}],[\"v1\",{\"1\":{\"128\":1,\"494\":2,\"758\":2,\"1163\":2}}],[\"v\",{\"1\":{\"110\":1,\"211\":2,\"325\":1,\"490\":2,\"495\":2,\"496\":27,\"819\":3,\"904\":4,\"908\":1,\"1029\":1,\"1224\":3,\"1309\":4,\"1313\":1,\"1479\":1}}],[\"vue\",{\"1\":{\"92\":1,\"747\":1,\"842\":1,\"1152\":1,\"1247\":1}}],[\"k+\",{\"1\":{\"908\":1,\"1313\":1}}],[\"kvstream\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"k<name>\",{\"1\":{\"819\":1,\"1224\":1}}],[\"kibswap\",{\"1\":{\"481\":1}}],[\"kib\",{\"1\":{\"481\":3}}],[\"kill\",{\"1\":{\"479\":1,\"496\":3}}],[\"kind\",{\"1\":{\"386\":4}}],[\"kmg表示大小单位\",{\"1\":{\"453\":1}}],[\"kmg\",{\"1\":{\"453\":1}}],[\"kafka的绑定监听的地址\",{\"1\":{\"377\":3}}],[\"kafka的运行依赖jdk环境和zookeeper请确保已经有了jdk环境和zookeeper\",{\"1\":{\"377\":1}}],[\"kafka\",{\"1\":{\"377\":25,\"378\":6}}],[\"kafka多数都是运行在分布式\",{\"1\":{\"376\":1}}],[\"kafka多用于大数据体系\",{\"1\":{\"376\":1}}],[\"kafka也是消息队列\",{\"1\":{\"376\":1}}],[\"kafka是一款分布式的\",{\"1\":{\"376\":1}}],[\"k2\",{\"1\":{\"128\":2}}],[\"k1的值就是v3了\",{\"1\":{\"128\":1}}],[\"k1\",{\"1\":{\"128\":3}}],[\"keepalive\",{\"1\":{\"240\":1,\"495\":4}}],[\"keepalivetime\",{\"1\":{\"112\":1,\"219\":2,\"944\":2,\"948\":1,\"949\":1,\"1349\":2,\"1353\":1,\"1354\":1}}],[\"key+\",{\"1\":{\"907\":1,\"1312\":1}}],[\"key3\",{\"1\":{\"900\":1,\"1305\":1}}],[\"key2\",{\"1\":{\"900\":1,\"1305\":1}}],[\"key1\",{\"1\":{\"900\":1,\"1305\":1}}],[\"key=value\",{\"1\":{\"899\":1,\"1304\":1}}],[\"key=\",{\"1\":{\"601\":8}}],[\"keygen\",{\"1\":{\"369\":1}}],[\"keyproperty=\",{\"1\":{\"276\":2}}],[\"keystream\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"keyset\",{\"1\":{\"308\":1,\"822\":1,\"904\":1,\"906\":3,\"1021\":1,\"1227\":1,\"1309\":1,\"1311\":3,\"1471\":1}}],[\"keys\",{\"1\":{\"142\":1,\"356\":2,\"358\":4,\"904\":2,\"1309\":2}}],[\"key\",{\"1\":{\"111\":1,\"113\":1,\"114\":1,\"142\":2,\"222\":4,\"243\":1,\"308\":3,\"310\":2,\"329\":1,\"346\":1,\"349\":1,\"356\":2,\"358\":10,\"362\":2,\"409\":1,\"494\":2,\"495\":2,\"525\":3,\"526\":6,\"529\":8,\"793\":1,\"835\":1,\"904\":4,\"907\":1,\"1198\":1,\"1240\":1,\"1309\":4,\"1312\":1}}],[\"kb\",{\"1\":{\"111\":1}}],[\"k\",{\"1\":{\"110\":1,\"435\":1,\"440\":1,\"453\":1,\"870\":1,\"897\":2,\"904\":1,\"908\":1,\"1275\":1,\"1302\":2,\"1309\":1,\"1313\":1}}],[\"knife4j\",{\"0\":{\"100\":2,\"120\":1},\"1\":{\"100\":1}}],[\"毫秒后\",{\"1\":{\"240\":1}}],[\"毫秒等\",{\"1\":{\"219\":1}}],[\"毫秒\",{\"1\":{\"109\":1}}],[\"按字母顺序排列的字符\",{\"1\":{\"819\":2,\"1224\":2}}],[\"按q或者ctrl+c退出\",{\"1\":{\"481\":1}}],[\"按键\",{\"1\":{\"435\":3}}],[\"按键说明\",{\"0\":{\"435\":1}}],[\"按下小数点\",{\"1\":{\"435\":1}}],[\"按下\",{\"1\":{\"435\":1}}],[\"按下数字后再按空格键\",{\"1\":{\"435\":1}}],[\"按下动作即可\",{\"1\":{\"435\":1}}],[\"按下i\",{\"1\":{\"432\":1}}],[\"按esc键可随时退出底线命令模式\",{\"1\":{\"434\":1}}],[\"按具体情况填写即可\",{\"1\":{\"405\":1}}],[\"按照行读取消息\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"按照行读\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"按照流中的数据最小单位分\",{\"1\":{\"990\":1,\"1395\":1}}],[\"按照流的方向分\",{\"1\":{\"990\":1,\"1395\":1}}],[\"按照计划处理timertask任务\",{\"1\":{\"954\":1,\"1359\":1}}],[\"按照首字符编号从小到大排序\",{\"1\":{\"891\":1,\"1296\":1}}],[\"按照年龄比较\",{\"1\":{\"891\":1,\"1296\":1}}],[\"按照年龄升序排序\",{\"1\":{\"519\":1}}],[\"按照元素大小默认升序\",{\"1\":{\"890\":1,\"1295\":1}}],[\"按照某种规则算出来的int类型的数值\",{\"1\":{\"885\":1,\"1290\":1}}],[\"按照参数类型取出一个构造器\",{\"1\":{\"804\":1,\"806\":1,\"1209\":1,\"1211\":1}}],[\"按照规范建议\",{\"1\":{\"637\":1,\"1042\":1}}],[\"按照英语成绩升序排列\",{\"1\":{\"519\":1}}],[\"按照文件大小查找文件\",{\"1\":{\"453\":1}}],[\"按照utf\",{\"1\":{\"309\":2}}],[\"按照快速启动文档跑通了基础的\",{\"1\":{\"107\":1}}],[\"按标签检索用户\",{\"1\":{\"109\":1}}],[\"伙伴匹配系统\",{\"0\":{\"109\":1}}],[\"篝火\",{\"0\":{\"109\":1}}],[\"或操作\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"或是黑色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"或m通过p\",{\"1\":{\"819\":1,\"1224\":1}}],[\"或使用bigdecimal的valueof\",{\"1\":{\"773\":1,\"1178\":1}}],[\"或功能键\",{\"1\":{\"435\":2}}],[\"或cd\",{\"1\":{\"417\":1}}],[\"或密钥\",{\"1\":{\"373\":1}}],[\"或ip地址访问tomcat的web页面\",{\"1\":{\"354\":1}}],[\"或者值等于60\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"或者移除值等于60的元素\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"或者高级流\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"或者周期调用的技术\",{\"1\":{\"952\":1,\"1357\":1}}],[\"或者定期执行任务\",{\"1\":{\"951\":1,\"1356\":1}}],[\"或者键值对\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"或者基类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"或者上面两块代码更改为下面一块\",{\"1\":{\"579\":1}}],[\"或者退出某些程序的专属页面例如python\",{\"1\":{\"469\":1}}],[\"或者是\",{\"1\":{\"437\":1}}],[\"或者自行编译的方式安装\",{\"1\":{\"412\":1}}],[\"或者ssh\",{\"1\":{\"368\":1}}],[\"或者直接\",{\"1\":{\"365\":1}}],[\"或者通过快捷键退出\",{\"1\":{\"347\":1,\"350\":1}}],[\"或者也可以使用\",{\"1\":{\"207\":1}}],[\"或者\",{\"1\":{\"207\":1,\"240\":1,\"281\":1,\"302\":3,\"402\":1,\"535\":1}}],[\"或者没有合适的唯一索引\",{\"1\":{\"145\":1}}],[\"或者锁的自动超时也会导致锁的释放\",{\"1\":{\"117\":1}}],[\"或者从\",{\"1\":{\"104\":1}}],[\"或\",{\"1\":{\"112\":1,\"273\":1,\"356\":1,\"373\":2,\"409\":1,\"435\":7,\"436\":2,\"756\":1,\"1161\":1}}],[\"或其他识别请求的方式\",{\"1\":{\"108\":1}}],[\"来转移数据\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"来取钱\",{\"1\":{\"939\":1,\"1344\":1}}],[\"来找到具体case值\",{\"1\":{\"653\":1,\"1058\":1}}],[\"来充当ioc思想的外部\",{\"1\":{\"582\":1}}],[\"来完成kafka集群的安装部署\",{\"1\":{\"376\":1}}],[\"来确保系统的安全稳定\",{\"1\":{\"371\":1}}],[\"来实现一次会话的多次请求间数据共享功能\",{\"1\":{\"333\":1}}],[\"来实现自动化镜像构建及容器部署\",{\"0\":{\"119\":1}}],[\"来解决这些问题\",{\"1\":{\"286\":1}}],[\"来解决缓存雪崩问题\",{\"1\":{\"115\":1}}],[\"来获取值\",{\"1\":{\"282\":1}}],[\"来修改\",{\"1\":{\"282\":1}}],[\"来拦截被authcheck注解标注的类\",{\"1\":{\"160\":1}}],[\"来存储线程信息和重入次数\",{\"1\":{\"133\":1}}],[\"来存储用户信息后\",{\"1\":{\"111\":1}}],[\"来自xxxx\",{\"1\":{\"121\":1}}],[\"来操作\",{\"1\":{\"114\":1}}],[\"来代替\",{\"1\":{\"110\":1}}],[\"来源英语单词switch\",{\"1\":{\"461\":1}}],[\"来源\",{\"1\":{\"108\":1}}],[\"来到了终极试炼的关卡\",{\"1\":{\"76\":1}}],[\"来到了最终的挑战\",{\"1\":{\"26\":1}}],[\"来到了一个隐藏着学习之门的地方\",{\"1\":{\"2\":1}}],[\"个字符距离\",{\"1\":{\"435\":1}}],[\"个字符\",{\"1\":{\"435\":3}}],[\"个字符串\",{\"1\":{\"111\":1}}],[\"个元素进入\",{\"1\":{\"831\":1,\"1236\":1}}],[\"个元素时\",{\"1\":{\"831\":1,\"1236\":1}}],[\"个元素都要执行向后位\",{\"1\":{\"187\":1}}],[\"个元素之后的\",{\"1\":{\"187\":1}}],[\"个哈希槽\",{\"1\":{\"138\":1}}],[\"个人介绍\",{\"0\":{\"121\":1}}],[\"个关键概念\",{\"1\":{\"108\":1}}],[\"个子项目\",{\"1\":{\"95\":1,\"97\":1}}],[\"尤其是在微服务项目中\",{\"1\":{\"107\":1}}],[\"业务\",{\"1\":{\"928\":1,\"1333\":1}}],[\"业务逻辑层\",{\"1\":{\"326\":2}}],[\"业务逻辑层和数据访问层\",{\"1\":{\"325\":1}}],[\"业务模型\",{\"1\":{\"325\":1}}],[\"业务层\",{\"1\":{\"107\":1,\"262\":2}}],[\"业务封装对象等\",{\"1\":{\"107\":1}}],[\"业务系统一样编写\",{\"1\":{\"103\":1}}],[\"模糊查询\",{\"1\":{\"518\":1}}],[\"模式下\",{\"1\":{\"376\":1}}],[\"模式运行的\",{\"1\":{\"363\":1}}],[\"模拟bs架构\",{\"1\":{\"1466\":2}}],[\"模拟\",{\"0\":{\"1466\":1}}],[\"模拟取钱案例\",{\"1\":{\"930\":1,\"1335\":1}}],[\"模拟线程安全问题\",{\"0\":{\"930\":1,\"1335\":1}}],[\"模拟arraylist集合自定义一个myarraylist集合\",{\"1\":{\"871\":1,\"1276\":1}}],[\"模拟来自web的数据\",{\"1\":{\"245\":1}}],[\"模拟接口\",{\"1\":{\"95\":1}}],[\"模型\",{\"1\":{\"139\":1}}],[\"模型层\",{\"1\":{\"107\":1}}],[\"再继续执行after定义的操作\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"再执行after方法\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"再再再简化\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"再简化\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"再进一步简化\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"再进行强制类型转换\",{\"1\":{\"732\":1,\"1137\":1}}],[\"再把后面的数据一个一个移过来\",{\"1\":{\"852\":1,\"1257\":1}}],[\"再把对象的地址交给c1实例存储\",{\"1\":{\"663\":1,\"1068\":1}}],[\"再学生集合中找出学生对象\",{\"1\":{\"751\":1,\"1156\":1}}],[\"再打开一个新的终端页面\",{\"1\":{\"378\":1}}],[\"再次启动服务器后\",{\"1\":{\"335\":1}}],[\"再次学习\",{\"0\":{\"70\":1}}],[\"再通过\",{\"1\":{\"309\":1}}],[\"再通过hash值确定hashentry数组中的下标存储数据\",{\"1\":{\"217\":1}}],[\"再尝试sql注入\",{\"1\":{\"233\":1}}],[\"再定义一个方法并且使用\",{\"1\":{\"160\":1}}],[\"再用子查询来过滤\",{\"1\":{\"148\":1}}],[\"再启动服务调用者项目\",{\"1\":{\"107\":1}}],[\"容纳世界上大多数国家的所有常见文字和符号\",{\"1\":{\"986\":1,\"1391\":1}}],[\"容错率高\",{\"1\":{\"789\":1,\"1194\":1}}],[\"容错处理等\",{\"1\":{\"106\":1}}],[\"容量小的数据类型可以自动转换为容量大的数据类型\",{\"1\":{\"651\":1,\"1056\":1}}],[\"容器总结\",{\"0\":{\"603\":1}}],[\"容器\",{\"1\":{\"351\":1}}],[\"容器会释放这个servlet实例\",{\"1\":{\"297\":1}}],[\"容器会调用servlet实例的\",{\"1\":{\"297\":1}}],[\"容器将调用servlet的init\",{\"1\":{\"297\":1}}],[\"容器中只有唯一的\",{\"1\":{\"158\":1,\"159\":1}}],[\"容器的基本命令的使用\",{\"1\":{\"92\":1}}],[\"服务名\",{\"1\":{\"358\":1,\"360\":1,\"474\":1}}],[\"服务端的地址\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"服务端的端口号\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"服务端的端口\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"服务端的ip地址\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"服务端\",{\"0\":{\"1459\":1},\"1\":{\"1449\":1}}],[\"服务端会话跟踪技术\",{\"1\":{\"327\":1,\"333\":1}}],[\"服务端使用\",{\"1\":{\"313\":1}}],[\"服务端抛出异常\",{\"1\":{\"288\":1}}],[\"服务终止\",{\"1\":{\"297\":1}}],[\"服务器将最后的数据处理完毕\",{\"1\":{\"1442\":1}}],[\"服务器向客户端返回一个响应\",{\"1\":{\"1442\":1}}],[\"服务器向客户端返回了一个响应\",{\"1\":{\"1441\":1}}],[\"服务器发响应\",{\"1\":{\"1441\":1}}],[\"服务器收请求\",{\"1\":{\"1441\":1}}],[\"服务器的历史命令\",{\"0\":{\"496\":1}}],[\"服务器\",{\"1\":{\"397\":1}}],[\"服务器性能\",{\"1\":{\"336\":1}}],[\"服务器重启后\",{\"1\":{\"335\":1}}],[\"服务器都会视为新的请求\",{\"1\":{\"327\":1}}],[\"服务器需要识别多次请求是否来自于同一浏览器\",{\"1\":{\"327\":1}}],[\"服务器内部\",{\"1\":{\"313\":1}}],[\"服务器怎么知道servlet中一定有service方法\",{\"1\":{\"296\":1}}],[\"服务器端错误\",{\"1\":{\"288\":1}}],[\"服务列表更新更及时\",{\"1\":{\"173\":1}}],[\"服务提供者会每隔一段时间向注册中心发送心跳\",{\"1\":{\"172\":1}}],[\"服务提供者需要把自己的信息注册到注册中心中\",{\"1\":{\"172\":1}}],[\"服务监控\",{\"1\":{\"172\":1}}],[\"服务发现\",{\"1\":{\"172\":1}}],[\"服务注册\",{\"1\":{\"172\":1}}],[\"服务注册和发现是什么意思\",{\"0\":{\"172\":1}}],[\"服务保护\",{\"1\":{\"171\":1}}],[\"服务宕机可用来同步数据\",{\"1\":{\"153\":1}}],[\"服务治理\",{\"1\":{\"106\":1}}],[\"服务确定请求来源及合法性\",{\"1\":{\"102\":1,\"108\":1}}],[\"支持一切文件\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"支持相对路径\",{\"1\":{\"965\":1,\"1370\":1}}],[\"支持绝对路径\",{\"1\":{\"965\":1,\"1370\":1}}],[\"支持链式编程\",{\"1\":{\"763\":1,\"1168\":1}}],[\"支持keep\",{\"1\":{\"495\":1}}],[\"支持离线计算和实时计算\",{\"1\":{\"391\":1,\"394\":1}}],[\"支持海量数据存储的\",{\"1\":{\"388\":1}}],[\"支持网络交互的\",{\"1\":{\"359\":1}}],[\"支持servlet\",{\"1\":{\"290\":1,\"291\":1}}],[\"支持别名\",{\"1\":{\"270\":1}}],[\"支持多个条件变量\",{\"1\":{\"214\":1}}],[\"支持多种数据结构\",{\"1\":{\"110\":1}}],[\"支持多种通信协议\",{\"1\":{\"106\":1}}],[\"支持可重入锁\",{\"1\":{\"117\":1}}],[\"支持持久数据\",{\"1\":{\"110\":1}}],[\"支持\",{\"1\":{\"107\":1,\"187\":1}}],[\"支持使用\",{\"1\":{\"99\":1}}],[\"具有出色的性能表现\",{\"1\":{\"106\":1}}],[\"具体操作\",{\"1\":{\"1453\":1,\"1454\":1}}],[\"具体返回内容由调用者决定\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"具体调用了ensurecapacityinternal\",{\"1\":{\"831\":1,\"1236\":1}}],[\"具体实现由子类完成\",{\"1\":{\"709\":1,\"1114\":1}}],[\"具体配置即可\",{\"1\":{\"405\":1}}],[\"具体流程\",{\"1\":{\"164\":1}}],[\"具体来说\",{\"1\":{\"139\":1}}],[\"具体方法是使用redis的setnx关键字来实现分布式锁\",{\"1\":{\"125\":1}}],[\"具体的目录结构\",{\"0\":{\"428\":1}}],[\"具体的流程\",{\"1\":{\"210\":1}}],[\"具体的实现原理如下\",{\"1\":{\"117\":1}}],[\"具体的实现方式\",{\"1\":{\"114\":1}}],[\"具体的优势如下\",{\"1\":{\"106\":1}}],[\"具体请见这篇文章\",{\"1\":{\"105\":1}}],[\"生产环境\",{\"1\":{\"620\":1}}],[\"生产中不要这样\",{\"1\":{\"398\":1}}],[\"生产者生产的速度相对于消费者消费的速度过快\",{\"1\":{\"179\":1}}],[\"生产者端发送消息使用哈希取余算法\",{\"1\":{\"177\":1}}],[\"生效环境变量\",{\"1\":{\"353\":1}}],[\"生存时间内没有新任务\",{\"1\":{\"219\":1}}],[\"生存时间\",{\"1\":{\"219\":1}}],[\"生命周期还没走完\",{\"1\":{\"164\":1}}],[\"生命周期还没有走完\",{\"1\":{\"164\":1}}],[\"生命周期\",{\"1\":{\"163\":2}}],[\"生态系统\",{\"1\":{\"106\":1}}],[\"生态好\",{\"1\":{\"106\":1}}],[\"生成密钥对\",{\"1\":{\"101\":1}}],[\"生成的接口文档不仅能够分组查看请求参数和响应\",{\"1\":{\"100\":1,\"120\":1}}],[\"功能非常多\",{\"1\":{\"566\":1}}],[\"功能进程无需太多1个足够\",{\"1\":{\"381\":2}}],[\"功能丰富\",{\"1\":{\"344\":1}}],[\"功能\",{\"1\":{\"237\":1,\"521\":1}}],[\"功能层面\",{\"1\":{\"215\":1}}],[\"功能强大\",{\"1\":{\"237\":1}}],[\"功能强\",{\"1\":{\"106\":1}}],[\"功能代码\",{\"1\":{\"103\":1}}],[\"简单的java字符类型\",{\"1\":{\"819\":1,\"1224\":1}}],[\"简单类\",{\"1\":{\"819\":1,\"1224\":1}}],[\"简单日期格式化类\",{\"0\":{\"778\":1,\"1183\":1}}],[\"简单测试使用hbase\",{\"1\":{\"389\":1}}],[\"简单来说在添加第一个元素之前先进行扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"简单来说\",{\"1\":{\"351\":1}}],[\"简单来说就是性能高\",{\"1\":{\"106\":1}}],[\"简单\",{\"1\":{\"344\":1}}],[\"简化函数式接口的匿名内部类的写法\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"简化\",{\"1\":{\"823\":1,\"846\":1,\"920\":2,\"1018\":2,\"1019\":1,\"1022\":1,\"1228\":1,\"1251\":1,\"1325\":2,\"1468\":2,\"1469\":1,\"1472\":1}}],[\"简化开发\",{\"1\":{\"317\":1,\"319\":1}}],[\"简化方式完成重定向\",{\"1\":{\"313\":1}}],[\"简化后期执行sql\",{\"1\":{\"265\":1}}],[\"简介递归\",{\"1\":{\"973\":1,\"1378\":1}}],[\"简介\",{\"0\":{\"236\":1,\"344\":1,\"351\":1,\"355\":1,\"357\":1,\"359\":1,\"361\":1,\"368\":1,\"374\":1,\"376\":1,\"379\":1,\"388\":1,\"391\":1,\"394\":1,\"396\":1,\"406\":1,\"535\":1}}],[\"简历模板\",{\"0\":{\"93\":1}}],[\"轻量\",{\"1\":{\"344\":1}}],[\"轻量级锁\",{\"1\":{\"215\":1}}],[\"轻量级的开源\",{\"1\":{\"106\":1}}],[\"轻松调用接口\",{\"1\":{\"95\":1}}],[\"就关闭了资源\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"就变成了null\",{\"1\":{\"758\":1,\"1163\":1}}],[\"就进入while循环体\",{\"1\":{\"995\":1,\"1400\":1}}],[\"就进入了底线命令模式\",{\"1\":{\"434\":1}}],[\"就进行正式的内容比较啦\",{\"1\":{\"756\":1,\"1161\":1}}],[\"就近原则\",{\"0\":{\"696\":1,\"1101\":1}}],[\"就创建一个对象给静态变量\",{\"1\":{\"688\":1,\"1093\":1}}],[\"就使得代码看起来很像人的语言\",{\"1\":{\"658\":1,\"1063\":1}}],[\"就需要自定义异常类\",{\"1\":{\"638\":1,\"1043\":1}}],[\"就好了\",{\"1\":{\"435\":1}}],[\"就输入\",{\"1\":{\"435\":1}}],[\"就可以实现把stringbuilder转换为string\",{\"1\":{\"763\":1,\"1168\":1}}],[\"就可以实现使命令永久地在后台执行的功能\",{\"1\":{\"424\":1}}],[\"就可以把猫换成狗\",{\"1\":{\"732\":1,\"1137\":1}}],[\"就可以用nohup指令来运行指令\",{\"1\":{\"422\":1}}],[\"就相当于添加了一个第三方源\",{\"1\":{\"360\":1}}],[\"就相当于密码是空或者\",{\"1\":{\"233\":1}}],[\"就要来调用模型\",{\"1\":{\"325\":1}}],[\"就是一个独立的进程\",{\"1\":{\"958\":1,\"1363\":1}}],[\"就是一个类可以被多个类继承\",{\"1\":{\"690\":1,\"1095\":1}}],[\"就是在内部new了一个threadpoolexecutor给了一些参数\",{\"1\":{\"951\":1,\"1356\":1}}],[\"就是包含一个父节点\",{\"1\":{\"854\":1,\"1259\":1}}],[\"就是把stream流操作后的结果数据转回到集合或数组中去\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"就是从中间开始先比较大小然后选择是在前半段还是在后半段\",{\"1\":{\"793\":1,\"1198\":1}}],[\"就是怕我们传进去一个空值进去比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"就是传进来一个空进来\",{\"1\":{\"756\":1,\"1161\":1}}],[\"就是私有的实例方法\",{\"1\":{\"721\":1,\"1126\":1}}],[\"就是抽象类中定义的子类中必须完成的功能的具体要求\",{\"1\":{\"709\":1,\"1114\":1}}],[\"就是0或1\",{\"1\":{\"649\":1,\"1054\":1}}],[\"就是关键字不能作为名字\",{\"1\":{\"643\":1,\"1048\":1}}],[\"就是指用nohup运行命令可以使命令永久的执行下去\",{\"1\":{\"424\":1}}],[\"就是使用的ssh服务\",{\"1\":{\"368\":1}}],[\"就是\",{\"1\":{\"309\":2,\"743\":1,\"1148\":1}}],[\"就是用一个预期值和要更新的变量值进行比较\",{\"1\":{\"211\":1}}],[\"就不会再次创建对象了\",{\"1\":{\"688\":1,\"1093\":1}}],[\"就不会产生并发的问题\",{\"1\":{\"217\":1}}],[\"就不需要执行上面的命令单独启动nginx容器了\",{\"1\":{\"495\":1}}],[\"就不能被打断\",{\"1\":{\"211\":1}}],[\"就会造成内存溢出\",{\"1\":{\"996\":1,\"1401\":1}}],[\"就会被判定为内存中的\",{\"1\":{\"665\":1,\"1070\":1}}],[\"就会被视为慢查询\",{\"1\":{\"141\":1}}],[\"就会在undo\",{\"1\":{\"153\":1}}],[\"就会在\",{\"1\":{\"141\":1}}],[\"就会导致数据丢失\",{\"1\":{\"137\":1}}],[\"就会发生缓存穿透\",{\"1\":{\"124\":1}}],[\"就像大脑分裂了一样\",{\"1\":{\"137\":1}}],[\"就像本地函数调用一样\",{\"1\":{\"106\":1}}],[\"就\",{\"1\":{\"111\":1}}],[\"就能进入zabbix页面了\",{\"1\":{\"405\":1}}],[\"就能轻松整合\",{\"1\":{\"96\":1}}],[\"就能够获得丰富的知识回报\",{\"1\":{\"4\":1}}],[\"时候\",{\"1\":{\"744\":1,\"1149\":1}}],[\"时区错误\",{\"1\":{\"627\":1}}],[\"时刻\",{\"1\":{\"198\":1}}],[\"时间毫秒值\",{\"1\":{\"966\":1,\"1371\":1}}],[\"时间毫秒值怎么恢复成日期对象\",{\"1\":{\"777\":1,\"1182\":1}}],[\"时间\",{\"1\":{\"785\":1,\"786\":1,\"1190\":1,\"1191\":1}}],[\"时间字符串\",{\"1\":{\"781\":2,\"1186\":2}}],[\"时间单位\",{\"1\":{\"219\":1,\"944\":1,\"1349\":1}}],[\"时间等待time\",{\"1\":{\"203\":1}}],[\"时间段\",{\"1\":{\"198\":1}}],[\"时间复杂度为\",{\"1\":{\"187\":2}}],[\"时间复杂度就为\",{\"1\":{\"187\":1}}],[\"时间戳\",{\"1\":{\"101\":1}}],[\"时\",{\"1\":{\"105\":1,\"215\":2,\"437\":1,\"665\":1,\"781\":1,\"944\":1,\"1070\":1,\"1186\":1,\"1349\":1}}],[\"有且仅有一个抽象方法的接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"有几滴水就读几滴水\",{\"1\":{\"995\":1,\"1400\":1}}],[\"有bug\",{\"1\":{\"866\":2,\"1271\":2}}],[\"有元素就返回true并且移到下一个元素\",{\"1\":{\"844\":1,\"1249\":1}}],[\"有序\",{\"1\":{\"838\":1,\"839\":3,\"840\":2,\"860\":2,\"861\":1,\"881\":2,\"889\":1,\"892\":1,\"1243\":1,\"1244\":3,\"1245\":2,\"1265\":2,\"1266\":1,\"1286\":2,\"1294\":1,\"1297\":1}}],[\"有索引\",{\"0\":{\"838\":1,\"1243\":1},\"1\":{\"838\":1,\"839\":2,\"840\":2,\"860\":2,\"861\":1,\"892\":2,\"1243\":1,\"1244\":2,\"1245\":2,\"1265\":2,\"1266\":1,\"1297\":2}}],[\"有两种方式\",{\"1\":{\"776\":1,\"1181\":1}}],[\"有两种解决方案\",{\"1\":{\"187\":1}}],[\"有两个主要的类fileutils\",{\"1\":{\"1013\":1,\"1418\":1}}],[\"有两个\",{\"1\":{\"715\":1,\"1120\":1}}],[\"有得有失\",{\"1\":{\"710\":1,\"1115\":1}}],[\"有static关键字修饰\",{\"1\":{\"677\":1,\"1082\":1}}],[\"有static修饰\",{\"1\":{\"675\":1,\"1080\":1}}],[\"有参构造器执行\",{\"1\":{\"804\":1,\"806\":1,\"1209\":1,\"1211\":1}}],[\"有参\",{\"1\":{\"660\":1,\"1065\":1}}],[\"有三种工作模式\",{\"1\":{\"428\":1}}],[\"有时候会由于网络问题\",{\"1\":{\"422\":1}}],[\"有特殊符号\",{\"1\":{\"347\":1,\"350\":2}}],[\"有大写字母\",{\"1\":{\"347\":1,\"350\":2}}],[\"有大量的请求请求到该key\",{\"1\":{\"125\":1}}],[\"有利于组件重用\",{\"1\":{\"325\":1}}],[\"有利于分工协作\",{\"1\":{\"325\":1}}],[\"有效性和完整性\",{\"1\":{\"525\":1}}],[\"有效\",{\"1\":{\"259\":10}}],[\"有什么好处\",{\"1\":{\"912\":1,\"1317\":1}}],[\"有什么用\",{\"0\":{\"221\":1}}],[\"有什么区别\",{\"0\":{\"200\":1,\"201\":1}}],[\"有适合不同场景的实现\",{\"1\":{\"215\":1}}],[\"有状态\",{\"1\":{\"158\":1}}],[\"有一个经典的话\",{\"1\":{\"427\":1}}],[\"有一个经验值公式\",{\"1\":{\"112\":1}}],[\"有一个是trx\",{\"1\":{\"154\":1}}],[\"有哪些可能出现的常见问题\",{\"0\":{\"115\":1}}],[\"有哪些客户端\",{\"0\":{\"105\":1}}],[\"有广泛的生态系统和社区支持\",{\"1\":{\"106\":1}}],[\"有助于构建可靠的分布式系统\",{\"1\":{\"106\":1}}],[\"有的则考验主角对java\",{\"1\":{\"79\":1}}],[\"有的房间需要主角编写复杂的算法\",{\"1\":{\"79\":1}}],[\"有的房间要求主角根据给定的代码进行调试\",{\"1\":{\"79\":1}}],[\"y=\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"y=10x\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"year\",{\"1\":{\"784\":5,\"786\":2,\"1189\":5,\"1191\":2}}],[\"yes\",{\"1\":{\"128\":1}}],[\"y自动确认\",{\"1\":{\"473\":1}}],[\"y$\",{\"1\":{\"435\":1}}],[\"y0\",{\"1\":{\"435\":1}}],[\"yg\",{\"1\":{\"435\":1}}],[\"y1g\",{\"1\":{\"435\":1}}],[\"yyyy年mm月dd日\",{\"1\":{\"781\":1,\"782\":2,\"1186\":1,\"1187\":2}}],[\"yyyy\",{\"1\":{\"635\":3,\"636\":1,\"781\":1,\"966\":1,\"1040\":3,\"1041\":1,\"1186\":1,\"1371\":1}}],[\"yy\",{\"1\":{\"435\":1}}],[\"yaml版\",{\"0\":{\"620\":1}}],[\"yaml格式\",{\"0\":{\"619\":1}}],[\"yaml\",{\"1\":{\"395\":1}}],[\"yarn配置文件路径\",{\"1\":{\"386\":1}}],[\"yarn的工作角色\",{\"1\":{\"381\":1}}],[\"yarn的管理角色\",{\"1\":{\"381\":1}}],[\"yarn\",{\"1\":{\"379\":1,\"386\":18,\"392\":1,\"496\":1}}],[\"y\",{\"1\":{\"346\":1,\"349\":1,\"356\":2,\"358\":1,\"360\":2,\"362\":1,\"398\":1,\"401\":2,\"473\":1,\"476\":3,\"488\":1,\"496\":2,\"819\":1,\"1027\":1,\"1028\":2,\"1224\":1,\"1477\":1,\"1478\":2}}],[\"yun\",{\"1\":{\"496\":1}}],[\"yum需要有root权限\",{\"1\":{\"473\":1}}],[\"yum命令\",{\"0\":{\"473\":1}}],[\"yum程序所使用的程序安装包\",{\"1\":{\"360\":1}}],[\"yum程序使用的仓库配置文件\",{\"1\":{\"356\":1}}],[\"yum\",{\"1\":{\"346\":1,\"349\":1,\"356\":5,\"358\":2,\"360\":2,\"362\":4,\"398\":1,\"400\":1,\"401\":2,\"409\":2,\"473\":2,\"475\":4,\"488\":1,\"496\":15}}],[\"yum安装mysql\",{\"1\":{\"346\":1,\"349\":1,\"398\":1}}],[\"yum库\",{\"0\":{\"400\":1},\"1\":{\"346\":1,\"349\":1,\"398\":1}}],[\"yuapi\",{\"1\":{\"103\":1}}],[\"your\",{\"1\":{\"402\":1,\"404\":1}}],[\"you\",{\"1\":{\"243\":1,\"386\":8,\"402\":1,\"404\":1,\"413\":1,\"743\":1,\"1148\":1}}],[\"yml中的配置\",{\"1\":{\"494\":1}}],[\"yml的配置mysql和redis的ip地址需要写对应的服务容器的名称\",{\"1\":{\"494\":1}}],[\"yml文件压缩到test\",{\"1\":{\"491\":1}}],[\"yml\",{\"1\":{\"104\":1,\"362\":1,\"491\":1,\"494\":2,\"496\":3}}],[\"获得字节输入流对象\",{\"1\":{\"1458\":1}}],[\"获得字节输出流对象\",{\"1\":{\"1458\":1}}],[\"获得锁\",{\"1\":{\"939\":1,\"1344\":1}}],[\"获得lock锁的实现类对象\",{\"1\":{\"939\":1,\"1344\":1}}],[\"获得到a的对象后可以正常注入\",{\"1\":{\"164\":1}}],[\"获得了夺回大陆的力量\",{\"1\":{\"27\":1}}],[\"获取发送端的ip和端口\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"获取公网ip对象\",{\"1\":{\"1433\":1}}],[\"获取域名的ip对象\",{\"1\":{\"1433\":1}}],[\"获取域中存储的key为brands的数据\",{\"1\":{\"322\":1}}],[\"获取ip\",{\"1\":{\"1433\":1}}],[\"获取主机名\",{\"1\":{\"1433\":1}}],[\"获取本机ip地址\",{\"1\":{\"1433\":1}}],[\"获取本地的日期对象\",{\"1\":{\"786\":1,\"1191\":1}}],[\"获取此ip地址的主机名\",{\"1\":{\"1433\":1}}],[\"获取此刻的毫秒值\",{\"1\":{\"784\":1,\"1189\":1}}],[\"获取此刻日期对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"获取它的绝对路径\",{\"1\":{\"966\":1,\"1371\":1}}],[\"获取文件最后修改时间\",{\"1\":{\"966\":1,\"1371\":1}}],[\"获取文件大小\",{\"1\":{\"966\":1,\"996\":1,\"1371\":1,\"1401\":1}}],[\"获取文件名称\",{\"1\":{\"966\":1,\"1371\":1}}],[\"获取文件定义的时候使用的路径\",{\"1\":{\"966\":1,\"1371\":1}}],[\"获取文件信息\",{\"0\":{\"966\":1,\"1371\":1}}],[\"获取文件本身的信息\",{\"1\":{\"965\":1,\"1370\":1}}],[\"获取文本本身信息等操作\",{\"1\":{\"965\":1,\"1370\":1}}],[\"获取是谁来取钱\",{\"1\":{\"930\":1,\"937\":1,\"939\":1,\"1335\":1,\"1342\":1,\"1344\":1}}],[\"获取线程当前的名称\",{\"1\":{\"926\":1,\"1331\":1}}],[\"获取线程名称getname\",{\"1\":{\"924\":1,\"1329\":1}}],[\"获取当前目录下的所有的\",{\"1\":{\"970\":2,\"1375\":2}}],[\"获取当前线程对象currentthread\",{\"1\":{\"924\":1,\"1329\":1}}],[\"获取当前方法要求的用户权限\",{\"1\":{\"160\":1}}],[\"获取结果\",{\"1\":{\"921\":1,\"922\":1,\"1326\":1,\"1327\":1}}],[\"获取所有值的集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"获取所有参数集合\",{\"1\":{\"308\":1}}],[\"获取所有参数map集合\",{\"1\":{\"308\":1}}],[\"获取全部键的集合\",{\"1\":{\"904\":1,\"1309\":1}}],[\"获取全部的构造器\",{\"1\":{\"804\":1,\"1209\":1}}],[\"获取对象的哈希值\",{\"1\":{\"887\":1,\"1292\":1}}],[\"获取对象对应类的class对象\",{\"1\":{\"802\":1,\"1207\":1}}],[\"获取元素大小\",{\"1\":{\"842\":1,\"1247\":1}}],[\"获取默认的容量和传入参数的较大值\",{\"1\":{\"831\":1,\"1236\":1}}],[\"获取这个类的简单类名\",{\"1\":{\"816\":1,\"1221\":1}}],[\"获取add方法\",{\"1\":{\"814\":1,\"1219\":1}}],[\"获取成员方法的作用依然是在某个对象中执行此方法\",{\"1\":{\"811\":1,\"1216\":1}}],[\"获取类中的成员方法对象\",{\"1\":{\"813\":1,\"1218\":1}}],[\"获取类中成员变量对象的方法\",{\"1\":{\"809\":1,\"1214\":1}}],[\"获取类对象中的run方法\",{\"1\":{\"812\":1,\"1217\":1}}],[\"获取类对象中的私有的属性\",{\"1\":{\"808\":1,\"1213\":1}}],[\"获取类对象\",{\"1\":{\"808\":1,\"812\":2,\"1213\":1,\"1217\":2}}],[\"获取私有的有参构造器\",{\"1\":{\"808\":1,\"1213\":1}}],[\"获取一个私有的有参的构造器\",{\"1\":{\"806\":1,\"1211\":1}}],[\"获取一个当前类的代理类\",{\"1\":{\"162\":1}}],[\"获取构造器的作用依然是初始化一个对象返回\",{\"1\":{\"805\":1,\"1210\":1}}],[\"获取class类对象的三种方式\",{\"1\":{\"803\":1,\"1208\":1}}],[\"获取class类对象\",{\"1\":{\"803\":1,\"1208\":1}}],[\"获取class对象\",{\"1\":{\"802\":1,\"1207\":1}}],[\"获取class文件对象\",{\"0\":{\"802\":1,\"1207\":1}}],[\"获取cookie\",{\"1\":{\"329\":3}}],[\"获取日历信息\",{\"1\":{\"784\":1,\"1189\":1}}],[\"获取日期中的某个字段信息\",{\"1\":{\"784\":1,\"1189\":1}}],[\"获取日期对象的时间毫秒值\",{\"1\":{\"777\":1,\"1182\":1}}],[\"获取两个int值中较大的值\",{\"1\":{\"767\":1,\"1172\":1}}],[\"获取参数绝对值\",{\"1\":{\"767\":1,\"1172\":1}}],[\"获取参数后\",{\"1\":{\"309\":1}}],[\"获取集合大小\",{\"1\":{\"750\":1,\"1155\":1}}],[\"获取某个索引位置处的元素值\",{\"1\":{\"750\":1,\"1155\":1}}],[\"获取某个索引位置处的字符\",{\"1\":{\"743\":1,\"1148\":1}}],[\"获取mysql的初始密码\",{\"1\":{\"347\":1,\"350\":1}}],[\"获取每一个cookie对象\",{\"1\":{\"329\":1}}],[\"获取客户端携带的所有的cookie\",{\"1\":{\"329\":1}}],[\"获取数据之后控制器将数据交给视图\",{\"1\":{\"325\":1}}],[\"获取数据\",{\"1\":{\"322\":1,\"325\":1}}],[\"获取数据库连接池对象\",{\"1\":{\"239\":1}}],[\"获取数据库连接\",{\"1\":{\"228\":1,\"240\":1,\"245\":1}}],[\"获取response字节输出流\",{\"1\":{\"315\":1}}],[\"获取res3的数据\",{\"1\":{\"310\":1}}],[\"获取username\",{\"1\":{\"309\":1}}],[\"获取uri\",{\"1\":{\"307\":2}}],[\"获取url\",{\"1\":{\"307\":2}}],[\"获取字符串长度\",{\"1\":{\"743\":1,\"1148\":1}}],[\"获取字符输出流\",{\"1\":{\"312\":1,\"314\":1}}],[\"获取字符输入流\",{\"1\":{\"307\":2}}],[\"获取字节输出流\",{\"1\":{\"312\":1}}],[\"获取字节输入流\",{\"1\":{\"307\":2}}],[\"获取值\",{\"1\":{\"307\":2,\"310\":1,\"333\":1}}],[\"获取虚拟目录\",{\"1\":{\"307\":2}}],[\"获取请求参数\",{\"1\":{\"307\":2}}],[\"获取请求数据\",{\"1\":{\"304\":1}}],[\"获取请求方式\",{\"1\":{\"301\":1,\"307\":2}}],[\"获取session对象\",{\"1\":{\"333\":3}}],[\"获取session得到当前的用户信息和请求的路径\",{\"1\":{\"160\":1}}],[\"获取servlet信息\",{\"1\":{\"298\":1}}],[\"获取servletconfig对象\",{\"1\":{\"298\":1}}],[\"获取sqlsession\",{\"1\":{\"264\":1,\"265\":1}}],[\"获取sqlsession对象\",{\"1\":{\"264\":1}}],[\"获取sqlsessionfactory对象\",{\"1\":{\"264\":2,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1}}],[\"获取预编译对象\",{\"1\":{\"245\":1}}],[\"获取preparedstatement对象\",{\"1\":{\"233\":1}}],[\"获取执行sql的对象\",{\"1\":{\"226\":1,\"229\":3,\"231\":1,\"233\":1}}],[\"获取连接池对象\",{\"1\":{\"240\":1,\"245\":1}}],[\"获取连接\",{\"1\":{\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"237\":1,\"239\":1}}],[\"获取到锁再切换为可执行状态\",{\"1\":{\"204\":1}}],[\"获取到开发者密钥\",{\"1\":{\"104\":1}}],[\"获取时间毫秒值\",{\"1\":{\"776\":1,\"1181\":1}}],[\"获取时\",{\"1\":{\"188\":1}}],[\"获取互斥锁\",{\"1\":{\"125\":1}}],[\"获取锁的线程\",{\"1\":{\"210\":1}}],[\"获取锁成功的线程执行缓存重构\",{\"1\":{\"125\":1}}],[\"获取锁\",{\"1\":{\"117\":1,\"131\":1}}],[\"包装类可以把基本数据类型转换成字符串形式tostring\",{\"1\":{\"789\":1,\"1194\":1}}],[\"包装类的变量的默认值可以是null\",{\"1\":{\"789\":1,\"1194\":1}}],[\"包装类的特有的功能\",{\"0\":{\"789\":1,\"1194\":1}}],[\"包装类型的变量可以直接赋值给基本数据类型的变量\",{\"1\":{\"788\":1,\"1193\":1}}],[\"包装类其实就是八种基本数据类型对应的引用类型\",{\"1\":{\"788\":1,\"1193\":1}}],[\"包装类\",{\"0\":{\"787\":1,\"1192\":1}}],[\"包装浮点型对象成为大数据对象\",{\"1\":{\"774\":1,\"1179\":1}}],[\"包装浮点型成为bigdecimal对象\",{\"1\":{\"772\":1,\"1177\":1}}],[\"包名+类名\",{\"1\":{\"802\":1,\"1207\":1}}],[\"包名\",{\"1\":{\"701\":1,\"1106\":1}}],[\"包名建议全部小写\",{\"1\":{\"701\":1,\"1106\":1}}],[\"包是用来分门别类管理各种不同的文件的\",{\"1\":{\"701\":1,\"1106\":1}}],[\"包含隐藏内容\",{\"1\":{\"971\":1,\"1376\":1}}],[\"包含空格\",{\"1\":{\"743\":1,\"1148\":1}}],[\"包含成员变量以及成员方法的引用地址\",{\"1\":{\"663\":1,\"1068\":1}}],[\"包含\",{\"1\":{\"397\":1,\"495\":1}}],[\"包含13项技术规范\",{\"1\":{\"285\":1}}],[\"包含了刷新\",{\"1\":{\"997\":1,\"1402\":1}}],[\"包含了日期以及时间\",{\"1\":{\"785\":1,\"1190\":1}}],[\"包含了一组数据库操作命令\",{\"1\":{\"535\":1}}],[\"包含了三项\",{\"1\":{\"174\":1}}],[\"包含了数据模型以及相应的视图的信息\",{\"1\":{\"166\":1}}],[\"包含了应用程序的业务逻辑和处理规则\",{\"1\":{\"107\":1}}],[\"包扫描\",{\"1\":{\"267\":1}}],[\"包的命令\",{\"1\":{\"119\":1}}],[\"包等各依赖的版本号\",{\"1\":{\"107\":1}}],[\"包索引在自己的项目中引入\",{\"1\":{\"103\":1}}],[\"包\",{\"0\":{\"701\":1,\"1106\":1},\"1\":{\"103\":1}}],[\"包括了数字\",{\"1\":{\"984\":1,\"1389\":1}}],[\"包括\",{\"1\":{\"819\":1,\"1224\":1}}],[\"包括前面\",{\"1\":{\"743\":1,\"1148\":1}}],[\"包括空\",{\"1\":{\"451\":1}}],[\"包括隐藏的文件\",{\"1\":{\"440\":1}}],[\"包括各种日志文件\",{\"1\":{\"428\":1}}],[\"包括各其他模块中需要复用的方法\",{\"1\":{\"97\":1}}],[\"包括一些连接文件以及镜像文件\",{\"1\":{\"428\":1}}],[\"包括创建多台虚拟机\",{\"1\":{\"363\":1}}],[\"包括资源分配\",{\"1\":{\"108\":1}}],[\"包括数据模型\",{\"1\":{\"107\":1}}],[\"包括负载均衡\",{\"1\":{\"106\":1}}],[\"包括受检异常和非受检异常\",{\"1\":{\"45\":1}}],[\"发一半\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"发出要求\",{\"1\":{\"1458\":1}}],[\"发牌\",{\"1\":{\"897\":3,\"1302\":3}}],[\"发生异常的方法自己独立完成异常的处理\",{\"1\":{\"635\":1,\"1040\":1}}],[\"发生异常的方法自己不处理异常\",{\"1\":{\"634\":1,\"1039\":1}}],[\"发送消息\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"发送端的数据包的目的地是组播ip\",{\"1\":{\"1454\":1}}],[\"发送端发送的数据包的目的地写的是广播地址\",{\"1\":{\"1453\":1}}],[\"发送端自带默认的端口号\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"发送端\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"发送端和接收端对象\",{\"0\":{\"1448\":1}}],[\"发送数据\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"发送数据的大小\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"发送数据包\",{\"1\":{\"1449\":1}}],[\"发送数据结束时无需释放资源\",{\"1\":{\"1443\":1}}],[\"发送数据都需要确认\",{\"1\":{\"1439\":1}}],[\"发送不管对方是否准备好\",{\"1\":{\"1443\":1}}],[\"发送通知等操作\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"发送短信给运维人员\",{\"1\":{\"573\":2}}],[\"发送邮件通知开发人员\",{\"1\":{\"573\":2}}],[\"发送cookie对象\",{\"1\":{\"329\":1}}],[\"发送cookie\",{\"1\":{\"329\":2}}],[\"发送cookie到客户端\",{\"1\":{\"329\":1}}],[\"发送请求\",{\"1\":{\"166\":1}}],[\"发送一个\",{\"1\":{\"117\":1}}],[\"发布站点等\",{\"1\":{\"254\":1}}],[\"发布\",{\"1\":{\"103\":1,\"248\":1}}],[\"发现账户余额是足够的\",{\"1\":{\"931\":1,\"1336\":1}}],[\"发现map集合的键值对元素直接是没有类型的\",{\"1\":{\"907\":1,\"1312\":1}}],[\"发现main方法中需要创建car对象于是方法区中加载car\",{\"1\":{\"663\":1,\"1068\":1}}],[\"发现存在bug\",{\"1\":{\"272\":1}}],[\"发现登入失败\",{\"1\":{\"233\":1}}],[\"发现对象属性中有b对象\",{\"1\":{\"164\":1}}],[\"发现自己置身于一个陌生的大陆\",{\"1\":{\"19\":1}}],[\"发现新的世界\",{\"0\":{\"1\":1}}],[\"6种状态都定义在thread类的内部枚举类中\",{\"1\":{\"963\":1,\"1368\":1}}],[\"6cd7733b5732\",{\"1\":{\"496\":6}}],[\"69\",{\"1\":{\"496\":1}}],[\"694924\",{\"1\":{\"481\":1}}],[\"6799999999999999\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"67\",{\"1\":{\"496\":1}}],[\"6666\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"666\",{\"1\":{\"573\":1}}],[\"66\",{\"1\":{\"496\":1,\"751\":7,\"1156\":7}}],[\"638346b1cb4e\",{\"1\":{\"496\":1}}],[\"63\",{\"1\":{\"496\":1}}],[\"6379\",{\"1\":{\"494\":2}}],[\"6379>\",{\"1\":{\"360\":3}}],[\"62\",{\"1\":{\"496\":1}}],[\"61\",{\"1\":{\"496\":1}}],[\"6123\",{\"1\":{\"395\":1}}],[\"600\",{\"1\":{\"909\":1,\"1314\":1}}],[\"60+22\",{\"1\":{\"781\":1,\"1186\":1}}],[\"60+49\",{\"1\":{\"781\":1,\"1186\":1}}],[\"60+14\",{\"1\":{\"781\":1,\"1186\":1}}],[\"60\",{\"1\":{\"496\":1,\"663\":1,\"776\":2,\"781\":2,\"1028\":3,\"1068\":1,\"1181\":2,\"1186\":2,\"1478\":3}}],[\"65535\",{\"1\":{\"1434\":1}}],[\"65\",{\"1\":{\"495\":1,\"496\":1}}],[\"6内核中新出现的一个文件系统\",{\"1\":{\"428\":1}}],[\"6内核的一个很大的变化\",{\"1\":{\"428\":1}}],[\"64kb\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"64天\",{\"1\":{\"784\":1,\"1189\":1}}],[\"64\",{\"1\":{\"358\":1,\"400\":1,\"496\":1,\"511\":1,\"784\":1,\"1189\":1,\"1449\":1,\"1450\":1}}],[\"688bae0a8257\",{\"1\":{\"496\":2}}],[\"68\",{\"1\":{\"309\":4,\"496\":1}}],[\"6\",{\"1\":{\"103\":1,\"112\":1,\"115\":1,\"117\":1,\"203\":1,\"211\":2,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"245\":1,\"389\":1,\"496\":1,\"743\":1,\"750\":1,\"751\":1,\"784\":1,\"794\":1,\"808\":1,\"812\":1,\"842\":1,\"897\":2,\"904\":1,\"948\":2,\"949\":1,\"966\":1,\"981\":1,\"1148\":1,\"1155\":1,\"1156\":1,\"1189\":1,\"1199\":1,\"1213\":1,\"1217\":1,\"1247\":1,\"1302\":2,\"1309\":1,\"1353\":2,\"1354\":1,\"1371\":1,\"1386\":1,\"1465\":1,\"1466\":1}}],[\"fw\",{\"1\":{\"1008\":2,\"1413\":2}}],[\"f3\",{\"1\":{\"965\":3,\"969\":2,\"1370\":3,\"1374\":2}}],[\"f2\",{\"1\":{\"965\":2,\"969\":3,\"1370\":2,\"1374\":3}}],[\"future<string>\",{\"1\":{\"949\":5,\"1354\":5}}],[\"future<\",{\"1\":{\"948\":1,\"1353\":1}}],[\"futuretask对象的作用2\",{\"1\":{\"921\":1,\"1326\":1}}],[\"futuretask对象的作用1\",{\"1\":{\"921\":1,\"1326\":1}}],[\"futuretask配合可以用来获取异步执行的结果\",{\"1\":{\"200\":1}}],[\"futuretask<>\",{\"1\":{\"199\":1,\"921\":2,\"1326\":2}}],[\"futuretask<string>\",{\"1\":{\"199\":1,\"921\":2,\"1326\":2}}],[\"futuretask\",{\"1\":{\"199\":1,\"921\":1,\"1326\":1}}],[\"function4\",{\"1\":{\"1029\":6,\"1479\":6}}],[\"function3\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"function2\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"function<integer\",{\"1\":{\"1029\":3,\"1479\":3}}],[\"function<\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"function<v\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"function<t\",{\"1\":{\"1025\":1,\"1029\":2,\"1475\":1,\"1479\":2}}],[\"function<string\",{\"1\":{\"823\":1,\"1022\":1,\"1029\":1,\"1228\":1,\"1472\":1,\"1479\":1}}],[\"functional\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"functionalinterface\",{\"1\":{\"1018\":1,\"1024\":1,\"1468\":1,\"1474\":1}}],[\"functionalinterface注解表示一个函数式接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"functionalinterface注解\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"function\",{\"0\":{\"1029\":1,\"1479\":1},\"1\":{\"846\":1,\"908\":1,\"1025\":1,\"1029\":2,\"1251\":1,\"1313\":1,\"1475\":1,\"1479\":2}}],[\"fk\",{\"1\":{\"526\":3,\"529\":3}}],[\"ff4885cd81eb\",{\"1\":{\"496\":5}}],[\"flush\",{\"1\":{\"997\":1,\"1402\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"flag\",{\"1\":{\"806\":1,\"1211\":1}}],[\"floor\",{\"1\":{\"767\":1,\"1172\":1}}],[\"float\",{\"1\":{\"650\":1,\"767\":1,\"788\":2,\"1055\":1,\"1172\":1,\"1193\":2}}],[\"flyway\",{\"1\":{\"494\":1,\"496\":1}}],[\"flywaydb<\",{\"1\":{\"494\":1}}],[\"flyway将自动检测并应用迁移脚本\",{\"1\":{\"494\":1}}],[\"flink\",{\"1\":{\"395\":15}}],[\"flink在大数据体系同样是明星产品\",{\"1\":{\"394\":1}}],[\"flink同spark一样\",{\"1\":{\"394\":1}}],[\"f选项\",{\"1\":{\"490\":2}}],[\"f选项必须在所有选项中位置处于最后一个\",{\"1\":{\"490\":1}}],[\"f表示force\",{\"1\":{\"451\":1}}],[\"fs\",{\"1\":{\"387\":3}}],[\"fernflower\",{\"1\":{\"743\":1,\"1148\":1}}],[\"fedora\",{\"1\":{\"360\":1}}],[\"features\",{\"0\":{\"1492\":1,\"1499\":1},\"1\":{\"100\":1}}],[\"finally\",{\"0\":{\"1000\":1,\"1405\":1},\"1\":{\"939\":2,\"1000\":3,\"1344\":2,\"1405\":3}}],[\"final和abstract是什么关系\",{\"0\":{\"711\":1,\"1116\":1}}],[\"finaltest\",{\"1\":{\"704\":2,\"1109\":2}}],[\"final修饰后\",{\"1\":{\"939\":2,\"1344\":2}}],[\"final修饰变量\",{\"1\":{\"703\":1,\"1108\":1}}],[\"final修饰方法\",{\"1\":{\"703\":1,\"1108\":1}}],[\"final修饰符\",{\"0\":{\"703\":1,\"1108\":1}}],[\"final\",{\"1\":{\"571\":8,\"704\":4,\"707\":5,\"714\":1,\"721\":1,\"781\":2,\"784\":1,\"831\":1,\"939\":2,\"1009\":2,\"1109\":4,\"1112\":5,\"1119\":1,\"1126\":1,\"1186\":2,\"1189\":1,\"1236\":1,\"1344\":2,\"1414\":2}}],[\"findbyid\",{\"1\":{\"615\":4}}],[\"findall\",{\"1\":{\"615\":4}}],[\"find\",{\"0\":{\"453\":1},\"1\":{\"418\":1,\"453\":3}}],[\"field\",{\"1\":{\"552\":1,\"784\":3,\"798\":1,\"808\":12,\"816\":3,\"1189\":3,\"1203\":1,\"1213\":12,\"1221\":3}}],[\"firewarm\",{\"1\":{\"496\":1}}],[\"firewarn\",{\"1\":{\"496\":1}}],[\"firewall\",{\"1\":{\"354\":2,\"356\":2,\"358\":4,\"360\":2,\"496\":1}}],[\"firewalld\",{\"1\":{\"354\":2,\"356\":2,\"358\":2,\"360\":2,\"362\":2,\"371\":2,\"496\":2}}],[\"filter中的形参是要保留的元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"filter使用细节\",{\"0\":{\"340\":1}}],[\"filter执行流程\",{\"0\":{\"339\":1}}],[\"filterconfig\",{\"1\":{\"338\":2}}],[\"filterchain\",{\"1\":{\"338\":1}}],[\"filterdemo\",{\"1\":{\"338\":1}}],[\"filter快速入门\",{\"0\":{\"338\":1}}],[\"filter表示过滤器\",{\"1\":{\"337\":1}}],[\"filter\",{\"0\":{\"337\":1},\"1\":{\"240\":3,\"337\":1,\"338\":3,\"562\":7,\"570\":7,\"579\":7,\"821\":2,\"823\":7,\"824\":1,\"1020\":2,\"1022\":7,\"1023\":1,\"1028\":2,\"1226\":2,\"1228\":7,\"1229\":1,\"1470\":2,\"1472\":7,\"1473\":1,\"1478\":2}}],[\"filters\",{\"1\":{\"240\":1}}],[\"filefilter\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"fileutils\",{\"1\":{\"1014\":3,\"1419\":3}}],[\"fileutils主要方法如下\",{\"0\":{\"1014\":1,\"1419\":1}}],[\"filepath\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"filewriter\",{\"1\":{\"1004\":9,\"1008\":2,\"1012\":2,\"1409\":9,\"1413\":2,\"1417\":2}}],[\"filereader\",{\"1\":{\"1002\":5,\"1003\":4,\"1008\":2,\"1012\":2,\"1407\":5,\"1408\":4,\"1413\":2,\"1417\":2}}],[\"file1\",{\"1\":{\"969\":2,\"971\":3,\"1374\":2,\"1376\":3}}],[\"file创建文件的功能\",{\"0\":{\"968\":1,\"1373\":1}}],[\"file创建对象\",{\"1\":{\"965\":1,\"1370\":1}}],[\"filedemo4\",{\"1\":{\"971\":1,\"1376\":1}}],[\"filedemo3\",{\"1\":{\"969\":1,\"1374\":1}}],[\"filedemo2\",{\"1\":{\"966\":1,\"1371\":1}}],[\"filedemo1\",{\"1\":{\"965\":1,\"1370\":1}}],[\"file下\",{\"1\":{\"965\":1,\"1370\":1}}],[\"file类删除文件夹的功能\",{\"0\":{\"969\":1,\"1374\":1}}],[\"file类提供了诸如\",{\"1\":{\"965\":1,\"1370\":1}}],[\"file类在包java\",{\"1\":{\"965\":1,\"1370\":1}}],[\"file类可以定位文件\",{\"1\":{\"965\":1,\"1370\":1}}],[\"fileoutputstream\",{\"1\":{\"816\":2,\"997\":3,\"998\":4,\"1000\":6,\"1001\":3,\"1007\":1,\"1009\":3,\"1011\":2,\"1014\":2,\"1221\":2,\"1402\":3,\"1403\":4,\"1405\":6,\"1406\":3,\"1412\":1,\"1414\":3,\"1416\":2,\"1419\":2}}],[\"filenotfoundexception\",{\"1\":{\"635\":3,\"994\":1,\"1040\":3,\"1399\":1}}],[\"filename\",{\"1\":{\"437\":5,\"981\":4,\"1386\":4}}],[\"file文件中\",{\"1\":{\"424\":1}}],[\"file文件\",{\"1\":{\"424\":1}}],[\"file是将command的输出重定向到out\",{\"1\":{\"424\":1}}],[\"files目录\",{\"1\":{\"428\":1}}],[\"files\",{\"1\":{\"386\":1,\"971\":2,\"981\":4,\"1376\":2,\"1386\":4}}],[\"filesystem\",{\"1\":{\"386\":3}}],[\"fileinputstream\",{\"1\":{\"240\":2,\"245\":2,\"315\":7,\"628\":5,\"635\":4,\"636\":2,\"994\":10,\"995\":9,\"996\":5,\"998\":4,\"1000\":6,\"1001\":3,\"1007\":1,\"1009\":2,\"1014\":2,\"1033\":5,\"1040\":4,\"1041\":2,\"1399\":10,\"1400\":9,\"1401\":5,\"1403\":4,\"1405\":6,\"1406\":3,\"1412\":1,\"1414\":2,\"1419\":2}}],[\"file\",{\"1\":{\"128\":1,\"320\":2,\"386\":12,\"403\":1,\"404\":1,\"424\":1,\"743\":1,\"965\":11,\"966\":11,\"969\":14,\"970\":1,\"971\":8,\"981\":12,\"994\":2,\"996\":6,\"1011\":1,\"1014\":10,\"1025\":1,\"1148\":1,\"1370\":11,\"1371\":11,\"1374\":14,\"1375\":1,\"1376\":8,\"1386\":12,\"1399\":2,\"1401\":6,\"1416\":1,\"1419\":10,\"1475\":1}}],[\"f\",{\"1\":{\"353\":1,\"435\":1,\"451\":1,\"460\":2,\"478\":2,\"490\":2,\"496\":17,\"819\":5,\"965\":3,\"969\":2,\"976\":3,\"977\":3,\"978\":6,\"979\":10,\"1011\":1,\"1224\":5,\"1370\":3,\"1374\":2,\"1381\":3,\"1382\":3,\"1383\":6,\"1384\":10,\"1416\":1}}],[\"for循环\",{\"1\":{\"862\":1,\"866\":1,\"1267\":1,\"1271\":1}}],[\"fori\",{\"1\":{\"750\":1,\"1155\":1}}],[\"foreign\",{\"1\":{\"525\":1,\"526\":4,\"529\":3}}],[\"foreach删除\",{\"1\":{\"866\":1,\"1271\":1}}],[\"foreach遍历流\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"foreach>\",{\"1\":{\"280\":1,\"323\":1}}],[\"foreach标签中的属性\",{\"1\":{\"280\":1}}],[\"foreach\",{\"0\":{\"845\":1,\"1250\":1},\"1\":{\"273\":1,\"323\":2,\"821\":1,\"823\":7,\"845\":1,\"846\":4,\"866\":1,\"908\":2,\"1020\":1,\"1022\":7,\"1027\":2,\"1226\":1,\"1228\":7,\"1250\":1,\"1251\":4,\"1271\":1,\"1313\":2,\"1470\":1,\"1472\":7,\"1477\":2}}],[\"format\",{\"1\":{\"386\":1,\"495\":1,\"781\":7,\"782\":2,\"966\":1,\"1186\":7,\"1187\":2,\"1371\":1}}],[\"forwarded\",{\"1\":{\"495\":1}}],[\"forward\",{\"1\":{\"310\":3,\"322\":1}}],[\"for\",{\"1\":{\"308\":2,\"329\":2,\"360\":1,\"362\":1,\"386\":5,\"404\":1,\"410\":1,\"476\":1,\"494\":1,\"495\":1,\"521\":1,\"615\":1,\"678\":1,\"679\":1,\"743\":3,\"750\":1,\"751\":7,\"769\":1,\"794\":2,\"804\":2,\"808\":1,\"812\":1,\"814\":1,\"816\":1,\"818\":1,\"821\":2,\"845\":3,\"847\":1,\"866\":2,\"873\":1,\"897\":3,\"906\":1,\"907\":1,\"908\":2,\"914\":2,\"918\":2,\"920\":4,\"921\":1,\"924\":2,\"925\":1,\"948\":1,\"971\":2,\"981\":1,\"1020\":2,\"1083\":1,\"1084\":1,\"1148\":3,\"1155\":1,\"1156\":7,\"1174\":1,\"1199\":2,\"1209\":2,\"1213\":1,\"1217\":1,\"1219\":1,\"1221\":1,\"1223\":1,\"1226\":2,\"1250\":3,\"1252\":1,\"1271\":2,\"1278\":1,\"1302\":3,\"1311\":1,\"1312\":1,\"1313\":2,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":1,\"1329\":2,\"1330\":1,\"1353\":1,\"1376\":2,\"1386\":1,\"1470\":2}}],[\"forname\",{\"1\":{\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"802\":3,\"803\":1,\"1207\":3,\"1208\":1}}],[\"fa\",{\"1\":{\"819\":1,\"1224\":1}}],[\"fasterxml\",{\"1\":{\"566\":1,\"570\":1}}],[\"fastgit\",{\"1\":{\"496\":2}}],[\"fail\",{\"1\":{\"495\":2}}],[\"fails=5\",{\"1\":{\"495\":2}}],[\"failure\",{\"1\":{\"494\":3}}],[\"fairscheduler<\",{\"1\":{\"386\":1}}],[\"fair\",{\"1\":{\"386\":1}}],[\"factorydemo\",{\"1\":{\"641\":1,\"1046\":1}}],[\"factorypattern\",{\"1\":{\"641\":11,\"1046\":11}}],[\"factorybean\",{\"0\":{\"591\":1}}],[\"factory\",{\"0\":{\"589\":1,\"590\":1},\"1\":{\"570\":4,\"579\":3,\"615\":3}}],[\"factor\",{\"1\":{\"378\":1}}],[\"factories文件中的所配置的类的全类名\",{\"1\":{\"168\":1}}],[\"factories\",{\"1\":{\"103\":1}}],[\"false是单机模式\",{\"1\":{\"389\":1}}],[\"false\",{\"1\":{\"229\":1,\"233\":1,\"240\":3,\"264\":1,\"395\":1,\"629\":1,\"638\":1,\"648\":1,\"743\":1,\"756\":5,\"758\":3,\"763\":1,\"818\":2,\"842\":3,\"888\":1,\"891\":1,\"896\":1,\"1025\":1,\"1034\":1,\"1043\":1,\"1053\":1,\"1148\":1,\"1161\":5,\"1163\":3,\"1168\":1,\"1223\":2,\"1247\":3,\"1293\":1,\"1296\":1,\"1301\":1,\"1475\":1}}],[\"false为手动提交\",{\"1\":{\"229\":1}}],[\"fr\",{\"1\":{\"1008\":3,\"1413\":3}}],[\"friend>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"free\",{\"1\":{\"481\":3}}],[\"framework\",{\"0\":{\"581\":1},\"1\":{\"169\":1,\"170\":1,\"386\":1,\"816\":4,\"1221\":4}}],[\"from=pagedriver\",{\"1\":{\"281\":1,\"888\":1,\"1293\":1}}],[\"from\",{\"1\":{\"146\":1,\"148\":3,\"231\":1,\"233\":4,\"240\":1,\"243\":1,\"245\":2,\"264\":1,\"270\":3,\"271\":5,\"272\":3,\"273\":4,\"274\":4,\"279\":1,\"280\":2,\"283\":2,\"378\":1,\"474\":1,\"494\":1,\"514\":3,\"516\":1,\"517\":2,\"518\":4,\"519\":3,\"521\":6,\"522\":1,\"523\":1,\"525\":1,\"526\":3,\"531\":5,\"532\":2,\"533\":3,\"570\":3,\"613\":3,\"743\":1,\"829\":3,\"1148\":1,\"1234\":3}}],[\"=f\",{\"1\":{\"978\":1,\"1383\":1}}],[\"=x\",{\"1\":{\"819\":1,\"1224\":1}}],[\"=null\",{\"1\":{\"818\":1,\"1223\":1}}],[\"====>\",{\"1\":{\"956\":2,\"1361\":2}}],[\"======服务端启动成功=====\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"========客户端启动=========\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"========服务端启动=========\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"=========test3被执行========\",{\"1\":{\"974\":1,\"1379\":1}}],[\"=========test2被执行========\",{\"1\":{\"974\":1,\"1379\":1}}],[\"=========test被执行========\",{\"1\":{\"974\":1,\"1379\":1}}],[\"==========value3\",{\"1\":{\"900\":1,\"1305\":1}}],[\"==========value2\",{\"1\":{\"900\":1,\"1305\":1}}],[\"==========value1\",{\"1\":{\"900\":1,\"1305\":1}}],[\"===========\",{\"1\":{\"816\":1,\"1221\":1}}],[\"=======================\",{\"1\":{\"814\":1,\"1219\":1}}],[\"=========\",{\"1\":{\"816\":1,\"1221\":1}}],[\"=====>\",{\"1\":{\"906\":1,\"1311\":1}}],[\"===>\",{\"1\":{\"804\":2,\"808\":2,\"1209\":2,\"1213\":2}}],[\"==号比较的实际上是地址\",{\"1\":{\"743\":1,\"1148\":1}}],[\"==>\",{\"1\":{\"280\":2}}],[\"==\",{\"1\":{\"193\":1,\"323\":1,\"688\":1,\"743\":10,\"751\":1,\"756\":10,\"758\":4,\"759\":3,\"814\":1,\"818\":1,\"821\":2,\"823\":1,\"831\":1,\"873\":1,\"888\":4,\"891\":4,\"896\":4,\"897\":3,\"925\":1,\"939\":1,\"976\":1,\"978\":1,\"979\":1,\"1020\":2,\"1022\":1,\"1093\":1,\"1148\":10,\"1156\":1,\"1161\":10,\"1163\":4,\"1164\":3,\"1219\":1,\"1223\":1,\"1226\":2,\"1228\":1,\"1236\":1,\"1278\":1,\"1293\":4,\"1296\":4,\"1301\":4,\"1302\":3,\"1330\":1,\"1344\":1,\"1381\":1,\"1383\":1,\"1384\":1,\"1470\":2,\"1472\":1}}],[\"==null\",{\"1\":{\"190\":2}}],[\"=\",{\"0\":{\"730\":1,\"731\":2,\"1135\":1,\"1136\":2},\"1\":{\"103\":1,\"108\":1,\"146\":1,\"148\":1,\"182\":1,\"193\":1,\"199\":4,\"205\":3,\"211\":1,\"219\":1,\"226\":13,\"229\":9,\"231\":12,\"233\":25,\"234\":1,\"240\":12,\"244\":12,\"245\":47,\"264\":15,\"265\":4,\"271\":5,\"272\":14,\"273\":13,\"274\":12,\"275\":11,\"277\":27,\"279\":8,\"280\":8,\"283\":1,\"297\":2,\"299\":1,\"302\":1,\"307\":8,\"308\":6,\"309\":6,\"310\":1,\"313\":1,\"314\":2,\"315\":7,\"316\":3,\"317\":1,\"320\":4,\"323\":1,\"329\":6,\"331\":1,\"333\":4,\"413\":3,\"495\":1,\"514\":7,\"523\":1,\"526\":1,\"531\":3,\"533\":3,\"536\":1,\"544\":2,\"552\":2,\"557\":1,\"562\":1,\"570\":20,\"571\":16,\"579\":1,\"613\":12,\"615\":13,\"616\":2,\"628\":8,\"629\":19,\"635\":9,\"636\":3,\"637\":1,\"641\":6,\"654\":4,\"660\":4,\"663\":6,\"664\":6,\"672\":4,\"678\":5,\"679\":5,\"686\":1,\"688\":1,\"704\":3,\"708\":1,\"709\":1,\"714\":2,\"715\":1,\"721\":3,\"724\":2,\"726\":2,\"730\":2,\"732\":3,\"737\":1,\"738\":5,\"743\":25,\"747\":1,\"748\":1,\"749\":3,\"750\":7,\"751\":30,\"755\":8,\"756\":10,\"758\":8,\"759\":2,\"763\":3,\"769\":3,\"771\":1,\"773\":3,\"774\":15,\"775\":1,\"776\":5,\"777\":3,\"781\":11,\"782\":3,\"784\":6,\"786\":6,\"789\":1,\"790\":2,\"793\":12,\"794\":12,\"802\":4,\"803\":3,\"804\":13,\"806\":5,\"808\":9,\"812\":9,\"814\":6,\"816\":22,\"818\":2,\"821\":3,\"822\":8,\"823\":5,\"824\":3,\"831\":13,\"839\":3,\"840\":5,\"842\":3,\"844\":2,\"845\":2,\"846\":1,\"847\":1,\"861\":1,\"865\":2,\"866\":5,\"871\":2,\"873\":7,\"878\":3,\"881\":2,\"887\":2,\"888\":9,\"891\":12,\"896\":9,\"897\":19,\"903\":2,\"904\":8,\"906\":3,\"907\":6,\"908\":8,\"909\":3,\"914\":3,\"918\":4,\"920\":6,\"921\":11,\"924\":5,\"925\":1,\"926\":1,\"930\":8,\"933\":1,\"936\":1,\"937\":2,\"939\":18,\"948\":12,\"949\":6,\"951\":2,\"954\":1,\"956\":1,\"965\":4,\"966\":2,\"969\":5,\"971\":3,\"977\":1,\"978\":2,\"979\":6,\"981\":4,\"988\":3,\"994\":7,\"995\":14,\"996\":8,\"997\":5,\"998\":5,\"1000\":9,\"1001\":5,\"1002\":4,\"1003\":5,\"1004\":2,\"1007\":7,\"1008\":11,\"1009\":13,\"1011\":2,\"1012\":3,\"1018\":2,\"1019\":1,\"1020\":3,\"1021\":8,\"1022\":5,\"1023\":3,\"1024\":2,\"1026\":4,\"1027\":7,\"1028\":10,\"1029\":9,\"1033\":8,\"1034\":19,\"1040\":9,\"1041\":3,\"1042\":1,\"1046\":6,\"1059\":4,\"1065\":4,\"1068\":6,\"1069\":6,\"1077\":4,\"1083\":5,\"1084\":5,\"1091\":1,\"1093\":1,\"1109\":3,\"1113\":1,\"1114\":1,\"1119\":2,\"1120\":1,\"1126\":3,\"1129\":2,\"1131\":2,\"1135\":2,\"1137\":3,\"1142\":1,\"1143\":5,\"1148\":25,\"1152\":1,\"1153\":1,\"1154\":3,\"1155\":7,\"1156\":30,\"1160\":8,\"1161\":10,\"1163\":8,\"1164\":2,\"1168\":3,\"1174\":3,\"1176\":1,\"1178\":3,\"1179\":15,\"1180\":1,\"1181\":5,\"1182\":3,\"1186\":11,\"1187\":3,\"1189\":6,\"1191\":6,\"1194\":1,\"1195\":2,\"1198\":12,\"1199\":12,\"1207\":4,\"1208\":3,\"1209\":13,\"1211\":5,\"1213\":9,\"1217\":9,\"1219\":6,\"1221\":22,\"1223\":2,\"1226\":3,\"1227\":8,\"1228\":5,\"1229\":3,\"1236\":13,\"1244\":3,\"1245\":5,\"1247\":3,\"1249\":2,\"1250\":2,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":2,\"1271\":5,\"1276\":2,\"1278\":7,\"1283\":3,\"1286\":2,\"1292\":2,\"1293\":9,\"1296\":12,\"1301\":9,\"1302\":19,\"1308\":2,\"1309\":8,\"1311\":3,\"1312\":6,\"1313\":8,\"1314\":3,\"1319\":3,\"1323\":4,\"1325\":6,\"1326\":11,\"1329\":5,\"1330\":1,\"1331\":1,\"1335\":8,\"1338\":1,\"1341\":1,\"1342\":2,\"1344\":18,\"1353\":12,\"1354\":6,\"1356\":2,\"1359\":1,\"1361\":1,\"1370\":4,\"1371\":2,\"1374\":5,\"1376\":3,\"1382\":1,\"1383\":2,\"1384\":6,\"1386\":4,\"1393\":3,\"1399\":7,\"1400\":14,\"1401\":8,\"1402\":5,\"1403\":5,\"1405\":9,\"1406\":5,\"1407\":4,\"1408\":5,\"1409\":2,\"1412\":7,\"1413\":11,\"1414\":13,\"1416\":2,\"1417\":3,\"1433\":3,\"1449\":10,\"1450\":10,\"1458\":3,\"1461\":11,\"1464\":13,\"1465\":14,\"1466\":11,\"1468\":2,\"1469\":1,\"1470\":3,\"1471\":8,\"1472\":5,\"1473\":3,\"1474\":2,\"1476\":4,\"1477\":7,\"1478\":10,\"1479\":9}}],[\"编辑文件\",{\"1\":{\"362\":1}}],[\"编辑\",{\"1\":{\"353\":1}}],[\"编辑距离算法的实现原理\",{\"1\":{\"118\":1}}],[\"编辑距离算法是一种用于度量两个字符串之间的相似度或差异性的算法\",{\"1\":{\"118\":1}}],[\"编辑距离算法是什么\",{\"0\":{\"118\":1}}],[\"编码前和编码后的字符集必须一致\",{\"1\":{\"987\":1,\"1392\":1}}],[\"编码前和编码后的字符集需要一致\",{\"1\":{\"986\":1,\"1391\":1}}],[\"编码复杂一些\",{\"1\":{\"922\":1,\"1327\":1}}],[\"编码简单\",{\"1\":{\"915\":1,\"923\":1,\"1320\":1,\"1328\":1}}],[\"编码获取参数对应的字节码数组byte\",{\"1\":{\"309\":1}}],[\"编码\",{\"1\":{\"264\":1,\"266\":1,\"309\":1}}],[\"编译阶段可以指定数据类型\",{\"1\":{\"870\":1,\"1275\":1}}],[\"编译阶段报错\",{\"1\":{\"840\":1,\"1245\":1}}],[\"编译阶段会出现错误提示\",{\"1\":{\"698\":1,\"1103\":1}}],[\"编译成class文件进入运行阶段的时候\",{\"1\":{\"815\":1,\"1220\":1}}],[\"编译看左边\",{\"1\":{\"725\":2,\"1130\":2}}],[\"编译器会把case值装到一个类似数组的容器里\",{\"1\":{\"653\":1,\"1058\":1}}],[\"编译器对switch语句有两套算法\",{\"1\":{\"653\":1,\"1058\":1}}],[\"编译时异常的处理形式\",{\"0\":{\"633\":1,\"1038\":1}}],[\"编译异常\",{\"1\":{\"632\":1,\"1037\":1}}],[\"编译classpath\",{\"1\":{\"259\":1}}],[\"编译环境\",{\"1\":{\"259\":1}}],[\"编译\",{\"1\":{\"234\":2,\"248\":1,\"253\":1}}],[\"编程相对复杂\",{\"1\":{\"923\":2,\"1328\":2}}],[\"编程多一层对象包装\",{\"1\":{\"919\":1,\"1324\":1}}],[\"编程式事务和声明式事务\",{\"1\":{\"161\":1}}],[\"编程语言\",{\"1\":{\"92\":1}}],[\"编写一个nginx\",{\"1\":{\"495\":1}}],[\"编写docker\",{\"1\":{\"494\":1}}],[\"编写完后执行mvn\",{\"1\":{\"494\":1}}],[\"编写html标签和java代码\",{\"1\":{\"318\":1}}],[\"编写sql映射文件\",{\"1\":{\"264\":1}}],[\"编写mybatis核心配置文件\",{\"1\":{\"264\":1}}],[\"编写服务提供者和服务调用客户端类\",{\"1\":{\"107\":1}}],[\"编写\",{\"1\":{\"107\":1}}],[\"编写配置类\",{\"1\":{\"103\":1}}],[\"0是从第0滴水开始\",{\"1\":{\"995\":1,\"1400\":1}}],[\"0是为了节省空间\",{\"1\":{\"184\":1}}],[\"0l\",{\"1\":{\"951\":1,\"1356\":1}}],[\"0lds3cretkey\",{\"1\":{\"413\":1}}],[\"0起提供了代表线程池的接口\",{\"1\":{\"942\":1,\"1347\":1}}],[\"0提供了callable和futuretask\",{\"1\":{\"921\":1,\"1326\":1}}],[\"0新增\",{\"0\":{\"921\":1,\"1326\":1}}],[\"0mnn\",{\"1\":{\"819\":1,\"1224\":1}}],[\"0nn\",{\"1\":{\"819\":1,\"1224\":1}}],[\"0n\",{\"1\":{\"819\":1,\"1224\":1}}],[\"0xh\",{\"1\":{\"819\":2,\"1224\":2}}],[\"0x15\",{\"1\":{\"647\":1,\"1052\":1}}],[\"0x开头\",{\"1\":{\"647\":1,\"1052\":1}}],[\"0x或\",{\"1\":{\"647\":1,\"1052\":1}}],[\"0开头\",{\"1\":{\"647\":1,\"1052\":1}}],[\"0以下的版本\",{\"1\":{\"557\":1}}],[\"03\",{\"1\":{\"496\":7,\"965\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1370\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"06\",{\"1\":{\"496\":17}}],[\"09999999999999999\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"09+0\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"09\",{\"1\":{\"496\":23}}],[\"0个僵尸进程\",{\"1\":{\"481\":1}}],[\"0个停止\",{\"1\":{\"481\":1}}],[\"02\",{\"1\":{\"476\":2,\"496\":28,\"786\":1,\"1191\":1}}],[\"04\",{\"1\":{\"476\":2,\"496\":14}}],[\"0k\",{\"1\":{\"460\":6}}],[\"08\",{\"1\":{\"456\":2,\"496\":17,\"570\":1}}],[\"001\",{\"1\":{\"930\":1,\"1335\":1}}],[\"00e808f448eb\",{\"1\":{\"496\":1}}],[\"00\",{\"1\":{\"456\":10,\"496\":7}}],[\"0版本在centos系统安装\",{\"0\":{\"348\":1}}],[\"0<\",{\"1\":{\"258\":1,\"264\":1,\"315\":1,\"557\":2,\"570\":2,\"615\":1}}],[\"013009999999999999\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"015\",{\"1\":{\"647\":1,\"771\":1,\"774\":1,\"1052\":1,\"1176\":1,\"1179\":1}}],[\"01\",{\"1\":{\"109\":1,\"496\":27,\"557\":1,\"771\":1,\"774\":1,\"965\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1176\":1,\"1179\":1,\"1370\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"05\",{\"1\":{\"109\":1,\"280\":7,\"496\":20}}],[\"0\",{\"1\":{\"103\":1,\"190\":1,\"191\":1,\"193\":1,\"199\":1,\"230\":1,\"243\":2,\"245\":3,\"258\":10,\"264\":15,\"267\":2,\"270\":2,\"295\":1,\"309\":1,\"315\":2,\"352\":1,\"353\":1,\"354\":6,\"358\":7,\"360\":6,\"362\":4,\"386\":19,\"387\":1,\"389\":8,\"395\":8,\"399\":1,\"400\":2,\"435\":3,\"456\":8,\"458\":2,\"459\":5,\"460\":4,\"474\":1,\"476\":4,\"481\":33,\"485\":3,\"494\":9,\"495\":5,\"496\":12,\"525\":1,\"529\":1,\"536\":2,\"552\":2,\"557\":9,\"562\":1,\"570\":10,\"579\":1,\"601\":1,\"615\":11,\"628\":1,\"629\":1,\"637\":1,\"638\":1,\"647\":1,\"678\":1,\"679\":1,\"743\":4,\"747\":1,\"750\":1,\"751\":2,\"758\":2,\"763\":1,\"767\":3,\"769\":3,\"771\":8,\"773\":4,\"774\":9,\"775\":1,\"793\":8,\"794\":2,\"818\":2,\"819\":8,\"829\":2,\"831\":4,\"861\":1,\"866\":1,\"873\":1,\"891\":1,\"897\":3,\"908\":2,\"914\":2,\"918\":2,\"920\":4,\"921\":2,\"924\":2,\"925\":1,\"930\":5,\"939\":2,\"948\":3,\"956\":2,\"981\":1,\"983\":1,\"995\":6,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1033\":1,\"1034\":1,\"1042\":1,\"1043\":1,\"1052\":1,\"1083\":1,\"1084\":1,\"1148\":4,\"1152\":1,\"1155\":1,\"1156\":2,\"1163\":2,\"1168\":1,\"1172\":3,\"1174\":3,\"1176\":8,\"1178\":4,\"1179\":9,\"1180\":1,\"1198\":8,\"1199\":2,\"1223\":2,\"1224\":8,\"1234\":2,\"1236\":4,\"1266\":1,\"1271\":1,\"1278\":1,\"1296\":1,\"1302\":3,\"1313\":2,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":2,\"1329\":2,\"1330\":1,\"1335\":5,\"1344\":2,\"1353\":3,\"1361\":2,\"1386\":1,\"1388\":1,\"1400\":6,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1429\":2,\"1431\":2,\"1449\":1,\"1450\":1,\"1454\":5}}],[\"07\",{\"1\":{\"95\":1,\"109\":1,\"496\":527}}],[\"负数\",{\"1\":{\"331\":1,\"793\":1,\"1198\":1}}],[\"负载均衡\",{\"1\":{\"102\":1}}],[\"负责发送数据\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"负责写\",{\"1\":{\"989\":1,\"1394\":1}}],[\"负责读\",{\"1\":{\"989\":1,\"1394\":1}}],[\"负责将数据保存到数据库的那一层代码\",{\"1\":{\"262\":1}}],[\"负责分配\",{\"1\":{\"236\":1}}],[\"负责接收请求\",{\"1\":{\"167\":1}}],[\"负责集中的路由转发\",{\"1\":{\"97\":1}}],[\"负责用户和接口管理等核心业务功能\",{\"1\":{\"97\":1}}],[\"路径问题\",{\"1\":{\"313\":1}}],[\"路由错误\",{\"1\":{\"288\":1}}],[\"路由\",{\"1\":{\"106\":1}}],[\"路由转发\",{\"1\":{\"102\":2,\"121\":1}}],[\"路旁的建筑物以奇特的形状和鲜艳的色彩装饰着整个大陆\",{\"1\":{\"1\":1}}],[\"则编译会报错\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"则存入数组\",{\"1\":{\"888\":1,\"1293\":1}}],[\"则调用equals方法比较哈希值\",{\"1\":{\"888\":1,\"1293\":1}}],[\"则新容量则为`integer\",{\"1\":{\"831\":1,\"1236\":1}}],[\"则该节点对应节点相应的指针属性值为nill\",{\"1\":{\"858\":1,\"1263\":1}}],[\"则该事务协调员将不再加入事务管理员的管理\",{\"1\":{\"616\":1}}],[\"则该实例就是客观下线了\",{\"1\":{\"136\":1}}],[\"则不存\",{\"1\":{\"888\":1,\"1293\":1}}],[\"则不会进入\",{\"1\":{\"831\":1,\"1236\":1}}],[\"则不参与分组\",{\"1\":{\"522\":1}}],[\"则不能set对应的值\",{\"1\":{\"131\":1}}],[\"则为\",{\"1\":{\"758\":1,\"1163\":1}}],[\"则为强制储存后离开\",{\"1\":{\"437\":1}}],[\"则为贴在游标上一行\",{\"1\":{\"435\":1}}],[\"则表示\",{\"1\":{\"435\":1}}],[\"则表示连接可用\",{\"1\":{\"240\":1}}],[\"则按下\",{\"1\":{\"435\":2}}],[\"则光标会向后面移动\",{\"1\":{\"435\":1}}],[\"则需要进行转码\",{\"1\":{\"331\":1}}],[\"则需要遍历链表\",{\"1\":{\"191\":1}}],[\"则cookie被销毁\",{\"1\":{\"331\":2}}],[\"则只需要进行一次检查\",{\"1\":{\"234\":1}}],[\"则可以使用包扫描的方式简化sql映射文件的加载\",{\"1\":{\"266\":1}}],[\"则可以挂单向链表\",{\"1\":{\"217\":1}}],[\"则可以直接注入b\",{\"1\":{\"164\":1}}],[\"则当前线程就获取到了资源\",{\"1\":{\"213\":1}}],[\"则说明被其他线程修改\",{\"1\":{\"211\":1}}],[\"则说明没被其他线程修改\",{\"1\":{\"211\":1}}],[\"则让当前线程进入entrylist进行阻塞\",{\"1\":{\"210\":1}}],[\"则让当前线程持有\",{\"1\":{\"210\":1}}],[\"则是用\",{\"1\":{\"437\":1}}],[\"则是复制\",{\"1\":{\"435\":1}}],[\"则是剪切\",{\"1\":{\"435\":1}}],[\"则是\",{\"1\":{\"207\":1}}],[\"则是可以重入的\",{\"1\":{\"133\":1}}],[\"则会向上继续搜寻名称为\",{\"1\":{\"435\":1}}],[\"则会移动到这个档案的第\",{\"1\":{\"435\":1}}],[\"则会对中文的字符串做出处理\",{\"1\":{\"309\":2}}],[\"则会乱码\",{\"1\":{\"309\":1}}],[\"则会去中央仓库中下载对应的jar包导入到本地仓库\",{\"1\":{\"250\":1}}],[\"则会执\",{\"1\":{\"240\":1}}],[\"则会进去waitset中进行等待\",{\"1\":{\"210\":1}}],[\"则会进入计时等待状态\",{\"1\":{\"204\":1}}],[\"则会查询数据库\",{\"1\":{\"124\":1}}],[\"则直接使用\",{\"1\":{\"191\":1}}],[\"则直接在树中插入键值对\",{\"1\":{\"190\":1}}],[\"则将冲突的值加到链表中即可\",{\"1\":{\"189\":1}}],[\"则将当前的key\",{\"1\":{\"188\":1}}],[\"则覆盖原始值\",{\"1\":{\"188\":1}}],[\"则消费者会使用负载均衡选择一个服务发起调用\",{\"1\":{\"172\":1}}],[\"则innodb会自动生成一个rowid作为隐藏的聚集索引\",{\"1\":{\"145\":1}}],[\"则认为该实例主观下线\",{\"1\":{\"136\":1}}],[\"则自动续期\",{\"1\":{\"132\":1}}],[\"则其他的请求会再此处重试\",{\"1\":{\"125\":1}}],[\"则这些线程会被销毁\",{\"1\":{\"112\":1}}],[\"则\",{\"1\":{\"101\":1,\"435\":1}}],[\"4f\",{\"1\":{\"763\":1,\"1168\":1}}],[\"4c8b535e3b85\",{\"1\":{\"496\":2}}],[\"449\",{\"1\":{\"496\":1}}],[\"448\",{\"1\":{\"496\":1}}],[\"447\",{\"1\":{\"496\":1}}],[\"446\",{\"1\":{\"496\":1}}],[\"445\",{\"1\":{\"496\":1}}],[\"444\",{\"1\":{\"496\":1}}],[\"442\",{\"1\":{\"496\":1}}],[\"441\",{\"1\":{\"496\":1}}],[\"440\",{\"1\":{\"496\":1}}],[\"44\",{\"1\":{\"496\":21,\"794\":1,\"1199\":1,\"1433\":1}}],[\"443\",{\"1\":{\"495\":1,\"496\":1}}],[\"429\",{\"1\":{\"496\":1}}],[\"428\",{\"1\":{\"496\":1}}],[\"427\",{\"1\":{\"496\":1}}],[\"426\",{\"1\":{\"496\":1}}],[\"425\",{\"1\":{\"496\":1}}],[\"424\",{\"1\":{\"496\":1}}],[\"423\",{\"1\":{\"496\":1}}],[\"422\",{\"1\":{\"496\":1}}],[\"421\",{\"1\":{\"496\":1}}],[\"420\",{\"1\":{\"496\":1}}],[\"42\",{\"1\":{\"496\":13,\"1019\":1,\"1469\":1}}],[\"419\",{\"1\":{\"496\":1}}],[\"418\",{\"1\":{\"496\":1}}],[\"417\",{\"1\":{\"496\":1}}],[\"416\",{\"1\":{\"496\":1}}],[\"415\",{\"1\":{\"496\":1}}],[\"414\",{\"1\":{\"496\":1}}],[\"413\",{\"1\":{\"496\":1}}],[\"412\",{\"1\":{\"496\":1}}],[\"411\",{\"1\":{\"496\":1}}],[\"410\",{\"1\":{\"496\":1}}],[\"41\",{\"1\":{\"496\":13}}],[\"459\",{\"1\":{\"496\":1}}],[\"458\",{\"1\":{\"496\":1}}],[\"457\",{\"1\":{\"496\":1}}],[\"456\",{\"1\":{\"496\":1}}],[\"455\",{\"1\":{\"496\":1}}],[\"454\",{\"1\":{\"496\":1}}],[\"453\",{\"1\":{\"496\":1}}],[\"452\",{\"1\":{\"496\":1}}],[\"451\",{\"1\":{\"496\":1}}],[\"450\",{\"1\":{\"496\":1}}],[\"45\",{\"1\":{\"496\":26}}],[\"439\",{\"1\":{\"496\":1}}],[\"438\",{\"1\":{\"496\":1}}],[\"437\",{\"1\":{\"496\":1}}],[\"436\",{\"1\":{\"496\":1}}],[\"435\",{\"1\":{\"496\":1}}],[\"434\",{\"1\":{\"496\":1}}],[\"433\",{\"1\":{\"496\":1}}],[\"432\",{\"1\":{\"496\":1}}],[\"431\",{\"1\":{\"496\":1}}],[\"430\",{\"1\":{\"496\":1}}],[\"43\",{\"1\":{\"496\":14}}],[\"469\",{\"1\":{\"496\":1}}],[\"468\",{\"1\":{\"496\":1}}],[\"467\",{\"1\":{\"496\":1}}],[\"466\",{\"1\":{\"496\":1}}],[\"465\",{\"1\":{\"496\":1}}],[\"464\",{\"1\":{\"496\":1}}],[\"463\",{\"1\":{\"496\":1}}],[\"462\",{\"1\":{\"496\":1}}],[\"461\",{\"1\":{\"496\":1}}],[\"460\",{\"1\":{\"496\":1}}],[\"46b501866f0f\",{\"1\":{\"496\":3}}],[\"46\",{\"1\":{\"496\":27}}],[\"49999999999999\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"499\",{\"1\":{\"496\":1}}],[\"498\",{\"1\":{\"496\":1}}],[\"497\",{\"1\":{\"496\":1}}],[\"496\",{\"1\":{\"496\":1}}],[\"495\",{\"1\":{\"496\":1}}],[\"494\",{\"1\":{\"496\":1}}],[\"493\",{\"1\":{\"496\":1}}],[\"492\",{\"1\":{\"496\":1}}],[\"491\",{\"1\":{\"496\":1}}],[\"490\",{\"1\":{\"496\":1}}],[\"49\",{\"1\":{\"496\":13}}],[\"409\",{\"1\":{\"496\":1}}],[\"4096\",{\"1\":{\"369\":1}}],[\"408\",{\"1\":{\"496\":1}}],[\"407\",{\"1\":{\"496\":1}}],[\"406\",{\"1\":{\"496\":1}}],[\"405\",{\"1\":{\"496\":1}}],[\"403\",{\"1\":{\"496\":1}}],[\"402\",{\"1\":{\"496\":1}}],[\"401\",{\"1\":{\"496\":1}}],[\"400\",{\"1\":{\"496\":1,\"949\":1,\"1354\":1}}],[\"40\",{\"1\":{\"496\":20}}],[\"404\",{\"1\":{\"495\":2,\"496\":1}}],[\"4月\",{\"1\":{\"460\":4}}],[\"479\",{\"1\":{\"496\":1}}],[\"478\",{\"1\":{\"496\":1}}],[\"477\",{\"1\":{\"496\":1}}],[\"476\",{\"1\":{\"496\":1}}],[\"475\",{\"1\":{\"496\":1}}],[\"474\",{\"1\":{\"496\":1}}],[\"473\",{\"1\":{\"496\":1}}],[\"472\",{\"1\":{\"496\":1}}],[\"471\",{\"1\":{\"496\":1}}],[\"470\",{\"1\":{\"496\":1}}],[\"47\",{\"1\":{\"460\":3,\"496\":20}}],[\"489\",{\"1\":{\"496\":1}}],[\"488\",{\"1\":{\"496\":1}}],[\"487\",{\"1\":{\"496\":1}}],[\"486\",{\"1\":{\"496\":1}}],[\"485\",{\"1\":{\"496\":1}}],[\"484\",{\"1\":{\"496\":1}}],[\"483\",{\"1\":{\"496\":1}}],[\"482\",{\"1\":{\"496\":1}}],[\"481\",{\"1\":{\"496\":1}}],[\"480\",{\"1\":{\"496\":1}}],[\"48ef03bb2ecf\",{\"1\":{\"496\":2}}],[\"48\",{\"1\":{\"460\":1,\"496\":15}}],[\"4xx\",{\"1\":{\"288\":1}}],[\"4dbb42b7\",{\"1\":{\"280\":3}}],[\"4\",{\"1\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"111\":1,\"112\":2,\"115\":1,\"117\":1,\"182\":2,\"190\":3,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"245\":5,\"251\":1,\"258\":3,\"264\":4,\"358\":1,\"377\":8,\"378\":3,\"392\":8,\"400\":2,\"460\":6,\"494\":2,\"496\":4,\"514\":2,\"544\":1,\"557\":4,\"570\":3,\"615\":3,\"627\":1,\"678\":1,\"743\":3,\"747\":1,\"750\":2,\"751\":2,\"781\":1,\"784\":1,\"793\":2,\"794\":1,\"808\":1,\"812\":1,\"842\":1,\"865\":1,\"897\":2,\"904\":2,\"909\":2,\"948\":1,\"966\":1,\"981\":1,\"1028\":2,\"1083\":1,\"1148\":3,\"1152\":1,\"1155\":2,\"1156\":2,\"1186\":1,\"1189\":1,\"1198\":2,\"1199\":1,\"1213\":1,\"1217\":1,\"1247\":1,\"1270\":1,\"1302\":2,\"1309\":2,\"1314\":2,\"1353\":1,\"1371\":1,\"1386\":1,\"1433\":1,\"1449\":1,\"1450\":1,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":2,\"1478\":2}}],[\"注\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"注入集合\",{\"0\":{\"601\":1}}],[\"注释内容\",{\"1\":{\"504\":1}}],[\"注释内容或\",{\"1\":{\"504\":1}}],[\"注释\",{\"1\":{\"504\":2,\"829\":1,\"1234\":1}}],[\"注销账户\",{\"1\":{\"335\":1}}],[\"注意jdk1\",{\"1\":{\"909\":1,\"1314\":1}}],[\"注意nums在方法内部其实就是数组\",{\"1\":{\"893\":1,\"1298\":1}}],[\"注意过滤的不是filter形参的元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"注意点\",{\"0\":{\"760\":1,\"917\":1,\"1165\":1,\"1322\":1}}],[\"注意强转的时候一定要复合逻辑\",{\"0\":{\"731\":1,\"1136\":1}}],[\"注意事项\",{\"0\":{\"699\":1,\"717\":1,\"971\":1,\"1104\":1,\"1122\":1,\"1376\":1},\"1\":{\"774\":1,\"1179\":1}}],[\"注意需要在主配置类上引入这个第三方配置类\",{\"1\":{\"610\":1}}],[\"注意区别\",{\"1\":{\"557\":1}}],[\"注意版本要使用5\",{\"1\":{\"557\":1}}],[\"注意springboot的application\",{\"1\":{\"494\":1}}],[\"注意软连接必须使用绝对路径\",{\"1\":{\"475\":1}}],[\"注意只有文件\",{\"1\":{\"465\":1}}],[\"注意并不是所有的用户都可以使用sudo\",{\"1\":{\"462\":1}}],[\"注意并没有后台运行的功能\",{\"1\":{\"424\":1}}],[\"注意一下啊\",{\"1\":{\"437\":1}}],[\"注意了nohup没有后台运行的意思\",{\"1\":{\"424\":1}}],[\"注意仅仅解决get请求方式乱码\",{\"1\":{\"309\":1}}],[\"注意范围scope为provided运行时无效\",{\"1\":{\"295\":1}}],[\"注意要在url后面加上\",{\"1\":{\"229\":1}}],[\"注意\",{\"0\":{\"343\":1,\"390\":1,\"393\":1,\"627\":1},\"1\":{\"226\":1,\"234\":1,\"345\":1,\"348\":1,\"442\":1,\"490\":2,\"522\":1,\"631\":1,\"646\":1,\"665\":1,\"690\":1,\"694\":1,\"717\":1,\"749\":1,\"750\":1,\"756\":1,\"758\":1,\"763\":1,\"784\":1,\"833\":1,\"847\":1,\"868\":1,\"896\":1,\"951\":1,\"985\":1,\"986\":1,\"995\":2,\"1009\":1,\"1018\":1,\"1026\":1,\"1036\":1,\"1051\":1,\"1070\":1,\"1095\":1,\"1099\":1,\"1122\":1,\"1154\":1,\"1155\":1,\"1161\":1,\"1163\":1,\"1168\":1,\"1189\":1,\"1238\":1,\"1252\":1,\"1273\":1,\"1301\":1,\"1356\":1,\"1390\":1,\"1391\":1,\"1400\":2,\"1414\":1,\"1468\":1,\"1476\":1}}],[\"注意千万不要传递\",{\"1\":{\"101\":1}}],[\"注册服务端端口\",{\"1\":{\"1460\":1}}],[\"注册端口\",{\"1\":{\"1449\":1,\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"注册是免费的\",{\"1\":{\"353\":1}}],[\"注册\",{\"1\":{\"326\":1}}],[\"注册驱动\",{\"1\":{\"226\":1,\"228\":2,\"229\":1,\"231\":1,\"233\":1}}],[\"注册中心和配置中心\",{\"1\":{\"171\":1}}],[\"注册中心\",{\"1\":{\"107\":1}}],[\"注册配置类\",{\"1\":{\"103\":1}}],[\"注解注解\",{\"1\":{\"616\":1}}],[\"注解完成简单功能\",{\"1\":{\"284\":1}}],[\"注解完成增删改查\",{\"0\":{\"283\":1}}],[\"注解开发总结\",{\"0\":{\"611\":1}}],[\"注解开发定义bean\",{\"0\":{\"605\":1}}],[\"注解开发\",{\"0\":{\"604\":1},\"1\":{\"283\":1}}],[\"注解开启\",{\"1\":{\"107\":1}}],[\"注解中\",{\"1\":{\"116\":1}}],[\"注解来开启定时任务\",{\"1\":{\"116\":1}}],[\"注解\",{\"1\":{\"103\":1,\"107\":1,\"282\":1,\"295\":1,\"616\":1,\"747\":1,\"1152\":1}}],[\"注定要探索java的奥秘\",{\"1\":{\"20\":1}}],[\"通配符\",{\"1\":{\"877\":1,\"1282\":1}}],[\"通用框架的底层原理\",{\"0\":{\"816\":1,\"1221\":1}}],[\"通用方式\",{\"1\":{\"308\":1}}],[\"通俗的讲就是\",{\"1\":{\"690\":1,\"1095\":1}}],[\"通信协议\",{\"0\":{\"1436\":1}}],[\"通信\",{\"1\":{\"207\":1}}],[\"通知\",{\"1\":{\"136\":1}}],[\"通常我们会在接口上加一个\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"通常情况下\",{\"1\":{\"849\":1,\"1254\":1}}],[\"通常也需要满足这样的设计要求来编写代码\",{\"0\":{\"670\":1,\"1075\":1}}],[\"通常将成员变量私有\",{\"1\":{\"668\":1,\"1073\":1}}],[\"通常是模块名\",{\"1\":{\"256\":1}}],[\"通常是域名的反写\",{\"1\":{\"256\":1}}],[\"通常被用于暂停执行\",{\"1\":{\"207\":1}}],[\"通常被用于线程间交互\",{\"1\":{\"207\":1}}],[\"通常基于请求的特性\",{\"1\":{\"108\":1}}],[\"通常要把独立于业务的请求响应封装对象\",{\"1\":{\"107\":1}}],[\"通常会把签名等元信息放到请求头参数中传递\",{\"1\":{\"101\":1}}],[\"通过共享一个数据的方式实现\",{\"1\":{\"939\":1,\"1344\":1}}],[\"通过futuretask的get方法区获取任务执行的结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"通过find命令搜索指定文件\",{\"1\":{\"453\":1}}],[\"通过finalshell\",{\"1\":{\"353\":1}}],[\"通过零宽度负视角\",{\"1\":{\"819\":1,\"1224\":1}}],[\"通过零宽度负展望\",{\"1\":{\"819\":1,\"1224\":1}}],[\"通过零宽度正向后看\",{\"1\":{\"819\":1,\"1224\":1}}],[\"通过零宽度正向往前看\",{\"1\":{\"819\":1,\"1224\":1}}],[\"通过成员变量得到成员变量的值\",{\"1\":{\"816\":1,\"1221\":1}}],[\"通过系统获得\",{\"1\":{\"776\":1,\"1181\":1}}],[\"通过tostring\",{\"1\":{\"763\":1,\"1168\":1}}],[\"通过索引可以锁定具体的值\",{\"1\":{\"653\":1,\"1058\":1}}],[\"通过er图对数据库进行逻辑建模\",{\"1\":{\"528\":1}}],[\"通过可视化工具进行拖拽很容易进行文件的上传和下载\",{\"1\":{\"488\":1}}],[\"通过命令行上传和下载\",{\"0\":{\"488\":1}}],[\"通过mkdir命令创建文件夹\",{\"1\":{\"445\":1}}],[\"通过mapper代理可以简化成这样\",{\"1\":{\"265\":1}}],[\"通过ssh协议互相传输文件\",{\"1\":{\"373\":1}}],[\"通过ssh协议完成文件的复制\",{\"1\":{\"373\":1}}],[\"通过sqlsession的getmapper方法获取mapper接口的代理对象\",{\"1\":{\"266\":1}}],[\"通过账户+秘钥文件的方式做用户认证\",{\"1\":{\"368\":1}}],[\"通过账户+密码的认证方式来做用户认证\",{\"1\":{\"368\":1}}],[\"通过yum安装最新稳定版的nginx\",{\"1\":{\"356\":1}}],[\"通过如上操作\",{\"1\":{\"356\":1}}],[\"通过grep命令\",{\"1\":{\"347\":1,\"350\":1}}],[\"通过请求1获取session对象\",{\"1\":{\"334\":1}}],[\"通过请求头获取到用户标识\",{\"1\":{\"101\":1}}],[\"通过转发到el\",{\"1\":{\"322\":1}}],[\"通过response对象获取字节输出流\",{\"1\":{\"315\":1}}],[\"通过response对象获取字符输入流\",{\"1\":{\"314\":1}}],[\"通过roll\",{\"1\":{\"154\":1}}],[\"通过iso\",{\"1\":{\"309\":1}}],[\"通过这种方法创建了两个对象\",{\"1\":{\"743\":1,\"1148\":1}}],[\"通过这行代码设置字符输入流的编码\",{\"1\":{\"309\":1}}],[\"通过这段探险\",{\"1\":{\"83\":1}}],[\"通过utf\",{\"1\":{\"309\":1}}],[\"通过设置坐标的依赖范围\",{\"1\":{\"259\":1}}],[\"通过一小段描述信息来管理项目的构建\",{\"1\":{\"249\":1}}],[\"通过一段时间的训练和实践\",{\"1\":{\"63\":1}}],[\"通过数据库连接池工具类获取连接对象\",{\"1\":{\"245\":1}}],[\"通过connection对象获取\",{\"1\":{\"233\":1}}],[\"通过该线程调用run方法执行run方法中所定义的逻辑代码\",{\"1\":{\"201\":1}}],[\"通过三级缓存中获取objectfactory来生成一个a的对象同时存入二级缓存\",{\"1\":{\"164\":1}}],[\"通过beandefinition获取bean的定义信息\",{\"1\":{\"163\":1}}],[\"通过逆操作恢复原来的数据\",{\"1\":{\"153\":1}}],[\"通过二级索引查找到主键值\",{\"1\":{\"146\":1}}],[\"通过消息队列mq通知缓存更新的服务来删除对应的数据\",{\"1\":{\"127\":1}}],[\"通过给\",{\"1\":{\"119\":1}}],[\"通过网关转发到实际的\",{\"1\":{\"102\":1}}],[\"通过链式调用的方式\",{\"1\":{\"99\":1}}],[\"通过\",{\"1\":{\"98\":1,\"802\":1,\"1207\":1}}],[\"通过不懈的努力\",{\"1\":{\"73\":1}}],[\"通过不断地尝试和修正错误\",{\"1\":{\"37\":1}}],[\"通过灵活运用\",{\"1\":{\"71\":1}}],[\"通过团队合作\",{\"1\":{\"68\":1}}],[\"通过模拟各种场景和情况\",{\"1\":{\"62\":1}}],[\"通过使用swing或javafx等工具\",{\"1\":{\"57\":1}}],[\"通过使用线程和锁\",{\"1\":{\"55\":1}}],[\"通过学习java\",{\"1\":{\"73\":1}}],[\"通过学习文件输入输出流\",{\"1\":{\"53\":1}}],[\"通过学习和实践\",{\"1\":{\"47\":1}}],[\"通过继承和多态\",{\"1\":{\"51\":1}}],[\"通过封装数据和行为\",{\"1\":{\"51\":1}}],[\"通过实践\",{\"1\":{\"45\":1}}],[\"通过感受继承的力量\",{\"1\":{\"43\":1}}],[\"通过练习和实践\",{\"1\":{\"42\":1}}],[\"3b\",{\"1\":{\"995\":1,\"1400\":1}}],[\"3da25c0a0b2a\",{\"1\":{\"496\":1}}],[\"399\",{\"1\":{\"496\":1}}],[\"398\",{\"1\":{\"496\":1}}],[\"397\",{\"1\":{\"496\":1}}],[\"396\",{\"1\":{\"496\":1}}],[\"395\",{\"1\":{\"496\":1}}],[\"394\",{\"1\":{\"496\":1}}],[\"393\",{\"1\":{\"496\":1}}],[\"392\",{\"1\":{\"496\":1}}],[\"391\",{\"1\":{\"496\":1}}],[\"390\",{\"1\":{\"496\":1}}],[\"39\",{\"1\":{\"496\":22}}],[\"379\",{\"1\":{\"496\":1}}],[\"378\",{\"1\":{\"496\":1}}],[\"377\",{\"1\":{\"496\":1}}],[\"376\",{\"1\":{\"496\":1}}],[\"375\",{\"1\":{\"496\":1}}],[\"374\",{\"1\":{\"496\":1}}],[\"373\",{\"1\":{\"496\":1}}],[\"372\",{\"1\":{\"496\":1}}],[\"371\",{\"1\":{\"496\":1}}],[\"370\",{\"1\":{\"496\":1}}],[\"37\",{\"1\":{\"496\":18}}],[\"369\",{\"1\":{\"496\":1}}],[\"368\",{\"1\":{\"496\":1}}],[\"367\",{\"1\":{\"496\":1}}],[\"366\",{\"1\":{\"496\":1}}],[\"365\",{\"1\":{\"496\":1}}],[\"364\",{\"1\":{\"496\":1}}],[\"363\",{\"1\":{\"496\":1}}],[\"36319\",{\"1\":{\"496\":1}}],[\"362\",{\"1\":{\"496\":1}}],[\"361\",{\"1\":{\"496\":1}}],[\"360\",{\"1\":{\"496\":1}}],[\"36\",{\"1\":{\"496\":11,\"1029\":1,\"1433\":1,\"1479\":1}}],[\"36之间的数据只需要查找到6然后根据指针来进行查找即可\",{\"1\":{\"144\":1}}],[\"359\",{\"1\":{\"496\":1}}],[\"358\",{\"1\":{\"496\":1}}],[\"357\",{\"1\":{\"496\":1}}],[\"356\",{\"1\":{\"496\":1}}],[\"355\",{\"1\":{\"496\":1}}],[\"354\",{\"1\":{\"496\":1}}],[\"353\",{\"1\":{\"496\":1}}],[\"352\",{\"1\":{\"496\":1}}],[\"3500\",{\"1\":{\"525\":2}}],[\"350\",{\"1\":{\"496\":1}}],[\"35\",{\"1\":{\"496\":10}}],[\"351\",{\"1\":{\"353\":1,\"496\":1}}],[\"349\",{\"1\":{\"496\":1}}],[\"348\",{\"1\":{\"496\":1}}],[\"347\",{\"1\":{\"496\":1}}],[\"346\",{\"1\":{\"496\":1}}],[\"345\",{\"1\":{\"496\":1}}],[\"344\",{\"1\":{\"496\":1}}],[\"343\",{\"1\":{\"496\":1}}],[\"342\",{\"1\":{\"496\":1}}],[\"341\",{\"1\":{\"496\":1}}],[\"340\",{\"1\":{\"496\":1}}],[\"34\",{\"1\":{\"496\":14,\"1019\":1,\"1469\":1}}],[\"33+33\",{\"1\":{\"831\":1,\"1236\":1}}],[\"339\",{\"1\":{\"496\":1}}],[\"338\",{\"1\":{\"496\":1}}],[\"337\",{\"1\":{\"496\":1}}],[\"336\",{\"1\":{\"496\":1}}],[\"335\",{\"1\":{\"496\":1}}],[\"334\",{\"1\":{\"496\":1}}],[\"333\",{\"1\":{\"496\":1}}],[\"332\",{\"1\":{\"496\":1}}],[\"331\",{\"1\":{\"496\":1}}],[\"330\",{\"1\":{\"496\":1}}],[\"3306\",{\"1\":{\"226\":3,\"229\":1,\"231\":1,\"233\":1,\"234\":1,\"347\":1,\"350\":1,\"494\":3,\"496\":14,\"570\":1,\"627\":1}}],[\"33\",{\"1\":{\"496\":15,\"654\":1,\"751\":7,\"763\":1,\"793\":1,\"794\":2,\"814\":2,\"1059\":1,\"1156\":7,\"1168\":1,\"1198\":1,\"1199\":2,\"1219\":2}}],[\"32的编码成二进制后再存储到计算机\",{\"1\":{\"986\":1,\"1391\":1}}],[\"329\",{\"1\":{\"496\":1}}],[\"328\",{\"1\":{\"496\":1}}],[\"327\",{\"1\":{\"496\":1}}],[\"326\",{\"1\":{\"496\":1}}],[\"325\",{\"1\":{\"496\":1}}],[\"324\",{\"1\":{\"496\":1}}],[\"323\",{\"1\":{\"496\":1}}],[\"322\",{\"1\":{\"496\":1}}],[\"321\",{\"1\":{\"496\":1}}],[\"320\",{\"1\":{\"496\":1}}],[\"32\",{\"1\":{\"496\":15,\"510\":1,\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"319\",{\"1\":{\"496\":1}}],[\"318\",{\"1\":{\"496\":1}}],[\"317\",{\"1\":{\"496\":1}}],[\"316\",{\"1\":{\"496\":1}}],[\"315\",{\"1\":{\"496\":1}}],[\"314\",{\"1\":{\"496\":1}}],[\"313\",{\"1\":{\"496\":1}}],[\"312\",{\"1\":{\"496\":1}}],[\"311\",{\"1\":{\"496\":1}}],[\"310\",{\"1\":{\"496\":1}}],[\"31\",{\"1\":{\"496\":17}}],[\"3月\",{\"1\":{\"460\":8}}],[\"3月20\",{\"1\":{\"456\":3}}],[\"3上执行如下语句\",{\"1\":{\"377\":2}}],[\"3=node3\",{\"1\":{\"375\":1}}],[\"3台都要添加\",{\"1\":{\"366\":1}}],[\"3个端口\",{\"1\":{\"358\":1}}],[\"309\",{\"1\":{\"496\":1}}],[\"308\",{\"1\":{\"496\":1}}],[\"307\",{\"1\":{\"496\":1}}],[\"306\",{\"1\":{\"496\":1}}],[\"305\",{\"1\":{\"496\":1}}],[\"304\",{\"1\":{\"496\":1}}],[\"303\",{\"1\":{\"496\":1}}],[\"301\",{\"1\":{\"496\":1,\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"30s\",{\"1\":{\"495\":1}}],[\"30↓\",{\"1\":{\"435\":1}}],[\"30j\",{\"1\":{\"435\":1}}],[\"30\",{\"1\":{\"435\":2,\"496\":15,\"518\":2,\"782\":1,\"793\":1,\"873\":1,\"893\":2,\"1027\":2,\"1029\":1,\"1187\":1,\"1198\":1,\"1278\":1,\"1298\":2,\"1477\":2,\"1479\":1}}],[\"30分钟自动销毁\",{\"1\":{\"335\":1}}],[\"302\",{\"1\":{\"313\":4,\"496\":1}}],[\"30000000000000004\",{\"1\":{\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"3000\",{\"1\":{\"415\":1,\"925\":1,\"939\":1,\"954\":1,\"1330\":1,\"1344\":1,\"1359\":1}}],[\"300秒内如果有10个key修改了则触发备份\",{\"1\":{\"128\":1}}],[\"300\",{\"1\":{\"128\":1,\"496\":1,\"949\":1,\"1354\":1}}],[\"3xx\",{\"1\":{\"288\":1}}],[\"389\",{\"1\":{\"496\":1}}],[\"388\",{\"1\":{\"496\":1}}],[\"3888\",{\"1\":{\"375\":3}}],[\"387\",{\"1\":{\"496\":1}}],[\"385\",{\"1\":{\"496\":1}}],[\"384\",{\"1\":{\"496\":1}}],[\"383\",{\"1\":{\"496\":1}}],[\"382\",{\"1\":{\"496\":1}}],[\"381\",{\"1\":{\"496\":1}}],[\"380\",{\"1\":{\"496\":1}}],[\"38\",{\"1\":{\"280\":7,\"496\":20}}],[\"386\",{\"1\":{\"58\":1,\"496\":1}}],[\"3<\",{\"1\":{\"264\":2,\"566\":1,\"570\":1}}],[\"3s\",{\"1\":{\"240\":1}}],[\"3\",{\"1\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"108\":2,\"112\":1,\"115\":1,\"117\":1,\"139\":1,\"182\":1,\"190\":1,\"226\":1,\"229\":1,\"231\":2,\"233\":1,\"240\":2,\"245\":3,\"251\":1,\"261\":1,\"264\":5,\"265\":2,\"267\":2,\"270\":2,\"271\":2,\"272\":1,\"273\":1,\"307\":1,\"308\":1,\"315\":1,\"320\":3,\"358\":2,\"375\":8,\"378\":1,\"386\":15,\"387\":2,\"389\":1,\"460\":1,\"490\":4,\"494\":5,\"496\":2,\"514\":2,\"525\":1,\"557\":2,\"570\":1,\"615\":4,\"628\":2,\"660\":1,\"678\":1,\"679\":1,\"686\":1,\"688\":2,\"721\":1,\"743\":1,\"747\":2,\"750\":2,\"751\":2,\"763\":1,\"774\":1,\"781\":1,\"784\":1,\"793\":2,\"794\":1,\"802\":1,\"804\":1,\"808\":1,\"812\":2,\"819\":1,\"821\":2,\"823\":1,\"842\":1,\"865\":1,\"897\":7,\"904\":1,\"909\":3,\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":1,\"948\":3,\"949\":1,\"951\":2,\"956\":1,\"966\":1,\"981\":1,\"994\":1,\"995\":7,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1004\":1,\"1008\":1,\"1020\":2,\"1022\":1,\"1028\":2,\"1029\":2,\"1033\":2,\"1065\":1,\"1083\":1,\"1084\":1,\"1091\":1,\"1093\":2,\"1126\":1,\"1148\":1,\"1152\":2,\"1155\":2,\"1156\":2,\"1168\":1,\"1179\":1,\"1186\":1,\"1189\":1,\"1198\":2,\"1199\":1,\"1207\":1,\"1209\":1,\"1213\":1,\"1217\":2,\"1224\":1,\"1226\":2,\"1228\":1,\"1247\":1,\"1270\":1,\"1302\":7,\"1309\":1,\"1314\":3,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":1,\"1353\":3,\"1354\":1,\"1356\":2,\"1361\":1,\"1371\":1,\"1386\":1,\"1399\":1,\"1400\":7,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1409\":1,\"1413\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":1,\"1470\":2,\"1472\":1,\"1478\":2,\"1479\":2}}],[\"随着类的加载而加载\",{\"1\":{\"682\":1,\"1087\":1}}],[\"随着主角在迷宫中不断前行\",{\"1\":{\"79\":1}}],[\"随意填入内容\",{\"1\":{\"387\":1}}],[\"随机删除设置了过期时间的键\",{\"1\":{\"130\":1}}],[\"随机删除任意键\",{\"1\":{\"130\":1}}],[\"随机数等\",{\"1\":{\"101\":1}}],[\"签名\",{\"1\":{\"101\":1}}],[\"签名加密算法此处选择\",{\"1\":{\"101\":1}}],[\"签名的内容包括请求参数\",{\"1\":{\"101\":1}}],[\"签名认证算法校验用户请求的合法性\",{\"1\":{\"102\":1}}],[\"签名认证算法是一种用于验证\",{\"1\":{\"101\":1}}],[\"签名认证算法\",{\"0\":{\"101\":1},\"1\":{\"95\":1,\"101\":1}}],[\"2+10\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"2的16次方\",{\"1\":{\"985\":1,\"1390\":1}}],[\"2的8次方\",{\"1\":{\"984\":1,\"1389\":1}}],[\"2f\",{\"1\":{\"979\":3,\"1384\":3}}],[\"2号\",{\"1\":{\"924\":2,\"1329\":2}}],[\"2种\",{\"1\":{\"891\":1,\"1296\":1}}],[\"2=49\",{\"1\":{\"831\":1,\"1236\":1}}],[\"2=node2\",{\"1\":{\"375\":1}}],[\"2l\",{\"1\":{\"781\":1,\"1186\":1}}],[\"2版本及以前使用mysql8以上会报错\",{\"1\":{\"627\":1}}],[\"2设置当前操作访问路径\",{\"1\":{\"557\":1}}],[\"2d002dbd5b5c\",{\"1\":{\"496\":2}}],[\"24<\",{\"1\":{\"570\":1,\"615\":1}}],[\"249\",{\"1\":{\"496\":1}}],[\"24991\",{\"1\":{\"456\":1}}],[\"248\",{\"1\":{\"496\":1}}],[\"247\",{\"1\":{\"496\":1}}],[\"246\",{\"1\":{\"496\":1}}],[\"245\",{\"1\":{\"496\":1}}],[\"243\",{\"1\":{\"496\":1}}],[\"242\",{\"1\":{\"496\":1}}],[\"241\",{\"1\":{\"496\":1}}],[\"240\",{\"1\":{\"496\":1}}],[\"24\",{\"1\":{\"496\":16,\"781\":1,\"793\":1,\"1028\":1,\"1186\":1,\"1198\":1,\"1478\":1}}],[\"244\",{\"1\":{\"495\":1,\"496\":1,\"1454\":1}}],[\"299\",{\"1\":{\"496\":1}}],[\"298\",{\"1\":{\"496\":1}}],[\"297\",{\"1\":{\"496\":1}}],[\"296\",{\"1\":{\"496\":1}}],[\"295\",{\"1\":{\"496\":1}}],[\"294\",{\"1\":{\"496\":1}}],[\"293\",{\"1\":{\"496\":1}}],[\"292\",{\"1\":{\"496\":1}}],[\"291\",{\"1\":{\"496\":1}}],[\"290\",{\"1\":{\"496\":1}}],[\"29\",{\"1\":{\"460\":2,\"496\":9}}],[\"269\",{\"1\":{\"496\":1}}],[\"268\",{\"1\":{\"496\":1}}],[\"267\",{\"1\":{\"496\":1}}],[\"266\",{\"1\":{\"496\":1}}],[\"265\",{\"1\":{\"496\":1}}],[\"2652d0dcc163\",{\"1\":{\"496\":1}}],[\"264\",{\"1\":{\"496\":1}}],[\"263\",{\"1\":{\"496\":1}}],[\"262\",{\"1\":{\"496\":1}}],[\"261\",{\"1\":{\"496\":1}}],[\"260\",{\"1\":{\"496\":1}}],[\"26\",{\"1\":{\"455\":1,\"496\":17,\"1028\":1,\"1029\":1,\"1478\":1,\"1479\":1}}],[\"219\",{\"1\":{\"496\":1}}],[\"218\",{\"1\":{\"496\":1}}],[\"2181\",{\"1\":{\"377\":9,\"378\":1}}],[\"217\",{\"1\":{\"496\":1}}],[\"216\",{\"1\":{\"496\":1}}],[\"215\",{\"1\":{\"496\":1}}],[\"21597\",{\"1\":{\"456\":1}}],[\"214\",{\"1\":{\"496\":1}}],[\"213\",{\"1\":{\"496\":1}}],[\"212\",{\"1\":{\"496\":1}}],[\"211\",{\"1\":{\"496\":1}}],[\"210\",{\"1\":{\"496\":1}}],[\"21\",{\"1\":{\"435\":1,\"460\":5,\"476\":1,\"496\":22,\"615\":1,\"793\":3,\"891\":1,\"1027\":2,\"1028\":4,\"1198\":3,\"1296\":1,\"1477\":2,\"1478\":4}}],[\"2>\",{\"1\":{\"377\":1}}],[\"259\",{\"1\":{\"496\":1}}],[\"25948\",{\"1\":{\"456\":1}}],[\"25947\",{\"1\":{\"456\":1}}],[\"25946\",{\"1\":{\"456\":3}}],[\"258\",{\"1\":{\"496\":1}}],[\"257\",{\"1\":{\"496\":1}}],[\"256\",{\"1\":{\"496\":1}}],[\"25672端口\",{\"1\":{\"358\":1}}],[\"25672\",{\"1\":{\"358\":1}}],[\"255\",{\"1\":{\"496\":1,\"1429\":2,\"1453\":8,\"1454\":3}}],[\"254\",{\"1\":{\"496\":1}}],[\"253\",{\"1\":{\"496\":1}}],[\"2526c192ec6e\",{\"1\":{\"496\":1}}],[\"252\",{\"1\":{\"496\":1}}],[\"251\",{\"1\":{\"496\":1}}],[\"250\",{\"1\":{\"496\":1}}],[\"25\",{\"1\":{\"460\":1,\"496\":14,\"891\":1,\"1296\":1}}],[\"25<\",{\"1\":{\"258\":1,\"264\":1}}],[\"239\",{\"1\":{\"496\":1,\"1454\":1}}],[\"238\",{\"1\":{\"496\":1}}],[\"237\",{\"1\":{\"496\":1}}],[\"236\",{\"1\":{\"496\":1}}],[\"235\",{\"1\":{\"496\":1}}],[\"234\",{\"1\":{\"496\":1}}],[\"233\",{\"1\":{\"496\":1}}],[\"232\",{\"1\":{\"496\":1}}],[\"23205\",{\"1\":{\"496\":1}}],[\"231\",{\"1\":{\"496\":1}}],[\"230\",{\"1\":{\"496\":1}}],[\"23当前系统时间\",{\"1\":{\"481\":1}}],[\"23行\",{\"1\":{\"362\":1}}],[\"23\",{\"1\":{\"358\":1,\"481\":2,\"496\":14,\"638\":1,\"782\":1,\"793\":1,\"840\":1,\"891\":1,\"1019\":1,\"1027\":2,\"1028\":1,\"1043\":1,\"1187\":1,\"1198\":1,\"1245\":1,\"1296\":1,\"1469\":1,\"1477\":2,\"1478\":1}}],[\"28<\",{\"1\":{\"570\":1,\"615\":1}}],[\"289\",{\"1\":{\"496\":1}}],[\"288\",{\"1\":{\"496\":1}}],[\"2888\",{\"1\":{\"375\":3}}],[\"287\",{\"1\":{\"496\":1}}],[\"286\",{\"1\":{\"496\":1}}],[\"285\",{\"1\":{\"496\":1}}],[\"284\",{\"1\":{\"496\":1}}],[\"283\",{\"1\":{\"496\":1}}],[\"282\",{\"1\":{\"496\":1}}],[\"281\",{\"1\":{\"496\":1}}],[\"280\",{\"1\":{\"496\":1}}],[\"28\",{\"1\":{\"309\":4,\"494\":1,\"496\":18,\"786\":1,\"816\":1,\"1191\":1,\"1221\":1}}],[\"279\",{\"1\":{\"496\":1}}],[\"278\",{\"1\":{\"496\":1}}],[\"277\",{\"1\":{\"496\":1}}],[\"276\",{\"1\":{\"496\":1}}],[\"275\",{\"1\":{\"496\":1}}],[\"274\",{\"1\":{\"496\":1}}],[\"273\",{\"1\":{\"496\":1}}],[\"272\",{\"1\":{\"496\":1}}],[\"271\",{\"1\":{\"496\":1}}],[\"270\",{\"1\":{\"496\":1}}],[\"27版本\",{\"1\":{\"352\":1}}],[\"27\",{\"1\":{\"309\":4,\"354\":6,\"460\":1,\"496\":35}}],[\"2<\",{\"1\":{\"293\":1,\"318\":1,\"323\":2,\"557\":1,\"570\":3,\"615\":2}}],[\"2xx\",{\"1\":{\"288\":1}}],[\"209\",{\"1\":{\"496\":1}}],[\"208\",{\"1\":{\"496\":1}}],[\"207\",{\"1\":{\"496\":1}}],[\"206\",{\"1\":{\"496\":1}}],[\"205\",{\"1\":{\"496\":1}}],[\"204\",{\"1\":{\"496\":1}}],[\"2046508\",{\"1\":{\"481\":1}}],[\"203\",{\"1\":{\"496\":1}}],[\"201\",{\"1\":{\"496\":1}}],[\"2013\",{\"1\":{\"460\":2}}],[\"20↓\",{\"1\":{\"437\":1}}],[\"20j\",{\"1\":{\"437\":1}}],[\"20yy\",{\"1\":{\"435\":1}}],[\"20dd\",{\"1\":{\"435\":1}}],[\"20g\",{\"1\":{\"435\":1}}],[\"2000\",{\"1\":{\"939\":1,\"954\":1,\"1344\":1,\"1359\":1}}],[\"20040\",{\"1\":{\"571\":1}}],[\"20041\",{\"1\":{\"571\":1}}],[\"20030\",{\"1\":{\"571\":1}}],[\"20031\",{\"1\":{\"571\":1}}],[\"20020\",{\"1\":{\"571\":1}}],[\"20021\",{\"1\":{\"571\":1}}],[\"200s\",{\"1\":{\"435\":1}}],[\"200\",{\"1\":{\"312\":1,\"435\":1,\"496\":1,\"525\":2,\"529\":1,\"638\":1,\"921\":1,\"949\":1,\"1026\":1,\"1043\":1,\"1326\":1,\"1354\":1,\"1466\":2,\"1476\":1}}],[\"200表示响应状态码\",{\"1\":{\"288\":1}}],[\"20010\",{\"1\":{\"571\":1}}],[\"20011\",{\"1\":{\"571\":1}}],[\"2001\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"20<\",{\"1\":{\"264\":1,\"615\":2}}],[\"20\",{\"1\":{\"240\":1,\"243\":2,\"435\":9,\"437\":1,\"481\":3,\"496\":46,\"510\":1,\"518\":2,\"526\":9,\"790\":1,\"793\":3,\"873\":1,\"893\":2,\"1009\":1,\"1027\":1,\"1195\":1,\"1198\":3,\"1278\":1,\"1298\":2,\"1414\":1,\"1477\":1}}],[\"2021年08月06日\",{\"1\":{\"781\":1,\"1186\":1}}],[\"2020\",{\"1\":{\"525\":2,\"635\":1,\"636\":1,\"1040\":1,\"1041\":1}}],[\"202\",{\"1\":{\"496\":1}}],[\"2022年2月28日\",{\"1\":{\"782\":1,\"1187\":1}}],[\"20221026202935745\",{\"1\":{\"382\":1}}],[\"20221025174522487\",{\"1\":{\"377\":1}}],[\"20221025104825204\",{\"1\":{\"365\":1}}],[\"20221025104446044\",{\"1\":{\"365\":1}}],[\"20221025104432927\",{\"1\":{\"365\":1}}],[\"20221025104427160\",{\"1\":{\"365\":1}}],[\"20221025104414576\",{\"1\":{\"365\":1}}],[\"20221025104345484\",{\"1\":{\"365\":1}}],[\"20221025104329109\",{\"1\":{\"365\":1}}],[\"20221025104312091\",{\"1\":{\"365\":1}}],[\"20221025104131303\",{\"1\":{\"365\":1}}],[\"20221025104157628\",{\"1\":{\"365\":1}}],[\"20221025085432335\",{\"1\":{\"362\":1}}],[\"20221018154823983\",{\"1\":{\"358\":1}}],[\"20221018143113053\",{\"1\":{\"356\":1}}],[\"20221017223915498\",{\"1\":{\"354\":1}}],[\"20221017223814737\",{\"1\":{\"354\":1}}],[\"20221017163706026\",{\"1\":{\"353\":1}}],[\"20221017163440491\",{\"1\":{\"353\":1}}],[\"20221012192303607\",{\"1\":{\"350\":1}}],[\"20221012183746802\",{\"1\":{\"347\":1}}],[\"20221012182744115\",{\"1\":{\"347\":1}}],[\"20221012182716598\",{\"1\":{\"346\":1}}],[\"20221012182514865\",{\"1\":{\"346\":1}}],[\"2022\",{\"1\":{\"320\":1,\"346\":1,\"349\":1,\"460\":1,\"525\":2,\"786\":1,\"965\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1191\":1,\"1370\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"20220102\",{\"1\":{\"751\":1,\"1156\":1}}],[\"20220101\",{\"1\":{\"751\":1,\"1156\":1}}],[\"20220809181736575\",{\"1\":{\"858\":1,\"1263\":1}}],[\"20220809181620271\",{\"1\":{\"858\":1,\"1263\":1}}],[\"20220809181657857\",{\"1\":{\"858\":1,\"1263\":1}}],[\"20220809175738079\",{\"1\":{\"855\":1,\"1260\":1}}],[\"20220809175546477\",{\"1\":{\"855\":1,\"1260\":1}}],[\"20220809175404361\",{\"1\":{\"854\":1,\"1259\":1}}],[\"20220809175052880\",{\"1\":{\"853\":1,\"1258\":1}}],[\"20220809174949079\",{\"1\":{\"853\":1,\"1258\":1}}],[\"20220809172438463\",{\"1\":{\"852\":1,\"1257\":1}}],[\"20220809172259302\",{\"1\":{\"851\":1,\"1256\":1}}],[\"20220809172231598\",{\"1\":{\"850\":1,\"1255\":1}}],[\"20220809164400430\",{\"1\":{\"844\":1,\"1249\":1}}],[\"20220809161431474\",{\"1\":{\"836\":1,\"880\":1,\"1241\":1,\"1285\":1}}],[\"20220809154042123\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"20220809155829876\",{\"1\":{\"835\":1,\"1240\":1}}],[\"20220809155725450\",{\"1\":{\"833\":1,\"1238\":1}}],[\"20220809153403483\",{\"1\":{\"794\":1,\"1199\":1}}],[\"20220809153449345\",{\"1\":{\"794\":1,\"1199\":1}}],[\"20220809140425155\",{\"1\":{\"818\":1,\"1223\":1}}],[\"20220809143211150\",{\"1\":{\"793\":1,\"1198\":1}}],[\"20220809142249247\",{\"1\":{\"793\":1,\"1198\":1}}],[\"20220809135057623\",{\"1\":{\"786\":1,\"1191\":1}}],[\"20220809134957404\",{\"1\":{\"786\":1,\"1191\":1}}],[\"20220809134847701\",{\"1\":{\"786\":1,\"1191\":1}}],[\"20220809105047333\",{\"1\":{\"786\":1,\"1191\":1}}],[\"20220809104348616\",{\"1\":{\"786\":1,\"1191\":1}}],[\"20220808162154769\",{\"1\":{\"764\":1,\"1169\":1}}],[\"20220808090917489\",{\"1\":{\"702\":1,\"1107\":1}}],[\"20220808075119129\",{\"1\":{\"692\":1,\"1097\":1}}],[\"20220807110534539\",{\"1\":{\"743\":1,\"1148\":1}}],[\"20220807110326351\",{\"1\":{\"743\":1,\"1148\":1}}],[\"20220807183350757\",{\"1\":{\"690\":1,\"1095\":1}}],[\"20220807160857697\",{\"1\":{\"677\":1,\"1082\":1}}],[\"20220807155545218\",{\"1\":{\"676\":1,\"1081\":1}}],[\"20220807094538111\",{\"1\":{\"664\":1,\"1069\":1}}],[\"20220807093237996\",{\"1\":{\"663\":1,\"1068\":1}}],[\"20220812095202456\",{\"1\":{\"1442\":1}}],[\"20220812095033346\",{\"1\":{\"1441\":1}}],[\"20220812094948778\",{\"1\":{\"1434\":1}}],[\"20220812140237167\",{\"1\":{\"1466\":1}}],[\"20220812181457115\",{\"1\":{\"828\":1,\"1233\":1}}],[\"20220812180107353\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220812153232036\",{\"1\":{\"804\":1,\"1209\":1}}],[\"20220812175931701\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220812173211516\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220812172844277\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220812172709522\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220812163847532\",{\"1\":{\"629\":1,\"1034\":1}}],[\"20220811162903436\",{\"1\":{\"1428\":1}}],[\"20220811162933624\",{\"1\":{\"1428\":1}}],[\"20220811161534805\",{\"1\":{\"1428\":1}}],[\"20220811161447089\",{\"1\":{\"1428\":1}}],[\"20220811161144990\",{\"1\":{\"1427\":1}}],[\"20220811155720260\",{\"1\":{\"1424\":1}}],[\"20220811155616271\",{\"1\":{\"1424\":1}}],[\"20220811155328547\",{\"1\":{\"963\":1,\"1368\":1}}],[\"20220811155235160\",{\"1\":{\"963\":1,\"1368\":1}}],[\"20220811155157442\",{\"1\":{\"963\":1,\"1368\":1}}],[\"20220811153946533\",{\"1\":{\"960\":1,\"1365\":1}}],[\"20220811153337574\",{\"1\":{\"956\":1,\"1361\":1}}],[\"20220811151604202\",{\"1\":{\"952\":1,\"1357\":1}}],[\"20220811145535092\",{\"1\":{\"948\":1,\"1353\":1}}],[\"20220811141756349\",{\"1\":{\"942\":1,\"1347\":1}}],[\"20220811141640927\",{\"1\":{\"940\":1,\"1345\":1}}],[\"20220811141019403\",{\"1\":{\"939\":1,\"1344\":1}}],[\"20220811132950606\",{\"1\":{\"939\":1,\"1344\":1}}],[\"20220811130657310\",{\"1\":{\"939\":1,\"1344\":1}}],[\"20220811125740602\",{\"1\":{\"938\":1,\"1343\":1}}],[\"20220811124659879\",{\"1\":{\"936\":1,\"1341\":1}}],[\"20220811104734651\",{\"1\":{\"921\":1,\"1326\":1}}],[\"20220811102046877\",{\"1\":{\"919\":1,\"1324\":1}}],[\"20220811101703243\",{\"1\":{\"918\":1,\"1323\":1}}],[\"20220811100852340\",{\"1\":{\"917\":1,\"1322\":1}}],[\"20220811094813259\",{\"1\":{\"912\":1,\"1317\":1}}],[\"20220810174009175\",{\"1\":{\"1012\":1,\"1417\":1}}],[\"20220810173917264\",{\"1\":{\"1012\":1,\"1417\":1}}],[\"20220810171606026\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"20220810171331840\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"20220810171121584\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"20220810170015030\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"20220810165721366\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"20220810165525879\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"20220810164659455\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"20220810164319416\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"20220810162924092\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"20220810162655785\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"20220810161510193\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"20220810161337830\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"20220810161245496\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"20220810161002221\",{\"1\":{\"1004\":1,\"1409\":1}}],[\"20220810160819067\",{\"1\":{\"1004\":1,\"1409\":1}}],[\"20220810160313348\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"20220810155828636\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"20220810155531840\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"20220810155503910\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"20220810155059730\",{\"1\":{\"998\":1,\"1403\":1}}],[\"20220810155021245\",{\"1\":{\"998\":1,\"1403\":1}}],[\"20220810154117721\",{\"1\":{\"997\":1,\"1402\":1}}],[\"20220810150344088\",{\"1\":{\"993\":1,\"1398\":1}}],[\"20220810150254975\",{\"1\":{\"991\":1,\"1396\":1}}],[\"20220810150205017\",{\"1\":{\"991\":1,\"1396\":1}}],[\"20220810105424559\",{\"1\":{\"891\":1,\"1296\":1}}],[\"20220810105035042\",{\"1\":{\"891\":1,\"1296\":1}}],[\"20220810104528185\",{\"1\":{\"889\":1,\"1294\":1}}],[\"20220810104318377\",{\"1\":{\"888\":1,\"1293\":1}}],[\"20220810104015476\",{\"1\":{\"888\":1,\"1293\":1}}],[\"20220810103529523\",{\"1\":{\"888\":1,\"1293\":1}}],[\"20220810103158118\",{\"1\":{\"888\":1,\"1293\":1}}],[\"20220810132436936\",{\"1\":{\"910\":1,\"1315\":1}}],[\"20220810132414102\",{\"1\":{\"901\":1,\"1306\":1}}],[\"20220810132212721\",{\"1\":{\"901\":1,\"1306\":1}}],[\"20220810131346237\",{\"1\":{\"901\":1,\"1306\":1}}],[\"20220810134701065\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"20220810133948555\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"20220810135243897\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"20220810135140321\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"20220810135731947\",{\"1\":{\"632\":1,\"1037\":1}}],[\"20220810135605293\",{\"1\":{\"632\":1,\"1037\":1}}],[\"20220810142329260\",{\"1\":{\"638\":1,\"1043\":1}}],[\"20220810142240642\",{\"1\":{\"638\":1,\"1043\":1}}],[\"20220810140233954\",{\"1\":{\"633\":1,\"1038\":1}}],[\"20220813105959987\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813105655574\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813105410833\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813105331038\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813105237548\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813105114797\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813104327660\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813103624311\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813103031843\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813111732708\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813111410216\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813111355648\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813110810494\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813110747061\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813110303201\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813110215014\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813110045653\",{\"1\":{\"829\":1,\"1234\":1}}],[\"20220813114820905\",{\"1\":{\"641\":1,\"1046\":1}}],[\"20220813114627864\",{\"1\":{\"641\":1,\"1046\":1}}],[\"20220813113550510\",{\"1\":{\"641\":1,\"1046\":1}}],[\"20220813115051888\",{\"1\":{\"628\":1,\"1033\":1}}],[\"20220813123046809\",{\"1\":{\"628\":1,\"1033\":1}}],[\"20220813172807566\",{\"1\":{\"533\":1}}],[\"20220813170314141\",{\"1\":{\"531\":1}}],[\"20220813170024222\",{\"1\":{\"531\":1}}],[\"20220813163251421\",{\"1\":{\"529\":1}}],[\"20220813162242368\",{\"1\":{\"529\":1}}],[\"20220813162312378\",{\"1\":{\"529\":1}}],[\"20220813165009465\",{\"1\":{\"529\":1}}],[\"20220813164434292\",{\"1\":{\"529\":1}}],[\"20220813161930018\",{\"1\":{\"528\":1}}],[\"20220813161441371\",{\"1\":{\"526\":1}}],[\"20220813151814709\",{\"1\":{\"519\":1}}],[\"20220813150616143\",{\"1\":{\"518\":1}}],[\"20220813150012732\",{\"1\":{\"517\":1}}],[\"20220813142255313\",{\"1\":{\"512\":1}}],[\"20220813135942300\",{\"1\":{\"511\":1}}],[\"20220813135546408\",{\"1\":{\"507\":1}}],[\"20220813134639482\",{\"1\":{\"505\":1}}],[\"20220813134216064\",{\"1\":{\"503\":1}}],[\"20220813134023770\",{\"1\":{\"503\":1}}],[\"20220813132058698\",{\"1\":{\"499\":1}}],[\"20220813132000741\",{\"1\":{\"498\":1}}],[\"20220813181127793\",{\"1\":{\"225\":1}}],[\"20220815170202341\",{\"1\":{\"341\":1}}],[\"20220815170031879\",{\"1\":{\"341\":1}}],[\"20220815165838615\",{\"1\":{\"340\":1}}],[\"20220815164911765\",{\"1\":{\"340\":1}}],[\"20220815164232549\",{\"1\":{\"340\":1}}],[\"20220815163706765\",{\"1\":{\"339\":1}}],[\"20220815162622066\",{\"1\":{\"338\":1}}],[\"20220815162357169\",{\"1\":{\"337\":1}}],[\"20220815161059845\",{\"1\":{\"335\":1}}],[\"20220815160423990\",{\"1\":{\"334\":1}}],[\"20220815154853163\",{\"1\":{\"328\":1}}],[\"20220815142201707\",{\"1\":{\"313\":1}}],[\"20220815141930909\",{\"1\":{\"313\":1}}],[\"20220815141304120\",{\"1\":{\"311\":1}}],[\"20220815141002875\",{\"1\":{\"310\":1}}],[\"20220815135721642\",{\"1\":{\"309\":1}}],[\"20220815124837628\",{\"1\":{\"303\":1}}],[\"20220815123839835\",{\"1\":{\"299\":1}}],[\"20220815121826653\",{\"1\":{\"296\":1}}],[\"20220815102432544\",{\"1\":{\"293\":1}}],[\"20220815101348247\",{\"1\":{\"293\":1}}],[\"20220815101126341\",{\"1\":{\"292\":1}}],[\"20220815100441716\",{\"1\":{\"292\":1}}],[\"20220815100352988\",{\"1\":{\"292\":1}}],[\"20220815094326688\",{\"1\":{\"288\":1}}],[\"20220815093443392\",{\"1\":{\"287\":1}}],[\"20220815093322207\",{\"1\":{\"287\":1}}],[\"20220814162156033\",{\"1\":{\"276\":1}}],[\"20220814162016102\",{\"1\":{\"276\":1}}],[\"20220814160056984\",{\"1\":{\"273\":1}}],[\"20220814150743094\",{\"1\":{\"270\":1}}],[\"20220814142119638\",{\"1\":{\"268\":1}}],[\"20220814141907126\",{\"1\":{\"268\":1}}],[\"20220814134248084\",{\"1\":{\"266\":1}}],[\"20220814134849573\",{\"1\":{\"266\":1}}],[\"20220814114048918\",{\"1\":{\"262\":1}}],[\"20220814113823463\",{\"1\":{\"262\":1}}],[\"20220814110522799\",{\"1\":{\"255\":1}}],[\"20220814105454764\",{\"1\":{\"250\":1}}],[\"20220814103941013\",{\"1\":{\"248\":1}}],[\"20220814100647636\",{\"1\":{\"233\":1}}],[\"20220301\",{\"1\":{\"315\":1,\"1014\":1,\"1419\":1}}],[\"20230711155110179\",{\"1\":{\"494\":1}}],[\"20230403124053645\",{\"1\":{\"484\":1}}],[\"20230402211833945\",{\"1\":{\"482\":1}}],[\"20230402210539669\",{\"1\":{\"481\":1}}],[\"20230402204701848\",{\"1\":{\"481\":1}}],[\"20230402164304255\",{\"1\":{\"478\":1}}],[\"20230402154446076\",{\"1\":{\"470\":1}}],[\"20230402144240712\",{\"1\":{\"441\":1}}],[\"20230401091236232\",{\"1\":{\"443\":1}}],[\"20230401090644646\",{\"1\":{\"440\":1}}],[\"20230401085711129\",{\"1\":{\"440\":1}}],[\"20230401085329304\",{\"1\":{\"440\":1}}],[\"20230319111526819\",{\"1\":{\"427\":1}}],[\"20230908113146272\",{\"1\":{\"217\":1}}],[\"20230908112552188\",{\"1\":{\"217\":1}}],[\"20230908111512527\",{\"1\":{\"217\":1}}],[\"20230908094138355\",{\"1\":{\"213\":1}}],[\"20230906203311735\",{\"1\":{\"204\":1}}],[\"20230906170843331\",{\"1\":{\"195\":1}}],[\"20230906163433311\",{\"1\":{\"190\":1}}],[\"20230906160611492\",{\"1\":{\"188\":1}}],[\"20230901173707590\",{\"1\":{\"169\":1}}],[\"20230901173457417\",{\"1\":{\"169\":1}}],[\"20230901173331454\",{\"1\":{\"169\":1}}],[\"20230901110522841\",{\"1\":{\"164\":1}}],[\"20230918123333783\",{\"1\":{\"93\":1}}],[\"20230825195454723\",{\"1\":{\"156\":1}}],[\"20230825195410827\",{\"1\":{\"156\":1}}],[\"20230825195215716\",{\"1\":{\"156\":1}}],[\"20230825195028337\",{\"1\":{\"156\":1}}],[\"20230825194845740\",{\"1\":{\"156\":1}}],[\"20230824174356130\",{\"1\":{\"152\":1}}],[\"20230824174214437\",{\"1\":{\"152\":1}}],[\"20230824171513907\",{\"1\":{\"150\":1}}],[\"20230824171229791\",{\"1\":{\"150\":1}}],[\"20230824171108620\",{\"1\":{\"150\":1}}],[\"20230824170601060\",{\"1\":{\"150\":1}}],[\"20230824170318295\",{\"1\":{\"150\":1}}],[\"20230824170127494\",{\"1\":{\"150\":1}}],[\"20230824165829433\",{\"1\":{\"150\":1}}],[\"20230824154526112\",{\"1\":{\"147\":1}}],[\"20230824151652643\",{\"1\":{\"146\":1}}],[\"20230824150748657\",{\"1\":{\"145\":1}}],[\"20230824103228853\",{\"1\":{\"144\":1}}],[\"20230824095849403\",{\"1\":{\"142\":1}}],[\"20230824094928081\",{\"1\":{\"141\":1}}],[\"20230823103515194\",{\"1\":{\"128\":1}}],[\"2023\",{\"1\":{\"95\":1,\"109\":2,\"476\":2,\"496\":510}}],[\"229\",{\"1\":{\"496\":1}}],[\"228\",{\"1\":{\"496\":1}}],[\"227\",{\"1\":{\"496\":1}}],[\"226\",{\"1\":{\"496\":1}}],[\"225\",{\"1\":{\"496\":1}}],[\"224\",{\"1\":{\"496\":1,\"1454\":2}}],[\"223\",{\"1\":{\"496\":1}}],[\"222\",{\"1\":{\"496\":1,\"514\":1,\"654\":4,\"1059\":4}}],[\"221\",{\"1\":{\"496\":1}}],[\"220\",{\"1\":{\"496\":1}}],[\"22\",{\"1\":{\"226\":1,\"229\":1,\"496\":12,\"654\":4,\"763\":1,\"793\":2,\"794\":1,\"1027\":2,\"1028\":3,\"1059\":4,\"1168\":1,\"1198\":2,\"1199\":1,\"1477\":2,\"1478\":3}}],[\"2^14\",{\"1\":{\"138\":1}}],[\"2n\",{\"1\":{\"112\":1}}],[\"2\",{\"0\":{\"193\":1,\"595\":1},\"1\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"108\":1,\"109\":1,\"112\":2,\"115\":1,\"117\":1,\"128\":1,\"132\":1,\"134\":1,\"139\":1,\"182\":1,\"190\":1,\"193\":1,\"194\":1,\"226\":1,\"229\":2,\"230\":1,\"231\":2,\"233\":2,\"240\":3,\"245\":2,\"258\":1,\"264\":4,\"265\":1,\"271\":4,\"272\":1,\"277\":1,\"307\":1,\"308\":1,\"309\":1,\"313\":1,\"314\":2,\"315\":1,\"329\":1,\"333\":2,\"349\":1,\"358\":5,\"375\":3,\"377\":17,\"378\":6,\"379\":1,\"386\":9,\"389\":7,\"392\":9,\"395\":3,\"400\":1,\"455\":1,\"460\":6,\"481\":2,\"490\":4,\"494\":1,\"496\":4,\"511\":1,\"514\":4,\"525\":6,\"526\":3,\"528\":1,\"544\":2,\"557\":3,\"570\":4,\"615\":1,\"628\":1,\"629\":1,\"653\":1,\"660\":1,\"678\":1,\"679\":1,\"686\":1,\"688\":1,\"721\":1,\"743\":1,\"747\":3,\"749\":1,\"750\":2,\"751\":2,\"756\":1,\"763\":1,\"771\":1,\"774\":2,\"776\":1,\"781\":1,\"784\":1,\"793\":3,\"794\":2,\"802\":1,\"808\":1,\"812\":2,\"816\":1,\"823\":2,\"831\":2,\"842\":1,\"861\":3,\"865\":1,\"897\":4,\"904\":2,\"906\":2,\"907\":1,\"908\":1,\"909\":2,\"914\":1,\"925\":1,\"930\":3,\"933\":2,\"936\":2,\"937\":2,\"939\":2,\"948\":1,\"954\":1,\"956\":4,\"966\":1,\"979\":4,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1011\":1,\"1022\":2,\"1028\":3,\"1029\":5,\"1033\":1,\"1034\":1,\"1058\":1,\"1065\":1,\"1083\":1,\"1084\":1,\"1091\":1,\"1093\":1,\"1126\":1,\"1148\":1,\"1152\":3,\"1154\":1,\"1155\":2,\"1156\":2,\"1161\":1,\"1168\":1,\"1176\":1,\"1179\":2,\"1181\":1,\"1186\":1,\"1189\":1,\"1198\":3,\"1199\":2,\"1207\":1,\"1213\":1,\"1217\":2,\"1221\":1,\"1228\":2,\"1236\":2,\"1247\":1,\"1266\":3,\"1270\":1,\"1302\":4,\"1309\":2,\"1311\":2,\"1312\":1,\"1313\":1,\"1314\":2,\"1319\":1,\"1330\":1,\"1335\":3,\"1338\":2,\"1341\":2,\"1342\":2,\"1344\":2,\"1353\":1,\"1359\":1,\"1361\":4,\"1371\":1,\"1384\":4,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1416\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":3,\"1466\":1,\"1472\":2,\"1478\":3,\"1479\":5}}],[\"给参数t执行指定操作后\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"给参数t执行指定的操作\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"给我们的感觉这些线程在同时执行\",{\"1\":{\"959\":1,\"1364\":1}}],[\"给任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"给任意一个类型的数组\",{\"1\":{\"873\":1,\"1278\":1}}],[\"给牌排序\",{\"1\":{\"897\":1,\"1302\":1}}],[\"给玩家的牌排序\",{\"1\":{\"897\":1,\"1302\":1}}],[\"给集合对象批量添加元素\",{\"1\":{\"895\":1,\"1300\":1}}],[\"给集合元素的前面都加上\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"给改一改就行了\",{\"1\":{\"853\":1,\"1258\":1}}],[\"给成员变量赋值\",{\"1\":{\"808\":1,\"1213\":1}}],[\"给指定位置添加元素\",{\"1\":{\"747\":1,\"1152\":1}}],[\"给定以下配置设置\",{\"1\":{\"413\":1}}],[\"给\",{\"1\":{\"233\":1}}],[\"给锁续期\",{\"1\":{\"132\":1}}],[\"给不同的key设置不同的过期时间\",{\"1\":{\"126\":1}}],[\"给数据库带来巨大的压力\",{\"1\":{\"126\":1}}],[\"给配置类添加\",{\"1\":{\"103\":1}}],[\"给经过网关的请求加上特定的请求头参数\",{\"1\":{\"102\":1}}],[\"给每个用户生成唯一的密钥对\",{\"1\":{\"101\":1}}],[\"给接口使用\",{\"1\":{\"101\":1}}],[\"1或者localhost\",{\"1\":{\"1431\":1}}],[\"1kb\",{\"1\":{\"1003\":1,\"1408\":1}}],[\"1+2+3+4+5+\",{\"1\":{\"978\":1,\"1383\":1}}],[\"1+0\",{\"1\":{\"771\":1,\"1176\":1}}],[\"1增长\",{\"1\":{\"952\":1,\"1357\":1}}],[\"1号\",{\"1\":{\"924\":2,\"1329\":2}}],[\"1f\",{\"1\":{\"773\":1,\"1178\":1}}],[\"1e5\",{\"1\":{\"769\":1,\"1174\":1}}],[\"1到目前的时间毫秒值\",{\"1\":{\"769\":1,\"1174\":1}}],[\"1m\",{\"1\":{\"495\":1}}],[\"1个正在运行\",{\"1\":{\"481\":1}}],[\"1代表\",{\"1\":{\"465\":1}}],[\"17<\",{\"1\":{\"615\":1}}],[\"179\",{\"1\":{\"496\":1}}],[\"178\",{\"1\":{\"496\":1}}],[\"177\",{\"1\":{\"496\":1,\"793\":2,\"1198\":2}}],[\"176\",{\"1\":{\"496\":1}}],[\"175\",{\"1\":{\"496\":1}}],[\"174\",{\"1\":{\"496\":1}}],[\"173\",{\"1\":{\"496\":1}}],[\"172\",{\"1\":{\"496\":1}}],[\"171\",{\"1\":{\"496\":1}}],[\"170\",{\"1\":{\"496\":1}}],[\"17\",{\"1\":{\"460\":6,\"496\":21}}],[\"17行\",{\"1\":{\"362\":1}}],[\"189\",{\"1\":{\"496\":1,\"793\":2,\"1198\":2}}],[\"188\",{\"1\":{\"496\":1}}],[\"187\",{\"1\":{\"496\":1}}],[\"186\",{\"1\":{\"496\":1}}],[\"185\",{\"1\":{\"496\":1,\"793\":2,\"1198\":2}}],[\"184\",{\"1\":{\"496\":1}}],[\"183\",{\"1\":{\"496\":1}}],[\"182\",{\"1\":{\"496\":1,\"793\":2,\"1198\":2}}],[\"181\",{\"1\":{\"496\":1}}],[\"180\",{\"1\":{\"496\":1}}],[\"18\",{\"1\":{\"460\":4,\"481\":2,\"496\":11,\"570\":1,\"615\":1,\"755\":1,\"756\":2,\"759\":1,\"793\":1,\"806\":1,\"829\":2,\"888\":4,\"1160\":1,\"1161\":2,\"1164\":1,\"1198\":1,\"1211\":1,\"1234\":2,\"1293\":4}}],[\"1g\",{\"1\":{\"435\":1}}],[\"1版本\",{\"1\":{\"389\":1}}],[\"199\",{\"1\":{\"496\":1}}],[\"198\",{\"1\":{\"496\":1}}],[\"19888\",{\"1\":{\"386\":1}}],[\"19888<\",{\"1\":{\"386\":1}}],[\"1978年被修改为如今的\",{\"1\":{\"857\":1,\"1262\":1}}],[\"1972年出现\",{\"1\":{\"857\":1,\"1262\":1}}],[\"1970\",{\"1\":{\"769\":1,\"1174\":1}}],[\"197\",{\"1\":{\"496\":1}}],[\"196\",{\"1\":{\"496\":1}}],[\"194\",{\"1\":{\"496\":1}}],[\"193\",{\"1\":{\"496\":1}}],[\"191\",{\"1\":{\"496\":1}}],[\"190\",{\"1\":{\"496\":1}}],[\"195\",{\"1\":{\"495\":1,\"496\":1}}],[\"19\",{\"1\":{\"476\":1,\"496\":24,\"751\":2,\"793\":2,\"1156\":2,\"1198\":2}}],[\"192s\",{\"1\":{\"769\":1,\"1174\":1}}],[\"192\",{\"1\":{\"354\":1,\"356\":2,\"358\":1,\"365\":2,\"366\":6,\"405\":1,\"496\":1,\"1429\":3}}],[\"1=node1\",{\"1\":{\"375\":1}}],[\"1=1\",{\"1\":{\"274\":2}}],[\"117\",{\"1\":{\"496\":1}}],[\"116\",{\"1\":{\"496\":1}}],[\"115\",{\"1\":{\"496\":1}}],[\"114\",{\"1\":{\"496\":1}}],[\"113\",{\"1\":{\"496\":1}}],[\"112\",{\"1\":{\"496\":1}}],[\"1111144\",{\"1\":{\"818\":1,\"1223\":1}}],[\"11111\",{\"1\":{\"818\":1,\"1223\":1}}],[\"11111111111\",{\"1\":{\"818\":1,\"1223\":1}}],[\"111\",{\"1\":{\"496\":1,\"939\":1,\"1344\":1}}],[\"110\",{\"1\":{\"496\":1}}],[\"118\",{\"1\":{\"495\":1,\"496\":1}}],[\"11\",{\"1\":{\"315\":1,\"358\":1,\"392\":1,\"395\":2,\"456\":1,\"460\":4,\"496\":249,\"635\":3,\"636\":3,\"654\":1,\"781\":3,\"793\":1,\"794\":1,\"831\":3,\"891\":2,\"904\":1,\"1040\":3,\"1041\":3,\"1059\":1,\"1186\":3,\"1198\":1,\"1199\":1,\"1236\":3,\"1296\":2,\"1309\":1}}],[\"119\",{\"1\":{\"309\":4,\"496\":1}}],[\"1编码获取s的字节\",{\"1\":{\"309\":1}}],[\"1进行解码获得字节编码为\",{\"1\":{\"309\":2}}],[\"1解码产生乱码\",{\"1\":{\"309\":2}}],[\"1解码\",{\"1\":{\"309\":2}}],[\"1的\",{\"1\":{\"309\":3}}],[\"1的时候\",{\"1\":{\"233\":1}}],[\"1<\",{\"1\":{\"295\":1,\"544\":1}}],[\"1xx\",{\"1\":{\"288\":1}}],[\"1表示协议版本\",{\"1\":{\"288\":1}}],[\"16位\",{\"1\":{\"985\":1,\"1390\":1}}],[\"169\",{\"1\":{\"496\":1}}],[\"167\",{\"1\":{\"496\":1}}],[\"166\",{\"1\":{\"496\":1}}],[\"165\",{\"1\":{\"496\":1}}],[\"164\",{\"1\":{\"496\":1}}],[\"163\",{\"1\":{\"496\":1}}],[\"162\",{\"1\":{\"496\":1}}],[\"161\",{\"1\":{\"496\":1}}],[\"160\",{\"1\":{\"496\":1}}],[\"16010\",{\"1\":{\"389\":1}}],[\"1680423588\",{\"1\":{\"476\":1}}],[\"168\",{\"1\":{\"354\":1,\"356\":2,\"358\":1,\"365\":4,\"366\":6,\"405\":1,\"495\":1,\"496\":1,\"1429\":3}}],[\"16\",{\"1\":{\"280\":2,\"320\":1,\"460\":6,\"476\":1,\"481\":4,\"496\":25,\"647\":1,\"986\":1,\"1027\":2,\"1052\":1,\"1391\":1,\"1477\":2}}],[\"149\",{\"1\":{\"496\":1}}],[\"148\",{\"1\":{\"496\":1}}],[\"147\",{\"1\":{\"496\":1}}],[\"146\",{\"1\":{\"496\":1}}],[\"145\",{\"1\":{\"496\":1}}],[\"144\",{\"1\":{\"496\":1}}],[\"143\",{\"1\":{\"496\":1}}],[\"142\",{\"1\":{\"496\":1}}],[\"14117\",{\"1\":{\"496\":1}}],[\"141\",{\"1\":{\"496\":1}}],[\"140\",{\"1\":{\"496\":1}}],[\"14\",{\"1\":{\"280\":9,\"496\":206,\"652\":1,\"782\":1,\"897\":1,\"965\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1057\":1,\"1187\":1,\"1302\":1,\"1370\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"139\",{\"1\":{\"496\":1}}],[\"138\",{\"1\":{\"496\":1}}],[\"137\",{\"1\":{\"496\":1}}],[\"136\",{\"1\":{\"496\":1}}],[\"135\",{\"1\":{\"496\":1}}],[\"134\",{\"1\":{\"496\":1}}],[\"133\",{\"1\":{\"365\":1,\"366\":2,\"496\":1}}],[\"132\",{\"1\":{\"365\":1,\"366\":2,\"496\":1}}],[\"131\",{\"1\":{\"365\":2,\"366\":2,\"405\":1,\"496\":1}}],[\"130\",{\"1\":{\"354\":1,\"356\":2,\"358\":1,\"496\":1}}],[\"1304117943\",{\"1\":{\"280\":1}}],[\"13\",{\"1\":{\"280\":2,\"481\":2,\"496\":165,\"566\":1,\"570\":2,\"615\":1,\"891\":1,\"897\":1,\"1296\":1,\"1302\":1}}],[\"1获取usermapper接口的代理对象\",{\"1\":{\"265\":1}}],[\"159\",{\"1\":{\"496\":1}}],[\"158\",{\"1\":{\"496\":1}}],[\"156\",{\"1\":{\"496\":1}}],[\"15672\",{\"1\":{\"358\":2}}],[\"155\",{\"1\":{\"496\":1}}],[\"154\",{\"1\":{\"496\":1}}],[\"153\",{\"1\":{\"496\":1}}],[\"152\",{\"1\":{\"496\":1,\"1433\":1}}],[\"151\",{\"1\":{\"496\":1}}],[\"150\",{\"1\":{\"496\":1}}],[\"157\",{\"1\":{\"496\":1}}],[\"1573635500521\",{\"1\":{\"414\":1}}],[\"1571994287036\",{\"1\":{\"405\":1}}],[\"1571994221531\",{\"1\":{\"405\":1}}],[\"1571994206902\",{\"1\":{\"405\":1}}],[\"1571994111921\",{\"1\":{\"405\":1}}],[\"1571994069689\",{\"1\":{\"405\":1}}],[\"1571994018126\",{\"1\":{\"405\":1}}],[\"1571993951841\",{\"1\":{\"405\":1}}],[\"1571981197131\",{\"1\":{\"399\":1}}],[\"1574338996145\",{\"1\":{\"397\":1}}],[\"15\",{\"1\":{\"264\":1,\"280\":2,\"481\":3,\"496\":42,\"511\":1,\"831\":3,\"1236\":3}}],[\"1时表示无限等待\",{\"1\":{\"240\":1}}],[\"128\",{\"1\":{\"496\":1}}],[\"126\",{\"1\":{\"496\":1}}],[\"125\",{\"1\":{\"496\":1}}],[\"124\",{\"1\":{\"496\":1}}],[\"122\",{\"1\":{\"496\":1}}],[\"120\",{\"1\":{\"496\":1}}],[\"12月\",{\"1\":{\"460\":2}}],[\"129\",{\"1\":{\"460\":2,\"496\":1}}],[\"1271736\",{\"1\":{\"481\":1}}],[\"127\",{\"1\":{\"360\":3,\"495\":2,\"496\":1,\"1431\":1}}],[\"12<\",{\"1\":{\"258\":1,\"259\":1,\"264\":1}}],[\"12\",{\"1\":{\"239\":1,\"280\":2,\"377\":7,\"378\":3,\"496\":79,\"897\":1,\"1019\":1,\"1028\":2,\"1302\":1,\"1469\":1,\"1478\":2}}],[\"123333\",{\"1\":{\"514\":1}}],[\"123456\",{\"1\":{\"514\":1,\"629\":2,\"704\":1,\"743\":2,\"1012\":1,\"1034\":2,\"1109\":1,\"1148\":2,\"1417\":1}}],[\"12345678\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"264\":1,\"267\":2}}],[\"123\",{\"1\":{\"233\":1,\"496\":1,\"514\":4,\"839\":7,\"840\":7,\"1244\":7,\"1245\":7}}],[\"121\",{\"1\":{\"118\":1,\"496\":1}}],[\"10+x\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"10+10\",{\"1\":{\"831\":1,\"1236\":1}}],[\"10位\",{\"1\":{\"818\":1,\"1223\":1}}],[\"10<\",{\"1\":{\"570\":1}}],[\"10c804\",{\"1\":{\"547\":1}}],[\"10cj\",{\"1\":{\"435\":1}}],[\"109\",{\"1\":{\"496\":1}}],[\"108\",{\"1\":{\"496\":1}}],[\"107\",{\"1\":{\"496\":1}}],[\"106\",{\"1\":{\"496\":1}}],[\"105\",{\"1\":{\"496\":1}}],[\"105418\",{\"1\":{\"315\":1,\"1014\":1,\"1419\":1}}],[\"104\",{\"1\":{\"496\":1}}],[\"104198838\",{\"1\":{\"118\":1}}],[\"103\",{\"1\":{\"496\":1}}],[\"102\",{\"1\":{\"496\":1}}],[\"1024m\",{\"1\":{\"395\":2}}],[\"1024\",{\"1\":{\"315\":1,\"495\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1003\":1,\"1007\":1,\"1008\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1408\":1,\"1412\":1,\"1413\":1,\"1449\":1,\"1450\":1}}],[\"101\",{\"1\":{\"496\":1,\"771\":1,\"774\":1,\"1176\":1,\"1179\":1}}],[\"10s\",{\"1\":{\"494\":1}}],[\"10x\",{\"1\":{\"435\":1}}],[\"10\",{\"1\":{\"128\":1,\"129\":1,\"131\":1,\"137\":1,\"148\":2,\"199\":3,\"240\":2,\"279\":1,\"352\":1,\"354\":6,\"358\":1,\"395\":8,\"435\":4,\"494\":1,\"496\":356,\"511\":1,\"557\":1,\"570\":3,\"629\":1,\"637\":1,\"647\":1,\"774\":1,\"784\":1,\"793\":1,\"808\":1,\"816\":1,\"818\":3,\"829\":2,\"831\":2,\"873\":1,\"893\":3,\"896\":2,\"897\":2,\"903\":1,\"904\":2,\"906\":1,\"907\":1,\"908\":1,\"918\":2,\"920\":4,\"965\":1,\"979\":2,\"998\":1,\"1000\":1,\"1001\":1,\"1027\":2,\"1028\":1,\"1029\":2,\"1034\":1,\"1042\":1,\"1052\":1,\"1179\":1,\"1189\":1,\"1198\":1,\"1213\":1,\"1221\":1,\"1223\":3,\"1234\":2,\"1236\":2,\"1278\":1,\"1298\":3,\"1301\":2,\"1302\":2,\"1308\":1,\"1309\":2,\"1311\":1,\"1312\":1,\"1313\":1,\"1323\":2,\"1325\":4,\"1370\":1,\"1384\":2,\"1403\":1,\"1405\":1,\"1406\":1,\"1477\":2,\"1478\":1,\"1479\":2}}],[\"10020<\",{\"1\":{\"386\":1}}],[\"10000\",{\"1\":{\"615\":1,\"816\":1,\"956\":1,\"1221\":1,\"1361\":1}}],[\"1000000\",{\"1\":{\"948\":1,\"1353\":1}}],[\"10000000149\",{\"1\":{\"773\":1,\"1178\":1}}],[\"100000\",{\"1\":{\"277\":1,\"930\":5,\"939\":2,\"1335\":5,\"1344\":2}}],[\"1000\",{\"1\":{\"245\":1,\"495\":1,\"525\":2,\"629\":3,\"769\":1,\"776\":1,\"781\":2,\"806\":1,\"1034\":3,\"1174\":1,\"1181\":1,\"1186\":2,\"1211\":1}}],[\"100\",{\"1\":{\"111\":1,\"240\":1,\"243\":2,\"245\":1,\"275\":1,\"435\":2,\"494\":2,\"496\":1,\"529\":1,\"749\":2,\"751\":9,\"771\":2,\"774\":2,\"776\":1,\"781\":1,\"793\":1,\"808\":1,\"845\":1,\"904\":2,\"921\":1,\"949\":1,\"978\":1,\"995\":4,\"997\":1,\"1026\":1,\"1029\":1,\"1154\":2,\"1156\":9,\"1176\":2,\"1179\":2,\"1181\":1,\"1186\":1,\"1198\":1,\"1213\":1,\"1250\":1,\"1309\":2,\"1326\":1,\"1354\":1,\"1383\":1,\"1400\":4,\"1402\":1,\"1476\":1,\"1479\":1}}],[\"1\",{\"0\":{\"594\":1},\"1\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"108\":1,\"112\":2,\"115\":1,\"117\":1,\"128\":1,\"131\":1,\"132\":1,\"137\":1,\"139\":1,\"182\":2,\"187\":2,\"190\":1,\"191\":1,\"192\":1,\"194\":1,\"211\":4,\"226\":2,\"229\":1,\"230\":1,\"231\":2,\"233\":13,\"239\":2,\"240\":3,\"243\":3,\"245\":5,\"258\":1,\"264\":5,\"267\":1,\"270\":1,\"271\":6,\"272\":3,\"275\":2,\"277\":2,\"279\":1,\"280\":1,\"281\":2,\"287\":2,\"288\":1,\"297\":2,\"307\":5,\"308\":1,\"309\":9,\"312\":2,\"313\":1,\"314\":3,\"315\":2,\"323\":3,\"329\":1,\"333\":2,\"358\":3,\"360\":3,\"362\":2,\"375\":3,\"377\":9,\"378\":4,\"379\":1,\"386\":5,\"389\":7,\"395\":9,\"435\":2,\"456\":1,\"460\":11,\"481\":8,\"490\":2,\"494\":3,\"495\":5,\"496\":10,\"511\":1,\"514\":2,\"523\":1,\"525\":5,\"526\":4,\"528\":1,\"529\":1,\"536\":1,\"544\":2,\"552\":2,\"557\":2,\"570\":3,\"601\":1,\"615\":2,\"628\":1,\"629\":1,\"635\":5,\"636\":3,\"653\":1,\"654\":4,\"660\":1,\"678\":1,\"679\":1,\"686\":1,\"688\":1,\"721\":1,\"743\":1,\"747\":4,\"750\":3,\"751\":3,\"756\":1,\"763\":1,\"767\":1,\"769\":1,\"771\":3,\"773\":2,\"774\":4,\"775\":1,\"776\":1,\"781\":1,\"784\":1,\"786\":1,\"793\":3,\"794\":8,\"802\":1,\"804\":1,\"808\":1,\"812\":2,\"816\":1,\"818\":1,\"829\":2,\"831\":9,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"855\":1,\"865\":1,\"866\":1,\"873\":1,\"891\":3,\"893\":2,\"897\":3,\"903\":3,\"904\":8,\"906\":6,\"907\":5,\"908\":6,\"909\":1,\"914\":1,\"930\":2,\"937\":1,\"939\":1,\"948\":1,\"949\":1,\"954\":1,\"956\":1,\"966\":1,\"976\":3,\"977\":2,\"978\":7,\"979\":5,\"983\":1,\"994\":5,\"995\":3,\"996\":1,\"997\":1,\"998\":2,\"1000\":2,\"1001\":2,\"1002\":3,\"1003\":2,\"1007\":1,\"1008\":1,\"1009\":2,\"1011\":1,\"1026\":1,\"1028\":2,\"1033\":1,\"1034\":1,\"1040\":5,\"1041\":3,\"1058\":1,\"1059\":4,\"1065\":1,\"1083\":1,\"1084\":1,\"1091\":1,\"1093\":1,\"1126\":1,\"1148\":1,\"1152\":4,\"1155\":3,\"1156\":3,\"1161\":1,\"1168\":1,\"1172\":1,\"1174\":1,\"1176\":3,\"1178\":2,\"1179\":4,\"1180\":1,\"1181\":1,\"1186\":1,\"1189\":1,\"1191\":1,\"1198\":3,\"1199\":8,\"1207\":1,\"1209\":1,\"1213\":1,\"1217\":2,\"1221\":1,\"1223\":1,\"1234\":2,\"1236\":9,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1260\":1,\"1270\":1,\"1271\":1,\"1278\":1,\"1296\":3,\"1298\":2,\"1302\":3,\"1308\":3,\"1309\":8,\"1311\":6,\"1312\":5,\"1313\":6,\"1314\":1,\"1319\":1,\"1335\":2,\"1342\":1,\"1344\":1,\"1353\":1,\"1354\":1,\"1359\":1,\"1361\":1,\"1371\":1,\"1381\":3,\"1382\":2,\"1383\":7,\"1384\":5,\"1388\":1,\"1399\":5,\"1400\":3,\"1401\":1,\"1402\":1,\"1403\":2,\"1405\":2,\"1406\":2,\"1407\":3,\"1408\":2,\"1412\":1,\"1413\":1,\"1414\":2,\"1416\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1454\":4,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":2,\"1466\":4,\"1476\":1,\"1478\":2}}],[\"前面整个结果取反\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"前面的所有命令会自动执行\",{\"1\":{\"254\":1}}],[\"前两种线程创建的方式都存在一个问题\",{\"1\":{\"921\":1,\"1326\":1}}],[\"前两者结合\",{\"0\":{\"636\":1,\"1041\":1},\"1\":{\"633\":1,\"1038\":1}}],[\"前提数组必须排好序才支持\",{\"1\":{\"793\":1,\"1198\":1}}],[\"前置要求\",{\"0\":{\"380\":1}}],[\"前台启动\",{\"1\":{\"377\":1}}],[\"前端\",{\"0\":{\"401\":1,\"405\":1}}],[\"前端人员不会java\",{\"1\":{\"321\":1}}],[\"前端发送请求到\",{\"1\":{\"102\":1}}],[\"前端技术\",{\"1\":{\"92\":1}}],[\"前半句背诵类题目\",{\"1\":{\"101\":1,\"102\":1,\"110\":1}}],[\"参形\",{\"1\":{\"758\":1,\"1163\":1}}],[\"参数为服务端重写的ip和端口\",{\"1\":{\"1457\":1}}],[\"参数是域名或者ip地址\",{\"1\":{\"1433\":1}}],[\"参数使用supplier\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"参数类型可以省略\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"参数类型可以省略不写\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"参数七\",{\"1\":{\"944\":1,\"1349\":1}}],[\"参数六\",{\"1\":{\"944\":1,\"1349\":1}}],[\"参数五\",{\"1\":{\"944\":1,\"1349\":1}}],[\"参数四\",{\"1\":{\"944\":1,\"1349\":1,\"1449\":1,\"1450\":1}}],[\"参数说明\",{\"0\":{\"941\":1,\"1346\":1}}],[\"参数名称\",{\"1\":{\"893\":1,\"1298\":1}}],[\"参数个数\",{\"1\":{\"812\":1,\"893\":1,\"1217\":1,\"1298\":1}}],[\"参数n\",{\"1\":{\"490\":1,\"491\":1}}],[\"参数x\",{\"1\":{\"451\":1}}],[\"参数必填\",{\"1\":{\"445\":1}}],[\"参数传递\",{\"0\":{\"281\":1}}],[\"参数传递的时候使用\",{\"1\":{\"271\":2}}],[\"参数接收\",{\"1\":{\"272\":1,\"281\":1}}],[\"参数占位符名称一致\",{\"1\":{\"281\":1}}],[\"参数占位符\",{\"0\":{\"271\":1},\"1\":{\"271\":2,\"281\":1}}],[\"参数\",{\"1\":{\"233\":1,\"418\":1,\"460\":1,\"461\":1,\"492\":1,\"1025\":1,\"1475\":1}}],[\"参数2\",{\"1\":{\"233\":3,\"281\":2,\"373\":2,\"475\":2,\"490\":1,\"491\":1}}],[\"参数1\",{\"1\":{\"233\":3,\"281\":2,\"373\":2,\"475\":2,\"490\":1,\"491\":1}}],[\"参数三\",{\"1\":{\"228\":1,\"944\":1,\"1349\":1,\"1449\":1,\"1450\":1}}],[\"参数二\",{\"1\":{\"228\":1,\"449\":2,\"450\":2,\"451\":1,\"944\":1,\"1012\":1,\"1349\":1,\"1417\":1,\"1449\":1,\"1450\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"参数一\",{\"1\":{\"228\":1,\"449\":2,\"450\":2,\"451\":1,\"812\":1,\"944\":1,\"1012\":1,\"1217\":1,\"1349\":1,\"1417\":1,\"1449\":1,\"1450\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"参考官网\",{\"1\":{\"100\":1}}],[\"参照个人的简历准备的面试资料\",{\"1\":{\"91\":1}}],[\"j++\",{\"1\":{\"794\":1,\"1199\":1}}],[\"jupiter\",{\"1\":{\"804\":1,\"806\":1,\"808\":2,\"812\":1,\"816\":1,\"1209\":1,\"1211\":1,\"1213\":2,\"1217\":1,\"1221\":1}}],[\"jump\",{\"1\":{\"629\":3,\"1034\":3}}],[\"junit4\",{\"1\":{\"570\":1,\"615\":1}}],[\"junit测试jar包\",{\"1\":{\"258\":1,\"259\":1,\"264\":1}}],[\"junit\",{\"1\":{\"245\":1,\"259\":1,\"570\":2,\"615\":2,\"804\":1,\"806\":1,\"808\":2,\"812\":1,\"816\":1,\"1209\":1,\"1211\":1,\"1213\":2,\"1217\":1,\"1221\":1}}],[\"jre\",{\"1\":{\"321\":1}}],[\"jps\",{\"1\":{\"375\":1,\"377\":1}}],[\"jps和\",{\"1\":{\"216\":1}}],[\"jpg\",{\"1\":{\"315\":1,\"635\":3,\"636\":1,\"965\":1,\"998\":2,\"1000\":2,\"1001\":2,\"1014\":2,\"1040\":3,\"1041\":1,\"1370\":1,\"1403\":2,\"1405\":2,\"1406\":2,\"1419\":2}}],[\"jta\",{\"1\":{\"285\":1}}],[\"jts\",{\"1\":{\"285\":1}}],[\"jms\",{\"1\":{\"285\":1}}],[\"jndi\",{\"1\":{\"285\":1}}],[\"j\",{\"1\":{\"280\":3,\"435\":2,\"794\":5,\"897\":1,\"1199\":5,\"1302\":1}}],[\"jdbcconfig\",{\"1\":{\"570\":2,\"610\":1,\"615\":2}}],[\"jdbc<\",{\"1\":{\"570\":1,\"615\":1}}],[\"jdbctransaction\",{\"1\":{\"280\":3}}],[\"jdbc驱动\",{\"1\":{\"259\":1}}],[\"jdbcdemo4\",{\"1\":{\"233\":1}}],[\"jdbcdemo3\",{\"1\":{\"231\":1}}],[\"jdbcdemo2\",{\"1\":{\"229\":1}}],[\"jdbcdemo1\",{\"1\":{\"226\":1}}],[\"jdbc事务管理\",{\"1\":{\"229\":1}}],[\"jdbc的快速入门\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1}}],[\"jdbc的好处\",{\"1\":{\"225\":1}}],[\"jdbc快速入门\",{\"0\":{\"226\":1}}],[\"jdbc就是使用java语言操作关系型数据库的一套api\",{\"1\":{\"225\":1}}],[\"jdbc简介\",{\"0\":{\"225\":1}}],[\"jdbc\",{\"0\":{\"224\":1,\"227\":1},\"1\":{\"225\":1,\"226\":7,\"228\":1,\"229\":3,\"231\":3,\"233\":3,\"234\":1,\"240\":4,\"264\":3,\"267\":6,\"280\":6,\"285\":1,\"494\":1,\"570\":11,\"610\":1,\"615\":5,\"627\":1},\"2\":{\"247\":1}}],[\"jdk9\",{\"1\":{\"996\":1,\"1401\":1}}],[\"jdk5以后提供了一个新的锁对象lock\",{\"1\":{\"939\":1,\"1344\":1}}],[\"jdk5\",{\"0\":{\"921\":1,\"1326\":1},\"1\":{\"942\":1,\"1347\":1}}],[\"jdk7新元素会占据老元素的位置\",{\"1\":{\"888\":1,\"1293\":1}}],[\"jdk根据对象的地址\",{\"1\":{\"885\":1,\"1290\":1}}],[\"jdk8以前是使用匿名类实现的\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"jdk8中的新元素会挂在老元素的下面\",{\"1\":{\"888\":1,\"1293\":1}}],[\"jdk8开始后\",{\"1\":{\"884\":1,\"1289\":1}}],[\"jdk8开始接口新增了一些方法\",{\"0\":{\"718\":1,\"1123\":1}}],[\"jdk8之前\",{\"1\":{\"884\":1,\"1289\":1}}],[\"jdk8新增的日期类\",{\"1\":{\"785\":1,\"1190\":1}}],[\"jdk8新增的日期api\",{\"0\":{\"785\":1,\"1190\":1}}],[\"jdk8u351版本\",{\"1\":{\"352\":1}}],[\"jdk配置参阅\",{\"1\":{\"370\":1}}],[\"jdk1\",{\"0\":{\"1025\":1,\"1475\":1},\"1\":{\"189\":2,\"217\":2,\"353\":1,\"714\":1,\"721\":3,\"888\":2,\"1024\":3,\"1025\":2,\"1119\":1,\"1126\":3,\"1293\":2,\"1474\":3,\"1475\":2}}],[\"jdk\",{\"1\":{\"113\":1,\"215\":1,\"352\":1,\"353\":4,\"373\":4,\"380\":1,\"386\":3,\"389\":3,\"392\":1,\"494\":1}}],[\"js\",{\"1\":{\"747\":1,\"842\":1,\"1152\":1,\"1247\":1}}],[\"jseeionid=xxxxxx\",{\"1\":{\"334\":1}}],[\"jstl\",{\"1\":{\"323\":2}}],[\"jstl标签\",{\"0\":{\"323\":1}}],[\"jstack\",{\"1\":{\"216\":1}}],[\"js等静态内容\",{\"1\":{\"317\":1}}],[\"jsp标准标签库\",{\"1\":{\"323\":1}}],[\"jsp页面\",{\"1\":{\"322\":1}}],[\"jsp已经逐渐退出历史舞台\",{\"1\":{\"321\":1}}],[\"jsp会自动生成\",{\"1\":{\"321\":1}}],[\"jsp容器\",{\"1\":{\"321\":1}}],[\"jsp缺点\",{\"0\":{\"321\":1}}],[\"jspservice\",{\"1\":{\"320\":2}}],[\"jspservice里就是通过输出流把我们的jsp写出去了\",{\"1\":{\"319\":1}}],[\"jsp脚本分类\",{\"1\":{\"320\":1}}],[\"jsp脚本用于jsp页面内定义java代码\",{\"1\":{\"320\":1}}],[\"jsp脚本\",{\"0\":{\"320\":1}}],[\"jsp被访问的时候\",{\"1\":{\"319\":1}}],[\"jsp转换为servlet的hello\",{\"1\":{\"319\":1}}],[\"jsp继承httpjspbase\",{\"1\":{\"319\":1}}],[\"jsp本质就是一个servlet\",{\"1\":{\"319\":1}}],[\"jsp原理\",{\"0\":{\"319\":1}}],[\"jsp<\",{\"1\":{\"318\":2,\"320\":1}}],[\"jsp快速入门\",{\"0\":{\"318\":1}}],[\"jsp的作用\",{\"1\":{\"317\":1}}],[\"jsp少量javaee规范也称为web容器\",{\"1\":{\"291\":1}}],[\"jsp少量javaee规范\",{\"1\":{\"290\":1}}],[\"jsp\",{\"0\":{\"317\":1},\"1\":{\"285\":1,\"317\":1,\"318\":2,\"319\":3,\"320\":3,\"321\":1,\"322\":2,\"323\":1,\"325\":1,\"351\":1}}],[\"json数据传递参数\",{\"0\":{\"564\":1}}],[\"json\",{\"1\":{\"100\":2,\"111\":1,\"120\":2,\"495\":2}}],[\"joindate\",{\"1\":{\"525\":2}}],[\"join\",{\"0\":{\"531\":1,\"532\":1},\"1\":{\"205\":4,\"531\":2,\"532\":2}}],[\"jobmanager的web界面的端口\",{\"1\":{\"395\":1}}],[\"jobmanager\",{\"1\":{\"395\":7}}],[\"jobhistory\",{\"1\":{\"386\":5}}],[\"job\",{\"1\":{\"116\":1,\"386\":1,\"387\":1}}],[\"jvm\",{\"1\":{\"197\":1,\"215\":1,\"395\":2}}],[\"jaf\",{\"1\":{\"285\":1}}],[\"jackson\",{\"1\":{\"566\":1,\"570\":1}}],[\"jack\",{\"1\":{\"129\":1}}],[\"jars\",{\"1\":{\"392\":1}}],[\"jar包\",{\"1\":{\"225\":1,\"248\":1}}],[\"jar\",{\"1\":{\"119\":1,\"239\":1,\"387\":2,\"392\":1,\"395\":1,\"494\":4}}],[\"java文件\",{\"2\":{\"1015\":1,\"1420\":1}}],[\"java入门\",{\"1\":{\"981\":2,\"1386\":2}}],[\"java总共定义了6种状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"java线程的状态\",{\"0\":{\"963\":1,\"1368\":1}}],[\"java3\",{\"1\":{\"904\":1,\"1309\":1}}],[\"java=10\",{\"1\":{\"904\":1,\"906\":1,\"907\":3,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":3,\"1313\":1}}],[\"java8特性的科技\",{\"0\":{\"1017\":1,\"1467\":1}}],[\"java8\",{\"2\":{\"825\":1,\"1031\":1,\"1230\":1,\"1481\":1}}],[\"java2\",{\"1\":{\"823\":1,\"904\":3,\"1022\":1,\"1228\":1,\"1309\":3,\"1472\":1}}],[\"java1\",{\"1\":{\"823\":1,\"904\":1,\"1022\":1,\"1228\":1,\"1309\":1,\"1472\":1}}],[\"javamirrored\",{\"1\":{\"819\":1,\"1224\":1}}],[\"javamail\",{\"1\":{\"285\":1}}],[\"javawhitespace\",{\"1\":{\"819\":1,\"1224\":1}}],[\"javaweb\",{\"1\":{\"747\":1,\"871\":1,\"1152\":1,\"1276\":1}}],[\"javaweb中的四大域对象\",{\"1\":{\"322\":1}}],[\"javaweb技术演进的过程\",{\"1\":{\"321\":1}}],[\"javauppercase\",{\"1\":{\"819\":1,\"1224\":1}}],[\"javalowercase\",{\"1\":{\"819\":1,\"1224\":1}}],[\"java为了实现万物皆对象\",{\"1\":{\"788\":1,\"1193\":1}}],[\"java开发手册中\",{\"0\":{\"773\":1,\"1178\":1}}],[\"java认为我们这样arraylist\",{\"1\":{\"748\":1,\"1153\":1}}],[\"javase\",{\"1\":{\"747\":1,\"861\":1,\"1152\":1,\"1266\":1}}],[\"javascript\",{\"1\":{\"92\":1}}],[\"java存在编译优化机制\",{\"1\":{\"743\":1,\"1148\":1}}],[\"java存在自动垃圾回收器\",{\"1\":{\"665\":1,\"1070\":1}}],[\"java建议强转转换前使用\",{\"1\":{\"732\":1,\"1137\":1}}],[\"java在强制类型转换的时候有一个建议\",{\"0\":{\"731\":1,\"1136\":1}}],[\"java源码自己会用到\",{\"1\":{\"721\":1,\"1126\":1}}],[\"java不支持多继承\",{\"1\":{\"693\":1,\"1098\":1}}],[\"java不存在多继承\",{\"1\":{\"690\":1,\"1095\":1}}],[\"java是最厉害的语言\",{\"1\":{\"743\":1,\"1148\":1}}],[\"java是单继承模式\",{\"1\":{\"693\":1,\"1098\":1}}],[\"java是强类型语言\",{\"0\":{\"645\":1,\"1050\":1}}],[\"java语法\",{\"2\":{\"656\":1,\"740\":1,\"796\":1,\"1061\":1,\"1145\":1,\"1201\":1}}],[\"java语言类型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"java的switch参数与case匹配规则的本质\",{\"0\":{\"653\":1,\"1058\":1}}],[\"java的数据类型分为两大类\",{\"1\":{\"646\":1,\"1051\":1}}],[\"java的故事\",{\"1\":{\"40\":1}}],[\"java中所有的类都是object类的子类\",{\"1\":{\"693\":1,\"1098\":1}}],[\"java中需要先定义类\",{\"1\":{\"658\":1,\"1063\":1}}],[\"java中的关键字不能作为标识符\",{\"1\":{\"643\":1,\"1048\":1}}],[\"java中的所有组成部分都需要名字\",{\"1\":{\"643\":1,\"1048\":1}}],[\"java中会使用会话技术\",{\"1\":{\"286\":1}}],[\"java异常\",{\"2\":{\"639\":1,\"1044\":1}}],[\"java无法为这个世界上所有的问题提供异常类\",{\"1\":{\"638\":1,\"1043\":1}}],[\"javac\",{\"1\":{\"353\":1}}],[\"javabean\",{\"0\":{\"671\":1,\"1076\":1},\"1\":{\"325\":1,\"701\":1,\"1106\":1}}],[\"java和\",{\"1\":{\"321\":1}}],[\"java然后经过编译为class文件hello\",{\"1\":{\"319\":1}}],[\"java服务端页面\",{\"1\":{\"317\":1}}],[\"java提供的对http协议封装的响应对象接口\",{\"1\":{\"311\":1}}],[\"java提供的对http协议封装的请求对象接口\",{\"1\":{\"306\":1}}],[\"java提供的响应对象根接口\",{\"1\":{\"311\":1}}],[\"java提供的请求对象根接口\",{\"1\":{\"306\":1}}],[\"java企业版\",{\"1\":{\"285\":1}}],[\"javaee提供httpsession接口\",{\"1\":{\"333\":1}}],[\"javaee\",{\"1\":{\"285\":1,\"321\":1}}],[\"javaee三层架构\",{\"1\":{\"262\":1}}],[\"java<\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"javax\",{\"1\":{\"240\":1,\"245\":1,\"299\":5,\"307\":5,\"308\":5,\"310\":10,\"313\":10,\"314\":5,\"315\":6,\"329\":12,\"333\":12,\"338\":2,\"562\":1,\"570\":3,\"579\":3,\"615\":2,\"1025\":1,\"1475\":1}}],[\"java代码不需要针对不同的数据库分别开发\",{\"1\":{\"225\":1}}],[\"java数据库连接\",{\"1\":{\"225\":1}}],[\"javaguide\",{\"1\":{\"169\":1,\"170\":1}}],[\"java基础\",{\"1\":{\"92\":1},\"2\":{\"655\":1,\"739\":1,\"795\":1,\"1060\":1,\"1144\":1,\"1200\":1}}],[\"java基础第三幕\",{\"0\":{\"741\":1,\"1146\":1},\"1\":{\"0\":1}}],[\"java基础第二幕\",{\"0\":{\"657\":1,\"1062\":1},\"1\":{\"0\":1}}],[\"java基础第一幕\",{\"0\":{\"642\":1,\"1047\":1},\"1\":{\"0\":1}}],[\"java知识的世界无穷无尽\",{\"1\":{\"90\":1}}],[\"java城是一个无尽的世界\",{\"1\":{\"40\":1}}],[\"java城的居民们对主角的眼神发生了巨大的变化\",{\"1\":{\"40\":1}}],[\"java大师引导主角学习了图形界面编程的基础知识和技术\",{\"1\":{\"39\":1}}],[\"java大师告诉主角\",{\"1\":{\"37\":1}}],[\"java大师教导主角如何选择和使用不同的数据结构\",{\"1\":{\"35\":1}}],[\"java大师解释道\",{\"1\":{\"33\":1}}],[\"java大师带领主角来到一个神秘的实验室\",{\"1\":{\"33\":1}}],[\"java大师向主角传授了一些关于java语法的基础知识和解题技巧\",{\"1\":{\"31\":1}}],[\"java大师看穿了主角的困惑和担忧\",{\"1\":{\"29\":1}}],[\"java大陆并不会停止带给他新的挑战\",{\"1\":{\"58\":1}}],[\"java大陆充满了各种宝藏和秘密\",{\"1\":{\"53\":1}}],[\"java大陆的探险之旅进入了关键的阶段\",{\"1\":{\"50\":1}}],[\"java大陆的故事将在每一个勇敢的冒险家身上继续绽放\",{\"1\":{\"49\":1}}],[\"java大陆不仅仅是一个学习的地方\",{\"1\":{\"8\":1}}],[\"java大陆是一个神奇的地方\",{\"1\":{\"1\":1}}],[\"java\",{\"0\":{\"1483\":1,\"1488\":1,\"1494\":1},\"1\":{\"0\":1,\"18\":1,\"75\":3,\"92\":2,\"98\":1,\"106\":1,\"119\":1,\"197\":1,\"199\":7,\"203\":1,\"215\":1,\"225\":1,\"226\":3,\"228\":1,\"229\":3,\"231\":6,\"233\":4,\"240\":5,\"245\":8,\"264\":3,\"275\":2,\"285\":1,\"299\":1,\"307\":2,\"308\":3,\"309\":1,\"310\":2,\"313\":3,\"314\":2,\"315\":2,\"316\":1,\"317\":2,\"318\":1,\"320\":1,\"321\":1,\"323\":1,\"329\":2,\"333\":2,\"338\":1,\"353\":6,\"386\":3,\"389\":1,\"392\":1,\"494\":1,\"570\":5,\"613\":1,\"615\":3,\"628\":1,\"629\":9,\"635\":6,\"636\":4,\"672\":1,\"678\":1,\"679\":1,\"707\":2,\"743\":3,\"747\":1,\"749\":1,\"750\":1,\"751\":5,\"756\":1,\"759\":1,\"774\":2,\"776\":1,\"781\":5,\"784\":2,\"786\":3,\"793\":5,\"794\":3,\"804\":1,\"806\":2,\"808\":3,\"812\":1,\"814\":4,\"816\":3,\"819\":1,\"821\":3,\"822\":2,\"823\":3,\"824\":3,\"839\":11,\"840\":11,\"842\":9,\"844\":6,\"845\":5,\"846\":6,\"847\":2,\"861\":6,\"865\":1,\"866\":17,\"871\":3,\"878\":1,\"881\":9,\"887\":1,\"888\":3,\"891\":6,\"893\":1,\"894\":1,\"896\":4,\"897\":4,\"903\":5,\"904\":8,\"906\":6,\"907\":5,\"908\":9,\"909\":4,\"921\":2,\"939\":2,\"948\":1,\"949\":1,\"951\":2,\"952\":2,\"954\":2,\"956\":5,\"965\":1,\"966\":2,\"969\":2,\"971\":1,\"981\":1,\"988\":1,\"994\":3,\"995\":3,\"996\":3,\"997\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":2,\"1004\":2,\"1007\":1,\"1008\":6,\"1009\":5,\"1011\":2,\"1012\":4,\"1014\":3,\"1019\":2,\"1020\":3,\"1021\":2,\"1022\":3,\"1023\":3,\"1025\":10,\"1029\":1,\"1033\":1,\"1034\":9,\"1040\":6,\"1041\":4,\"1077\":1,\"1083\":1,\"1084\":1,\"1112\":2,\"1148\":3,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":5,\"1161\":1,\"1164\":1,\"1179\":2,\"1181\":1,\"1186\":5,\"1189\":2,\"1191\":3,\"1198\":5,\"1199\":3,\"1209\":1,\"1211\":2,\"1213\":3,\"1217\":1,\"1219\":4,\"1221\":3,\"1224\":1,\"1226\":3,\"1227\":2,\"1228\":3,\"1229\":3,\"1244\":11,\"1245\":11,\"1247\":9,\"1249\":6,\"1250\":5,\"1251\":6,\"1252\":2,\"1266\":6,\"1270\":1,\"1271\":17,\"1276\":3,\"1283\":1,\"1286\":9,\"1292\":1,\"1293\":3,\"1296\":6,\"1298\":1,\"1299\":1,\"1301\":4,\"1302\":4,\"1308\":5,\"1309\":8,\"1311\":6,\"1312\":5,\"1313\":9,\"1314\":4,\"1326\":2,\"1344\":2,\"1353\":1,\"1354\":1,\"1356\":2,\"1357\":2,\"1359\":2,\"1361\":5,\"1370\":1,\"1371\":2,\"1374\":2,\"1376\":1,\"1386\":1,\"1393\":1,\"1399\":3,\"1400\":3,\"1401\":3,\"1402\":4,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":2,\"1409\":2,\"1412\":1,\"1413\":6,\"1414\":5,\"1416\":2,\"1417\":4,\"1419\":3,\"1433\":1,\"1449\":5,\"1450\":6,\"1458\":4,\"1461\":9,\"1464\":14,\"1465\":11,\"1466\":15,\"1469\":2,\"1470\":3,\"1471\":2,\"1472\":3,\"1473\":3,\"1475\":10,\"1479\":1},\"2\":{\"246\":1}}],[\"java世界的无限可能让他充满激情和动力\",{\"1\":{\"75\":1}}],[\"java世界\",{\"0\":{\"0\":1}}],[\"other\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"otherwise>\",{\"1\":{\"274\":1}}],[\"otherwise\",{\"1\":{\"273\":1,\"758\":1,\"1163\":1}}],[\"ois\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"oos\",{\"1\":{\"1009\":3,\"1414\":3}}],[\"o表示output\",{\"1\":{\"989\":1,\"1394\":1}}],[\"o表示其他用户权限\",{\"1\":{\"465\":1}}],[\"o2\",{\"1\":{\"793\":6,\"891\":2,\"897\":2,\"1019\":10,\"1198\":6,\"1296\":2,\"1302\":2,\"1469\":10}}],[\"o1\",{\"1\":{\"793\":6,\"891\":2,\"897\":2,\"1019\":10,\"1198\":6,\"1296\":2,\"1302\":2,\"1469\":10}}],[\"o是object类型\",{\"1\":{\"756\":1,\"1161\":1}}],[\"own\",{\"1\":{\"496\":12}}],[\"owner\",{\"1\":{\"210\":1}}],[\"owner是关联的获得锁的线程\",{\"1\":{\"210\":1}}],[\"o=r\",{\"1\":{\"465\":2}}],[\"oss\",{\"1\":{\"409\":1}}],[\"os\",{\"1\":{\"399\":2,\"1007\":3,\"1009\":3,\"1011\":1,\"1412\":3,\"1414\":3,\"1416\":1,\"1458\":2,\"1461\":3,\"1464\":3,\"1465\":3}}],[\"of\",{\"0\":{\"582\":1},\"1\":{\"386\":11,\"495\":1,\"758\":1,\"784\":2,\"823\":1,\"909\":3,\"1022\":1,\"1028\":1,\"1163\":1,\"1189\":2,\"1228\":1,\"1314\":3,\"1472\":1,\"1478\":1}}],[\"offset\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"offerlast\",{\"1\":{\"865\":2,\"1270\":2}}],[\"off\",{\"1\":{\"264\":1,\"819\":1,\"1224\":1}}],[\"objetc\",{\"1\":{\"842\":1,\"1247\":1}}],[\"objectinputstream\",{\"1\":{\"1009\":3,\"1414\":3}}],[\"objectoutputstream\",{\"1\":{\"1009\":3,\"1414\":3}}],[\"object是自从jdk1\",{\"1\":{\"757\":1,\"1162\":1}}],[\"object是祖宗\",{\"1\":{\"693\":1,\"1098\":1}}],[\"objects的equals比较更安全\",{\"1\":{\"758\":1,\"1163\":1}}],[\"objects\",{\"0\":{\"757\":1,\"1162\":1},\"1\":{\"756\":3,\"758\":2,\"759\":3,\"760\":1,\"794\":2,\"866\":1,\"887\":1,\"888\":3,\"891\":3,\"896\":3,\"1161\":3,\"1163\":2,\"1164\":3,\"1165\":1,\"1199\":2,\"1271\":1,\"1292\":1,\"1293\":3,\"1296\":3,\"1301\":3}}],[\"objects类与object还是继承关系\",{\"1\":{\"757\":1,\"1162\":1}}],[\"objects类\",{\"0\":{\"752\":1,\"1157\":1}}],[\"object类中的常用方法\",{\"0\":{\"754\":1,\"1159\":1}}],[\"object类的api\",{\"0\":{\"886\":1,\"1291\":1}}],[\"object类的方法是一切子类都可以直接使用的\",{\"1\":{\"753\":1,\"1158\":1}}],[\"object类的作用\",{\"0\":{\"753\":1,\"1158\":1}}],[\"object类是java中的祖宗类\",{\"1\":{\"753\":1,\"1158\":1}}],[\"object\",{\"0\":{\"752\":1,\"1157\":1},\"1\":{\"187\":2,\"207\":1,\"310\":3,\"333\":3,\"571\":5,\"579\":3,\"629\":12,\"750\":1,\"754\":1,\"755\":1,\"756\":3,\"758\":10,\"781\":1,\"806\":1,\"807\":1,\"809\":4,\"812\":3,\"813\":3,\"814\":1,\"816\":1,\"839\":1,\"840\":1,\"842\":2,\"888\":1,\"891\":1,\"896\":1,\"904\":4,\"1028\":1,\"1034\":12,\"1155\":1,\"1159\":1,\"1160\":1,\"1161\":3,\"1163\":10,\"1186\":1,\"1211\":1,\"1212\":1,\"1214\":4,\"1217\":3,\"1218\":3,\"1219\":1,\"1221\":1,\"1244\":1,\"1245\":1,\"1247\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1309\":4,\"1478\":1}}],[\"objclass\",{\"1\":{\"816\":4,\"1221\":4}}],[\"obj\",{\"1\":{\"629\":4,\"758\":2,\"809\":2,\"812\":1,\"813\":1,\"816\":3,\"1009\":2,\"1034\":4,\"1163\":2,\"1214\":2,\"1217\":1,\"1218\":1,\"1221\":3,\"1414\":2}}],[\"obtain\",{\"1\":{\"386\":4}}],[\"overflow\",{\"1\":{\"361\":1,\"831\":1,\"1236\":1}}],[\"override注解\",{\"1\":{\"698\":1,\"1103\":1}}],[\"override是放在重写后的方法上的\",{\"1\":{\"698\":1,\"1103\":1}}],[\"override重写注解\",{\"0\":{\"698\":1,\"1103\":1}}],[\"overrides\",{\"1\":{\"386\":3}}],[\"override\",{\"1\":{\"199\":3,\"244\":1,\"264\":1,\"295\":1,\"299\":2,\"307\":2,\"308\":2,\"309\":1,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4,\"338\":3,\"413\":1,\"557\":3,\"562\":4,\"570\":9,\"579\":10,\"615\":5,\"628\":4,\"629\":8,\"641\":2,\"672\":1,\"709\":2,\"715\":4,\"732\":2,\"737\":1,\"738\":5,\"751\":2,\"755\":1,\"756\":4,\"793\":4,\"804\":1,\"816\":2,\"823\":2,\"846\":1,\"871\":1,\"875\":8,\"888\":3,\"891\":5,\"896\":4,\"897\":1,\"908\":1,\"914\":1,\"918\":1,\"920\":2,\"921\":1,\"924\":1,\"930\":1,\"939\":2,\"948\":1,\"954\":1,\"956\":2,\"1009\":1,\"1018\":1,\"1019\":1,\"1022\":2,\"1024\":1,\"1033\":4,\"1034\":8,\"1046\":2,\"1077\":1,\"1114\":2,\"1120\":4,\"1137\":2,\"1142\":1,\"1143\":5,\"1156\":2,\"1160\":1,\"1161\":4,\"1198\":4,\"1209\":1,\"1221\":2,\"1228\":2,\"1251\":1,\"1276\":1,\"1280\":8,\"1293\":3,\"1296\":5,\"1301\":4,\"1302\":1,\"1313\":1,\"1319\":1,\"1323\":1,\"1325\":2,\"1326\":1,\"1329\":1,\"1335\":1,\"1344\":2,\"1353\":1,\"1359\":1,\"1361\":2,\"1414\":1,\"1464\":1,\"1465\":1,\"1466\":2,\"1468\":1,\"1469\":1,\"1472\":2,\"1474\":1}}],[\"on\",{\"0\":{\"531\":1,\"532\":1},\"1\":{\"280\":1,\"386\":8,\"398\":1,\"402\":2,\"494\":6,\"495\":5,\"531\":2,\"532\":2,\"620\":3,\"819\":1,\"1224\":1}}],[\"only\",{\"1\":{\"128\":1,\"386\":1,\"758\":1,\"1163\":1}}],[\"okpassword\",{\"1\":{\"743\":4,\"1148\":4}}],[\"okname\",{\"1\":{\"743\":4,\"1148\":4}}],[\"ok表示状态码描述\",{\"1\":{\"288\":1}}],[\"ok\",{\"1\":{\"243\":1,\"312\":1,\"360\":1,\"571\":4,\"1466\":2}}],[\"opt\",{\"1\":{\"428\":1}}],[\"options\",{\"1\":{\"439\":2}}],[\"option2\",{\"1\":{\"240\":1}}],[\"option1\",{\"1\":{\"240\":1}}],[\"open=\",{\"1\":{\"280\":1}}],[\"open\",{\"1\":{\"280\":1}}],[\"opensession\",{\"1\":{\"264\":1,\"265\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1}}],[\"openapi\",{\"1\":{\"100\":1,\"120\":1}}],[\"orca\",{\"1\":{\"460\":1}}],[\"org\",{\"1\":{\"245\":1,\"249\":1,\"250\":1,\"258\":4,\"261\":1,\"264\":12,\"267\":2,\"270\":2,\"273\":1,\"290\":1,\"315\":1,\"316\":3,\"354\":2,\"356\":4,\"375\":1,\"377\":1,\"386\":5,\"389\":1,\"392\":2,\"395\":1,\"496\":2,\"544\":3,\"552\":1,\"557\":12,\"562\":2,\"570\":33,\"573\":2,\"579\":26,\"601\":4,\"613\":1,\"615\":23,\"804\":1,\"806\":1,\"808\":2,\"812\":1,\"816\":1,\"1013\":1,\"1014\":2,\"1209\":1,\"1211\":1,\"1213\":2,\"1217\":1,\"1221\":1,\"1418\":1,\"1419\":2}}],[\"oracle\",{\"1\":{\"240\":3,\"353\":1}}],[\"oracle驱动\",{\"1\":{\"225\":1}}],[\"or\",{\"1\":{\"233\":5,\"273\":1,\"386\":14,\"403\":1,\"743\":5,\"1028\":2,\"1148\":5,\"1478\":2}}],[\"ordered=\",{\"1\":{\"244\":1}}],[\"ordered\",{\"1\":{\"243\":2,\"244\":9,\"245\":9,\"270\":2,\"275\":4,\"276\":2,\"277\":5}}],[\"orderlythread\",{\"1\":{\"205\":1}}],[\"order\",{\"1\":{\"148\":1,\"516\":2,\"519\":3,\"529\":8}}],[\"orderby\",{\"1\":{\"99\":1}}],[\"outofmemoryerror\",{\"1\":{\"952\":2,\"1357\":2}}],[\"out文件\",{\"1\":{\"424\":2}}],[\"outputstrean\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"outputstream\",{\"1\":{\"315\":5,\"997\":17,\"998\":1,\"1000\":1,\"1001\":1,\"1007\":2,\"1011\":1,\"1402\":17,\"1403\":1,\"1405\":1,\"1406\":1,\"1412\":2,\"1416\":1,\"1458\":3,\"1461\":2,\"1464\":2,\"1465\":2,\"1466\":9}}],[\"output\",{\"1\":{\"387\":1}}],[\"out\",{\"1\":{\"199\":5,\"205\":3,\"226\":1,\"229\":1,\"231\":1,\"233\":2,\"240\":2,\"245\":4,\"264\":1,\"272\":1,\"277\":1,\"279\":1,\"280\":1,\"295\":1,\"299\":2,\"307\":7,\"308\":10,\"309\":2,\"310\":3,\"313\":2,\"318\":1,\"320\":3,\"329\":1,\"333\":1,\"338\":1,\"423\":3,\"424\":1,\"544\":5,\"557\":1,\"570\":2,\"579\":3,\"615\":3,\"628\":6,\"629\":16,\"635\":5,\"636\":5,\"637\":5,\"638\":1,\"641\":2,\"647\":3,\"648\":2,\"652\":2,\"654\":11,\"662\":3,\"663\":4,\"664\":3,\"678\":1,\"686\":1,\"688\":1,\"704\":3,\"708\":4,\"709\":2,\"715\":5,\"721\":2,\"732\":4,\"737\":1,\"738\":9,\"743\":26,\"747\":2,\"750\":9,\"751\":12,\"755\":4,\"756\":3,\"759\":4,\"760\":1,\"763\":8,\"769\":4,\"771\":6,\"774\":11,\"776\":5,\"781\":7,\"784\":7,\"786\":7,\"790\":1,\"793\":9,\"794\":3,\"802\":3,\"804\":7,\"806\":4,\"808\":4,\"812\":6,\"814\":8,\"818\":4,\"821\":4,\"823\":12,\"824\":2,\"839\":5,\"840\":7,\"842\":12,\"844\":7,\"845\":4,\"846\":4,\"847\":1,\"861\":6,\"865\":9,\"866\":3,\"871\":1,\"873\":4,\"881\":2,\"887\":4,\"888\":1,\"891\":4,\"893\":2,\"896\":2,\"897\":6,\"903\":1,\"904\":13,\"906\":2,\"907\":3,\"908\":5,\"909\":3,\"914\":2,\"918\":2,\"920\":4,\"921\":2,\"924\":5,\"925\":2,\"930\":3,\"933\":3,\"936\":3,\"937\":3,\"939\":5,\"948\":2,\"949\":5,\"954\":1,\"956\":2,\"965\":5,\"966\":7,\"969\":8,\"971\":2,\"974\":3,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":2,\"994\":5,\"995\":10,\"996\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":1,\"1007\":1,\"1008\":3,\"1009\":1,\"1012\":4,\"1018\":5,\"1019\":1,\"1020\":4,\"1022\":12,\"1023\":2,\"1024\":2,\"1026\":2,\"1027\":4,\"1028\":4,\"1029\":4,\"1033\":6,\"1034\":16,\"1040\":5,\"1041\":5,\"1042\":5,\"1043\":1,\"1046\":2,\"1052\":3,\"1053\":2,\"1057\":2,\"1059\":11,\"1067\":3,\"1068\":4,\"1069\":3,\"1083\":1,\"1091\":1,\"1093\":1,\"1109\":3,\"1113\":4,\"1114\":2,\"1120\":5,\"1126\":2,\"1137\":4,\"1142\":1,\"1143\":9,\"1148\":26,\"1152\":2,\"1155\":9,\"1156\":12,\"1160\":4,\"1161\":3,\"1164\":4,\"1165\":1,\"1168\":8,\"1174\":4,\"1176\":6,\"1179\":11,\"1181\":5,\"1186\":7,\"1189\":7,\"1191\":7,\"1195\":1,\"1198\":9,\"1199\":3,\"1207\":3,\"1209\":7,\"1211\":4,\"1213\":4,\"1217\":6,\"1219\":8,\"1223\":4,\"1226\":4,\"1228\":12,\"1229\":2,\"1244\":5,\"1245\":7,\"1247\":12,\"1249\":7,\"1250\":4,\"1251\":4,\"1252\":1,\"1266\":6,\"1270\":9,\"1271\":3,\"1276\":1,\"1278\":4,\"1286\":2,\"1292\":4,\"1293\":1,\"1296\":4,\"1298\":2,\"1301\":2,\"1302\":6,\"1308\":1,\"1309\":13,\"1311\":2,\"1312\":3,\"1313\":5,\"1314\":3,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":2,\"1329\":5,\"1330\":2,\"1335\":3,\"1338\":3,\"1341\":3,\"1342\":3,\"1344\":5,\"1353\":2,\"1354\":5,\"1359\":1,\"1361\":2,\"1370\":5,\"1371\":7,\"1374\":8,\"1376\":2,\"1379\":3,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":2,\"1399\":5,\"1400\":10,\"1401\":4,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1412\":1,\"1413\":3,\"1414\":1,\"1417\":4,\"1433\":8,\"1449\":5,\"1450\":6,\"1461\":3,\"1464\":3,\"1465\":3,\"1468\":5,\"1469\":1,\"1470\":4,\"1472\":12,\"1473\":2,\"1474\":2,\"1476\":2,\"1477\":4,\"1478\":4,\"1479\":4}}],[\"oldcapacity\",{\"1\":{\"831\":7,\"1236\":7}}],[\"oldcapacity为旧容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"oldcap\",{\"1\":{\"191\":1,\"193\":2}}],[\"o\",{\"1\":{\"139\":1,\"187\":5,\"280\":4,\"310\":1,\"333\":1,\"436\":5,\"496\":2,\"750\":1,\"754\":1,\"756\":13,\"842\":1,\"888\":6,\"891\":10,\"896\":9,\"1155\":1,\"1159\":1,\"1161\":13,\"1247\":1,\"1293\":6,\"1296\":10,\"1301\":9}}],[\"后进后出\",{\"1\":{\"851\":1,\"1256\":1}}],[\"后进先出\",{\"1\":{\"850\":1,\"1255\":1}}],[\"后跟\",{\"1\":{\"819\":1,\"1224\":1}}],[\"后缀名分别为\",{\"1\":{\"490\":1}}],[\"后面是有规律的\",{\"1\":{\"881\":1,\"1286\":1}}],[\"后面的日历时间就会全都改变\",{\"1\":{\"784\":1,\"1189\":1}}],[\"后面的分三个三个来看\",{\"1\":{\"441\":1}}],[\"后面我们可以通过反射暴力获取到子类对象的父类的私有方法\",{\"1\":{\"694\":1,\"1099\":1}}],[\"后面会视情况独立出一集防火墙配置规则的章节\",{\"1\":{\"354\":1}}],[\"后台就创建一个新的线程来处理\",{\"1\":{\"940\":1,\"1345\":1}}],[\"后台执行命令\",{\"0\":{\"421\":1}}],[\"后台启动\",{\"1\":{\"377\":1}}],[\"后续也可以用list集合实现排序\",{\"1\":{\"892\":1,\"1297\":1}}],[\"后续就有对象了\",{\"1\":{\"688\":1,\"1093\":1}}],[\"后续的代码无需修改\",{\"1\":{\"726\":1,\"1131\":1}}],[\"后续的安装部署操作\",{\"1\":{\"373\":1}}],[\"后续的大数据集群软件\",{\"1\":{\"370\":1}}],[\"后续视情况可以出一章selinux的配置课程\",{\"1\":{\"371\":1}}],[\"后续安装的集群化软件\",{\"1\":{\"369\":1}}],[\"后续\",{\"1\":{\"363\":1}}],[\"后续修改密码使用如下sql命令\",{\"1\":{\"350\":1}}],[\"后续简称mysql\",{\"1\":{\"344\":1}}],[\"后续复用\",{\"1\":{\"154\":1}}],[\"后期框架\",{\"1\":{\"326\":1}}],[\"后端人员不精html\",{\"1\":{\"321\":1}}],[\"后端使用的是springboot\",{\"1\":{\"121\":1}}],[\"后半句主观回答\",{\"1\":{\"101\":1,\"102\":1,\"110\":1}}],[\"后\",{\"1\":{\"100\":1,\"120\":1,\"435\":4}}],[\"引用类型的转换\",{\"0\":{\"728\":1,\"1133\":1}}],[\"引用类型的参数传输存储的\",{\"1\":{\"654\":2,\"1059\":2}}],[\"引用类型\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"654\":1,\"703\":1,\"1059\":1,\"1108\":1}}],[\"引用数据类型\",{\"1\":{\"646\":1,\"788\":1,\"1051\":1,\"1193\":1}}],[\"引出\",{\"1\":{\"129\":1}}],[\"引入多线程\",{\"1\":{\"1464\":1}}],[\"引入了一个全新的stream流的概念\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"引入依赖\",{\"1\":{\"615\":1}}],[\"引入properties文件\",{\"1\":{\"610\":1}}],[\"引入dependencymanagement\",{\"1\":{\"259\":3}}],[\"引入坐标\",{\"1\":{\"258\":1}}],[\"引入消息队列可能会对系统造成的影响\",{\"1\":{\"176\":1}}],[\"引入相关依赖\",{\"1\":{\"103\":1}}],[\"引入\",{\"1\":{\"100\":1,\"120\":1}}],[\"引导他去学习一项重要的java知识\",{\"1\":{\"12\":1}}],[\"l�\\u0004namet�\\u0012ljava\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"l�\\u0006gendert�\\u0015ljava\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"lu\",{\"1\":{\"819\":2,\"1224\":2}}],[\"lua\",{\"1\":{\"117\":1}}],[\"lq\",{\"1\":{\"819\":1,\"1224\":1}}],[\"l1\",{\"1\":{\"629\":2,\"1034\":2}}],[\"lh\",{\"1\":{\"496\":1}}],[\"lrzsz\",{\"1\":{\"488\":1}}],[\"lru\",{\"1\":{\"130\":3}}],[\"l统计行数\",{\"1\":{\"455\":1}}],[\"l是链接文件\",{\"1\":{\"441\":1}}],[\"l一起使用\",{\"1\":{\"440\":1}}],[\"l并且等价于ls\",{\"1\":{\"440\":1}}],[\"ll\",{\"1\":{\"418\":3,\"496\":2}}],[\"lscf\",{\"1\":{\"496\":1}}],[\"ls命令的作用是列出目录下的内容\",{\"1\":{\"440\":1}}],[\"ls\",{\"0\":{\"440\":1},\"1\":{\"375\":1,\"418\":2,\"437\":2,\"440\":2,\"496\":112}}],[\"ln\",{\"1\":{\"353\":2,\"354\":1,\"375\":3,\"377\":3,\"386\":2,\"389\":2,\"392\":2,\"395\":2,\"475\":3}}],[\"lt\",{\"1\":{\"271\":2,\"829\":2,\"1234\":2}}],[\"l\",{\"1\":{\"216\":1,\"418\":1,\"435\":2,\"440\":3,\"455\":1,\"496\":4,\"629\":2,\"819\":1,\"1034\":2,\"1224\":1}}],[\"left\",{\"0\":{\"532\":1},\"1\":{\"532\":1,\"794\":4,\"1199\":4}}],[\"less\",{\"1\":{\"419\":1}}],[\"level=\",{\"1\":{\"264\":2}}],[\"level\",{\"1\":{\"264\":2}}],[\"len是到第几滴水结束\",{\"1\":{\"995\":1,\"1400\":1}}],[\"length=0\",{\"1\":{\"831\":1,\"1236\":1}}],[\"length=4\",{\"1\":{\"350\":1,\"398\":1}}],[\"length\",{\"1\":{\"678\":1,\"679\":1,\"743\":4,\"758\":2,\"763\":2,\"794\":3,\"818\":3,\"821\":2,\"823\":1,\"831\":2,\"873\":2,\"893\":1,\"908\":1,\"965\":4,\"966\":1,\"981\":1,\"996\":3,\"1020\":2,\"1022\":1,\"1083\":1,\"1084\":1,\"1148\":4,\"1163\":2,\"1168\":2,\"1199\":3,\"1223\":3,\"1226\":2,\"1228\":1,\"1236\":2,\"1278\":2,\"1298\":1,\"1313\":1,\"1370\":4,\"1371\":1,\"1386\":1,\"1401\":3,\"1447\":4,\"1449\":5,\"1450\":5,\"1470\":2,\"1472\":1}}],[\"len判断是否命中索引\",{\"1\":{\"142\":1}}],[\"len\",{\"1\":{\"142\":1,\"315\":3,\"995\":4,\"996\":1,\"998\":3,\"1000\":3,\"1001\":3,\"1003\":3,\"1007\":3,\"1008\":3,\"1400\":4,\"1401\":1,\"1403\":3,\"1405\":3,\"1406\":3,\"1408\":3,\"1412\":3,\"1413\":3}}],[\"least\",{\"1\":{\"115\":1}}],[\"lisilist\",{\"1\":{\"1027\":7,\"1477\":7}}],[\"lisi\",{\"1\":{\"514\":1}}],[\"listfiles\",{\"1\":{\"971\":1,\"981\":1,\"1376\":1,\"1386\":1}}],[\"listfile\",{\"1\":{\"970\":1,\"1375\":1}}],[\"lists\",{\"1\":{\"871\":4,\"909\":3,\"1276\":4,\"1314\":3}}],[\"listdemo2\",{\"1\":{\"865\":1,\"1270\":1}}],[\"listdemo1\",{\"1\":{\"861\":1,\"1266\":1}}],[\"list的实现类底层原理\",{\"1\":{\"861\":1,\"1266\":1}}],[\"list调用的都是左边collection中的方法\",{\"1\":{\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1}}],[\"list系列集合\",{\"0\":{\"838\":1,\"859\":1,\"1243\":1,\"1264\":1}}],[\"list下有arraylist和linkedlist两个常用的实现类\",{\"1\":{\"836\":1,\"1241\":1}}],[\"list3\",{\"1\":{\"814\":4,\"1219\":4}}],[\"list2class\",{\"1\":{\"814\":3,\"1219\":3}}],[\"list2\",{\"1\":{\"749\":3,\"751\":14,\"814\":9,\"842\":6,\"1154\":3,\"1156\":14,\"1219\":9,\"1247\":6}}],[\"list1\",{\"1\":{\"749\":2,\"814\":3,\"840\":3,\"1154\":2,\"1219\":3,\"1245\":3}}],[\"list>\",{\"1\":{\"601\":1}}],[\"listen\",{\"1\":{\"495\":4}}],[\"listeners=plaintext\",{\"1\":{\"377\":3}}],[\"listener\",{\"0\":{\"341\":1},\"1\":{\"337\":1}}],[\"list集合的遍历方式\",{\"0\":{\"862\":1,\"1267\":1}}],[\"list集合因为支持索引\",{\"1\":{\"861\":1,\"1266\":1}}],[\"list集合特有的方法\",{\"0\":{\"861\":1,\"1266\":1}}],[\"list集合特点\",{\"0\":{\"860\":1,\"1265\":1}}],[\"list集合中的内容\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"list集合\",{\"1\":{\"281\":3}}],[\"list<integer>\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"list<double>\",{\"1\":{\"909\":1,\"1314\":1}}],[\"list<card>\",{\"1\":{\"897\":5,\"1302\":5}}],[\"list<\",{\"1\":{\"896\":2,\"1301\":2}}],[\"list<string>\",{\"1\":{\"821\":3,\"823\":1,\"824\":2,\"861\":1,\"866\":1,\"1020\":3,\"1022\":1,\"1023\":2,\"1226\":3,\"1228\":1,\"1229\":2,\"1266\":1,\"1271\":1,\"1470\":3,\"1472\":1,\"1473\":2}}],[\"list<student>\",{\"1\":{\"793\":1,\"896\":1,\"1198\":1,\"1301\":1}}],[\"list<account>\",{\"1\":{\"615\":3}}],[\"list<book>\",{\"1\":{\"570\":5,\"613\":1}}],[\"list<brand>\",{\"1\":{\"245\":1,\"272\":2,\"281\":1,\"283\":1}}],[\"list<user>\",{\"1\":{\"231\":1,\"264\":1,\"265\":2}}],[\"list\",{\"1\":{\"187\":1,\"231\":4,\"245\":1,\"264\":1,\"281\":2,\"378\":1,\"386\":2,\"496\":1,\"570\":5,\"601\":1,\"613\":1,\"615\":3,\"747\":21,\"748\":1,\"749\":4,\"750\":17,\"751\":14,\"793\":8,\"821\":1,\"822\":2,\"823\":20,\"824\":9,\"831\":1,\"839\":11,\"840\":11,\"842\":18,\"844\":7,\"845\":7,\"846\":9,\"861\":14,\"865\":1,\"866\":20,\"871\":6,\"895\":2,\"896\":3,\"897\":1,\"909\":2,\"910\":1,\"948\":1,\"970\":1,\"971\":1,\"1020\":1,\"1021\":2,\"1022\":20,\"1023\":9,\"1027\":20,\"1028\":15,\"1152\":21,\"1153\":1,\"1154\":4,\"1155\":17,\"1156\":14,\"1198\":8,\"1226\":1,\"1227\":2,\"1228\":20,\"1229\":9,\"1236\":1,\"1244\":11,\"1245\":11,\"1247\":18,\"1249\":7,\"1250\":7,\"1251\":9,\"1266\":14,\"1270\":1,\"1271\":20,\"1276\":6,\"1300\":2,\"1301\":3,\"1302\":1,\"1314\":2,\"1315\":1,\"1353\":1,\"1375\":1,\"1376\":1,\"1470\":1,\"1471\":2,\"1472\":20,\"1473\":9,\"1477\":20,\"1478\":15}}],[\"list用了toarray转数组后\",{\"1\":{\"186\":1}}],[\"list用toarray转数组后\",{\"0\":{\"186\":1}}],[\"list转数组\",{\"1\":{\"184\":1}}],[\"licenses\",{\"1\":{\"386\":4}}],[\"license\",{\"1\":{\"386\":36}}],[\"licensed\",{\"1\":{\"386\":4}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"951\":1,\"1356\":1}}],[\"linkedhashmap有序\",{\"1\":{\"903\":1,\"904\":1,\"906\":1,\"1308\":1,\"1309\":1,\"1311\":1}}],[\"linkedhashmap<>\",{\"1\":{\"903\":1,\"904\":1,\"906\":1,\"1308\":1,\"1309\":1,\"1311\":1}}],[\"linkedhashmap\",{\"1\":{\"903\":2,\"1308\":2}}],[\"linkedhashset集合\",{\"0\":{\"889\":1,\"1294\":1}}],[\"linkedhashset<>\",{\"1\":{\"881\":1,\"1286\":1}}],[\"linkedhashset\",{\"1\":{\"839\":1,\"881\":2,\"1244\":1,\"1286\":2}}],[\"linked\",{\"1\":{\"881\":10,\"1286\":10}}],[\"linkedlist<>\",{\"1\":{\"865\":2,\"1270\":2}}],[\"linkedlist<string>\",{\"1\":{\"865\":2,\"1270\":2}}],[\"linkedlist集合特有的功能\",{\"0\":{\"865\":1,\"1270\":1}}],[\"linkedlist集合底层原理\",{\"0\":{\"864\":1,\"1269\":1}}],[\"linkedlist的特点\",{\"1\":{\"864\":1,\"1269\":1}}],[\"linkedlist底层是基于双链表实现的\",{\"1\":{\"861\":1,\"1266\":1}}],[\"linkedlist\",{\"1\":{\"187\":5,\"838\":1,\"860\":1,\"865\":2,\"1243\":1,\"1265\":1,\"1270\":2}}],[\"linux和mac有两种常用的压缩格式\",{\"1\":{\"490\":1}}],[\"linux中的环境变量可以自己设置\",{\"1\":{\"486\":1}}],[\"linux系统很多软件\",{\"1\":{\"474\":1}}],[\"linux系统会自动识别一些文件\",{\"1\":{\"428\":1}}],[\"linux路径是此命令可选的参数\",{\"1\":{\"440\":1}}],[\"linux路径\",{\"1\":{\"440\":1,\"442\":1,\"445\":1,\"449\":2,\"460\":2}}],[\"linux命令基础\",{\"0\":{\"438\":1}}],[\"linux会把识别的设备挂载到这个目录下\",{\"1\":{\"428\":1}}],[\"linux的文件系统是采用层级式的树状目录结构\",{\"1\":{\"427\":1}}],[\"linux常用命令\",{\"0\":{\"416\":1}}],[\"linux有一个安全模块\",{\"1\":{\"371\":1}}],[\"linux\",{\"0\":{\"421\":1,\"1484\":1},\"1\":{\"353\":2,\"360\":2,\"428\":1,\"496\":2}}],[\"linux上部署各类软件\",{\"0\":{\"342\":1}}],[\"line\",{\"1\":{\"307\":2,\"431\":1,\"1008\":3,\"1413\":3}}],[\"limit取前几个元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"limitations\",{\"1\":{\"386\":4}}],[\"limit\",{\"1\":{\"148\":2,\"496\":1,\"516\":2,\"523\":1,\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"lib\",{\"1\":{\"141\":1,\"428\":1,\"474\":1,\"494\":1,\"496\":6}}],[\"like\",{\"1\":{\"99\":1,\"272\":6,\"273\":7,\"274\":4,\"518\":3}}],[\"lower\",{\"1\":{\"819\":2,\"1224\":2}}],[\"love\",{\"1\":{\"743\":1,\"1148\":1}}],[\"lombok\",{\"1\":{\"570\":3,\"615\":3}}],[\"lost+found\",{\"1\":{\"428\":1}}],[\"lookup=\",{\"1\":{\"389\":1}}],[\"loadonstartup\",{\"1\":{\"297\":1}}],[\"load\",{\"1\":{\"240\":1,\"245\":1,\"481\":3,\"1012\":1,\"1417\":1}}],[\"loginresult\",{\"1\":{\"629\":2,\"1034\":2}}],[\"login\",{\"1\":{\"629\":3,\"704\":2,\"1034\":3,\"1109\":2}}],[\"logic\",{\"1\":{\"552\":3}}],[\"logging\",{\"1\":{\"544\":1,\"552\":1}}],[\"logger=info\",{\"1\":{\"386\":1}}],[\"logger>\",{\"1\":{\"264\":1}}],[\"logger\",{\"1\":{\"264\":1}}],[\"logrotate\",{\"1\":{\"496\":2}}],[\"log<\",{\"1\":{\"386\":1}}],[\"logs<\",{\"1\":{\"386\":2}}],[\"logs\",{\"1\":{\"386\":6,\"494\":2,\"495\":5,\"496\":24}}],[\"log文件中\",{\"1\":{\"347\":1,\"350\":1}}],[\"logback<\",{\"1\":{\"264\":2}}],[\"logback依赖坐标\",{\"1\":{\"264\":1}}],[\"logback\",{\"1\":{\"259\":1,\"264\":2}}],[\"log4j\",{\"1\":{\"240\":1}}],[\"logabandoned\",{\"1\":{\"240\":1}}],[\"log主要的作用是记录回滚日志\",{\"1\":{\"154\":1}}],[\"log保证了事务的原子性和一致性\",{\"1\":{\"153\":1}}],[\"log保证了事务的持久性\",{\"1\":{\"153\":1}}],[\"log日志\",{\"1\":{\"154\":1}}],[\"log日志文件中新增一条delete语句\",{\"1\":{\"153\":1}}],[\"log日志记录的是数据页的物理变化\",{\"1\":{\"153\":1}}],[\"log\",{\"1\":{\"153\":1,\"155\":1,\"347\":3,\"350\":3,\"377\":4,\"386\":16,\"398\":2,\"495\":9,\"544\":2,\"552\":1}}],[\"log的区别\",{\"0\":{\"153\":1}}],[\"log和redo\",{\"0\":{\"153\":1}}],[\"log中记录查询超过2秒的sql\",{\"1\":{\"141\":1}}],[\"log=1\",{\"1\":{\"141\":1}}],[\"locations\",{\"1\":{\"494\":1}}],[\"location\",{\"1\":{\"313\":3,\"495\":5}}],[\"localdatetime\",{\"0\":{\"786\":1,\"1191\":1},\"1\":{\"785\":1,\"786\":3,\"1190\":1,\"1191\":3}}],[\"localdate\",{\"0\":{\"786\":1,\"1191\":1},\"1\":{\"785\":1,\"786\":3,\"1190\":1,\"1191\":3}}],[\"localtime\",{\"0\":{\"786\":1,\"1191\":1},\"1\":{\"494\":2,\"785\":1,\"786\":3,\"1190\":1,\"1191\":3}}],[\"local<\",{\"1\":{\"386\":1}}],[\"local\",{\"1\":{\"251\":2,\"386\":7,\"428\":3,\"494\":1,\"495\":1,\"496\":10}}],[\"localrepository>\",{\"1\":{\"251\":2}}],[\"localrepository\",{\"1\":{\"251\":1}}],[\"localhost\",{\"1\":{\"141\":1,\"226\":3,\"229\":1,\"231\":1,\"233\":1,\"234\":1,\"295\":1,\"302\":6,\"307\":2,\"347\":1,\"350\":1,\"398\":3,\"402\":1,\"495\":1,\"570\":1,\"627\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"locks\",{\"1\":{\"939\":2,\"1344\":2}}],[\"lock的api\",{\"1\":{\"939\":1,\"1344\":1}}],[\"lock的key\",{\"1\":{\"125\":1}}],[\"lock是接口不能直接实例化\",{\"1\":{\"939\":1,\"1344\":1}}],[\"lock锁实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作\",{\"1\":{\"939\":1,\"1344\":1}}],[\"lock锁\",{\"0\":{\"939\":1,\"1344\":1}}],[\"lock\",{\"1\":{\"131\":2,\"215\":5,\"933\":1,\"939\":13,\"1338\":1,\"1344\":13}}],[\"long\",{\"1\":{\"141\":1,\"207\":1,\"219\":1,\"615\":3,\"629\":8,\"650\":1,\"769\":3,\"776\":1,\"777\":1,\"781\":2,\"784\":2,\"788\":2,\"823\":1,\"925\":1,\"926\":1,\"944\":1,\"948\":1,\"949\":1,\"954\":2,\"955\":2,\"965\":1,\"966\":2,\"996\":1,\"1009\":2,\"1022\":1,\"1028\":1,\"1034\":8,\"1055\":1,\"1174\":3,\"1181\":1,\"1182\":1,\"1186\":2,\"1189\":2,\"1193\":2,\"1228\":1,\"1330\":1,\"1331\":1,\"1349\":1,\"1353\":1,\"1354\":1,\"1359\":2,\"1360\":2,\"1370\":1,\"1371\":2,\"1401\":1,\"1414\":2,\"1472\":1,\"1478\":1}}],[\"land\",{\"0\":{\"1487\":1,\"1489\":1,\"1493\":1,\"1495\":1}}],[\"lang\",{\"1\":{\"615\":5,\"629\":9,\"707\":2,\"708\":1,\"743\":1,\"804\":1,\"806\":2,\"808\":3,\"812\":1,\"814\":1,\"816\":1,\"819\":5,\"914\":1,\"952\":2,\"1009\":6,\"1025\":2,\"1029\":1,\"1034\":9,\"1112\":2,\"1113\":1,\"1148\":1,\"1209\":1,\"1211\":2,\"1213\":3,\"1217\":1,\"1219\":1,\"1221\":1,\"1224\":5,\"1319\":1,\"1357\":2,\"1414\":6,\"1475\":2,\"1479\":1}}],[\"language\",{\"1\":{\"322\":1,\"386\":4}}],[\"language=\",{\"1\":{\"318\":1,\"320\":1}}],[\"latest\",{\"1\":{\"496\":3}}],[\"lastmodified\",{\"1\":{\"966\":2,\"1371\":2}}],[\"lastthreecards\",{\"1\":{\"897\":2,\"1302\":2}}],[\"last\",{\"1\":{\"431\":1}}],[\"law\",{\"1\":{\"386\":4}}],[\"lazy懒加载\",{\"1\":{\"165\":1}}],[\"lag\",{\"1\":{\"137\":1}}],[\"lambdademo2\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambdademo1\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"lambda是一个匿名函数\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambda的好处\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambda概述\",{\"0\":{\"1018\":1,\"1468\":1}}],[\"lambda表达式省略写法\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambda表达式有什么使用前提\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambda表达式的基本作用\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"lambda表达式的简化格式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"lambda表达式只能简化接口中只有一个抽象方法的匿名内部类形式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"lambda表达式只能简化函数式接口的匿名内部类的写法形式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"lambda表达式是jdk8开始后的一种新语法形式\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"lambda表达式\",{\"0\":{\"908\":1,\"1313\":1},\"1\":{\"862\":1,\"866\":1,\"908\":1,\"1267\":1,\"1271\":1,\"1313\":1}}],[\"lambda表达式就一行代码就ok了\",{\"1\":{\"738\":1,\"1143\":1}}],[\"lambda在游泳\",{\"1\":{\"738\":2,\"1143\":2}}],[\"lambda\",{\"0\":{\"846\":1,\"1251\":1},\"1\":{\"99\":1,\"1018\":1,\"1019\":1,\"1468\":1,\"1469\":1},\"2\":{\"1032\":1,\"1482\":1}}],[\"lambdaquerywrapper\",{\"1\":{\"99\":1}}],[\"外部类中可以再包一个内部对象\",{\"1\":{\"871\":1,\"1276\":1}}],[\"外部类可以理解成宿主\",{\"1\":{\"734\":1,\"1139\":1}}],[\"外部均可\",{\"1\":{\"313\":1}}],[\"外设\",{\"1\":{\"715\":1,\"1120\":1}}],[\"外连接查询语法\",{\"1\":{\"532\":1}}],[\"外连接\",{\"0\":{\"532\":2}}],[\"外键\",{\"1\":{\"526\":1}}],[\"外键用来让两个表之间建立连接的\",{\"1\":{\"526\":1}}],[\"外键用来让两个表的数据之间建立连接\",{\"1\":{\"525\":1}}],[\"外键约束\",{\"0\":{\"526\":1},\"1\":{\"525\":1}}],[\"外\",{\"1\":{\"99\":1}}],[\"中文utf\",{\"1\":{\"994\":1,\"1399\":1}}],[\"中文乱码处理\",{\"1\":{\"570\":1}}],[\"中文数据乱码\",{\"1\":{\"314\":1}}],[\"中间表至少包含两个外键\",{\"1\":{\"529\":1}}],[\"中是找不到的\",{\"1\":{\"360\":1}}],[\"中编写\",{\"1\":{\"258\":1}}],[\"中就会出现\",{\"1\":{\"222\":1}}],[\"中的一个字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"中的\",{\"1\":{\"159\":1,\"743\":1,\"1148\":1}}],[\"中的索引\",{\"1\":{\"92\":1}}],[\"中尽量避免定义可变的成员变量\",{\"1\":{\"158\":1}}],[\"中记录了ddl\",{\"1\":{\"155\":1}}],[\"中\",{\"1\":{\"139\":1,\"155\":1,\"158\":1,\"159\":1,\"197\":1,\"215\":1,\"297\":1,\"437\":1,\"629\":2,\"821\":1,\"1020\":1,\"1034\":2,\"1226\":1,\"1470\":1}}],[\"中使用的\",{\"1\":{\"222\":1}}],[\"中使用\",{\"1\":{\"111\":1}}],[\"中央仓库\",{\"1\":{\"250\":1}}],[\"中央仓库引入\",{\"1\":{\"104\":1}}],[\"中央仓库发布\",{\"1\":{\"103\":1}}],[\"中引入该模块即可复用代码\",{\"1\":{\"98\":1}}],[\"p=134\",{\"1\":{\"888\":1,\"1293\":1}}],[\"p=130\",{\"1\":{\"855\":1,\"1260\":1}}],[\"p=59\",{\"1\":{\"281\":1}}],[\"pcdata\",{\"1\":{\"829\":3,\"1234\":3}}],[\"play3\",{\"1\":{\"897\":4,\"1302\":4}}],[\"play2\",{\"1\":{\"897\":4,\"1302\":4}}],[\"play1\",{\"1\":{\"897\":5,\"1302\":5}}],[\"platformtransactionmanager\",{\"1\":{\"570\":2}}],[\"plugin\",{\"1\":{\"496\":5}}],[\"plugin=mysql\",{\"1\":{\"494\":1}}],[\"plugins\",{\"1\":{\"358\":1,\"544\":2}}],[\"plugins>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"plugin>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"plugin<\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"plusredisredissonvue3\",{\"1\":{\"109\":1}}],[\"plusredisdubbonacosreact\",{\"1\":{\"95\":1}}],[\"plus\",{\"0\":{\"99\":1},\"1\":{\"92\":1,\"96\":1,\"99\":3,\"544\":3,\"552\":1,\"747\":1,\"1152\":1}}],[\"png\",{\"1\":{\"539\":1,\"543\":1,\"544\":4,\"546\":1,\"551\":1,\"552\":1,\"558\":1,\"561\":1,\"576\":1,\"578\":1,\"581\":1,\"585\":1,\"586\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"594\":1,\"595\":1,\"596\":2,\"598\":2,\"599\":2,\"600\":2,\"602\":2,\"603\":6,\"605\":2,\"606\":2,\"607\":2,\"608\":4,\"609\":2,\"610\":2,\"611\":1,\"612\":2,\"614\":1,\"615\":33,\"616\":7,\"617\":1,\"619\":1,\"621\":1}}],[\"pem\",{\"1\":{\"495\":1}}],[\"period\",{\"1\":{\"785\":1,\"954\":1,\"955\":1,\"1190\":1,\"1359\":1,\"1360\":1}}],[\"peripherals\",{\"1\":{\"715\":8,\"1120\":8}}],[\"person\",{\"1\":{\"659\":1,\"1027\":12,\"1028\":8,\"1064\":1,\"1477\":12,\"1478\":8}}],[\"persistent\",{\"1\":{\"496\":1}}],[\"persistently\",{\"1\":{\"386\":1}}],[\"permitted\",{\"1\":{\"386\":1}}],[\"permissions\",{\"1\":{\"358\":1,\"386\":4}}],[\"perm<\",{\"1\":{\"386\":1}}],[\"permanent表示永久生效\",{\"1\":{\"354\":1}}],[\"permanent\",{\"1\":{\"354\":1,\"356\":1,\"358\":3,\"360\":1}}],[\"ppid\",{\"1\":{\"478\":1}}],[\"python\",{\"1\":{\"866\":3,\"1271\":3}}],[\"pydistutils\",{\"1\":{\"460\":2}}],[\"pyourpassword\",{\"1\":{\"402\":1}}],[\"ping\",{\"1\":{\"1430\":1,\"1433\":1}}],[\"pid\",{\"1\":{\"478\":1,\"481\":1,\"495\":2}}],[\"pip\",{\"1\":{\"460\":1}}],[\"pictures\",{\"1\":{\"315\":1,\"635\":3,\"636\":1,\"965\":1,\"971\":1,\"998\":2,\"1000\":2,\"1001\":2,\"1014\":2,\"1040\":3,\"1041\":1,\"1370\":1,\"1376\":1,\"1403\":2,\"1405\":2,\"1406\":2,\"1419\":2}}],[\"pts\",{\"1\":{\"456\":1}}],[\"p选项可选\",{\"1\":{\"445\":1}}],[\"p是管道\",{\"1\":{\"441\":1}}],[\"php\",{\"1\":{\"404\":1,\"866\":3,\"1271\":3}}],[\"pki\",{\"1\":{\"358\":4,\"409\":1,\"460\":1}}],[\"ps\",{\"1\":{\"356\":1,\"456\":1,\"478\":1,\"496\":89,\"816\":3,\"1011\":8,\"1221\":3,\"1416\":8,\"1458\":3,\"1461\":4,\"1464\":4,\"1465\":4}}],[\"pstmt\",{\"1\":{\"233\":1}}],[\"pm\",{\"1\":{\"320\":1}}],[\"p\",{\"1\":{\"280\":1,\"347\":2,\"350\":2,\"353\":1,\"358\":1,\"375\":2,\"377\":1,\"386\":10,\"398\":1,\"402\":1,\"435\":10,\"445\":1,\"481\":1,\"495\":1,\"496\":14,\"501\":2,\"819\":35,\"1028\":2,\"1224\":35,\"1449\":1,\"1478\":2}}],[\"pwd则会直接输出pwd\",{\"1\":{\"458\":1}}],[\"pwd\",{\"0\":{\"443\":1},\"1\":{\"240\":2,\"443\":1,\"458\":2,\"485\":1}}],[\"punlic\",{\"1\":{\"926\":1,\"1331\":1}}],[\"punct\",{\"1\":{\"819\":2,\"1224\":2}}],[\"push\",{\"1\":{\"865\":6,\"1270\":6}}],[\"pubic\",{\"1\":{\"743\":2,\"1148\":2}}],[\"public<\",{\"1\":{\"251\":1}}],[\"public\",{\"1\":{\"199\":11,\"205\":2,\"219\":1,\"226\":2,\"229\":2,\"231\":2,\"233\":2,\"240\":4,\"244\":16,\"245\":7,\"264\":18,\"267\":1,\"270\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"295\":3,\"299\":1,\"307\":1,\"308\":1,\"309\":2,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"316\":2,\"329\":2,\"333\":2,\"338\":4,\"544\":2,\"557\":4,\"562\":1,\"566\":1,\"570\":27,\"571\":19,\"573\":4,\"579\":12,\"613\":1,\"615\":19,\"628\":12,\"629\":24,\"635\":3,\"636\":3,\"637\":3,\"638\":6,\"641\":14,\"652\":1,\"654\":4,\"660\":7,\"662\":5,\"663\":2,\"664\":2,\"672\":11,\"678\":4,\"679\":2,\"686\":2,\"688\":3,\"704\":5,\"707\":8,\"708\":3,\"709\":8,\"713\":1,\"714\":3,\"715\":6,\"721\":4,\"726\":1,\"732\":11,\"737\":1,\"738\":11,\"743\":20,\"746\":1,\"747\":4,\"749\":2,\"750\":7,\"751\":30,\"754\":2,\"755\":12,\"756\":15,\"758\":3,\"759\":2,\"762\":2,\"763\":7,\"767\":7,\"769\":5,\"771\":2,\"772\":1,\"774\":7,\"776\":2,\"780\":2,\"781\":6,\"784\":7,\"786\":2,\"793\":21,\"794\":5,\"802\":3,\"804\":13,\"806\":3,\"807\":1,\"808\":5,\"812\":10,\"814\":2,\"816\":26,\"818\":4,\"821\":2,\"822\":2,\"823\":4,\"824\":2,\"831\":2,\"839\":2,\"840\":2,\"842\":9,\"844\":2,\"845\":2,\"846\":3,\"847\":2,\"861\":2,\"865\":9,\"866\":2,\"870\":1,\"871\":6,\"872\":1,\"873\":4,\"875\":13,\"878\":3,\"881\":2,\"886\":1,\"887\":2,\"888\":14,\"891\":16,\"893\":3,\"895\":2,\"896\":17,\"897\":13,\"903\":2,\"904\":2,\"906\":2,\"907\":2,\"908\":5,\"909\":2,\"914\":3,\"918\":3,\"920\":4,\"921\":4,\"924\":6,\"925\":3,\"926\":6,\"930\":13,\"937\":3,\"939\":26,\"944\":1,\"948\":5,\"949\":3,\"951\":7,\"952\":4,\"954\":5,\"955\":2,\"956\":4,\"963\":1,\"965\":5,\"966\":9,\"968\":3,\"969\":3,\"970\":2,\"971\":2,\"974\":7,\"976\":3,\"978\":3,\"979\":3,\"981\":3,\"988\":2,\"994\":6,\"995\":2,\"996\":2,\"997\":2,\"998\":2,\"1000\":2,\"1001\":2,\"1002\":2,\"1003\":2,\"1004\":2,\"1007\":4,\"1008\":4,\"1009\":14,\"1011\":6,\"1012\":4,\"1014\":2,\"1018\":4,\"1019\":3,\"1020\":2,\"1021\":2,\"1022\":4,\"1023\":2,\"1024\":3,\"1026\":1,\"1027\":1,\"1028\":4,\"1029\":4,\"1033\":12,\"1034\":24,\"1040\":3,\"1041\":3,\"1042\":3,\"1043\":6,\"1046\":14,\"1057\":1,\"1059\":4,\"1065\":7,\"1067\":5,\"1068\":2,\"1069\":2,\"1077\":11,\"1083\":4,\"1084\":2,\"1091\":2,\"1093\":3,\"1109\":5,\"1112\":8,\"1113\":3,\"1114\":8,\"1118\":1,\"1119\":3,\"1120\":6,\"1126\":4,\"1131\":1,\"1137\":11,\"1142\":1,\"1143\":11,\"1148\":20,\"1151\":1,\"1152\":4,\"1154\":2,\"1155\":7,\"1156\":30,\"1159\":2,\"1160\":12,\"1161\":15,\"1163\":3,\"1164\":2,\"1167\":2,\"1168\":7,\"1172\":7,\"1174\":5,\"1176\":2,\"1177\":1,\"1179\":7,\"1181\":2,\"1185\":2,\"1186\":6,\"1189\":7,\"1191\":2,\"1198\":21,\"1199\":5,\"1207\":3,\"1209\":13,\"1211\":3,\"1212\":1,\"1213\":5,\"1217\":10,\"1219\":2,\"1221\":26,\"1223\":4,\"1226\":2,\"1227\":2,\"1228\":4,\"1229\":2,\"1236\":2,\"1244\":2,\"1245\":2,\"1247\":9,\"1249\":2,\"1250\":2,\"1251\":3,\"1252\":2,\"1266\":2,\"1270\":9,\"1271\":2,\"1275\":1,\"1276\":6,\"1277\":1,\"1278\":4,\"1280\":13,\"1283\":3,\"1286\":2,\"1291\":1,\"1292\":2,\"1293\":14,\"1296\":16,\"1298\":3,\"1300\":2,\"1301\":17,\"1302\":13,\"1308\":2,\"1309\":2,\"1311\":2,\"1312\":2,\"1313\":5,\"1314\":2,\"1319\":3,\"1323\":3,\"1325\":4,\"1326\":4,\"1329\":6,\"1330\":3,\"1331\":6,\"1335\":13,\"1342\":3,\"1344\":26,\"1349\":1,\"1353\":5,\"1354\":3,\"1356\":7,\"1357\":4,\"1359\":5,\"1360\":2,\"1361\":4,\"1368\":1,\"1370\":5,\"1371\":9,\"1373\":3,\"1374\":3,\"1375\":2,\"1376\":2,\"1379\":7,\"1381\":3,\"1383\":3,\"1384\":3,\"1386\":3,\"1393\":2,\"1399\":6,\"1400\":2,\"1401\":2,\"1402\":2,\"1403\":2,\"1405\":2,\"1406\":2,\"1407\":2,\"1408\":2,\"1409\":2,\"1412\":4,\"1413\":4,\"1414\":14,\"1416\":6,\"1417\":4,\"1419\":2,\"1433\":7,\"1447\":2,\"1448\":2,\"1449\":7,\"1450\":5,\"1457\":1,\"1458\":3,\"1460\":1,\"1461\":6,\"1464\":8,\"1465\":8,\"1466\":10,\"1468\":4,\"1469\":3,\"1470\":2,\"1471\":2,\"1472\":4,\"1473\":2,\"1474\":3,\"1476\":1,\"1477\":1,\"1478\":4,\"1479\":4}}],[\"putall\",{\"1\":{\"904\":1,\"1309\":1}}],[\"putmapping\",{\"1\":{\"570\":1}}],[\"put\",{\"0\":{\"190\":1},\"1\":{\"281\":17,\"386\":3,\"387\":2,\"389\":1,\"903\":5,\"904\":11,\"906\":6,\"907\":6,\"908\":8,\"1308\":5,\"1309\":11,\"1311\":6,\"1312\":6,\"1313\":8}}],[\"packet\",{\"1\":{\"1449\":7,\"1450\":5}}],[\"packaging>\",{\"1\":{\"557\":1,\"570\":1}}],[\"package把项目打包\",{\"1\":{\"494\":1}}],[\"packagecloud\",{\"1\":{\"358\":13}}],[\"packages\",{\"1\":{\"356\":2,\"360\":1,\"362\":2,\"409\":2}}],[\"package\",{\"1\":{\"98\":1,\"199\":4,\"205\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"244\":1,\"245\":2,\"253\":1,\"254\":1,\"264\":2,\"299\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"316\":1,\"329\":2,\"333\":2,\"338\":1,\"358\":3,\"494\":1,\"544\":1,\"557\":3,\"562\":1,\"570\":11,\"571\":2,\"573\":1,\"579\":6,\"613\":1,\"615\":8,\"628\":4,\"629\":9,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"641\":5,\"654\":1,\"660\":1,\"662\":2,\"663\":1,\"664\":1,\"672\":1,\"678\":2,\"679\":1,\"686\":1,\"688\":1,\"701\":1,\"704\":1,\"707\":1,\"708\":1,\"709\":3,\"714\":1,\"715\":1,\"721\":1,\"732\":4,\"738\":2,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":6,\"755\":2,\"756\":2,\"759\":1,\"763\":1,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":3,\"794\":2,\"802\":2,\"804\":2,\"806\":1,\"808\":2,\"812\":2,\"814\":1,\"816\":4,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":2,\"873\":1,\"875\":5,\"878\":1,\"881\":1,\"887\":1,\"888\":2,\"891\":2,\"893\":1,\"896\":2,\"897\":2,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":1,\"924\":2,\"925\":1,\"930\":3,\"939\":5,\"948\":2,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":3,\"1011\":1,\"1012\":2,\"1014\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1033\":4,\"1034\":9,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":2,\"1046\":5,\"1059\":1,\"1065\":1,\"1067\":2,\"1068\":1,\"1069\":1,\"1077\":1,\"1083\":2,\"1084\":1,\"1091\":1,\"1093\":1,\"1106\":1,\"1109\":1,\"1112\":1,\"1113\":1,\"1114\":3,\"1119\":1,\"1120\":1,\"1126\":1,\"1137\":4,\"1143\":2,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":6,\"1160\":2,\"1161\":2,\"1164\":1,\"1168\":1,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":3,\"1199\":2,\"1207\":2,\"1209\":2,\"1211\":1,\"1213\":2,\"1217\":2,\"1219\":1,\"1221\":4,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":2,\"1278\":1,\"1280\":5,\"1283\":1,\"1286\":1,\"1292\":1,\"1293\":2,\"1296\":2,\"1298\":1,\"1301\":2,\"1302\":2,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":2,\"1330\":1,\"1335\":3,\"1344\":5,\"1353\":2,\"1354\":1,\"1356\":1,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":3,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":3,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"paginationinnerinterceptor\",{\"1\":{\"544\":2}}],[\"page\",{\"1\":{\"318\":1,\"320\":1,\"322\":1,\"433\":2,\"435\":2,\"495\":3,\"544\":3}}],[\"pages\",{\"1\":{\"317\":1,\"495\":1,\"547\":1,\"553\":1,\"579\":2}}],[\"payment\",{\"1\":{\"529\":2}}],[\"pass\",{\"1\":{\"495\":3}}],[\"passwd查看系统全部用户信息\",{\"1\":{\"464\":1}}],[\"passwd和getent\",{\"0\":{\"464\":1}}],[\"passwd\",{\"1\":{\"354\":1}}],[\"password关键字\",{\"1\":{\"347\":1,\"350\":1}}],[\"password=root\",{\"1\":{\"496\":6}}],[\"password=password\",{\"1\":{\"494\":3}}],[\"password=123\",{\"1\":{\"307\":2}}],[\"password=12345678\",{\"1\":{\"240\":1,\"570\":1}}],[\"password=\",{\"1\":{\"264\":1}}],[\"password2\",{\"1\":{\"233\":2}}],[\"password\",{\"1\":{\"226\":2,\"228\":2,\"229\":2,\"231\":2,\"233\":6,\"240\":1,\"264\":10,\"267\":2,\"308\":3,\"347\":1,\"350\":6,\"398\":4,\"402\":1,\"494\":8,\"510\":1,\"514\":3,\"570\":3,\"615\":3,\"629\":3,\"704\":2,\"743\":11,\"1012\":1,\"1034\":3,\"1109\":2,\"1148\":11,\"1417\":1}}],[\"parent\",{\"1\":{\"965\":2,\"1370\":2}}],[\"parseint\",{\"1\":{\"790\":2,\"1029\":1,\"1195\":2,\"1479\":1}}],[\"parse\",{\"1\":{\"635\":3,\"636\":1,\"781\":1,\"782\":1,\"1040\":3,\"1041\":1,\"1186\":1,\"1187\":1}}],[\"parsetime\",{\"1\":{\"635\":2,\"636\":2,\"1040\":2,\"1041\":2}}],[\"parseexception\",{\"1\":{\"635\":3,\"781\":2,\"1040\":3,\"1186\":2}}],[\"parallelism\",{\"1\":{\"395\":1}}],[\"params\",{\"1\":{\"893\":1,\"1298\":1}}],[\"parametertypes\",{\"1\":{\"804\":4,\"806\":1,\"807\":1,\"810\":2,\"813\":1,\"1209\":4,\"1211\":1,\"1212\":1,\"1215\":2,\"1218\":1}}],[\"parameter\",{\"1\":{\"439\":2}}],[\"parameters\",{\"1\":{\"272\":1,\"280\":1}}],[\"param3\",{\"1\":{\"281\":1}}],[\"param2\",{\"1\":{\"281\":3}}],[\"param1\",{\"1\":{\"281\":3}}],[\"param注解中的\",{\"1\":{\"281\":1}}],[\"param注解\",{\"1\":{\"281\":4}}],[\"param注解改变map集合的默认key的名称\",{\"1\":{\"280\":1}}],[\"param\",{\"1\":{\"272\":6,\"280\":2,\"281\":7,\"282\":1,\"570\":4,\"579\":1,\"641\":1,\"678\":1,\"679\":1,\"751\":2,\"758\":1,\"794\":2,\"878\":1,\"888\":1,\"891\":2,\"896\":2,\"930\":1,\"937\":1,\"939\":3,\"981\":2,\"1046\":1,\"1083\":1,\"1084\":1,\"1156\":2,\"1163\":1,\"1199\":2,\"1283\":1,\"1293\":1,\"1296\":2,\"1301\":2,\"1335\":1,\"1342\":1,\"1344\":3,\"1386\":2}}],[\"parma\",{\"1\":{\"272\":1,\"281\":1}}],[\"partitions\",{\"1\":{\"378\":1}}],[\"partition\",{\"1\":{\"174\":1}}],[\"pattern\",{\"1\":{\"780\":1,\"818\":1,\"1185\":1,\"1223\":1}}],[\"pattern>\",{\"1\":{\"264\":1}}],[\"pathmatcher\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"pathname\",{\"1\":{\"965\":1,\"994\":1,\"1370\":1,\"1399\":1}}],[\"pathvariable\",{\"1\":{\"570\":2,\"579\":2}}],[\"path=path\",{\"1\":{\"389\":1}}],[\"path=$hbase\",{\"1\":{\"389\":1}}],[\"path=$path\",{\"1\":{\"353\":1,\"386\":1,\"486\":1}}],[\"paths\",{\"1\":{\"386\":2}}],[\"path>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"path\",{\"0\":{\"484\":1},\"1\":{\"251\":2}}],[\"panda\",{\"1\":{\"160\":1}}],[\"pot\",{\"1\":{\"1457\":1}}],[\"pop\",{\"1\":{\"865\":3,\"1270\":3}}],[\"pop3\",{\"1\":{\"355\":1}}],[\"pow\",{\"1\":{\"767\":1,\"1172\":1}}],[\"powered\",{\"1\":{\"743\":1,\"1148\":1}}],[\"point\",{\"1\":{\"819\":2,\"1224\":2}}],[\"pointcut\",{\"1\":{\"615\":2}}],[\"pointer指针形成一个链表\",{\"1\":{\"154\":1}}],[\"pointer\",{\"1\":{\"154\":1}}],[\"podman\",{\"1\":{\"496\":2}}],[\"policy=low\",{\"1\":{\"398\":1}}],[\"policy=0\",{\"1\":{\"350\":1}}],[\"posix字符类\",{\"1\":{\"819\":1,\"1224\":1}}],[\"posthandle\",{\"1\":{\"579\":2}}],[\"postmapping\",{\"1\":{\"570\":1}}],[\"post底层是通过getreader\",{\"1\":{\"309\":3}}],[\"post方式\",{\"1\":{\"308\":1}}],[\"post请求的最后一部分\",{\"1\":{\"287\":1}}],[\"post\",{\"1\":{\"254\":2,\"299\":1,\"309\":4}}],[\"possible\",{\"1\":{\"142\":1}}],[\"pojo类型\",{\"1\":{\"281\":1}}],[\"pojo或者叫javabean\",{\"1\":{\"244\":1}}],[\"pojo\",{\"1\":{\"240\":1,\"244\":1,\"245\":1,\"264\":4,\"267\":1,\"570\":7,\"613\":1,\"615\":6}}],[\"ports\",{\"1\":{\"494\":3}}],[\"port<\",{\"1\":{\"386\":1}}],[\"port=7077\",{\"1\":{\"392\":1}}],[\"port=6379\",{\"1\":{\"360\":1,\"494\":1}}],[\"port=25672\",{\"1\":{\"358\":1}}],[\"port=15672\",{\"1\":{\"358\":1}}],[\"port=5672\",{\"1\":{\"358\":1}}],[\"port=8088\",{\"1\":{\"494\":1}}],[\"port=8080\",{\"1\":{\"354\":2,\"392\":1}}],[\"port=80\",{\"1\":{\"356\":1}}],[\"port>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"port\",{\"1\":{\"240\":2,\"395\":2,\"495\":1,\"620\":3,\"1447\":2,\"1448\":1,\"1449\":2,\"1450\":1,\"1458\":1,\"1460\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"pools\",{\"1\":{\"948\":1,\"1353\":1}}],[\"pooleddatasource\",{\"1\":{\"280\":1}}],[\"pooled\",{\"1\":{\"264\":1,\"267\":2}}],[\"poolpreparedstatements\",{\"1\":{\"240\":1}}],[\"pool\",{\"1\":{\"199\":1,\"240\":1,\"245\":1,\"280\":1,\"570\":1,\"615\":1,\"948\":15,\"949\":6,\"951\":10,\"956\":3,\"1353\":15,\"1354\":6,\"1356\":10,\"1361\":3,\"1465\":2,\"1466\":2}}],[\"pom\",{\"1\":{\"98\":2,\"104\":1,\"249\":1,\"258\":2,\"264\":3,\"293\":1,\"494\":1,\"557\":2,\"570\":2,\"615\":2}}],[\"price>\",{\"1\":{\"829\":3,\"1234\":3}}],[\"price\",{\"1\":{\"529\":1,\"641\":5,\"662\":2,\"663\":4,\"829\":2,\"1046\":5,\"1067\":2,\"1068\":4,\"1234\":2}}],[\"privilegedaction\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"privileges\",{\"1\":{\"398\":1,\"402\":2}}],[\"private\",{\"1\":{\"244\":6,\"264\":5,\"316\":1,\"552\":1,\"570\":11,\"571\":3,\"579\":2,\"615\":10,\"628\":1,\"629\":1,\"641\":2,\"660\":2,\"672\":4,\"679\":1,\"686\":1,\"688\":2,\"702\":1,\"709\":1,\"721\":1,\"751\":7,\"755\":3,\"756\":3,\"793\":3,\"804\":3,\"806\":2,\"812\":3,\"816\":7,\"831\":4,\"871\":1,\"888\":3,\"891\":3,\"896\":3,\"897\":4,\"921\":1,\"930\":3,\"939\":8,\"1009\":5,\"1033\":1,\"1034\":1,\"1046\":2,\"1065\":2,\"1077\":4,\"1084\":1,\"1091\":1,\"1093\":2,\"1107\":1,\"1114\":1,\"1126\":1,\"1156\":7,\"1160\":3,\"1161\":3,\"1198\":3,\"1209\":3,\"1211\":2,\"1217\":3,\"1221\":7,\"1236\":4,\"1276\":1,\"1293\":3,\"1296\":3,\"1301\":3,\"1302\":4,\"1326\":1,\"1335\":3,\"1344\":8,\"1414\":5,\"1464\":1,\"1465\":2,\"1466\":2}}],[\"primary\",{\"1\":{\"243\":1,\"494\":2,\"525\":2,\"526\":2,\"529\":5}}],[\"printdemo1\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"printarray\",{\"1\":{\"873\":3,\"1278\":3}}],[\"printstream\",{\"0\":{\"1011\":1,\"1416\":1},\"1\":{\"816\":3,\"1010\":1,\"1011\":7,\"1221\":3,\"1415\":1,\"1416\":7,\"1458\":3,\"1461\":3,\"1464\":3,\"1465\":3,\"1466\":19}}],[\"printstacktrace\",{\"1\":{\"229\":1,\"245\":1,\"316\":1,\"629\":3,\"635\":5,\"636\":1,\"637\":1,\"638\":1,\"816\":1,\"921\":2,\"939\":4,\"948\":1,\"949\":1,\"956\":1,\"998\":1,\"1000\":3,\"1001\":1,\"1007\":1,\"1008\":1,\"1034\":3,\"1040\":5,\"1041\":1,\"1042\":1,\"1043\":1,\"1221\":1,\"1326\":2,\"1344\":4,\"1353\":1,\"1354\":1,\"1361\":1,\"1403\":1,\"1405\":3,\"1406\":1,\"1412\":1,\"1413\":1,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":4}}],[\"printwriter\",{\"0\":{\"1011\":1,\"1416\":1},\"1\":{\"312\":1,\"313\":2,\"314\":3,\"1011\":2,\"1416\":2}}],[\"print\",{\"1\":{\"308\":2,\"320\":3,\"443\":1,\"743\":2,\"812\":1,\"819\":1,\"839\":2,\"840\":2,\"994\":1,\"995\":1,\"1002\":1,\"1003\":1,\"1011\":1,\"1148\":2,\"1217\":1,\"1224\":1,\"1244\":2,\"1245\":2,\"1399\":1,\"1400\":1,\"1407\":1,\"1408\":1,\"1416\":1,\"1458\":1}}],[\"println\",{\"1\":{\"199\":5,\"205\":3,\"226\":1,\"229\":1,\"231\":1,\"233\":2,\"240\":2,\"245\":4,\"264\":1,\"272\":1,\"277\":1,\"279\":1,\"280\":1,\"295\":1,\"299\":2,\"307\":7,\"308\":8,\"309\":2,\"310\":3,\"313\":2,\"318\":1,\"320\":2,\"329\":1,\"333\":1,\"338\":1,\"544\":5,\"557\":1,\"570\":2,\"579\":3,\"615\":3,\"628\":6,\"629\":16,\"635\":5,\"636\":5,\"637\":5,\"638\":1,\"641\":2,\"647\":3,\"648\":2,\"652\":2,\"654\":11,\"662\":3,\"663\":4,\"664\":3,\"678\":1,\"686\":1,\"688\":1,\"704\":3,\"708\":4,\"709\":2,\"715\":5,\"721\":2,\"732\":4,\"737\":1,\"738\":9,\"743\":25,\"747\":2,\"750\":9,\"751\":12,\"755\":4,\"756\":3,\"759\":4,\"760\":1,\"763\":8,\"769\":4,\"771\":6,\"774\":11,\"776\":5,\"781\":7,\"784\":7,\"786\":7,\"790\":1,\"793\":9,\"794\":3,\"802\":3,\"804\":7,\"806\":4,\"808\":4,\"812\":5,\"814\":8,\"816\":2,\"818\":4,\"821\":4,\"823\":12,\"824\":2,\"839\":3,\"840\":5,\"842\":12,\"844\":7,\"845\":4,\"846\":4,\"847\":1,\"861\":6,\"865\":9,\"866\":3,\"871\":1,\"873\":4,\"881\":2,\"887\":4,\"888\":1,\"891\":4,\"893\":2,\"896\":2,\"897\":6,\"903\":1,\"904\":13,\"906\":2,\"907\":3,\"908\":5,\"909\":3,\"914\":2,\"918\":2,\"920\":4,\"921\":2,\"924\":5,\"925\":2,\"930\":3,\"933\":3,\"936\":3,\"937\":3,\"939\":5,\"948\":2,\"949\":5,\"954\":1,\"956\":2,\"965\":5,\"966\":7,\"969\":8,\"971\":2,\"974\":3,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":2,\"994\":4,\"995\":9,\"996\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1007\":1,\"1008\":3,\"1009\":1,\"1011\":5,\"1012\":4,\"1018\":5,\"1019\":1,\"1020\":4,\"1022\":12,\"1023\":2,\"1024\":2,\"1026\":2,\"1027\":4,\"1028\":4,\"1029\":4,\"1033\":6,\"1034\":16,\"1040\":5,\"1041\":5,\"1042\":5,\"1043\":1,\"1046\":2,\"1052\":3,\"1053\":2,\"1057\":2,\"1059\":11,\"1067\":3,\"1068\":4,\"1069\":3,\"1083\":1,\"1091\":1,\"1093\":1,\"1109\":3,\"1113\":4,\"1114\":2,\"1120\":5,\"1126\":2,\"1137\":4,\"1142\":1,\"1143\":9,\"1148\":25,\"1152\":2,\"1155\":9,\"1156\":12,\"1160\":4,\"1161\":3,\"1164\":4,\"1165\":1,\"1168\":8,\"1174\":4,\"1176\":6,\"1179\":11,\"1181\":5,\"1186\":7,\"1189\":7,\"1191\":7,\"1195\":1,\"1198\":9,\"1199\":3,\"1207\":3,\"1209\":7,\"1211\":4,\"1213\":4,\"1217\":5,\"1219\":8,\"1221\":2,\"1223\":4,\"1226\":4,\"1228\":12,\"1229\":2,\"1244\":3,\"1245\":5,\"1247\":12,\"1249\":7,\"1250\":4,\"1251\":4,\"1252\":1,\"1266\":6,\"1270\":9,\"1271\":3,\"1276\":1,\"1278\":4,\"1286\":2,\"1292\":4,\"1293\":1,\"1296\":4,\"1298\":2,\"1301\":2,\"1302\":6,\"1308\":1,\"1309\":13,\"1311\":2,\"1312\":3,\"1313\":5,\"1314\":3,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":2,\"1329\":5,\"1330\":2,\"1335\":3,\"1338\":3,\"1341\":3,\"1342\":3,\"1344\":5,\"1353\":2,\"1354\":5,\"1359\":1,\"1361\":2,\"1370\":5,\"1371\":7,\"1374\":8,\"1376\":2,\"1379\":3,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":2,\"1399\":4,\"1400\":9,\"1401\":4,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1412\":1,\"1413\":3,\"1414\":1,\"1416\":5,\"1417\":4,\"1433\":8,\"1449\":5,\"1450\":6,\"1461\":4,\"1464\":4,\"1465\":4,\"1466\":8,\"1468\":5,\"1469\":1,\"1470\":4,\"1472\":12,\"1473\":2,\"1474\":2,\"1476\":2,\"1477\":4,\"1478\":4,\"1479\":4}}],[\"predicate3\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"predicate2\",{\"1\":{\"1028\":8,\"1478\":8}}],[\"predicate其他方法的使用类似\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"predicate\",{\"0\":{\"1028\":1,\"1478\":1},\"1\":{\"823\":1,\"1022\":1,\"1025\":1,\"1028\":7,\"1228\":1,\"1472\":1,\"1475\":1,\"1478\":7}}],[\"predicate<person>\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"predicate<integer>\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"predicate<t>\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"predicate<string>\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"predicate<\",{\"1\":{\"823\":1,\"1022\":1,\"1028\":3,\"1228\":1,\"1472\":1,\"1478\":3}}],[\"prehandle\",{\"1\":{\"579\":2}}],[\"prefer\",{\"1\":{\"495\":1}}],[\"prefix=\",{\"1\":{\"323\":1}}],[\"prefix\",{\"1\":{\"103\":1,\"552\":1,\"743\":1,\"1148\":1}}],[\"preallocate\",{\"1\":{\"395\":1}}],[\"pretty\",{\"1\":{\"362\":1}}],[\"preparing\",{\"1\":{\"273\":1,\"274\":2,\"280\":1}}],[\"preparecall\",{\"1\":{\"229\":1}}],[\"preparestatement\",{\"1\":{\"229\":1,\"233\":1,\"240\":3,\"245\":4}}],[\"preparedstatement原理\",{\"1\":{\"234\":1}}],[\"preparedstatement好处\",{\"1\":{\"234\":1}}],[\"preparedstatement对象\",{\"1\":{\"233\":1}}],[\"preparedstatement\",{\"0\":{\"232\":1},\"1\":{\"229\":1,\"233\":9,\"240\":8,\"245\":29}}],[\"pre\",{\"1\":{\"254\":2}}],[\"pro\",{\"1\":{\"620\":2}}],[\"projectadvice\",{\"1\":{\"615\":1}}],[\"projectinterceptor\",{\"1\":{\"579\":10}}],[\"projectexceptionadvice\",{\"1\":{\"573\":1}}],[\"projectlombok<\",{\"1\":{\"570\":1,\"615\":1}}],[\"project\",{\"1\":{\"494\":2,\"496\":1,\"557\":1}}],[\"project>\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"proc\",{\"1\":{\"428\":1}}],[\"proceed\",{\"1\":{\"615\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"615\":5}}],[\"process\",{\"1\":{\"456\":3}}],[\"processes\",{\"1\":{\"404\":1,\"495\":1}}],[\"processor\",{\"1\":{\"103\":1}}],[\"procedure\",{\"1\":{\"106\":1}}],[\"prompted\",{\"1\":{\"402\":1}}],[\"proxy\",{\"1\":{\"386\":1,\"495\":5,\"629\":22,\"1034\":22}}],[\"proxyserver\",{\"1\":{\"386\":2}}],[\"producer\",{\"1\":{\"378\":1}}],[\"profiles\",{\"1\":{\"494\":1,\"620\":1}}],[\"profile内\",{\"1\":{\"389\":1}}],[\"profile生效\",{\"1\":{\"386\":1}}],[\"profile中\",{\"1\":{\"386\":1}}],[\"profile\",{\"1\":{\"353\":1,\"386\":1,\"389\":1,\"486\":2,\"620\":3}}],[\"profile文件\",{\"1\":{\"353\":1,\"486\":1}}],[\"protected\",{\"1\":{\"299\":2,\"307\":2,\"308\":2,\"309\":1,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4,\"557\":3,\"562\":4,\"570\":4,\"579\":6}}],[\"prototype\",{\"1\":{\"158\":2,\"159\":1}}],[\"provided\",{\"1\":{\"259\":1,\"318\":1}}],[\"proper\",{\"1\":{\"1013\":1,\"1418\":1}}],[\"propertychangelistener\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"propertysource\",{\"1\":{\"570\":2,\"610\":1,\"615\":1}}],[\"property>\",{\"1\":{\"386\":26,\"389\":5,\"601\":5}}],[\"property=\",{\"1\":{\"270\":2}}],[\"property\",{\"1\":{\"270\":1,\"386\":3,\"389\":1,\"570\":2,\"613\":2}}],[\"properties版\",{\"0\":{\"621\":1}}],[\"properties>\",{\"1\":{\"557\":1,\"615\":1}}],[\"properties文件\",{\"1\":{\"377\":1}}],[\"properties\",{\"0\":{\"1012\":1,\"1417\":1},\"1\":{\"240\":4,\"245\":4,\"377\":2,\"386\":2,\"570\":1,\"601\":1,\"610\":1,\"615\":1,\"1012\":18,\"1417\":18}}],[\"propagation\",{\"1\":{\"616\":4}}],[\"props>\",{\"1\":{\"601\":1}}],[\"prop>\",{\"1\":{\"601\":4}}],[\"prop\",{\"1\":{\"240\":3,\"245\":3}}],[\"背面参考\",{\"1\":{\"819\":1,\"1224\":1}}],[\"背诵类题目\",{\"1\":{\"98\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"112\":1,\"115\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1}}],[\"背上了装满了各种学习资料的背包\",{\"1\":{\"1\":1}}],[\"作业在后台运行的时候\",{\"1\":{\"424\":1}}],[\"作\",{\"1\":{\"190\":1}}],[\"作用不同\",{\"1\":{\"533\":1}}],[\"作用\",{\"0\":{\"233\":1,\"736\":1,\"1141\":1},\"1\":{\"164\":1,\"228\":2,\"230\":1,\"233\":1,\"661\":1,\"730\":1,\"761\":1,\"870\":1,\"874\":1,\"894\":1,\"933\":1,\"937\":1,\"952\":1,\"994\":1,\"995\":1,\"1006\":1,\"1010\":1,\"1018\":1,\"1066\":1,\"1135\":1,\"1166\":1,\"1275\":1,\"1279\":1,\"1299\":1,\"1338\":1,\"1342\":1,\"1357\":1,\"1399\":1,\"1400\":1,\"1411\":1,\"1415\":1,\"1468\":1}}],[\"作用域下\",{\"1\":{\"158\":2}}],[\"作用域即可\",{\"1\":{\"158\":1}}],[\"作用域都是使用默认的\",{\"1\":{\"158\":1}}],[\"作用以及如何使用\",{\"0\":{\"98\":1}}],[\"作分布式锁\",{\"1\":{\"123\":1}}],[\"作为一种更紧凑的代码风格\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"作为一个独立的\",{\"1\":{\"819\":1,\"1224\":1}}],[\"作为一个带有给定标志的非捕获组\",{\"1\":{\"819\":1,\"1224\":1}}],[\"作为一个非捕获组\",{\"1\":{\"819\":1,\"1224\":1}}],[\"作为一个命名捕获组\",{\"1\":{\"819\":1,\"1224\":1}}],[\"作为一个捕获组\",{\"1\":{\"819\":1,\"1224\":1}}],[\"作为重写是否正确的校验注解\",{\"1\":{\"698\":1,\"1103\":1}}],[\"作为虚拟表\",{\"1\":{\"533\":1}}],[\"作为条件值\",{\"1\":{\"533\":2}}],[\"作为最新一代的综合计算引擎\",{\"1\":{\"391\":1,\"394\":1}}],[\"作为out\",{\"1\":{\"320\":1}}],[\"作为\",{\"0\":{\"102\":1},\"1\":{\"95\":1,\"96\":1}}],[\"然后客户端向服务器再次发出确认信息\",{\"1\":{\"1441\":1}}],[\"然后移除小于50的元素\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"然后学习io流读写文件数据\",{\"1\":{\"965\":1,\"1370\":1}}],[\"然后其他线程才能进来\",{\"1\":{\"932\":1,\"1337\":1}}],[\"然后依次访问\",{\"1\":{\"931\":1,\"1336\":1}}],[\"然后我们就可以直接遍历set集合得到map集合了\",{\"1\":{\"907\":1,\"1312\":1}}],[\"然后提取键以及值\",{\"1\":{\"907\":1,\"1312\":1}}],[\"然后添加一个元素size加一\",{\"1\":{\"863\":1,\"1268\":1}}],[\"然后检查新容量是否大于最小需要容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"然后检查缓存中的时间是否过期\",{\"1\":{\"125\":1}}],[\"然后经过一层一层的过滤\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"然后对student中的age属性进行注入赋值\",{\"1\":{\"808\":1,\"1213\":1}}],[\"然后用私有的构造器进行新实例化一个对象student\",{\"1\":{\"808\":1,\"1213\":1}}],[\"然后创建对象\",{\"1\":{\"807\":1,\"1212\":1}}],[\"然后从类对象中获取类的成分对象\",{\"1\":{\"804\":1,\"808\":1,\"810\":1,\"1209\":1,\"1213\":1,\"1215\":1}}],[\"然后可以解析类中的全部成分\",{\"1\":{\"800\":1,\"1205\":1}}],[\"然后解析\",{\"1\":{\"781\":1,\"1186\":1}}],[\"然后tostring返回string类型的对象\",{\"1\":{\"764\":1,\"1169\":1}}],[\"然后下一步就是i++\",{\"1\":{\"751\":1,\"1156\":1}}],[\"然后后续的业务行为随对象而改变\",{\"1\":{\"726\":1,\"1131\":1}}],[\"然后父类成员范围找\",{\"1\":{\"696\":1,\"1101\":1}}],[\"然后子类成员范围找\",{\"1\":{\"696\":1,\"1101\":1}}],[\"然后通过键提取对应的值\",{\"1\":{\"906\":1,\"1311\":1}}],[\"然后通过索引直接找到具体的值\",{\"1\":{\"653\":1,\"1058\":1}}],[\"然后通过requestcontextholder工具类来获取当前线程的request相关的信息\",{\"1\":{\"160\":1}}],[\"然后退出\",{\"1\":{\"437\":1}}],[\"然后进入该目录就可以查看里的内容了\",{\"1\":{\"428\":1}}],[\"然后进行项目部署即可\",{\"1\":{\"293\":1}}],[\"然后就可以得到class的全部成分\",{\"1\":{\"799\":1,\"1204\":1}}],[\"然后就可以用简单密码了\",{\"1\":{\"398\":1}}],[\"然后就直接返回下单成功\",{\"1\":{\"176\":1}}],[\"然后再向客户端发出确认取消信息\",{\"1\":{\"1442\":1}}],[\"然后再回调biconsumer函数型接口\",{\"1\":{\"908\":1,\"1313\":1}}],[\"然后再触发执行\",{\"1\":{\"813\":1,\"1218\":1}}],[\"然后再取值\",{\"1\":{\"809\":1,\"1214\":1}}],[\"然后再和中间的比较\",{\"1\":{\"793\":1,\"1198\":1}}],[\"然后再进行循环判断下一个位置是否小于80\",{\"1\":{\"751\":1,\"1156\":1}}],[\"然后再\",{\"1\":{\"730\":1,\"1135\":1}}],[\"然后再执行自己\",{\"1\":{\"700\":1,\"1105\":1}}],[\"然后再下面官网给出了具体的安装命令\",{\"1\":{\"399\":1}}],[\"然后再通过\",{\"1\":{\"309\":2}}],[\"然后再挑其中一点举例\",{\"1\":{\"115\":1}}],[\"然后if判断是get还是post\",{\"1\":{\"308\":1}}],[\"然后确定segment数组下标\",{\"1\":{\"217\":1}}],[\"然后判断owner是否有线程持有\",{\"1\":{\"210\":1}}],[\"然后判断链表长度是否大于8\",{\"1\":{\"190\":1}}],[\"然后右移16位\",{\"1\":{\"192\":1}}],[\"然后会判断数组是否是空\",{\"1\":{\"185\":1}}],[\"然后第二次调用add方法进行添加元素的时候\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"然后到聚集索引中通过主键值查找到对应的整行数据\",{\"1\":{\"146\":1}}],[\"然后每隔1秒将缓冲区的数据写入到aof文件中\",{\"1\":{\"128\":1}}],[\"然后模数组的长度找到对应的下标\",{\"1\":{\"124\":1}}],[\"然后返回不存在数据\",{\"1\":{\"124\":1}}],[\"然后一定要设置一个合理的过期时间\",{\"1\":{\"124\":1}}],[\"然后多次释放锁\",{\"1\":{\"117\":1}}],[\"然后在此目录下再创建其他的目录\",{\"1\":{\"427\":1}}],[\"然后在配置文件中指定\",{\"1\":{\"110\":1}}],[\"然后在服务提供者和服务调用者项目引入\",{\"1\":{\"107\":1}}],[\"然后在其他子项目的\",{\"1\":{\"98\":1}}],[\"然后将请求转发到实际的\",{\"1\":{\"97\":1}}],[\"然而\",{\"1\":{\"11\":1,\"14\":1,\"21\":1,\"25\":1,\"27\":1,\"28\":1,\"32\":1,\"40\":1,\"58\":1,\"72\":1,\"74\":1,\"77\":1,\"82\":1,\"84\":1}}],[\"交给一个独立的子线程类负责读取消息\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"交给线程处理\",{\"1\":{\"921\":1,\"1326\":1}}],[\"交叉\",{\"1\":{\"819\":1,\"1224\":1}}],[\"交换空间\",{\"1\":{\"481\":1}}],[\"交互流程\",{\"1\":{\"97\":1}}],[\"交流与实践\",{\"1\":{\"68\":1}}],[\"交流\",{\"1\":{\"60\":1}}],[\"提前定义好需要返回的指定类型结果\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"提前定义可能返回的一个指定类型结果\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"提前加载热门数据到缓存\",{\"1\":{\"115\":1}}],[\"提取当前目录下的一级文件对象\",{\"1\":{\"981\":1,\"1386\":1}}],[\"提取这个类的成员变量\",{\"1\":{\"816\":1,\"1221\":1}}],[\"提取这个变量的全部成员变量\",{\"1\":{\"816\":1,\"1221\":1}}],[\"提取全部方法\",{\"1\":{\"812\":1,\"1217\":1}}],[\"提取类中全部的构造器对象\",{\"1\":{\"804\":1,\"1209\":1}}],[\"提交的json数据直接在jackson工具中进行了数据处理\",{\"1\":{\"570\":1}}],[\"提交测试任务\",{\"1\":{\"392\":1,\"395\":1}}],[\"提交事务\",{\"1\":{\"229\":3,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"535\":1}}],[\"提升系统响应速度\",{\"1\":{\"236\":1}}],[\"提升开发者的调用体验\",{\"1\":{\"105\":1}}],[\"提示用户输入\",{\"1\":{\"743\":1,\"1148\":1}}],[\"提示\",{\"0\":{\"284\":1},\"1\":{\"223\":2,\"228\":1,\"248\":1,\"537\":1,\"538\":1,\"657\":1,\"741\":1,\"1062\":1,\"1146\":1}}],[\"提供一个案例可以约束一定要完成数据\",{\"1\":{\"875\":1,\"1280\":1}}],[\"提供一个返回单例的方法\",{\"1\":{\"688\":1,\"1093\":1}}],[\"提供每一个成员变量的setter\",{\"1\":{\"672\":1,\"1077\":1}}],[\"提供方法进行暴露\",{\"1\":{\"668\":1,\"1073\":1}}],[\"提供访问入口\",{\"1\":{\"668\":1,\"1073\":1}}],[\"提供8kb缓冲区\",{\"1\":{\"628\":2,\"1033\":2}}],[\"提供分布式海量数据计算能力\",{\"1\":{\"379\":1}}],[\"提供分布式海量数据存储能力\",{\"1\":{\"379\":1}}],[\"提供分布式集群资源管理能力\",{\"1\":{\"379\":1}}],[\"提供的api\",{\"1\":{\"996\":1,\"1401\":1}}],[\"提供的任务\",{\"1\":{\"395\":1}}],[\"提供的功能包括\",{\"1\":{\"374\":1}}],[\"提供的数据库连接池的标准接口\",{\"1\":{\"237\":1}}],[\"提供服务方法\",{\"1\":{\"298\":1}}],[\"提供\",{\"1\":{\"215\":1}}],[\"提供给各业务服务引入\",{\"1\":{\"107\":1}}],[\"提供了很多对io操作的工具\",{\"1\":{\"315\":1}}],[\"提供了一套依赖管理机制\",{\"1\":{\"248\":1}}],[\"提供了一套标准化的构建流程\",{\"1\":{\"248\":1}}],[\"提供了一套标准化的项目结构\",{\"1\":{\"248\":1}}],[\"提供了一个segment数组\",{\"1\":{\"217\":1}}],[\"提供了许多\",{\"1\":{\"215\":1}}],[\"提供了大量扩展和插件\",{\"1\":{\"106\":1}}],[\"提供了丰富的服务治理功能\",{\"1\":{\"106\":1}}],[\"提供灵活性\",{\"1\":{\"106\":1}}],[\"提供者可以信任请求方\",{\"1\":{\"101\":1}}],[\"提供者验证签名\",{\"1\":{\"101\":1}}],[\"提供者\",{\"1\":{\"101\":1}}],[\"提供模拟\",{\"1\":{\"97\":1}}],[\"提高字节输出流写数据的性能\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"提高字节输入流读取数据的性能\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"提高字符串的操作效率\",{\"1\":{\"761\":1,\"1166\":1}}],[\"提高代码的复用性\",{\"1\":{\"690\":1,\"1095\":1}}],[\"提高代码的复用\",{\"1\":{\"678\":1,\"1083\":1}}],[\"提高组件化\",{\"1\":{\"668\":1,\"1073\":1}}],[\"提高业务功能的设计的安全性\",{\"1\":{\"668\":1,\"1073\":1}}],[\"提高接口的响应速度\",{\"1\":{\"176\":1}}],[\"提高开发调试效率\",{\"1\":{\"100\":1,\"120\":1}}],[\"提高开发体验\",{\"1\":{\"95\":1}}],[\"提高系统的安全性\",{\"1\":{\"95\":1}}],[\"提高程序的效率和性能\",{\"1\":{\"55\":1}}],[\"提高了代码的质量和效率\",{\"1\":{\"5\":1}}],[\"全部\",{\"1\":{\"804\":1,\"1209\":1}}],[\"全部内容如下\",{\"1\":{\"386\":1}}],[\"全类名\",{\"1\":{\"803\":1,\"1208\":1}}],[\"全限名\",{\"1\":{\"802\":1,\"1207\":1}}],[\"全文搜索属于最常见的需求\",{\"1\":{\"361\":1}}],[\"全称\",{\"1\":{\"225\":1,\"1428\":1}}],[\"全盘扫描\",{\"1\":{\"142\":1}}],[\"全局异常处理器\",{\"1\":{\"109\":1}}],[\"全局异常处理类\",{\"1\":{\"107\":1}}],[\"全局异常等\",{\"1\":{\"97\":1}}],[\"全局跨域解决等\",{\"1\":{\"102\":1}}],[\"全新挑战之路\",{\"0\":{\"58\":1}}],[\"实际的存储值为\",{\"1\":{\"773\":1,\"1178\":1}}],[\"实际都是无状态\",{\"1\":{\"158\":1}}],[\"实用\",{\"0\":{\"591\":1}}],[\"实体列的属性名\",{\"1\":{\"270\":1}}],[\"实体类\",{\"0\":{\"244\":1},\"1\":{\"97\":1,\"107\":1}}],[\"实例方法\",{\"1\":{\"721\":1,\"937\":1,\"1126\":1,\"1342\":1}}],[\"实例方法可以访问静态的成员\",{\"1\":{\"680\":1,\"1085\":1}}],[\"实例方法需要创建对象调用\",{\"1\":{\"679\":1,\"1084\":1}}],[\"实例成员方法\",{\"1\":{\"677\":1,\"1082\":1}}],[\"实例成员变量\",{\"1\":{\"675\":1,\"703\":1,\"1080\":1,\"1108\":1}}],[\"实例工厂\",{\"0\":{\"590\":1}}],[\"实例\",{\"1\":{\"158\":2,\"159\":3}}],[\"实现bs开发\",{\"0\":{\"1466\":1}}],[\"实现服务端可同时处理多个客户端的消息\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"实现接收消息\",{\"1\":{\"1461\":1}}],[\"实现接口的类成为实现类\",{\"1\":{\"715\":1,\"1120\":1}}],[\"实现接口\",{\"0\":{\"595\":1}}],[\"实现网络编程的关键三要素\",{\"0\":{\"1427\":1}}],[\"实现将string转换为integer\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"实现一个函数\",{\"1\":{\"1029\":4,\"1479\":4}}],[\"实现一个function将string转换为integer\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"实现一个主节点和若干个从节点\",{\"1\":{\"135\":1}}],[\"实现该接口的同时还可以继承其他的类\",{\"1\":{\"923\":2,\"1328\":2}}],[\"实现run方法\",{\"1\":{\"918\":1,\"1323\":1}}],[\"实现runnable接口\",{\"0\":{\"918\":1,\"920\":1,\"1323\":1,\"1325\":1},\"1\":{\"199\":1,\"918\":1,\"923\":1,\"1323\":1,\"1328\":1}}],[\"实现iterator接口的类才可以使用迭代器和增强for\",{\"1\":{\"845\":1,\"1250\":1}}],[\"实现调用子类独有的功能\",{\"1\":{\"730\":1,\"1135\":1}}],[\"实现的关键字implements\",{\"1\":{\"715\":1,\"1120\":1}}],[\"实现类可以在实现接口的时候传入自己的操作的数据类型\",{\"1\":{\"876\":1,\"1281\":1}}],[\"实现类可以理解为所谓的子类\",{\"1\":{\"715\":1,\"1120\":1}}],[\"实现类构造器\",{\"1\":{\"724\":1,\"1129\":1}}],[\"实现类\",{\"1\":{\"715\":1,\"1120\":1}}],[\"实现方式\",{\"1\":{\"310\":1,\"313\":1,\"327\":1,\"529\":3}}],[\"实现servlet接口\",{\"1\":{\"295\":1}}],[\"实现中已经考虑了这种情况\",{\"1\":{\"222\":1}}],[\"实现callable接口\",{\"0\":{\"921\":1,\"1326\":1},\"1\":{\"199\":1,\"921\":1,\"923\":1,\"1326\":1,\"1328\":1}}],[\"实现请求的转发和路由\",{\"1\":{\"171\":1}}],[\"实现以aware结尾的接口\",{\"1\":{\"163\":1}}],[\"实现单点登录\",{\"1\":{\"123\":1}}],[\"实现定时任务\",{\"1\":{\"116\":1}}],[\"实现灵活的自定义线程池\",{\"1\":{\"112\":1}}],[\"实现分布式\",{\"0\":{\"110\":1},\"1\":{\"109\":1,\"110\":1}}],[\"实现分布式锁\",{\"1\":{\"92\":1}}],[\"实现步骤如下\",{\"1\":{\"101\":1}}],[\"实现了runnable接口\",{\"1\":{\"921\":1,\"1326\":1}}],[\"实现了多线程\",{\"1\":{\"914\":1,\"1319\":1}}],[\"实现了\",{\"1\":{\"187\":1}}],[\"实现了登录注册\",{\"1\":{\"109\":1}}],[\"实现了对\",{\"0\":{\"99\":1},\"1\":{\"351\":1}}],[\"实现了路由转发\",{\"1\":{\"95\":1}}],[\"实现项目中不同模块的高性能相互调用\",{\"1\":{\"96\":1}}],[\"实现\",{\"1\":{\"92\":1}}],[\"实现自己的价值\",{\"1\":{\"18\":1}}],[\"核心要素\",{\"0\":{\"975\":1,\"1380\":1}}],[\"核心容器\",{\"1\":{\"582\":1}}],[\"核心工作\",{\"1\":{\"254\":1}}],[\"核心线程3个\",{\"1\":{\"951\":1,\"1356\":1}}],[\"核心线程执行上面的任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"核心线程和临时线程都在忙\",{\"1\":{\"947\":1,\"1352\":1}}],[\"核心线程+临时线程\",{\"1\":{\"219\":1}}],[\"核心线程\",{\"1\":{\"219\":1,\"944\":1,\"948\":1,\"1349\":1,\"1353\":1}}],[\"核心线程数大小设置为n+1\",{\"1\":{\"220\":1}}],[\"核心线程数大小设置为2n+1\",{\"1\":{\"220\":1}}],[\"核心线程数设置为\",{\"1\":{\"112\":2}}],[\"核心线程数\",{\"1\":{\"112\":1}}],[\"核心的中央处理器\",{\"1\":{\"167\":1}}],[\"核心数\",{\"1\":{\"112\":1}}],[\"核心数的\",{\"1\":{\"112\":1}}],[\"核心数相同\",{\"1\":{\"112\":1}}],[\"核心业务后端\",{\"1\":{\"97\":1}}],[\"核心模块\",{\"1\":{\"97\":1}}],[\"你好\",{\"1\":{\"456\":1}}],[\"你好林纳斯\",{\"1\":{\"456\":2,\"459\":1}}],[\"你想要在档案里面输入字符时\",{\"1\":{\"436\":1}}],[\"你想要获取用户的昵称\",{\"1\":{\"111\":1}}],[\"你的编辑\",{\"1\":{\"435\":1}}],[\"你的项目中有没有使用到aop\",{\"0\":{\"160\":1}}],[\"你的项目中使用了哪些技术栈\",{\"0\":{\"96\":1}}],[\"你会发现\",{\"1\":{\"435\":1}}],[\"你自主编写了\",{\"0\":{\"119\":1}}],[\"你使用了\",{\"0\":{\"116\":1}}],[\"你又是如何解决的\",{\"0\":{\"115\":1}}],[\"你又是如何实现它的\",{\"0\":{\"101\":1}}],[\"你是如何自定义线程池的\",{\"0\":{\"112\":1}}],[\"你是如何基于\",{\"0\":{\"103\":1}}],[\"你通过\",{\"0\":{\"108\":1}}],[\"你在\",{\"1\":{\"743\":1,\"1148\":1}}],[\"你在玩什么东西呢\",{\"1\":{\"743\":1,\"1148\":1}}],[\"你在使用\",{\"0\":{\"113\":1}}],[\"你在用户登录功能中提到使用\",{\"0\":{\"111\":1}}],[\"你在公共模块中抽象了模型层和业务层代码\",{\"1\":{\"107\":1}}],[\"你在项目中使用\",{\"0\":{\"117\":1,\"120\":1}}],[\"你在项目中使用了\",{\"0\":{\"100\":1,\"102\":1}}],[\"你在项目中是如何实现\",{\"0\":{\"114\":1}}],[\"你在项目中是如何使用\",{\"0\":{\"107\":1}}],[\"你将后端项目划分为了多个子项目\",{\"0\":{\"97\":1}}],[\"hdmi\",{\"1\":{\"714\":1,\"715\":2,\"721\":1,\"1119\":1,\"1120\":2,\"1126\":1}}],[\"hdfs配置文件路径\",{\"1\":{\"386\":1}}],[\"hdfs的工作角色\",{\"1\":{\"381\":1}}],[\"hdfs的管理角色\",{\"1\":{\"381\":1}}],[\"hdfs\",{\"1\":{\"379\":1,\"386\":7,\"389\":2}}],[\"h可以使显示的单位更易读\",{\"1\":{\"482\":1}}],[\"high\",{\"1\":{\"495\":1}}],[\"hi\",{\"1\":{\"481\":2,\"806\":2,\"1211\":2}}],[\"history查看历史命令\",{\"0\":{\"470\":1}}],[\"history\",{\"1\":{\"386\":2,\"496\":4}}],[\"historyserver\",{\"1\":{\"382\":1,\"386\":2}}],[\"historyserver进程\",{\"1\":{\"381\":1}}],[\"h选项必须搭配\",{\"1\":{\"440\":1}}],[\"h选项表示\",{\"1\":{\"440\":1}}],[\"hjkl\",{\"1\":{\"435\":1}}],[\"h\",{\"1\":{\"398\":1,\"435\":2,\"440\":2,\"476\":3,\"482\":1,\"496\":1,\"501\":1,\"819\":7,\"1224\":7}}],[\"href=\",{\"1\":{\"386\":3}}],[\"h1>\",{\"1\":{\"318\":1,\"320\":1,\"323\":2,\"1466\":2}}],[\"hexadecimal\",{\"1\":{\"819\":1,\"1224\":1}}],[\"height=\",{\"1\":{\"793\":1,\"1198\":1}}],[\"height\",{\"1\":{\"793\":9,\"1198\":9}}],[\"headers\",{\"1\":{\"495\":2}}],[\"head>\",{\"1\":{\"318\":1,\"320\":1}}],[\"heap\",{\"1\":{\"395\":4}}],[\"heapsize=1000\",{\"1\":{\"386\":1}}],[\"help\",{\"1\":{\"476\":1,\"496\":8}}],[\"helper插件快速启动项目\",{\"1\":{\"293\":1}}],[\"helloworld==\",{\"1\":{\"948\":1,\"1353\":1}}],[\"hello\",{\"1\":{\"295\":1,\"310\":1,\"313\":1,\"318\":1,\"320\":2,\"360\":2,\"465\":2,\"466\":2,\"648\":4,\"749\":1,\"814\":4,\"1024\":6,\"1053\":4,\"1154\":1,\"1219\":4,\"1474\":6}}],[\"hour\",{\"1\":{\"784\":1,\"1189\":1}}],[\"host=bonfire\",{\"1\":{\"494\":1}}],[\"host=node1\",{\"1\":{\"392\":1}}],[\"hosts<\",{\"1\":{\"386\":1}}],[\"hosts文件中\",{\"1\":{\"366\":1}}],[\"hosts文件\",{\"1\":{\"366\":1}}],[\"hostname<\",{\"1\":{\"386\":1}}],[\"hostname\",{\"1\":{\"365\":1,\"386\":1,\"403\":1,\"413\":1}}],[\"hostnamectl\",{\"1\":{\"365\":1}}],[\"host\",{\"1\":{\"362\":1,\"403\":1,\"495\":1,\"496\":1,\"1433\":1,\"1457\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"hotfixes=true\",{\"1\":{\"356\":2}}],[\"hobby\",{\"1\":{\"308\":1,\"662\":2,\"664\":3,\"743\":2,\"1067\":2,\"1069\":3,\"1148\":2}}],[\"hobbies=\",{\"1\":{\"672\":1,\"1077\":1}}],[\"hobbies\",{\"1\":{\"308\":2,\"672\":6,\"743\":2,\"1077\":6,\"1148\":2}}],[\"home<\",{\"1\":{\"386\":3}}],[\"home=$hadoop\",{\"1\":{\"386\":3}}],[\"home=\",{\"1\":{\"353\":1,\"386\":6,\"389\":2,\"392\":1}}],[\"home环境变量\",{\"1\":{\"353\":1}}],[\"home\",{\"1\":{\"251\":1,\"353\":2,\"386\":12,\"389\":4,\"428\":1,\"433\":1,\"435\":1,\"437\":2}}],[\"hh\",{\"1\":{\"264\":1,\"635\":3,\"636\":1,\"781\":2,\"782\":2,\"966\":1,\"1040\":3,\"1041\":1,\"1186\":2,\"1187\":2,\"1371\":1}}],[\"hugecapacity\",{\"1\":{\"831\":3,\"1236\":3}}],[\"huawei=2\",{\"1\":{\"904\":1,\"906\":1,\"907\":3,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":3,\"1313\":1}}],[\"huawei\",{\"1\":{\"641\":7,\"904\":1,\"906\":1,\"907\":1,\"908\":1,\"909\":1,\"1046\":7,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":1}}],[\"hungup的缩写\",{\"1\":{\"422\":1}}],[\"humeng\",{\"1\":{\"251\":1,\"315\":1,\"320\":1,\"635\":3,\"636\":1,\"969\":3,\"971\":1,\"981\":1,\"998\":2,\"1000\":2,\"1001\":2,\"1014\":5,\"1040\":3,\"1041\":1,\"1374\":3,\"1376\":1,\"1386\":1,\"1403\":2,\"1405\":2,\"1406\":2,\"1419\":5}}],[\"hutool\",{\"1\":{\"96\":1}}],[\"hm\",{\"1\":{\"199\":4,\"205\":1}}],[\"hasnext\",{\"1\":{\"844\":2,\"866\":1,\"1249\":2,\"1271\":1}}],[\"hashcode\",{\"1\":{\"756\":1,\"886\":1,\"887\":4,\"888\":1,\"891\":1,\"896\":1,\"1161\":1,\"1291\":1,\"1292\":4,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"hashentry数组是可以扩容的\",{\"1\":{\"217\":1}}],[\"hashset底层采用哈希表存储的数据\",{\"1\":{\"883\":1,\"1288\":1}}],[\"hashset底层原理\",{\"0\":{\"883\":1,\"1288\":1}}],[\"hashset底层其实是用hashmap实现存储的\",{\"1\":{\"194\":1}}],[\"hashset元素无序的底层原理\",{\"0\":{\"882\":1,\"1287\":1}}],[\"hashset<>\",{\"1\":{\"881\":1,\"888\":1,\"1286\":1,\"1293\":1}}],[\"hashset下有linkedhashset实现类\",{\"1\":{\"836\":1,\"1241\":1}}],[\"hashset封装了一系列hashmap的方法\",{\"1\":{\"194\":1}}],[\"hashset实现了set接口\",{\"1\":{\"194\":1}}],[\"hashset\",{\"0\":{\"194\":1},\"1\":{\"839\":11,\"840\":10,\"881\":2,\"888\":1,\"1244\":11,\"1245\":10,\"1286\":2,\"1293\":1}}],[\"hashmap<>\",{\"1\":{\"822\":1,\"903\":1,\"904\":3,\"906\":1,\"907\":1,\"908\":2,\"1021\":1,\"1227\":1,\"1308\":1,\"1309\":3,\"1311\":1,\"1312\":1,\"1313\":2,\"1471\":1}}],[\"hashmap实现了\",{\"1\":{\"194\":1}}],[\"hashmap的扩容机制\",{\"0\":{\"191\":1}}],[\"hashmap的jdk1\",{\"0\":{\"189\":1}}],[\"hashmap的数据结构\",{\"1\":{\"188\":1}}],[\"hashmap\",{\"0\":{\"188\":1,\"190\":1,\"192\":1,\"193\":1,\"194\":1},\"1\":{\"903\":2,\"906\":1,\"907\":1,\"908\":2,\"1308\":2,\"1311\":1,\"1312\":1,\"1313\":2}}],[\"hash\",{\"0\":{\"111\":2},\"1\":{\"111\":4,\"191\":2,\"192\":1,\"193\":1,\"756\":1,\"888\":1,\"891\":1,\"896\":1,\"1161\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"half\",{\"1\":{\"774\":1,\"1179\":1}}],[\"halo\",{\"1\":{\"460\":1}}],[\"having可以\",{\"1\":{\"522\":1}}],[\"having\",{\"1\":{\"516\":1,\"522\":2}}],[\"hadoop软件配置文件目录\",{\"1\":{\"392\":1}}],[\"hadoop2\",{\"1\":{\"392\":6}}],[\"hadoop生态\",{\"1\":{\"390\":1,\"393\":1}}],[\"hadoop生态体系中总共会出现如下进程角色\",{\"1\":{\"381\":1}}],[\"hadoop这个命令来自于\",{\"1\":{\"386\":1}}],[\"hadoop的使用启动用户配置\",{\"1\":{\"386\":1}}],[\"hadoop的配置文件要修改的地方很多\",{\"1\":{\"386\":1}}],[\"hadoop集群部署\",{\"0\":{\"386\":1}}],[\"hadoop集群角色\",{\"0\":{\"381\":1}}],[\"hadoop\",{\"1\":{\"379\":3,\"381\":6,\"386\":35,\"387\":10,\"389\":4,\"392\":5}}],[\"hadoop是一个由apache基金会所开发的分布式系统基础架构\",{\"1\":{\"379\":1}}],[\"handlerinterceptor\",{\"1\":{\"579\":2}}],[\"handleradapter\",{\"1\":{\"167\":1}}],[\"handleradapter适配器执行\",{\"1\":{\"166\":1}}],[\"handler\",{\"1\":{\"166\":4,\"167\":6,\"219\":2,\"386\":1,\"579\":3,\"944\":2,\"948\":1,\"949\":1,\"1349\":2,\"1353\":1,\"1354\":1}}],[\"handlermapping\",{\"1\":{\"166\":2,\"167\":2}}],[\"hbase和zookeeper会运行在同一个jvm里面\",{\"1\":{\"389\":1}}],[\"hbase的运行模式\",{\"1\":{\"389\":1}}],[\"hbase<\",{\"1\":{\"389\":1}}],[\"hbase数据在hdfs中的存放的路径\",{\"1\":{\"389\":1}}],[\"hbase依赖zookeeper\",{\"1\":{\"389\":1}}],[\"hbase在大数据领域应用十分广泛\",{\"1\":{\"388\":1}}],[\"hbase设计为海量数据\",{\"1\":{\"388\":1}}],[\"hbase是一款keyvalue型存储的数据库\",{\"1\":{\"388\":1}}],[\"hbase\",{\"1\":{\"388\":1,\"389\":20}}],[\"hb\",{\"1\":{\"109\":1,\"495\":1}}],[\"htm\",{\"1\":{\"495\":3}}],[\"html+ajax\",{\"1\":{\"321\":1}}],[\"html>\",{\"1\":{\"318\":1,\"320\":1}}],[\"html\",{\"1\":{\"92\":1,\"169\":1,\"170\":1,\"261\":1,\"273\":1,\"312\":1,\"314\":3,\"317\":1,\"318\":1,\"320\":1,\"495\":14,\"496\":11,\"747\":1,\"842\":1,\"861\":2,\"866\":3,\"881\":6,\"1152\":1,\"1247\":1,\"1266\":2,\"1271\":3,\"1286\":6,\"1466\":2}}],[\"httpd\",{\"1\":{\"404\":3}}],[\"http协议是无状态的\",{\"1\":{\"327\":1}}],[\"http协议是无状态的协议\",{\"1\":{\"286\":1}}],[\"http版本不支持\",{\"1\":{\"288\":1}}],[\"http响应数据格式\",{\"0\":{\"288\":1}}],[\"http的特点\",{\"1\":{\"286\":1}}],[\"http\",{\"0\":{\"286\":1,\"287\":1},\"1\":{\"159\":4,\"258\":4,\"264\":6,\"267\":1,\"270\":1,\"287\":1,\"295\":1,\"299\":3,\"307\":7,\"308\":3,\"310\":6,\"312\":1,\"313\":6,\"314\":3,\"315\":3,\"323\":1,\"329\":8,\"333\":8,\"346\":1,\"354\":1,\"356\":4,\"358\":1,\"362\":1,\"375\":1,\"377\":1,\"386\":5,\"387\":2,\"389\":2,\"392\":1,\"395\":1,\"398\":1,\"405\":1,\"415\":1,\"495\":4,\"557\":4,\"570\":4,\"579\":2,\"601\":4,\"615\":4,\"1466\":2}}],[\"httpsession\",{\"1\":{\"333\":5}}],[\"httpservlet原理\",{\"1\":{\"301\":1}}],[\"httpservlet使用步骤\",{\"1\":{\"301\":1}}],[\"httpservlet中为什么要根据请求方式的不同\",{\"1\":{\"300\":1}}],[\"httpservletresponse\",{\"1\":{\"299\":3,\"307\":3,\"308\":3,\"309\":1,\"310\":6,\"311\":1,\"313\":6,\"314\":3,\"315\":3,\"329\":6,\"333\":6,\"579\":4}}],[\"httpservletrequest\",{\"1\":{\"299\":3,\"306\":1,\"307\":3,\"308\":3,\"309\":1,\"310\":6,\"313\":6,\"314\":3,\"315\":3,\"329\":6,\"333\":6,\"579\":4}}],[\"httpservlet\",{\"1\":{\"299\":2,\"307\":2,\"308\":2,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4}}],[\"https\",{\"1\":{\"100\":1,\"118\":1,\"169\":1,\"170\":1,\"249\":1,\"250\":1,\"261\":1,\"273\":1,\"281\":1,\"290\":1,\"346\":1,\"349\":2,\"353\":1,\"354\":2,\"358\":6,\"362\":1,\"392\":1,\"395\":1,\"399\":1,\"400\":1,\"409\":1,\"495\":1,\"496\":6,\"500\":1,\"547\":1,\"763\":1,\"855\":1,\"888\":1,\"1013\":1,\"1168\":1,\"1260\":1,\"1293\":1,\"1418\":1}}],[\"请说\",{\"1\":{\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"请问100后的时间是\",{\"1\":{\"781\":1,\"1186\":1}}],[\"请输入学号\",{\"1\":{\"751\":1,\"1156\":1}}],[\"请参考\",{\"1\":{\"409\":1}}],[\"请参阅前置内容\",{\"1\":{\"390\":1,\"393\":1}}],[\"请细心\",{\"1\":{\"386\":1}}],[\"请确保\",{\"1\":{\"389\":1}}],[\"请确保已经完成前面\",{\"1\":{\"389\":1}}],[\"请确保目录\",{\"1\":{\"386\":1}}],[\"请确保完成了集群化环境前置准备章节的内容\",{\"1\":{\"380\":1}}],[\"请在vmware中\",{\"1\":{\"384\":1}}],[\"请在finalshell中打开2个node1的终端页面\",{\"1\":{\"378\":1}}],[\"请先确保zookeeper已经启动了\",{\"1\":{\"377\":1}}],[\"请\",{\"1\":{\"366\":1}}],[\"请自行注册\",{\"1\":{\"353\":1}}],[\"请勿设置简单密码\",{\"1\":{\"350\":1}}],[\"请注意\",{\"1\":{\"350\":2}}],[\"请妥善保存好mysql的root密码\",{\"1\":{\"347\":1,\"350\":1}}],[\"请介绍一下用\",{\"0\":{\"119\":1}}],[\"请介绍一下你在项目中使用的\",{\"0\":{\"110\":1}}],[\"请介绍一下你是如何使用\",{\"0\":{\"99\":1}}],[\"请介绍一下流量染色的概念\",{\"0\":{\"108\":1}}],[\"请解释一下编辑距离算法的实现原理\",{\"0\":{\"118\":1}}],[\"请解释一下定时任务的执行原理和此处分布式锁的作用\",{\"0\":{\"116\":1}}],[\"请解释一下模型层和业务层的概念\",{\"1\":{\"107\":1}}],[\"请解释一下\",{\"0\":{\"102\":1,\"120\":1}}],[\"请谈谈\",{\"0\":{\"100\":1}}],[\"请简要介绍一下\",{\"0\":{\"117\":1}}],[\"请简要介绍\",{\"0\":{\"98\":1}}],[\"请分别介绍这几个子项目的作用\",{\"0\":{\"97\":1}}],[\"请分别介绍一下\",{\"0\":{\"96\":1}}],[\"请求映射路径\",{\"0\":{\"561\":1}}],[\"请求与响应\",{\"0\":{\"560\":1}}],[\"请求地址栏的路径url不发生变化\",{\"1\":{\"310\":1}}],[\"请求处理\",{\"1\":{\"297\":1}}],[\"请求处理器\",{\"1\":{\"167\":1}}],[\"请求体\",{\"1\":{\"287\":1,\"307\":2}}],[\"请求头\",{\"1\":{\"287\":1,\"307\":2,\"330\":1}}],[\"请求行\",{\"1\":{\"287\":1,\"307\":2}}],[\"请求数据分为三部分\",{\"1\":{\"307\":1}}],[\"请求数据分为3部分\",{\"1\":{\"287\":1}}],[\"请求数据的第一行\",{\"1\":{\"287\":1}}],[\"请求数据格式\",{\"0\":{\"287\":1}}],[\"请求\",{\"1\":{\"159\":1}}],[\"请求都会产生一个新的\",{\"1\":{\"159\":2}}],[\"请求参数如果存在中文数据\",{\"1\":{\"309\":1}}],[\"请求参数中文乱码处理\",{\"0\":{\"309\":1}}],[\"请求参数\",{\"0\":{\"562\":1},\"1\":{\"108\":1}}],[\"请求参数校验\",{\"1\":{\"95\":1}}],[\"请求标记\",{\"1\":{\"108\":1}}],[\"请求分类\",{\"1\":{\"108\":1}}],[\"请求方式\",{\"1\":{\"307\":1}}],[\"请求方将请求参数\",{\"1\":{\"101\":1}}],[\"请求方发送请求\",{\"1\":{\"101\":1}}],[\"请求方\",{\"1\":{\"101\":1}}],[\"请求方生成签名\",{\"1\":{\"101\":1}}],[\"请求的合法性和完整性的安全机制\",{\"1\":{\"101\":1}}],[\"请求会首先发送到\",{\"1\":{\"97\":1}}],[\"请求日志\",{\"1\":{\"96\":1}}],[\"请求转发的特点\",{\"1\":{\"310\":1}}],[\"请求转发资源间共享数据\",{\"1\":{\"310\":1}}],[\"请求转发\",{\"1\":{\"96\":1,\"310\":4}}],[\"保留元素重复的元素\",{\"1\":{\"891\":1,\"1296\":1}}],[\"保留几位小数\",{\"1\":{\"774\":1,\"1179\":1}}],[\"保障多次创建的是同一个对象\",{\"1\":{\"688\":1,\"1093\":1}}],[\"保障调用的安全性\",{\"1\":{\"95\":1}}],[\"保存心得注释\",{\"1\":{\"1012\":1,\"1417\":1}}],[\"保存管道\",{\"1\":{\"1012\":1,\"1417\":1}}],[\"保存\",{\"1\":{\"570\":1}}],[\"保存数据时\",{\"1\":{\"525\":1}}],[\"保存并退出\",{\"1\":{\"437\":1}}],[\"保存当前文件\",{\"1\":{\"437\":1}}],[\"保存文件\",{\"1\":{\"434\":1}}],[\"保存退出后\",{\"1\":{\"371\":1}}],[\"保存到数据库\",{\"1\":{\"262\":1}}],[\"保存到数据库中\",{\"1\":{\"97\":1}}],[\"保证平衡\",{\"1\":{\"855\":1,\"1260\":1}}],[\"保证列中的值满足某一条件\",{\"1\":{\"525\":1}}],[\"保证列中的所有数据不能有null值\",{\"1\":{\"525\":1}}],[\"保证列中所有数据各不相同\",{\"1\":{\"525\":1}}],[\"保证了多个线程修改的情况下的原子性\",{\"1\":{\"213\":1}}],[\"保证了接口幂等性\",{\"1\":{\"109\":1}}],[\"保证线程之间的可见性\",{\"1\":{\"212\":2}}],[\"保证变量可见性\",{\"1\":{\"208\":1}}],[\"保证数据的一致性和完整性\",{\"1\":{\"525\":1,\"526\":1}}],[\"保证数据的⼀致性\",{\"1\":{\"151\":1}}],[\"保证数据一致性\",{\"1\":{\"127\":1}}],[\"保证代码的可靠性和可读性\",{\"1\":{\"45\":1}}],[\"进栈\",{\"1\":{\"850\":1,\"1255\":1}}],[\"进入\",{\"1\":{\"831\":1,\"1236\":1}}],[\"进入取代模式\",{\"1\":{\"436\":1}}],[\"进入输入模式\",{\"1\":{\"436\":3}}],[\"进入输入或取代的编辑模式\",{\"1\":{\"436\":1}}],[\"进入了命令模式\",{\"1\":{\"432\":1}}],[\"进入到\",{\"1\":{\"386\":1}}],[\"进入到zookeeper控制台中后\",{\"1\":{\"375\":1}}],[\"进入到conf文件夹的setting文件进行配置\",{\"1\":{\"251\":1}}],[\"进入redis服务\",{\"1\":{\"360\":1}}],[\"进入挑战四后\",{\"1\":{\"36\":1}}],[\"进入挑战一\",{\"1\":{\"30\":1}}],[\"进程\",{\"1\":{\"1434\":1}}],[\"进程已结束\",{\"1\":{\"743\":1,\"1148\":1}}],[\"进程内存占用率\",{\"1\":{\"481\":1}}],[\"进程cpu占用率\",{\"1\":{\"481\":1}}],[\"进程使用的物理内存\",{\"1\":{\"481\":1}}],[\"进程id\",{\"1\":{\"479\":1,\"481\":1}}],[\"进程对应的名称或启动路径或启动命令\",{\"1\":{\"478\":1}}],[\"进程占用cpu的时间\",{\"1\":{\"478\":1}}],[\"进程启动的时间\",{\"1\":{\"478\":1}}],[\"进程的父id\",{\"1\":{\"478\":1}}],[\"进程的进程号id\",{\"1\":{\"478\":1}}],[\"进程所属的用户id\",{\"1\":{\"478\":1}}],[\"进程管理\",{\"0\":{\"477\":1}}],[\"进程即可\",{\"1\":{\"375\":1}}],[\"进程中包含了线程\",{\"1\":{\"197\":1}}],[\"进程是正在运行程序的实例\",{\"1\":{\"197\":1}}],[\"进程是程序的一次执行过程\",{\"1\":{\"197\":1}}],[\"进行消息的接收\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"进行删除\",{\"1\":{\"965\":1,\"1370\":1}}],[\"进行增删操作的时候\",{\"1\":{\"833\":1,\"1238\":1}}],[\"进行暴力反射\",{\"1\":{\"806\":1,\"1211\":1}}],[\"进行非空判断\",{\"1\":{\"758\":1,\"1163\":1}}],[\"进行纵向计算\",{\"1\":{\"521\":1}}],[\"进行下载\",{\"1\":{\"488\":1}}],[\"进行立即生效\",{\"1\":{\"486\":1}}],[\"进行前一个搜寻动作\",{\"1\":{\"435\":1}}],[\"进行匹配\",{\"1\":{\"354\":1}}],[\"进行实战的linux软件安装部署\",{\"1\":{\"344\":1}}],[\"进行连接有效性检查\",{\"1\":{\"240\":2}}],[\"进行预编译的sql语句对象\",{\"1\":{\"233\":1}}],[\"进行比较\",{\"1\":{\"211\":2}}],[\"进行扩容\",{\"1\":{\"190\":2}}],[\"进行管理\",{\"1\":{\"98\":1}}],[\"进行管理的\",{\"1\":{\"98\":1}}],[\"进行用户的鉴权和接口调用统计\",{\"1\":{\"97\":1}}],[\"进行多模块依赖管理和打包\",{\"0\":{\"98\":1}}],[\"进行多模块依赖管理\",{\"1\":{\"95\":1}}],[\"5s之内测试\",{\"1\":{\"1433\":1}}],[\"5中引入的并发包\",{\"1\":{\"955\":1,\"1360\":1}}],[\"5个任务队列\",{\"1\":{\"948\":1,\"1353\":1}}],[\"5倍扩容\",{\"1\":{\"863\":1,\"1268\":1}}],[\"5倍左右进行扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"5倍\",{\"1\":{\"831\":1,\"1236\":1}}],[\"5倍进行扩容\",{\"1\":{\"183\":1}}],[\"5种类型参数传参\",{\"0\":{\"563\":1}}],[\"58\",{\"1\":{\"496\":13}}],[\"586\",{\"1\":{\"280\":1}}],[\"53\",{\"1\":{\"496\":21}}],[\"57\",{\"1\":{\"496\":18}}],[\"55\",{\"1\":{\"496\":30,\"793\":3,\"794\":1,\"1198\":3,\"1199\":1}}],[\"54\",{\"1\":{\"496\":31}}],[\"5m\",{\"1\":{\"495\":1}}],[\"5代表r\",{\"1\":{\"465\":1}}],[\"5k\",{\"1\":{\"460\":2}}],[\"52\",{\"1\":{\"456\":1,\"496\":13,\"1027\":2,\"1477\":2}}],[\"569\",{\"1\":{\"909\":1,\"1314\":1}}],[\"56\",{\"1\":{\"496\":25}}],[\"56行\",{\"1\":{\"362\":1}}],[\"563\",{\"1\":{\"280\":1}}],[\"510\",{\"1\":{\"496\":1}}],[\"51\",{\"1\":{\"320\":1,\"460\":3,\"496\":22}}],[\"5xx\",{\"1\":{\"288\":1}}],[\"599\",{\"1\":{\"909\":1,\"1314\":1}}],[\"599556\",{\"1\":{\"481\":1}}],[\"59分后\",{\"1\":{\"784\":1,\"1189\":1}}],[\"59\",{\"1\":{\"496\":10,\"784\":1,\"845\":1,\"1189\":1,\"1250\":1}}],[\"595\",{\"1\":{\"280\":1}}],[\"594\",{\"1\":{\"280\":2}}],[\"593\",{\"1\":{\"280\":2}}],[\"509\",{\"1\":{\"496\":1}}],[\"508\",{\"1\":{\"496\":1}}],[\"507\",{\"1\":{\"496\":1}}],[\"506\",{\"1\":{\"496\":1}}],[\"505\",{\"1\":{\"496\":1}}],[\"501\",{\"1\":{\"496\":1}}],[\"504\",{\"1\":{\"495\":1,\"496\":1}}],[\"503\",{\"1\":{\"495\":1,\"496\":1}}],[\"502\",{\"1\":{\"495\":1,\"496\":1}}],[\"50x\",{\"1\":{\"495\":3}}],[\"50m\",{\"1\":{\"495\":1}}],[\"50dd\",{\"1\":{\"437\":1}}],[\"5000\",{\"1\":{\"525\":2,\"1433\":1}}],[\"500\",{\"1\":{\"331\":1,\"495\":1,\"496\":1,\"647\":1,\"909\":1,\"949\":1,\"1052\":1,\"1314\":1,\"1354\":1}}],[\"50\",{\"1\":{\"243\":1,\"437\":1,\"481\":3,\"496\":20,\"525\":1,\"529\":3,\"663\":1,\"1068\":1}}],[\"50已足够\",{\"1\":{\"240\":1}}],[\"5\",{\"1\":{\"95\":1,\"97\":1,\"103\":1,\"106\":1,\"112\":1,\"115\":1,\"117\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":2,\"243\":1,\"245\":3,\"264\":2,\"280\":2,\"344\":1,\"375\":8,\"392\":8,\"398\":1,\"455\":1,\"456\":3,\"458\":2,\"459\":5,\"460\":5,\"474\":1,\"476\":4,\"481\":2,\"485\":3,\"496\":1,\"511\":1,\"570\":1,\"615\":1,\"743\":1,\"750\":1,\"751\":2,\"784\":1,\"794\":1,\"808\":1,\"812\":1,\"818\":4,\"831\":3,\"842\":1,\"845\":1,\"865\":1,\"897\":2,\"904\":1,\"909\":2,\"914\":2,\"924\":2,\"925\":1,\"948\":11,\"949\":2,\"966\":1,\"976\":1,\"981\":1,\"1026\":1,\"1148\":1,\"1155\":1,\"1156\":2,\"1189\":1,\"1199\":1,\"1213\":1,\"1217\":1,\"1223\":4,\"1236\":3,\"1247\":1,\"1250\":1,\"1270\":1,\"1302\":2,\"1309\":1,\"1314\":2,\"1319\":2,\"1329\":2,\"1330\":1,\"1353\":11,\"1354\":2,\"1371\":1,\"1381\":1,\"1386\":1,\"1461\":1,\"1464\":1,\"1465\":2,\"1466\":1,\"1476\":1}}],[\"系统会随机分配一个端口号\",{\"1\":{\"1448\":1}}],[\"系统架构图\",{\"0\":{\"581\":1}}],[\"系统cpu使用率\",{\"1\":{\"481\":1}}],[\"系统提供该目录是为了让用户临时挂载别的文件系统的\",{\"1\":{\"428\":1}}],[\"系统开机所需要最基本的动态连接共享库\",{\"1\":{\"428\":1}}],[\"系统运行一个程序即是一个进程从创建\",{\"1\":{\"197\":1}}],[\"系统负载保护等多个维度保护服务的稳定性\",{\"1\":{\"171\":1}}],[\"系统\",{\"1\":{\"95\":1}}],[\"week\",{\"1\":{\"784\":1,\"1189\":1}}],[\"weekofyear\",{\"1\":{\"784\":2,\"1189\":2}}],[\"weight可以配置权重\",{\"1\":{\"495\":1}}],[\"weight=1\",{\"1\":{\"495\":2}}],[\"webmvcconfigurer\",{\"1\":{\"579\":4}}],[\"webmvcconfigurationsupport\",{\"1\":{\"579\":2}}],[\"webmvc<\",{\"1\":{\"557\":1,\"570\":1}}],[\"webui\",{\"1\":{\"392\":1}}],[\"webapplicationcontext\",{\"1\":{\"557\":6}}],[\"webapp\",{\"1\":{\"386\":1}}],[\"webproxyserver\",{\"1\":{\"382\":1}}],[\"webproxyserver进程\",{\"1\":{\"381\":1}}],[\"webfilter\",{\"1\":{\"338\":2}}],[\"web服务器\",{\"1\":{\"297\":1}}],[\"web服务器的作用\",{\"1\":{\"291\":1}}],[\"webservlet\",{\"1\":{\"295\":2,\"297\":1,\"299\":2,\"302\":6,\"307\":2,\"308\":2,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4}}],[\"websocket\",{\"1\":{\"159\":2}}],[\"web项目\",{\"0\":{\"292\":1}}],[\"web核心内容\",{\"0\":{\"285\":1}}],[\"web\",{\"0\":{\"405\":1,\"1483\":1},\"1\":{\"95\":1,\"159\":5,\"295\":1,\"299\":1,\"302\":7,\"307\":1,\"308\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"335\":1,\"386\":1,\"395\":1,\"397\":1,\"401\":1,\"494\":1,\"557\":5,\"562\":2,\"570\":4,\"573\":2,\"579\":17},\"2\":{\"246\":1}}],[\"w代表2\",{\"1\":{\"465\":1}}],[\"w统计单词数量\",{\"1\":{\"455\":1}}],[\"wc\",{\"0\":{\"455\":1},\"1\":{\"455\":2}}],[\"wq\",{\"1\":{\"437\":2}}],[\"w\",{\"1\":{\"434\":1,\"437\":4,\"441\":1,\"455\":1,\"496\":1,\"819\":3,\"1224\":3}}],[\"written\",{\"1\":{\"386\":2}}],[\"writing\",{\"1\":{\"386\":4}}],[\"writeobject\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"writerdemo\",{\"1\":{\"1004\":1,\"1409\":1}}],[\"writer\",{\"1\":{\"313\":2,\"314\":4,\"1004\":2,\"1008\":2,\"1409\":2,\"1413\":2}}],[\"write\",{\"1\":{\"137\":1,\"313\":1,\"314\":2,\"315\":2,\"997\":10,\"998\":1,\"1000\":1,\"1001\":1,\"1004\":5,\"1007\":1,\"1008\":5,\"1402\":10,\"1403\":1,\"1405\":1,\"1406\":1,\"1409\":5,\"1412\":1,\"1413\":5}}],[\"wget\",{\"1\":{\"354\":2,\"375\":1,\"377\":1,\"386\":1,\"389\":1,\"392\":1,\"395\":1}}],[\"window系统默认的码表\",{\"1\":{\"985\":1,\"1390\":1}}],[\"win\",{\"1\":{\"831\":1,\"1236\":1}}],[\"winter\",{\"1\":{\"707\":2,\"708\":1,\"1112\":2,\"1113\":1}}],[\"without\",{\"1\":{\"386\":4}}],[\"with\",{\"0\":{\"1001\":1,\"1406\":1},\"1\":{\"350\":3,\"386\":4,\"819\":1,\"1224\":1}}],[\"will\",{\"1\":{\"251\":1,\"402\":1}}],[\"w3\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"www\",{\"1\":{\"258\":1,\"264\":1,\"281\":1,\"353\":1,\"386\":4,\"399\":1,\"557\":1,\"570\":1,\"601\":4,\"615\":1,\"763\":1,\"855\":1,\"888\":1,\"1168\":1,\"1260\":1,\"1293\":1,\"1433\":1}}],[\"wa\",{\"1\":{\"481\":2}}],[\"wants\",{\"1\":{\"474\":1}}],[\"warranties\",{\"1\":{\"386\":4}}],[\"warn\",{\"1\":{\"264\":1}}],[\"wall\",{\"1\":{\"240\":2}}],[\"waitset关联的是处于waiting状态的线程\",{\"1\":{\"210\":1}}],[\"waitset\",{\"1\":{\"210\":2}}],[\"wait\",{\"0\":{\"207\":1},\"1\":{\"207\":5,\"240\":1,\"939\":4,\"1344\":4}}],[\"waiting\",{\"1\":{\"203\":1,\"963\":2,\"1368\":2}}],[\"which要查找的命令\",{\"1\":{\"452\":1}}],[\"which\",{\"0\":{\"452\":1}}],[\"while\",{\"1\":{\"231\":1,\"240\":1,\"245\":1,\"315\":1,\"751\":1,\"758\":1,\"794\":1,\"844\":1,\"866\":1,\"939\":2,\"994\":1,\"995\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1007\":1,\"1008\":2,\"1156\":1,\"1163\":1,\"1199\":1,\"1249\":1,\"1271\":1,\"1344\":2,\"1399\":1,\"1400\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1412\":1,\"1413\":2,\"1450\":2,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":2}}],[\"when>\",{\"1\":{\"274\":6}}],[\"when相当于case\",{\"1\":{\"274\":1}}],[\"when\",{\"1\":{\"273\":1}}],[\"where不能对聚合函数进行判断\",{\"1\":{\"522\":1}}],[\"where是分组之前进行限定\",{\"1\":{\"522\":1}}],[\"where和having区别\",{\"1\":{\"522\":1}}],[\"where>\",{\"1\":{\"273\":1,\"274\":1}}],[\"where标签\",{\"1\":{\"273\":1}}],[\"where后可能直接连接了and\",{\"1\":{\"273\":1}}],[\"where\",{\"1\":{\"146\":1,\"148\":1,\"226\":1,\"229\":1,\"233\":4,\"240\":1,\"245\":2,\"271\":5,\"272\":3,\"273\":7,\"274\":2,\"277\":1,\"279\":1,\"280\":2,\"283\":1,\"386\":3,\"514\":3,\"516\":2,\"518\":4,\"522\":2,\"526\":1,\"531\":3,\"533\":3,\"570\":3,\"613\":3,\"829\":3,\"1234\":3}}],[\"workdir\",{\"1\":{\"494\":1}}],[\"work\",{\"1\":{\"443\":1}}],[\"worker\",{\"1\":{\"392\":2,\"456\":2,\"495\":2}}],[\"workqueue\",{\"1\":{\"112\":1,\"219\":3,\"944\":2,\"948\":1,\"949\":1,\"1349\":2,\"1353\":1,\"1354\":1}}],[\"wordinname\",{\"1\":{\"743\":2,\"1148\":2}}],[\"word2\",{\"1\":{\"435\":8}}],[\"word1\",{\"1\":{\"435\":8}}],[\"word\",{\"1\":{\"435\":5}}],[\"wordcount\",{\"1\":{\"387\":1,\"395\":1}}],[\"words\",{\"1\":{\"387\":3}}],[\"world~你好\",{\"1\":{\"295\":1}}],[\"world\",{\"1\":{\"18\":1,\"75\":3,\"648\":4,\"1053\":4}}],[\"wuluwulu\",{\"1\":{\"109\":1,\"495\":1}}],[\"将list集合里面小于20的数据移除\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"将李四整理出来后将年龄大于25的李四整理出来\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"将李四筛选出来存入lisilist\",{\"1\":{\"1027\":2,\"1477\":2}}],[\"将里面的所有文件和文件夹的路径放在file数组中返回\",{\"1\":{\"971\":1,\"1376\":1}}],[\"将里面所有文件和文件夹的路径放在file数组中返回\",{\"1\":{\"971\":1,\"1376\":1}}],[\"将此抽象路径名装换为路径名字符串\",{\"1\":{\"966\":1,\"1371\":1}}],[\"将此字符串与指定对象进行比较\",{\"1\":{\"758\":1,\"1163\":1}}],[\"将集合中的元素按照指定规则排序\",{\"1\":{\"896\":1,\"1301\":1}}],[\"将集合中的元素按照默认规则排序\",{\"1\":{\"896\":1,\"1301\":1}}],[\"将oldcapacity\",{\"1\":{\"831\":1,\"1236\":1}}],[\"将指定的元素追加到此列表的末尾\",{\"1\":{\"831\":1,\"1236\":1}}],[\"将时间毫秒值转化成日期\",{\"1\":{\"781\":1,\"1186\":1}}],[\"将日期格式化成日期\",{\"1\":{\"781\":1,\"1186\":1}}],[\"将对象内容反转\",{\"1\":{\"763\":1,\"1168\":1}}],[\"将一批用户里面的\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"将一个实体中经常使用的字段放在一张表中\",{\"1\":{\"529\":1}}],[\"将一列作为一个整体\",{\"1\":{\"521\":1}}],[\"将test\",{\"1\":{\"491\":1,\"492\":2}}],[\"将a\",{\"1\":{\"491\":1}}],[\"将1\",{\"1\":{\"490\":2}}],[\"将会把hello\",{\"1\":{\"465\":2}}],[\"将会继续传承下去\",{\"1\":{\"40\":1}}],[\"将左边命令的结果作为右边命令的输入\",{\"1\":{\"456\":1}}],[\"将关键字包裹起来\",{\"1\":{\"454\":1}}],[\"将编辑的数据储存成另一个档案\",{\"1\":{\"437\":1}}],[\"将编辑的数据写入硬盘档案中\",{\"1\":{\"437\":1}}],[\"将光标所在行与下一行的数据结合成同一行\",{\"1\":{\"435\":1}}],[\"将光标向下一行查询结果\",{\"1\":{\"240\":1}}],[\"将sh\",{\"1\":{\"424\":3}}],[\"将sql语句发送给mysql服务器进行检查\",{\"1\":{\"234\":1}}],[\"将下面的内容复制进去\",{\"1\":{\"409\":1}}],[\"将文件的全部内容替换成如下内容\",{\"1\":{\"389\":1}}],[\"将文件上传到hdfs中\",{\"1\":{\"387\":1}}],[\"将node1的kafka复制到node2和node3\",{\"1\":{\"377\":1}}],[\"将zookeeper\",{\"1\":{\"375\":1}}],[\"将远程node2的jdk文件夹\",{\"1\":{\"373\":1}}],[\"将本机当前路径的jdk文件夹\",{\"1\":{\"373\":2}}],[\"将本机上的jdk文件夹\",{\"1\":{\"373\":1}}],[\"将本地的tomcat集成到idea中\",{\"1\":{\"293\":1}}],[\"将第七行\",{\"1\":{\"371\":1}}],[\"将以当前用户直接登陆到node2服务器\",{\"1\":{\"368\":1}}],[\"将以root用户登录node2服务器\",{\"1\":{\"368\":1}}],[\"将我们的虚拟机额外克隆出3台来使用\",{\"1\":{\"365\":1}}],[\"将jdk和tomcat都安装部署到\",{\"1\":{\"353\":1}}],[\"将cookie写入到浏览器所在电脑的硬盘\",{\"1\":{\"331\":1}}],[\"将数据源ip\",{\"1\":{\"1443\":1}}],[\"将数据库结构更新到最新状态\",{\"1\":{\"494\":1}}],[\"将数据保存到服务端\",{\"1\":{\"333\":1}}],[\"将数据保存到客户端\",{\"1\":{\"329\":1}}],[\"将数据与索引分开存储\",{\"1\":{\"145\":1}}],[\"将数据与索引放到一块\",{\"1\":{\"145\":1}}],[\"将其编译\",{\"1\":{\"319\":1}}],[\"将其转换为java文件\",{\"1\":{\"319\":1}}],[\"将字节数组转换为字符串\",{\"1\":{\"309\":1}}],[\"将来收到post请求也让它去get方法中\",{\"1\":{\"308\":1}}],[\"将来我们需要定义servlet类实现servlet接口\",{\"1\":{\"294\":1}}],[\"将来\",{\"1\":{\"282\":1}}],[\"将来使用哪个数据库可以直接修改environments的default\",{\"1\":{\"267\":1}}],[\"将来数据返回的是什么类型就写什么类型\",{\"1\":{\"264\":1,\"270\":1}}],[\"将保证至少有minidle个连接\",{\"1\":{\"240\":1}}],[\"将\",{\"1\":{\"240\":1,\"437\":1}}],[\"将敏感字符进行转义\",{\"1\":{\"233\":1,\"234\":1}}],[\"将链表转化为红黑树\",{\"1\":{\"189\":1}}],[\"将链表和数组相结合\",{\"1\":{\"189\":1}}],[\"将需要的可变成员变量保存在\",{\"1\":{\"158\":1}}],[\"将改变反映它自己的数据\",{\"1\":{\"155\":1}}],[\"将使用第一个唯一\",{\"1\":{\"145\":1}}],[\"将⽤户的登录态存⼊\",{\"1\":{\"123\":1}}],[\"将接口的响应时长从\",{\"1\":{\"109\":1}}],[\"将请求分为不同的类别或组\",{\"1\":{\"108\":1}}],[\"将整个项目后端划分为\",{\"1\":{\"95\":1}}],[\"技术人员都应该使用utf\",{\"1\":{\"986\":1,\"1391\":1}}],[\"技术名称\",{\"1\":{\"701\":1,\"1106\":1}}],[\"技术要点\",{\"1\":{\"95\":1,\"109\":1}}],[\"技能的进阶\",{\"0\":{\"87\":1}}],[\"技能的提升远远不止于此\",{\"1\":{\"54\":1}}],[\"技能的提升是迷失路途中前进的重要支撑\",{\"1\":{\"13\":1}}],[\"技能的提升\",{\"0\":{\"13\":1},\"1\":{\"0\":1}}],[\"接着调用ensureexplicitcapacity\",{\"1\":{\"831\":1,\"1236\":1}}],[\"接收端必须绑定该组播ip\",{\"1\":{\"1454\":1}}],[\"接收端\",{\"1\":{\"1449\":1}}],[\"接收端的端口号\",{\"1\":{\"1447\":1}}],[\"接收端的ip地址对象\",{\"1\":{\"1447\":1}}],[\"接收数据包\",{\"1\":{\"1449\":1}}],[\"接收方收到也不确认\",{\"1\":{\"1443\":1}}],[\"接收请求\",{\"1\":{\"326\":1}}],[\"接收参数\",{\"1\":{\"272\":1}}],[\"接口中只能有一个抽象方法\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"接口也是一种父类\",{\"1\":{\"724\":1,\"1129\":1}}],[\"接口不能创建对象\",{\"1\":{\"717\":1,\"721\":1,\"1122\":1,\"1126\":1}}],[\"接口新增方法\",{\"0\":{\"717\":1,\"1122\":1}}],[\"接口可以多继承\",{\"0\":{\"716\":1,\"1121\":1}}],[\"接口可以被类单实现\",{\"1\":{\"715\":1,\"1120\":1}}],[\"接口3\",{\"1\":{\"715\":1,\"1120\":1}}],[\"接口2\",{\"1\":{\"715\":1,\"1120\":1}}],[\"接口1\",{\"1\":{\"715\":1,\"1120\":1}}],[\"接口是用来被实现的\",{\"1\":{\"715\":1,\"1120\":1}}],[\"接口是更加彻底的抽象\",{\"1\":{\"713\":1,\"1118\":1}}],[\"接口名称<\",{\"1\":{\"874\":1,\"1279\":1}}],[\"接口名\",{\"1\":{\"713\":1,\"1118\":1}}],[\"接口的静态方法只能用接口名自己调用\",{\"1\":{\"721\":1,\"1126\":1}}],[\"接口的静态方法必须使用本身接口名来调用\",{\"1\":{\"720\":1,\"1125\":1}}],[\"接口的实现\",{\"0\":{\"715\":1,\"1120\":1}}],[\"接口的定义\",{\"0\":{\"714\":1,\"1119\":1}}],[\"接口的定义和特点\",{\"1\":{\"713\":1,\"1118\":1}}],[\"接口的调用方法\",{\"1\":{\"97\":1}}],[\"接口就是体现规范的\",{\"1\":{\"713\":1,\"1118\":1}}],[\"接口interface\",{\"0\":{\"713\":1,\"1118\":1}}],[\"接口run方法没有返回值\",{\"1\":{\"200\":1}}],[\"接口压测响应时间大于一秒\",{\"1\":{\"141\":1}}],[\"接口分组排序等增强功能\",{\"1\":{\"100\":1}}],[\"接口文档\",{\"1\":{\"100\":1}}],[\"接口文档生成工具后\",{\"1\":{\"100\":1,\"120\":1}}],[\"接口层的代码自动生成文档\",{\"1\":{\"100\":1,\"120\":1}}],[\"接口\",{\"1\":{\"97\":2,\"102\":1,\"187\":1,\"629\":1,\"646\":1,\"724\":1,\"1025\":1,\"1034\":1,\"1051\":1,\"1129\":1,\"1475\":1}}],[\"接口调用统计等业务逻辑\",{\"1\":{\"95\":1}}],[\"接口开放调用平台\",{\"1\":{\"95\":1}}],[\"接下来想获取a对象的锁\",{\"1\":{\"216\":1}}],[\"接下来想获取b对象的锁\",{\"1\":{\"216\":1}}],[\"接下来是关于多线程\",{\"1\":{\"49\":1}}],[\"接下来\",{\"1\":{\"43\":1,\"58\":1}}],[\"接下来的几天\",{\"1\":{\"3\":1}}],[\"项目异常处理方案\",{\"0\":{\"573\":1}}],[\"项目要有自己的一些创意才不会\",{\"1\":{\"538\":1}}],[\"项目的访问路径\",{\"1\":{\"313\":1}}],[\"项目的构建\",{\"1\":{\"98\":1}}],[\"项目访问路径\",{\"1\":{\"307\":2}}],[\"项目\",{\"1\":{\"295\":1}}],[\"项目会直接使用\",{\"1\":{\"250\":1}}],[\"项目使用\",{\"1\":{\"116\":1}}],[\"项目中使用\",{\"1\":{\"199\":1}}],[\"项目中使用的spring\",{\"0\":{\"171\":1}}],[\"项目中\",{\"1\":{\"112\":1}}],[\"项目上线地址\",{\"1\":{\"109\":1}}],[\"项目启动时\",{\"1\":{\"104\":1}}],[\"项目技术栈\",{\"1\":{\"96\":1}}],[\"项目描述\",{\"1\":{\"95\":1,\"109\":1}}],[\"项目经历\",{\"0\":{\"94\":1}}],[\"bsserverdemo\",{\"1\":{\"1466\":2}}],[\"bs\",{\"1\":{\"1424\":1,\"1466\":3}}],[\"bservlet\",{\"1\":{\"329\":2}}],[\"bw\",{\"1\":{\"1008\":9,\"1413\":9}}],[\"bmw\",{\"1\":{\"878\":4,\"1283\":4}}],[\"bmws\",{\"1\":{\"878\":5,\"1283\":5}}],[\"bv1cv411372m\",{\"1\":{\"855\":1,\"888\":1,\"1260\":1,\"1293\":1}}],[\"bv1qf4y1t7hx\",{\"1\":{\"281\":1}}],[\"b和c除外\",{\"1\":{\"819\":1,\"1224\":1}}],[\"b或c以外的任何字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"b或c\",{\"1\":{\"819\":1,\"1224\":1}}],[\"b11\",{\"1\":{\"774\":4,\"1179\":4}}],[\"b1\",{\"1\":{\"774\":5,\"1179\":5}}],[\"bd6398b9717d\",{\"1\":{\"496\":2}}],[\"browser\",{\"1\":{\"1424\":1}}],[\"broker\",{\"1\":{\"377\":3,\"378\":1}}],[\"br\",{\"1\":{\"1008\":3,\"1413\":3,\"1461\":3,\"1464\":3,\"1465\":3}}],[\"brithday\",{\"1\":{\"511\":1}}],[\"break\",{\"1\":{\"495\":1,\"653\":2,\"708\":4,\"1058\":2,\"1113\":4,\"1450\":2,\"1461\":2,\"1464\":2,\"1465\":2}}],[\"brandresultmap\",{\"1\":{\"270\":2,\"271\":1,\"272\":1,\"273\":3,\"274\":2}}],[\"brandmapper\",{\"1\":{\"270\":1,\"272\":4,\"275\":6,\"277\":4,\"279\":4,\"280\":4}}],[\"brands\",{\"1\":{\"245\":3,\"272\":2,\"322\":4,\"323\":1}}],[\"brandname=\",{\"1\":{\"244\":1}}],[\"brandname\",{\"1\":{\"244\":9,\"245\":6,\"270\":3,\"272\":10,\"273\":7,\"274\":6,\"275\":3,\"276\":1,\"277\":5,\"281\":5,\"323\":1}}],[\"brand\",{\"1\":{\"243\":6,\"244\":4,\"245\":12,\"270\":11,\"271\":5,\"272\":6,\"273\":7,\"274\":6,\"275\":13,\"276\":2,\"277\":12,\"279\":1,\"280\":2,\"283\":3,\"323\":5}}],[\"brand表\",{\"1\":{\"243\":2}}],[\"baidu\",{\"1\":{\"1433\":1}}],[\"baomidou\",{\"1\":{\"544\":2,\"547\":1,\"553\":1}}],[\"baomidou<\",{\"1\":{\"544\":1}}],[\"backspace\",{\"1\":{\"435\":1}}],[\"back\",{\"1\":{\"433\":1}}],[\"backend\",{\"1\":{\"97\":2,\"494\":3,\"495\":2}}],[\"batch\",{\"1\":{\"395\":1}}],[\"bash\",{\"1\":{\"496\":4}}],[\"bashrc文件\",{\"1\":{\"486\":1}}],[\"based\",{\"1\":{\"495\":1}}],[\"baseline\",{\"1\":{\"494\":1}}],[\"baseurl=https\",{\"1\":{\"358\":4,\"362\":1,\"409\":1}}],[\"baseurl=http\",{\"1\":{\"356\":2}}],[\"basis\",{\"0\":{\"1487\":1,\"1493\":1},\"1\":{\"386\":4}}],[\"b8\",{\"1\":{\"309\":4}}],[\"bc\",{\"1\":{\"309\":4}}],[\"buf\",{\"1\":{\"1447\":4,\"1449\":1,\"1450\":1}}],[\"buff和cache占用\",{\"1\":{\"481\":1}}],[\"buff\",{\"1\":{\"481\":2}}],[\"buffer3\",{\"1\":{\"997\":2,\"1402\":2}}],[\"buffer2\",{\"1\":{\"997\":2,\"1402\":2}}],[\"bufferedwriter\",{\"1\":{\"1008\":3,\"1413\":3}}],[\"bufferedoutputstream\",{\"1\":{\"1007\":3,\"1412\":3}}],[\"bufferedinputstream\",{\"1\":{\"628\":7,\"1007\":3,\"1033\":7,\"1412\":3}}],[\"bufferedreaderdemo1\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"bufferedreader\",{\"1\":{\"307\":2,\"1008\":3,\"1413\":3,\"1461\":3,\"1464\":4,\"1465\":3}}],[\"buffer\",{\"1\":{\"315\":3,\"386\":1,\"628\":8,\"994\":1,\"995\":23,\"996\":3,\"997\":2,\"998\":3,\"1000\":3,\"1001\":3,\"1003\":3,\"1004\":2,\"1007\":3,\"1008\":5,\"1033\":8,\"1399\":1,\"1400\":23,\"1401\":3,\"1402\":2,\"1403\":3,\"1405\":3,\"1406\":3,\"1408\":3,\"1409\":2,\"1412\":3,\"1413\":5,\"1449\":7,\"1450\":7}}],[\"bufferread\",{\"1\":{\"308\":1}}],[\"bufferreader\",{\"1\":{\"307\":2}}],[\"businessexception\",{\"1\":{\"573\":3}}],[\"bundle\",{\"1\":{\"358\":4,\"409\":1}}],[\"buildx\",{\"1\":{\"496\":2}}],[\"builder\",{\"1\":{\"494\":1}}],[\"build>\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"build\",{\"1\":{\"264\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"316\":1,\"494\":1,\"496\":8,\"557\":2}}],[\"bbb\",{\"1\":{\"302\":3,\"956\":1,\"969\":1,\"1361\":1,\"1374\":1}}],[\"bos\",{\"1\":{\"1007\":2,\"1412\":2}}],[\"bonus\",{\"1\":{\"525\":2}}],[\"bonfire\",{\"1\":{\"494\":18,\"495\":4,\"496\":40}}],[\"body\",{\"1\":{\"495\":1}}],[\"body>\",{\"1\":{\"318\":1,\"320\":1}}],[\"boldgreen\",{\"1\":{\"264\":1}}],[\"book>\",{\"1\":{\"829\":3,\"1234\":3}}],[\"bookname>\",{\"1\":{\"829\":3,\"1234\":3}}],[\"bookname\",{\"1\":{\"829\":2,\"1234\":2}}],[\"book+\",{\"1\":{\"829\":1,\"1234\":1}}],[\"bookcontroller\",{\"1\":{\"570\":1,\"579\":1}}],[\"books>\",{\"1\":{\"829\":1,\"1234\":1}}],[\"books\",{\"1\":{\"570\":1,\"579\":7,\"829\":2,\"1234\":2}}],[\"bookservicetest\",{\"1\":{\"570\":1}}],[\"bookserviceimpl\",{\"1\":{\"570\":1}}],[\"bookservice\",{\"1\":{\"570\":15}}],[\"bookresultmap\",{\"1\":{\"570\":3,\"613\":3}}],[\"bookdaoimpl\",{\"1\":{\"601\":1}}],[\"bookdao\",{\"1\":{\"570\":9,\"601\":1,\"613\":1}}],[\"book\",{\"1\":{\"570\":40,\"613\":11,\"659\":1,\"829\":1,\"1064\":1,\"1234\":1}}],[\"boolean类型有两个值\",{\"1\":{\"649\":1,\"1054\":1}}],[\"boolean类型\",{\"1\":{\"646\":1,\"649\":1,\"1051\":1,\"1054\":1}}],[\"boolean\",{\"1\":{\"229\":1,\"570\":9,\"579\":1,\"629\":3,\"743\":2,\"747\":1,\"750\":2,\"754\":1,\"756\":2,\"758\":3,\"788\":2,\"806\":1,\"807\":1,\"809\":1,\"813\":1,\"818\":2,\"823\":1,\"831\":1,\"840\":1,\"842\":4,\"888\":1,\"891\":1,\"895\":1,\"896\":1,\"904\":3,\"966\":3,\"968\":3,\"969\":1,\"1022\":1,\"1025\":1,\"1028\":1,\"1034\":3,\"1148\":2,\"1152\":1,\"1155\":2,\"1159\":1,\"1161\":2,\"1163\":3,\"1193\":2,\"1211\":1,\"1212\":1,\"1214\":1,\"1218\":1,\"1223\":2,\"1228\":1,\"1236\":1,\"1245\":1,\"1247\":4,\"1293\":1,\"1296\":1,\"1300\":1,\"1301\":1,\"1309\":3,\"1371\":3,\"1373\":3,\"1374\":1,\"1433\":1,\"1472\":1,\"1475\":1,\"1478\":1}}],[\"boot应用程序时\",{\"1\":{\"494\":1}}],[\"boot应用程序\",{\"1\":{\"494\":1}}],[\"bootstrap\",{\"1\":{\"378\":1}}],[\"bootspring\",{\"1\":{\"95\":1}}],[\"boot项目中的引导类上有一个注解\",{\"1\":{\"168\":1}}],[\"boot\",{\"0\":{\"96\":1,\"103\":1},\"1\":{\"95\":2,\"96\":2,\"103\":4,\"111\":1,\"113\":1,\"404\":1,\"428\":1,\"544\":1}}],[\"blank\",{\"1\":{\"819\":1,\"1224\":1}}],[\"blue\",{\"1\":{\"264\":1}}],[\"blocked\",{\"1\":{\"963\":1,\"1368\":1}}],[\"blocksize<\",{\"1\":{\"386\":1}}],[\"blockingqueue<runnable>\",{\"1\":{\"219\":1,\"944\":1,\"948\":1,\"949\":1,\"1349\":1,\"1353\":1,\"1354\":1}}],[\"blog\",{\"1\":{\"118\":1}}],[\"before\",{\"1\":{\"629\":4,\"1029\":1,\"1034\":4,\"1479\":1}}],[\"beforetime\",{\"1\":{\"615\":2}}],[\"between\",{\"1\":{\"518\":2,\"529\":1}}],[\"be\",{\"1\":{\"386\":1,\"402\":1,\"410\":1}}],[\"beginindex\",{\"1\":{\"743\":2,\"1148\":2}}],[\"beginning\",{\"1\":{\"378\":1}}],[\"begin\",{\"1\":{\"229\":1,\"535\":1}}],[\"bean>\",{\"1\":{\"601\":1}}],[\"bean作用范围与生命周期管理\",{\"0\":{\"607\":1}}],[\"bean作用范围\",{\"0\":{\"586\":1}}],[\"bean别名配置\",{\"0\":{\"585\":1}}],[\"bean基础配置\",{\"0\":{\"584\":1}}],[\"beans>\",{\"1\":{\"601\":1}}],[\"beans\",{\"1\":{\"570\":4,\"579\":3,\"601\":4,\"615\":3,\"1025\":1,\"1475\":1}}],[\"bean加载控制\",{\"0\":{\"559\":1}}],[\"beanpostprocessor后置处理器⭐️\",{\"1\":{\"163\":1}}],[\"beanpostprocessor前置处理器\",{\"1\":{\"163\":1}}],[\"bean的生命周期控制\",{\"0\":{\"593\":1}}],[\"bean的生命周期\",{\"0\":{\"592\":1,\"596\":1}}],[\"bean的实例化\",{\"0\":{\"587\":1}}],[\"bean的依赖注入\",{\"1\":{\"163\":1}}],[\"bean的作用域有哪些\",{\"0\":{\"159\":1}}],[\"bean\",{\"0\":{\"590\":1},\"1\":{\"92\":2,\"103\":1,\"113\":1,\"158\":11,\"159\":15,\"163\":2,\"544\":2,\"570\":6,\"582\":1,\"615\":5}}],[\"bis\",{\"1\":{\"1007\":2,\"1412\":2}}],[\"biconsumer<string\",{\"1\":{\"908\":1,\"1313\":1}}],[\"biconsumer\",{\"1\":{\"908\":1,\"1313\":1}}],[\"bigdecimal的对象如何获取\",{\"1\":{\"775\":1,\"1180\":1}}],[\"bigdecimal的作用是什么\",{\"1\":{\"775\":1,\"1180\":1}}],[\"bigdecimal一定是要精度运算的\",{\"1\":{\"774\":1,\"1179\":1}}],[\"bigdecimal只是一个手段\",{\"1\":{\"774\":1,\"1179\":1}}],[\"bigdecimal内重写了tostring方法\",{\"1\":{\"774\":1,\"1179\":1}}],[\"bigdecimal常用api\",{\"0\":{\"774\":1,\"1179\":1}}],[\"bigdecimal作用\",{\"0\":{\"771\":1,\"1176\":1}}],[\"bigdecimal\",{\"0\":{\"770\":1,\"1175\":1},\"1\":{\"772\":1,\"773\":8,\"774\":25,\"775\":2,\"846\":1,\"1177\":1,\"1178\":8,\"1179\":25,\"1180\":2,\"1251\":1}}],[\"binarysearch\",{\"1\":{\"793\":2,\"794\":4,\"1198\":2,\"1199\":4}}],[\"bind\",{\"1\":{\"557\":2,\"570\":1,\"573\":2,\"579\":4}}],[\"bin内\",{\"1\":{\"389\":1}}],[\"bin中的程序\",{\"1\":{\"386\":1}}],[\"bin\",{\"1\":{\"353\":4,\"354\":3,\"375\":3,\"377\":2,\"378\":3,\"386\":1,\"389\":5,\"392\":7,\"395\":4,\"402\":1,\"428\":3,\"485\":2,\"496\":10}}],[\"bin文件夹加入path环境变量中\",{\"1\":{\"353\":1}}],[\"binlog\",{\"1\":{\"155\":3}}],[\"bilibili\",{\"1\":{\"281\":1,\"855\":1,\"888\":1,\"1260\":1,\"1293\":1}}],[\"bitmap转换\",{\"1\":{\"220\":1}}],[\"b\",{\"0\":{\"401\":1},\"1\":{\"188\":1,\"280\":3,\"369\":1,\"435\":1,\"491\":2,\"637\":3,\"652\":1,\"743\":2,\"750\":2,\"758\":3,\"763\":1,\"767\":2,\"773\":1,\"774\":6,\"775\":1,\"819\":2,\"866\":1,\"891\":1,\"908\":1,\"994\":4,\"995\":3,\"1042\":3,\"1057\":1,\"1148\":2,\"1155\":2,\"1163\":3,\"1168\":1,\"1172\":2,\"1178\":1,\"1179\":6,\"1180\":1,\"1224\":2,\"1271\":1,\"1296\":1,\"1313\":1,\"1399\":4,\"1400\":3}}],[\"b创建成功\",{\"1\":{\"164\":1}}],[\"b通过从通过二级缓存earlysingletonobjects\",{\"1\":{\"164\":1}}],[\"b需要注入a\",{\"1\":{\"164\":1}}],[\"b实例化完成\",{\"1\":{\"164\":1}}],[\"b依赖于a\",{\"1\":{\"164\":1}}],[\"byte\",{\"1\":{\"309\":2,\"315\":2,\"628\":4,\"650\":1,\"651\":1,\"788\":2,\"988\":1,\"994\":1,\"995\":4,\"996\":3,\"997\":3,\"998\":2,\"1000\":2,\"1001\":2,\"1007\":2,\"1033\":4,\"1055\":1,\"1056\":1,\"1193\":2,\"1393\":1,\"1399\":1,\"1400\":4,\"1401\":3,\"1402\":3,\"1403\":2,\"1405\":2,\"1406\":2,\"1412\":2,\"1447\":2,\"1449\":4,\"1450\":4}}],[\"bytes\",{\"1\":{\"309\":4,\"495\":1,\"988\":3,\"996\":2,\"1393\":3,\"1401\":2}}],[\"by或分组group的字段这些\",{\"1\":{\"149\":1}}],[\"by\",{\"1\":{\"148\":1,\"320\":1,\"347\":1,\"350\":3,\"386\":4,\"398\":3,\"402\":2,\"516\":4,\"519\":3,\"522\":1,\"743\":2,\"1148\":2}}],[\"b+tree是在btree的基础上的一种优化\",{\"1\":{\"144\":1}}],[\"b+树更适合区间查询\",{\"1\":{\"144\":1}}],[\"b+树相对于b树的优点\",{\"1\":{\"144\":1}}],[\"b+树\",{\"1\":{\"143\":1}}],[\"ihello\",{\"1\":{\"1024\":4,\"1474\":4}}],[\"i表示input\",{\"1\":{\"989\":1,\"1394\":1}}],[\"icbc\",{\"1\":{\"939\":1,\"1344\":1}}],[\"i<arr\",{\"1\":{\"873\":1,\"1278\":1}}],[\"i>=0\",{\"1\":{\"751\":1,\"1156\":1}}],[\"i3\",{\"1\":{\"647\":1,\"1052\":1}}],[\"i3=0x10\",{\"1\":{\"647\":1,\"1052\":1}}],[\"i2\",{\"1\":{\"647\":1,\"1052\":1}}],[\"i2=010\",{\"1\":{\"647\":1,\"1052\":1}}],[\"i=10\",{\"1\":{\"647\":1,\"1052\":1}}],[\"i++\",{\"1\":{\"615\":1,\"678\":1,\"679\":1,\"743\":2,\"750\":1,\"751\":2,\"758\":1,\"769\":1,\"794\":1,\"818\":1,\"873\":1,\"897\":1,\"908\":2,\"914\":2,\"918\":2,\"920\":4,\"921\":1,\"924\":2,\"925\":1,\"948\":1,\"1083\":1,\"1084\":1,\"1148\":2,\"1155\":1,\"1156\":2,\"1163\":1,\"1174\":1,\"1199\":1,\"1223\":1,\"1278\":1,\"1302\":1,\"1313\":2,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":1,\"1329\":2,\"1330\":1,\"1353\":1}}],[\"i被当作了一个命令\",{\"1\":{\"432\":1}}],[\"isreachable\",{\"1\":{\"1433\":2}}],[\"isequal\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"isempty\",{\"1\":{\"842\":2,\"904\":2,\"1247\":2,\"1309\":2}}],[\"isfile\",{\"1\":{\"966\":2,\"981\":1,\"1371\":2,\"1386\":1}}],[\"isdirectory\",{\"1\":{\"965\":1,\"966\":2,\"981\":1,\"1370\":1,\"1371\":2,\"1386\":1}}],[\"istack\",{\"1\":{\"842\":1,\"1247\":1}}],[\"isalphabetic\",{\"1\":{\"819\":1,\"1224\":1}}],[\"islatin\",{\"1\":{\"819\":1,\"1224\":1}}],[\"islowercase\",{\"1\":{\"819\":1,\"1224\":1}}],[\"ismirrored\",{\"1\":{\"819\":1,\"1224\":1}}],[\"iswhitespace\",{\"1\":{\"819\":1,\"1224\":1}}],[\"isuppercase\",{\"1\":{\"819\":1,\"1224\":1}}],[\"isnull\",{\"0\":{\"759\":1,\"1164\":1},\"1\":{\"759\":2,\"794\":1,\"1164\":2,\"1199\":1}}],[\"is==true\",{\"1\":{\"649\":1,\"1054\":1}}],[\"is\",{\"1\":{\"386\":10,\"404\":1,\"557\":1,\"638\":1,\"649\":1,\"743\":5,\"758\":3,\"831\":2,\"1007\":3,\"1012\":1,\"1043\":1,\"1054\":1,\"1148\":5,\"1163\":3,\"1236\":2,\"1412\":3,\"1417\":1,\"1461\":3,\"1464\":3,\"1465\":3}}],[\"iso\",{\"1\":{\"309\":9,\"314\":1}}],[\"isolation\",{\"1\":{\"151\":1,\"536\":1}}],[\"iterator<string>\",{\"1\":{\"844\":1,\"866\":1,\"1249\":1,\"1271\":1}}],[\"iterator\",{\"1\":{\"844\":10,\"845\":1,\"866\":2,\"1249\":10,\"1250\":1,\"1271\":2}}],[\"items=\",{\"1\":{\"323\":1}}],[\"items\",{\"1\":{\"323\":1}}],[\"item=\",{\"1\":{\"280\":1}}],[\"item\",{\"1\":{\"280\":1}}],[\"it\",{\"1\":{\"404\":1,\"496\":4,\"866\":4,\"1271\":4}}],[\"itcast\",{\"1\":{\"387\":2}}],[\"itheima\",{\"1\":{\"387\":3,\"389\":1}}],[\"itheima66^\",{\"1\":{\"358\":1}}],[\"ibatis\",{\"1\":{\"264\":4,\"316\":3,\"544\":1,\"552\":1,\"570\":1,\"613\":1}}],[\"ifconfig\",{\"1\":{\"1430\":1}}],[\"ifcfg\",{\"1\":{\"365\":1}}],[\"if>\",{\"1\":{\"273\":6,\"277\":5,\"323\":2}}],[\"if标签\",{\"1\":{\"273\":1}}],[\"if\",{\"1\":{\"233\":1,\"243\":1,\"273\":1,\"323\":5,\"329\":1,\"386\":1,\"494\":2,\"507\":2,\"513\":1,\"525\":1,\"526\":2,\"629\":2,\"638\":1,\"649\":2,\"688\":1,\"732\":2,\"743\":4,\"751\":4,\"756\":4,\"758\":7,\"794\":4,\"818\":2,\"821\":2,\"831\":7,\"866\":4,\"873\":1,\"888\":2,\"891\":2,\"896\":2,\"897\":3,\"908\":1,\"925\":1,\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":3,\"976\":1,\"978\":1,\"979\":1,\"981\":4,\"1000\":2,\"1020\":2,\"1027\":2,\"1034\":2,\"1043\":1,\"1054\":2,\"1093\":1,\"1137\":2,\"1148\":4,\"1156\":4,\"1161\":4,\"1163\":7,\"1199\":4,\"1223\":2,\"1226\":2,\"1236\":7,\"1271\":4,\"1278\":1,\"1293\":2,\"1296\":2,\"1301\":2,\"1302\":3,\"1313\":1,\"1330\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":3,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":4,\"1405\":2,\"1450\":2,\"1461\":2,\"1464\":2,\"1465\":2,\"1470\":2,\"1477\":2}}],[\"ip3\",{\"1\":{\"1433\":4}}],[\"ip2\",{\"1\":{\"1433\":3}}],[\"ip1\",{\"1\":{\"1433\":4}}],[\"ipconfig\",{\"1\":{\"1430\":1}}],[\"ip常用命令\",{\"0\":{\"1430\":1}}],[\"ipv4和ipv6\",{\"1\":{\"1428\":1}}],[\"iphone13=1\",{\"1\":{\"904\":1,\"906\":1,\"907\":3,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":3,\"1313\":1}}],[\"iphone13\",{\"1\":{\"904\":1,\"906\":1,\"907\":1,\"908\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":1}}],[\"ipage\",{\"1\":{\"544\":1}}],[\"ipaddr=\",{\"1\":{\"365\":1}}],[\"ip地址相当于酒店的地址而端口号相当于酒店的房间\",{\"1\":{\"1434\":1}}],[\"ip地址操作类\",{\"0\":{\"1432\":1}}],[\"ip地址形式\",{\"0\":{\"1429\":1}}],[\"ip地址\",{\"0\":{\"1426\":1,\"1428\":1},\"1\":{\"501\":1,\"1427\":1,\"1430\":1}}],[\"iptables\",{\"1\":{\"496\":1}}],[\"ip\",{\"1\":{\"172\":1,\"240\":2,\"362\":1,\"403\":1,\"495\":1,\"1428\":1,\"1432\":1,\"1449\":1}}],[\"impl\",{\"1\":{\"544\":1,\"552\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"implied\",{\"1\":{\"386\":4}}],[\"implements\",{\"0\":{\"591\":1},\"1\":{\"199\":2,\"295\":2,\"338\":1,\"570\":1,\"579\":3,\"615\":1,\"629\":2,\"715\":3,\"721\":1,\"875\":2,\"891\":1,\"896\":2,\"918\":1,\"921\":1,\"948\":1,\"1009\":1,\"1034\":2,\"1120\":3,\"1126\":1,\"1280\":2,\"1296\":1,\"1301\":2,\"1323\":1,\"1326\":1,\"1353\":1,\"1414\":1,\"1465\":1,\"1466\":1}}],[\"import\",{\"1\":{\"199\":7,\"226\":3,\"229\":3,\"231\":6,\"233\":4,\"240\":8,\"245\":13,\"259\":1,\"264\":7,\"299\":6,\"307\":7,\"308\":8,\"309\":1,\"310\":12,\"313\":13,\"314\":7,\"315\":9,\"316\":4,\"329\":14,\"333\":14,\"338\":3,\"346\":1,\"349\":1,\"358\":3,\"362\":1,\"402\":1,\"544\":4,\"557\":8,\"562\":3,\"570\":52,\"573\":4,\"579\":32,\"610\":1,\"613\":3,\"615\":35,\"628\":1,\"629\":9,\"635\":6,\"636\":4,\"641\":7,\"663\":1,\"664\":1,\"672\":1,\"678\":1,\"679\":1,\"708\":1,\"743\":2,\"747\":1,\"749\":1,\"750\":1,\"751\":5,\"756\":1,\"759\":1,\"774\":2,\"776\":1,\"781\":5,\"784\":2,\"786\":3,\"793\":5,\"794\":3,\"804\":2,\"806\":2,\"808\":5,\"812\":2,\"814\":2,\"816\":4,\"821\":3,\"822\":2,\"823\":3,\"824\":3,\"839\":4,\"840\":3,\"842\":4,\"844\":4,\"845\":3,\"846\":4,\"847\":2,\"861\":2,\"865\":1,\"866\":4,\"871\":1,\"878\":1,\"881\":3,\"887\":1,\"888\":3,\"891\":4,\"893\":1,\"896\":4,\"897\":4,\"903\":3,\"904\":1,\"906\":4,\"907\":3,\"908\":7,\"909\":3,\"921\":2,\"939\":2,\"948\":1,\"949\":1,\"951\":3,\"954\":2,\"956\":5,\"965\":1,\"966\":2,\"969\":2,\"971\":1,\"981\":1,\"988\":1,\"994\":3,\"995\":3,\"996\":3,\"997\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":2,\"1004\":2,\"1007\":1,\"1008\":6,\"1009\":5,\"1011\":2,\"1012\":4,\"1014\":5,\"1019\":2,\"1020\":3,\"1021\":2,\"1022\":3,\"1023\":3,\"1033\":1,\"1034\":9,\"1040\":6,\"1041\":4,\"1046\":7,\"1068\":1,\"1069\":1,\"1077\":1,\"1083\":1,\"1084\":1,\"1113\":1,\"1148\":2,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":5,\"1161\":1,\"1164\":1,\"1179\":2,\"1181\":1,\"1186\":5,\"1189\":2,\"1191\":3,\"1198\":5,\"1199\":3,\"1209\":2,\"1211\":2,\"1213\":5,\"1217\":2,\"1219\":2,\"1221\":4,\"1226\":3,\"1227\":2,\"1228\":3,\"1229\":3,\"1244\":4,\"1245\":3,\"1247\":4,\"1249\":4,\"1250\":3,\"1251\":4,\"1252\":2,\"1266\":2,\"1270\":1,\"1271\":4,\"1276\":1,\"1283\":1,\"1286\":3,\"1292\":1,\"1293\":3,\"1296\":4,\"1298\":1,\"1301\":4,\"1302\":4,\"1308\":3,\"1309\":1,\"1311\":4,\"1312\":3,\"1313\":7,\"1314\":3,\"1326\":2,\"1344\":2,\"1353\":1,\"1354\":1,\"1356\":3,\"1359\":2,\"1361\":5,\"1370\":1,\"1371\":2,\"1374\":2,\"1376\":1,\"1386\":1,\"1393\":1,\"1399\":3,\"1400\":3,\"1401\":3,\"1402\":4,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":2,\"1409\":2,\"1412\":1,\"1413\":6,\"1414\":5,\"1416\":2,\"1417\":4,\"1419\":5,\"1433\":1,\"1449\":5,\"1450\":6,\"1458\":4,\"1461\":9,\"1464\":14,\"1465\":11,\"1466\":15,\"1469\":2,\"1470\":3,\"1471\":2,\"1472\":3,\"1473\":3}}],[\"import注解导入对应的配置选择器\",{\"1\":{\"168\":1}}],[\"img\",{\"1\":{\"166\":1,\"315\":1,\"430\":1,\"643\":1,\"1014\":1,\"1048\":1,\"1419\":1}}],[\"images\",{\"1\":{\"494\":2,\"496\":25}}],[\"image\",{\"1\":{\"93\":1,\"128\":1,\"141\":1,\"142\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"150\":7,\"152\":2,\"156\":5,\"164\":1,\"169\":3,\"188\":1,\"190\":1,\"195\":1,\"204\":1,\"213\":1,\"217\":3,\"225\":1,\"233\":1,\"248\":1,\"250\":1,\"255\":1,\"262\":2,\"266\":2,\"268\":2,\"270\":1,\"273\":1,\"276\":2,\"287\":2,\"288\":1,\"292\":3,\"293\":2,\"296\":1,\"299\":1,\"303\":1,\"309\":1,\"310\":1,\"311\":1,\"313\":2,\"328\":1,\"334\":1,\"335\":1,\"337\":1,\"338\":1,\"339\":1,\"340\":3,\"341\":2,\"346\":2,\"347\":2,\"350\":1,\"353\":2,\"354\":2,\"356\":1,\"358\":1,\"362\":1,\"365\":10,\"377\":1,\"382\":1,\"427\":1,\"440\":3,\"441\":1,\"443\":1,\"470\":1,\"478\":1,\"481\":2,\"482\":1,\"484\":1,\"494\":5,\"498\":1,\"499\":1,\"503\":2,\"505\":1,\"507\":1,\"511\":1,\"512\":1,\"517\":1,\"518\":1,\"519\":1,\"526\":1,\"528\":1,\"529\":5,\"531\":2,\"533\":1,\"539\":1,\"543\":1,\"544\":4,\"546\":1,\"551\":1,\"552\":1,\"558\":1,\"561\":1,\"576\":1,\"578\":1,\"581\":1,\"585\":1,\"586\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"594\":1,\"595\":1,\"596\":2,\"598\":2,\"599\":2,\"600\":2,\"602\":2,\"603\":6,\"605\":2,\"606\":2,\"607\":2,\"608\":4,\"609\":2,\"610\":2,\"611\":1,\"612\":2,\"614\":1,\"615\":33,\"616\":7,\"617\":1,\"619\":1,\"621\":1,\"628\":2,\"629\":6,\"632\":2,\"633\":1,\"638\":2,\"641\":3,\"663\":1,\"664\":1,\"676\":1,\"677\":1,\"690\":1,\"692\":1,\"702\":1,\"743\":2,\"764\":1,\"786\":5,\"793\":2,\"794\":2,\"804\":1,\"818\":1,\"821\":1,\"823\":1,\"824\":2,\"828\":1,\"829\":17,\"833\":1,\"835\":1,\"836\":1,\"844\":1,\"850\":1,\"851\":1,\"852\":1,\"853\":2,\"854\":1,\"855\":2,\"858\":3,\"880\":1,\"888\":4,\"889\":1,\"891\":2,\"901\":3,\"910\":1,\"912\":1,\"917\":1,\"918\":1,\"919\":1,\"921\":1,\"936\":1,\"938\":1,\"939\":3,\"940\":1,\"942\":1,\"948\":1,\"952\":1,\"956\":1,\"960\":1,\"963\":3,\"991\":2,\"993\":1,\"997\":1,\"998\":2,\"1001\":2,\"1002\":2,\"1004\":2,\"1006\":2,\"1007\":1,\"1008\":3,\"1009\":4,\"1011\":3,\"1012\":2,\"1018\":1,\"1020\":1,\"1022\":1,\"1023\":2,\"1033\":2,\"1034\":6,\"1037\":2,\"1038\":1,\"1043\":2,\"1046\":3,\"1068\":1,\"1069\":1,\"1081\":1,\"1082\":1,\"1095\":1,\"1097\":1,\"1107\":1,\"1148\":2,\"1169\":1,\"1191\":5,\"1198\":2,\"1199\":2,\"1209\":1,\"1223\":1,\"1226\":1,\"1228\":1,\"1229\":2,\"1233\":1,\"1234\":17,\"1238\":1,\"1240\":1,\"1241\":1,\"1249\":1,\"1255\":1,\"1256\":1,\"1257\":1,\"1258\":2,\"1259\":1,\"1260\":2,\"1263\":3,\"1285\":1,\"1293\":4,\"1294\":1,\"1296\":2,\"1306\":3,\"1315\":1,\"1317\":1,\"1322\":1,\"1323\":1,\"1324\":1,\"1326\":1,\"1341\":1,\"1343\":1,\"1344\":3,\"1345\":1,\"1347\":1,\"1353\":1,\"1357\":1,\"1361\":1,\"1365\":1,\"1368\":3,\"1396\":2,\"1398\":1,\"1402\":1,\"1403\":2,\"1406\":2,\"1407\":2,\"1409\":2,\"1411\":2,\"1412\":1,\"1413\":3,\"1414\":4,\"1416\":3,\"1417\":2,\"1424\":2,\"1427\":1,\"1428\":4,\"1434\":1,\"1441\":1,\"1442\":1,\"1466\":1,\"1468\":1,\"1470\":1,\"1472\":1,\"1473\":2}}],[\"idmsux\",{\"1\":{\"819\":2,\"1224\":2}}],[\"idmsuxu\",{\"1\":{\"819\":2,\"1224\":2}}],[\"id生成策略全局配置\",{\"0\":{\"550\":1}}],[\"id生成策略控制\",{\"0\":{\"549\":1}}],[\"id命令查看用户信息\",{\"1\":{\"464\":1}}],[\"identity\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"identified\",{\"1\":{\"347\":1,\"350\":3,\"398\":3,\"402\":2}}],[\"idea自动生成\",{\"1\":{\"756\":1,\"1161\":1}}],[\"idea工具会自动生成创建\",{\"1\":{\"701\":1,\"1106\":1}}],[\"idea中使用tomcat\",{\"0\":{\"293\":1}}],[\"idea中创建maven\",{\"0\":{\"292\":1}}],[\"idea配置maven\",{\"0\":{\"255\":1}}],[\"idea\",{\"1\":{\"92\":1,\"320\":1,\"743\":1,\"1148\":1}}],[\"idl\",{\"1\":{\"285\":1}}],[\"ids\",{\"1\":{\"280\":6}}],[\"id>\",{\"1\":{\"251\":1}}],[\"id=3\",{\"1\":{\"377\":1}}],[\"id=2\",{\"1\":{\"377\":1}}],[\"id=1\",{\"1\":{\"377\":1}}],[\"id=\",{\"1\":{\"244\":1,\"264\":3,\"267\":2,\"270\":5,\"271\":1,\"272\":1,\"273\":3,\"274\":2,\"275\":1,\"276\":1,\"277\":1,\"279\":1,\"280\":1,\"601\":1}}],[\"id\",{\"0\":{\"464\":1},\"1\":{\"148\":4,\"154\":1,\"226\":1,\"229\":1,\"231\":2,\"240\":3,\"243\":2,\"244\":9,\"245\":9,\"264\":10,\"270\":5,\"271\":6,\"276\":2,\"277\":4,\"279\":4,\"280\":4,\"281\":1,\"283\":2,\"323\":1,\"334\":1,\"369\":3,\"481\":2,\"494\":2,\"510\":1,\"511\":1,\"514\":6,\"525\":1,\"526\":12,\"529\":17,\"531\":6,\"552\":2,\"570\":25,\"579\":2,\"613\":9,\"615\":7,\"629\":5,\"751\":5,\"875\":6,\"888\":1,\"1034\":5,\"1156\":5,\"1280\":6,\"1293\":1}}],[\"i\",{\"1\":{\"139\":1,\"182\":1,\"187\":5,\"190\":6,\"211\":4,\"280\":4,\"320\":2,\"432\":1,\"436\":4,\"615\":2,\"647\":1,\"654\":1,\"678\":2,\"679\":2,\"743\":7,\"750\":3,\"751\":14,\"758\":3,\"769\":2,\"794\":6,\"818\":3,\"819\":1,\"866\":4,\"873\":3,\"897\":6,\"908\":5,\"914\":6,\"918\":6,\"920\":12,\"921\":3,\"924\":4,\"925\":3,\"948\":2,\"1052\":1,\"1059\":1,\"1083\":2,\"1084\":2,\"1148\":7,\"1155\":3,\"1156\":14,\"1163\":3,\"1174\":2,\"1199\":6,\"1223\":3,\"1224\":1,\"1271\":4,\"1278\":3,\"1302\":6,\"1313\":5,\"1319\":6,\"1323\":6,\"1325\":12,\"1326\":3,\"1329\":4,\"1330\":3,\"1353\":2}}],[\"inetaddressdemo1\",{\"1\":{\"1433\":1}}],[\"inetaddress\",{\"0\":{\"1432\":1,\"1433\":1},\"1\":{\"1433\":10,\"1447\":1,\"1449\":3,\"1450\":3}}],[\"ingreek\",{\"1\":{\"819\":2,\"1224\":2}}],[\"inaddr\",{\"1\":{\"812\":1,\"1217\":1}}],[\"invoke\",{\"1\":{\"629\":6,\"812\":3,\"813\":1,\"814\":1,\"1034\":6,\"1217\":3,\"1218\":1,\"1219\":1}}],[\"invocationhandler\",{\"1\":{\"629\":6,\"1025\":1,\"1034\":6,\"1475\":1}}],[\"inversion\",{\"0\":{\"582\":1}}],[\"invalidate\",{\"1\":{\"335\":1}}],[\"inner\",{\"0\":{\"531\":1},\"1\":{\"531\":2,\"544\":1}}],[\"innodb存储引擎使用的就是b+树实现索引的\",{\"1\":{\"144\":1}}],[\"injection\",{\"0\":{\"583\":1}}],[\"inject\",{\"1\":{\"496\":1}}],[\"input\",{\"1\":{\"495\":1}}],[\"inputstreamreader\",{\"1\":{\"1461\":2,\"1464\":3,\"1465\":2}}],[\"inputstream\",{\"1\":{\"264\":4,\"272\":3,\"275\":3,\"277\":3,\"279\":3,\"280\":3,\"316\":4,\"628\":11,\"635\":7,\"636\":3,\"994\":2,\"995\":2,\"996\":2,\"998\":1,\"1000\":1,\"1001\":1,\"1007\":3,\"1033\":11,\"1040\":7,\"1041\":3,\"1399\":2,\"1400\":2,\"1401\":2,\"1403\":1,\"1405\":1,\"1406\":1,\"1412\":3,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":2}}],[\"ini\",{\"1\":{\"412\":3}}],[\"ini文件中全局表示注释\",{\"1\":{\"411\":1}}],[\"ini配置文件中指定\",{\"1\":{\"410\":1}}],[\"initargs\",{\"1\":{\"806\":1,\"807\":1,\"1211\":1,\"1212\":1}}],[\"initlimit=5\",{\"1\":{\"375\":1}}],[\"init\",{\"0\":{\"594\":1},\"1\":{\"298\":1,\"338\":1}}],[\"initialdelay\",{\"1\":{\"955\":1,\"1360\":1}}],[\"initial\",{\"1\":{\"240\":1,\"362\":1,\"402\":1}}],[\"initialsize=5\",{\"1\":{\"240\":1}}],[\"initialsize\",{\"1\":{\"240\":1}}],[\"in\",{\"1\":{\"280\":2,\"386\":12,\"533\":1,\"743\":1,\"751\":1,\"1148\":1,\"1156\":1,\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"include\",{\"1\":{\"495\":1}}],[\"include>\",{\"1\":{\"270\":1}}],[\"increments\",{\"1\":{\"831\":1,\"1236\":1}}],[\"increment\",{\"1\":{\"243\":1,\"494\":2,\"525\":2,\"526\":2,\"529\":5}}],[\"inspect\",{\"1\":{\"496\":4}}],[\"inspact\",{\"1\":{\"496\":1}}],[\"instant\",{\"1\":{\"785\":1,\"1190\":1}}],[\"instanceofdemo\",{\"1\":{\"732\":4,\"1137\":4}}],[\"instanceof\",{\"1\":{\"732\":5,\"756\":1,\"758\":1,\"1137\":5,\"1161\":1,\"1163\":1}}],[\"instance\",{\"1\":{\"258\":1,\"264\":1,\"413\":3,\"557\":1,\"570\":1,\"601\":1,\"615\":1,\"686\":1,\"688\":5,\"1091\":1,\"1093\":5}}],[\"installed\",{\"1\":{\"358\":1}}],[\"install\",{\"1\":{\"98\":1,\"103\":1,\"253\":1,\"254\":1,\"346\":1,\"349\":1,\"356\":2,\"358\":1,\"360\":2,\"362\":1,\"398\":1,\"401\":2,\"409\":1,\"473\":2,\"488\":1,\"496\":7}}],[\"insert插入\",{\"1\":{\"763\":1,\"1168\":1}}],[\"insert>\",{\"1\":{\"275\":1,\"276\":1}}],[\"insert\",{\"1\":{\"243\":1,\"245\":1,\"275\":1,\"276\":1,\"283\":1,\"326\":2,\"431\":1,\"433\":1,\"436\":5,\"514\":6,\"525\":4,\"526\":2,\"570\":2,\"613\":2,\"763\":1,\"1168\":1}}],[\"int是4个字节\",{\"1\":{\"994\":1,\"1399\":1}}],[\"intellij\",{\"1\":{\"320\":1,\"743\":1,\"1148\":1}}],[\"integer\\u0012⠤���8\\u0002�\\u0001i�\\u0005valuexr�\\u0010java\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"integers\",{\"1\":{\"840\":3,\"1245\":3}}],[\"integer>>\",{\"1\":{\"822\":1,\"907\":2,\"1021\":1,\"1227\":1,\"1312\":2,\"1471\":1}}],[\"integer>\",{\"1\":{\"822\":1,\"903\":2,\"904\":4,\"906\":2,\"907\":2,\"908\":3,\"909\":1,\"1021\":1,\"1029\":4,\"1227\":1,\"1308\":2,\"1309\":4,\"1311\":2,\"1312\":2,\"1313\":3,\"1314\":1,\"1471\":1,\"1479\":4}}],[\"integer\",{\"1\":{\"244\":3,\"264\":4,\"272\":1,\"280\":5,\"552\":1,\"570\":9,\"571\":13,\"579\":1,\"613\":2,\"615\":5,\"749\":1,\"788\":2,\"790\":3,\"793\":3,\"831\":1,\"873\":2,\"891\":1,\"904\":2,\"907\":1,\"908\":2,\"1009\":5,\"1019\":5,\"1029\":2,\"1154\":1,\"1193\":2,\"1195\":3,\"1198\":3,\"1236\":1,\"1278\":2,\"1296\":1,\"1309\":2,\"1312\":1,\"1313\":2,\"1414\":5,\"1469\":5,\"1479\":2}}],[\"internal\",{\"1\":{\"842\":1,\"1247\":1}}],[\"interceptorregistry\",{\"1\":{\"579\":5}}],[\"interceptor\",{\"1\":{\"579\":4}}],[\"interval\",{\"1\":{\"494\":1}}],[\"interview\",{\"1\":{\"170\":1}}],[\"intermediate\",{\"1\":{\"386\":2}}],[\"interruptedexception\",{\"1\":{\"199\":1,\"205\":2,\"629\":3,\"948\":1,\"949\":1,\"956\":1,\"1034\":3,\"1353\":1,\"1354\":1,\"1361\":1}}],[\"interfacetest\",{\"1\":{\"714\":1,\"715\":1,\"721\":1,\"1119\":1,\"1120\":1,\"1126\":1}}],[\"interface\",{\"1\":{\"97\":2,\"570\":2,\"613\":1,\"615\":2,\"629\":2,\"713\":1,\"714\":1,\"721\":1,\"738\":1,\"874\":1,\"875\":6,\"1018\":1,\"1024\":2,\"1034\":2,\"1118\":1,\"1119\":1,\"1126\":1,\"1143\":1,\"1279\":1,\"1280\":6,\"1468\":1,\"1474\":2}}],[\"into\",{\"1\":{\"243\":1,\"245\":1,\"275\":1,\"276\":1,\"514\":4,\"525\":4,\"526\":2,\"570\":1,\"613\":1}}],[\"int占用的内存大小是4个字节\",{\"1\":{\"182\":1}}],[\"int\",{\"1\":{\"182\":1,\"187\":4,\"219\":2,\"226\":1,\"229\":1,\"230\":1,\"231\":1,\"240\":4,\"243\":3,\"244\":9,\"245\":12,\"272\":1,\"275\":2,\"277\":4,\"279\":2,\"280\":4,\"281\":1,\"312\":1,\"315\":1,\"320\":1,\"331\":1,\"494\":2,\"510\":1,\"511\":1,\"525\":1,\"526\":4,\"529\":10,\"615\":1,\"628\":8,\"629\":2,\"637\":3,\"638\":1,\"647\":3,\"650\":1,\"652\":3,\"654\":5,\"660\":4,\"672\":3,\"678\":3,\"679\":3,\"743\":7,\"747\":1,\"750\":6,\"751\":7,\"755\":4,\"756\":5,\"758\":2,\"763\":1,\"767\":6,\"769\":2,\"784\":9,\"786\":3,\"788\":1,\"790\":2,\"793\":12,\"794\":11,\"804\":6,\"806\":2,\"808\":3,\"816\":8,\"818\":1,\"831\":7,\"842\":1,\"861\":4,\"866\":1,\"873\":1,\"875\":6,\"886\":1,\"888\":5,\"891\":7,\"893\":3,\"896\":6,\"897\":6,\"904\":1,\"908\":2,\"914\":2,\"918\":2,\"920\":4,\"921\":4,\"924\":2,\"925\":1,\"944\":2,\"948\":3,\"949\":2,\"951\":3,\"952\":2,\"955\":1,\"976\":2,\"978\":2,\"979\":2,\"994\":7,\"995\":6,\"996\":2,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":1,\"1007\":1,\"1008\":1,\"1019\":1,\"1026\":2,\"1027\":1,\"1033\":8,\"1034\":2,\"1042\":3,\"1043\":1,\"1052\":3,\"1055\":1,\"1057\":3,\"1059\":5,\"1065\":4,\"1077\":3,\"1083\":3,\"1084\":3,\"1148\":7,\"1152\":1,\"1155\":6,\"1156\":7,\"1160\":4,\"1161\":5,\"1163\":2,\"1168\":1,\"1172\":6,\"1174\":2,\"1189\":9,\"1191\":3,\"1193\":1,\"1195\":2,\"1198\":12,\"1199\":11,\"1209\":6,\"1211\":2,\"1213\":3,\"1221\":8,\"1223\":1,\"1236\":7,\"1247\":1,\"1266\":4,\"1271\":1,\"1278\":1,\"1280\":6,\"1291\":1,\"1293\":5,\"1296\":7,\"1298\":3,\"1301\":6,\"1302\":6,\"1309\":1,\"1313\":2,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":4,\"1329\":2,\"1330\":1,\"1349\":2,\"1353\":3,\"1354\":2,\"1356\":3,\"1357\":2,\"1360\":1,\"1381\":2,\"1383\":2,\"1384\":2,\"1399\":7,\"1400\":6,\"1401\":2,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1412\":1,\"1413\":1,\"1433\":1,\"1447\":3,\"1448\":1,\"1449\":5,\"1450\":4,\"1457\":1,\"1458\":1,\"1460\":1,\"1461\":1,\"1464\":1,\"1465\":1,\"1469\":1,\"1476\":2,\"1477\":1}}],[\"index++\",{\"1\":{\"897\":1,\"1302\":1}}],[\"index\",{\"1\":{\"142\":2,\"143\":1,\"187\":4,\"261\":1,\"495\":9,\"678\":2,\"679\":2,\"743\":1,\"747\":1,\"750\":3,\"793\":2,\"861\":4,\"897\":10,\"1083\":2,\"1084\":2,\"1148\":1,\"1152\":1,\"1155\":3,\"1198\":2,\"1266\":4,\"1302\":10}}],[\"infos\",{\"1\":{\"908\":6,\"1313\":6}}],[\"information\",{\"1\":{\"476\":1}}],[\"info\",{\"1\":{\"264\":1,\"389\":1,\"495\":1,\"496\":1,\"641\":3,\"1046\":3}}],[\"inf\",{\"1\":{\"103\":1,\"168\":1,\"228\":1}}],[\"iodemo1\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"io3\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"io工具包提供了很多io操作的类\",{\"1\":{\"1013\":1,\"1418\":1}}],[\"io是apache开源基金组织提供的一组有关io操作的类库\",{\"1\":{\"1013\":1,\"1418\":1}}],[\"io2\",{\"1\":{\"1007\":1,\"1008\":2,\"1412\":1,\"1413\":2}}],[\"io流分为字节流\",{\"1\":{\"990\":1,\"1395\":1}}],[\"io流分为输入流和输出流\",{\"1\":{\"990\":1,\"1395\":1}}],[\"io流的分类\",{\"0\":{\"990\":1,\"1395\":1}}],[\"io流概述\",{\"0\":{\"989\":1,\"1394\":1}}],[\"io流写文件自动创建\",{\"1\":{\"969\":1,\"1374\":1}}],[\"io流技术可以对硬盘中的文件进行读写\",{\"1\":{\"965\":1,\"1370\":1}}],[\"ioutils\",{\"1\":{\"315\":2,\"1013\":1,\"1014\":2,\"1418\":1,\"1419\":2}}],[\"ioutils工具类使用\",{\"1\":{\"315\":1}}],[\"ioutlis\",{\"1\":{\"315\":1}}],[\"io<\",{\"1\":{\"315\":2}}],[\"io依赖坐标\",{\"1\":{\"315\":1}}],[\"ioexception\",{\"1\":{\"275\":2,\"277\":2,\"279\":1,\"280\":1,\"295\":1,\"299\":3,\"307\":3,\"308\":3,\"309\":1,\"310\":6,\"313\":6,\"314\":3,\"315\":3,\"329\":6,\"333\":6,\"338\":2,\"969\":2,\"1000\":2,\"1374\":2,\"1405\":2,\"1458\":1,\"1464\":1,\"1466\":4}}],[\"io密集型任务\",{\"1\":{\"220\":1}}],[\"ioc容器负责对象的创建\",{\"1\":{\"582\":1}}],[\"ioc\",{\"0\":{\"582\":1},\"1\":{\"92\":1,\"158\":1,\"159\":1}}],[\"io\",{\"0\":{\"1013\":1,\"1418\":1,\"1491\":1,\"1497\":1},\"1\":{\"92\":1,\"112\":3,\"139\":6,\"240\":1,\"245\":1,\"264\":2,\"299\":1,\"307\":2,\"308\":1,\"310\":2,\"313\":3,\"314\":2,\"315\":3,\"316\":2,\"329\":2,\"333\":2,\"338\":1,\"358\":10,\"496\":3,\"635\":3,\"636\":2,\"816\":2,\"965\":2,\"966\":1,\"969\":2,\"971\":1,\"981\":1,\"994\":4,\"995\":3,\"996\":4,\"997\":3,\"998\":2,\"1000\":2,\"1001\":2,\"1002\":3,\"1003\":3,\"1004\":3,\"1007\":1,\"1008\":6,\"1009\":5,\"1011\":2,\"1012\":2,\"1013\":1,\"1014\":5,\"1025\":1,\"1040\":3,\"1041\":2,\"1221\":2,\"1370\":2,\"1371\":1,\"1374\":2,\"1376\":1,\"1386\":1,\"1399\":4,\"1400\":3,\"1401\":4,\"1402\":3,\"1403\":2,\"1405\":2,\"1406\":2,\"1407\":3,\"1408\":3,\"1409\":3,\"1412\":1,\"1413\":6,\"1414\":5,\"1416\":2,\"1417\":2,\"1418\":1,\"1419\":5,\"1458\":3,\"1461\":5,\"1464\":9,\"1465\":5,\"1466\":9,\"1475\":1}}],[\"gbk字符中一个中文字符占2个字节\",{\"1\":{\"987\":1,\"1392\":1}}],[\"gbk是中国的码表\",{\"1\":{\"985\":1,\"1390\":1}}],[\"gbk\",{\"0\":{\"985\":1,\"1390\":1}}],[\"given\",{\"1\":{\"758\":1,\"1163\":1}}],[\"gitee2\",{\"1\":{\"1014\":2,\"1419\":2}}],[\"gitee\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"gitconfig\",{\"1\":{\"460\":1}}],[\"github\",{\"1\":{\"358\":4,\"361\":1,\"496\":1}}],[\"git\",{\"1\":{\"92\":1}}],[\"gamedemo\",{\"1\":{\"897\":1,\"1302\":1}}],[\"games\",{\"1\":{\"897\":2,\"1302\":2}}],[\"game\",{\"1\":{\"726\":1,\"878\":1,\"1131\":1,\"1283\":1}}],[\"gatewaymysqlmybatis\",{\"1\":{\"95\":1}}],[\"gateway\",{\"0\":{\"96\":1,\"102\":1},\"1\":{\"92\":1,\"95\":2,\"96\":2,\"97\":2,\"108\":1,\"171\":1}}],[\"g表示group用户组的权限\",{\"1\":{\"465\":1}}],[\"g=rwx\",{\"1\":{\"465\":2}}],[\"gg\",{\"1\":{\"435\":1}}],[\"g\",{\"1\":{\"435\":5,\"440\":1,\"819\":1,\"1224\":1}}],[\"go\",{\"1\":{\"721\":1,\"738\":6,\"878\":4,\"1018\":4,\"1126\":1,\"1143\":6,\"1283\":4,\"1468\":4}}],[\"goods\",{\"1\":{\"529\":8}}],[\"google\",{\"1\":{\"413\":2}}],[\"governing\",{\"1\":{\"386\":4}}],[\"gf\",{\"1\":{\"413\":5}}],[\"gzip\",{\"1\":{\"495\":1}}],[\"gzip模式\",{\"1\":{\"490\":1}}],[\"gz到指定\",{\"1\":{\"490\":1}}],[\"gz文件中\",{\"1\":{\"490\":1}}],[\"gz\",{\"1\":{\"353\":2,\"354\":3,\"375\":2,\"386\":2,\"389\":2,\"402\":1,\"490\":3}}],[\"grow\",{\"1\":{\"831\":3,\"1236\":3}}],[\"group查看系统全部组信息\",{\"1\":{\"464\":1}}],[\"group\",{\"0\":{\"464\":1},\"1\":{\"496\":1,\"516\":2,\"522\":1}}],[\"groupdel\",{\"1\":{\"463\":1}}],[\"groupadd\",{\"1\":{\"463\":1}}],[\"groupadd和groupdel\",{\"0\":{\"463\":1}}],[\"groupid>\",{\"1\":{\"258\":4,\"259\":1,\"264\":8,\"293\":1,\"295\":1,\"315\":1,\"318\":1,\"323\":2,\"494\":1,\"544\":1,\"557\":4,\"566\":1,\"570\":13,\"615\":11}}],[\"groupid\",{\"1\":{\"256\":1,\"258\":1}}],[\"groups\",{\"1\":{\"251\":1}}],[\"graph\",{\"1\":{\"819\":2,\"1224\":2}}],[\"grafana\",{\"1\":{\"409\":7,\"410\":2,\"412\":2,\"414\":1,\"415\":2}}],[\"grafana都是部署在linux服务器之上\",{\"1\":{\"409\":1}}],[\"grafana支持使用sqlite3postgresqlmysql这三种数据库作为其元数据的存储\",{\"1\":{\"414\":1}}],[\"grafana支持常见的绝大多数操作系统\",{\"1\":{\"409\":1}}],[\"grafana支持两种部署形式\",{\"1\":{\"408\":1}}],[\"grafana官方托管\",{\"1\":{\"408\":1}}],[\"grant\",{\"1\":{\"398\":1,\"402\":2}}],[\"grep\",{\"0\":{\"454\":1},\"1\":{\"347\":2,\"350\":2,\"354\":1,\"398\":1,\"454\":1,\"456\":3,\"496\":11}}],[\"gpgcheck=0\",{\"1\":{\"358\":3}}],[\"gpgcheck=1\",{\"1\":{\"356\":2,\"358\":5,\"362\":1,\"409\":2}}],[\"gpgkey\",{\"1\":{\"358\":6}}],[\"gpgkey=https\",{\"1\":{\"356\":2,\"358\":4,\"362\":1,\"409\":1}}],[\"gpg\",{\"1\":{\"346\":1,\"349\":1,\"362\":2,\"409\":1}}],[\"genericdemo\",{\"1\":{\"878\":1,\"1283\":1}}],[\"genericity\",{\"1\":{\"814\":1,\"871\":2,\"873\":1,\"875\":5,\"1219\":1,\"1276\":2,\"1278\":1,\"1280\":5}}],[\"general\",{\"1\":{\"414\":1,\"494\":1}}],[\"gender=男\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"gender=\",{\"1\":{\"264\":1,\"755\":1,\"756\":1,\"816\":2,\"1009\":1,\"1160\":1,\"1161\":1,\"1221\":2,\"1414\":1}}],[\"gender\",{\"1\":{\"264\":9,\"511\":1,\"529\":1,\"531\":1,\"662\":2,\"664\":2,\"755\":9,\"756\":16,\"816\":18,\"1009\":9,\"1067\":2,\"1069\":2,\"1160\":9,\"1161\":16,\"1221\":18,\"1414\":9}}],[\"getlength\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"getlocalhost\",{\"1\":{\"1433\":2,\"1449\":1,\"1450\":1}}],[\"getlast\",{\"1\":{\"865\":1,\"1270\":1}}],[\"getkey\",{\"1\":{\"907\":1,\"1312\":1}}],[\"getfirst\",{\"1\":{\"865\":3,\"1270\":3}}],[\"getfield\",{\"1\":{\"808\":1,\"1213\":1}}],[\"getfields\",{\"1\":{\"808\":1,\"1213\":1}}],[\"getyear\",{\"1\":{\"786\":2,\"1191\":2}}],[\"gethostaddress\",{\"1\":{\"1433\":4}}],[\"gethostname\",{\"1\":{\"1433\":4}}],[\"gethobbies\",{\"1\":{\"672\":1,\"1077\":1}}],[\"getheight\",{\"1\":{\"793\":3,\"1198\":3}}],[\"getheader\",{\"1\":{\"307\":3}}],[\"gettype\",{\"1\":{\"808\":2,\"1213\":2}}],[\"gettimeinmillis\",{\"1\":{\"784\":2,\"1189\":2}}],[\"gettime\",{\"1\":{\"776\":3,\"777\":1,\"781\":2,\"784\":2,\"1181\":3,\"1182\":1,\"1186\":2,\"1189\":2}}],[\"getter方法\",{\"1\":{\"672\":1,\"1077\":1}}],[\"getter\",{\"1\":{\"660\":1,\"1065\":1}}],[\"gettotal\",{\"1\":{\"544\":1}}],[\"getport\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"getproperty\",{\"1\":{\"1012\":1,\"1417\":1}}],[\"getproxy\",{\"1\":{\"629\":5,\"1034\":5}}],[\"getprice\",{\"1\":{\"641\":1,\"1046\":1}}],[\"getpath\",{\"1\":{\"966\":2,\"1371\":2}}],[\"getpages\",{\"1\":{\"544\":1}}],[\"getparametercount\",{\"1\":{\"804\":2,\"812\":1,\"1209\":2,\"1217\":1}}],[\"getparameter\",{\"1\":{\"308\":3,\"309\":1}}],[\"getparametervalues\",{\"1\":{\"308\":2}}],[\"getparametermap\",{\"1\":{\"308\":2}}],[\"getpassword\",{\"1\":{\"264\":1}}],[\"getdayofyear\",{\"1\":{\"786\":1,\"1191\":1}}],[\"getdata\",{\"1\":{\"571\":1}}],[\"getdeclaredmethod\",{\"1\":{\"812\":3,\"813\":1,\"814\":1,\"1217\":3,\"1218\":1,\"1219\":1}}],[\"getdeclaredmethods\",{\"1\":{\"810\":2,\"812\":2,\"813\":1,\"814\":1,\"1215\":2,\"1217\":2,\"1218\":1,\"1219\":1}}],[\"getdeclaredfield\",{\"1\":{\"808\":4,\"809\":1,\"1213\":4,\"1214\":1}}],[\"getdeclaredfields\",{\"1\":{\"808\":3,\"809\":1,\"816\":1,\"1213\":3,\"1214\":1,\"1221\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"804\":5,\"806\":4,\"807\":1,\"808\":1,\"1209\":5,\"1211\":4,\"1212\":1,\"1213\":1}}],[\"getdeclaredconstructors\",{\"1\":{\"804\":4,\"807\":1,\"1209\":4,\"1212\":1}}],[\"getdeclaringtypename\",{\"1\":{\"615\":1}}],[\"getdescription\",{\"1\":{\"244\":1}}],[\"getrootconfigclasses\",{\"1\":{\"562\":1,\"570\":1,\"579\":1}}],[\"getremotesocketaddress\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"getreturntype\",{\"1\":{\"812\":1,\"1217\":1}}],[\"getrecords\",{\"1\":{\"544\":1}}],[\"getrequestdispatcher\",{\"1\":{\"310\":2,\"322\":1}}],[\"getrequesturi\",{\"1\":{\"307\":3}}],[\"getrequesturl\",{\"1\":{\"307\":3}}],[\"getreader\",{\"1\":{\"307\":3,\"308\":1}}],[\"getresourceasstream\",{\"1\":{\"264\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"316\":1}}],[\"getent\",{\"0\":{\"464\":1},\"1\":{\"464\":2}}],[\"getvalue\",{\"1\":{\"329\":2,\"907\":1,\"1026\":2,\"1312\":1,\"1476\":2}}],[\"getoutputstream\",{\"1\":{\"312\":1,\"315\":2,\"1458\":2,\"1461\":1,\"1464\":1,\"1465\":1,\"1466\":2}}],[\"getordered\",{\"1\":{\"244\":1}}],[\"getwriter\",{\"1\":{\"312\":1,\"313\":1,\"314\":2}}],[\"getcardid\",{\"1\":{\"930\":1,\"939\":2,\"1335\":1,\"1344\":2}}],[\"getclassname\",{\"1\":{\"751\":1,\"1156\":1}}],[\"getclassloader\",{\"1\":{\"629\":3,\"1034\":3}}],[\"getclass\",{\"1\":{\"629\":6,\"756\":2,\"802\":2,\"803\":1,\"814\":5,\"816\":1,\"888\":2,\"891\":2,\"896\":2,\"1029\":1,\"1034\":6,\"1161\":2,\"1207\":2,\"1208\":1,\"1219\":5,\"1221\":1,\"1293\":2,\"1296\":2,\"1301\":2,\"1479\":1}}],[\"getcurrent\",{\"1\":{\"544\":1}}],[\"getchinese\",{\"1\":{\"309\":2}}],[\"getcolor\",{\"1\":{\"897\":1,\"1302\":1}}],[\"getcode\",{\"1\":{\"571\":1,\"573\":2}}],[\"getcookies\",{\"1\":{\"329\":2}}],[\"getconstructor\",{\"1\":{\"804\":4,\"1209\":4}}],[\"getconstructors\",{\"1\":{\"804\":5,\"1209\":5}}],[\"getcontextpath\",{\"1\":{\"307\":3,\"313\":2}}],[\"getconnection\",{\"1\":{\"226\":1,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"237\":1,\"240\":1,\"245\":1}}],[\"getcompanyname\",{\"1\":{\"244\":1}}],[\"get方式\",{\"1\":{\"307\":2,\"308\":1,\"309\":1}}],[\"getquerystring\",{\"1\":{\"307\":3,\"308\":1,\"309\":1}}],[\"getmoney\",{\"1\":{\"930\":1,\"939\":2,\"1335\":1,\"1344\":2}}],[\"getmonthvalue\",{\"1\":{\"786\":1,\"1191\":1}}],[\"getmail\",{\"1\":{\"672\":1,\"1077\":1}}],[\"getmapping\",{\"1\":{\"570\":2,\"579\":3}}],[\"getmapper\",{\"1\":{\"265\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1}}],[\"getmessage\",{\"1\":{\"573\":3}}],[\"getmethods\",{\"1\":{\"810\":1,\"1215\":1}}],[\"getmethod\",{\"1\":{\"307\":3,\"308\":1,\"810\":1,\"1215\":1}}],[\"getmsg\",{\"1\":{\"571\":1}}],[\"getsocketaddress\",{\"1\":{\"1449\":1}}],[\"getsalary\",{\"1\":{\"816\":1,\"1221\":1}}],[\"getscore\",{\"1\":{\"751\":1,\"1156\":1}}],[\"getsimplename\",{\"1\":{\"816\":2,\"1221\":2}}],[\"getsid\",{\"1\":{\"751\":2,\"1156\":2}}],[\"getsignature\",{\"1\":{\"615\":1}}],[\"getsize\",{\"1\":{\"544\":1,\"897\":1,\"1302\":1}}],[\"getsex\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"getsession\",{\"1\":{\"333\":3}}],[\"getservletfilters\",{\"1\":{\"562\":1,\"570\":1,\"579\":1}}],[\"getservletmappings\",{\"1\":{\"557\":1,\"562\":1,\"570\":1,\"579\":1}}],[\"getservletinfo\",{\"1\":{\"298\":1}}],[\"getservletconfigclasses\",{\"1\":{\"562\":1,\"570\":1,\"579\":1}}],[\"getservletconfig\",{\"1\":{\"298\":1}}],[\"getsqlsessionfactory\",{\"1\":{\"316\":1}}],[\"getstudentbyid\",{\"1\":{\"751\":2,\"1156\":2}}],[\"getstatus\",{\"1\":{\"244\":1}}],[\"getstring\",{\"1\":{\"231\":2,\"240\":2,\"245\":3}}],[\"getabsolutepath\",{\"1\":{\"966\":2,\"971\":1,\"981\":1,\"1371\":2,\"1376\":1,\"1386\":1}}],[\"getarray\",{\"1\":{\"873\":3,\"1278\":3}}],[\"getactor\",{\"1\":{\"751\":1,\"1156\":1}}],[\"getage\",{\"1\":{\"660\":1,\"672\":1,\"751\":1,\"755\":1,\"756\":1,\"793\":3,\"804\":1,\"816\":2,\"888\":1,\"891\":4,\"896\":1,\"1009\":1,\"1027\":1,\"1065\":1,\"1077\":1,\"1156\":1,\"1160\":1,\"1161\":1,\"1198\":3,\"1209\":1,\"1221\":2,\"1293\":1,\"1296\":4,\"1301\":1,\"1414\":1,\"1477\":1}}],[\"getattribute\",{\"1\":{\"310\":2,\"333\":2}}],[\"getaddress\",{\"1\":{\"1450\":1}}],[\"getaddr\",{\"1\":{\"264\":1}}],[\"getall\",{\"1\":{\"245\":2,\"270\":3,\"570\":7,\"579\":1,\"613\":1}}],[\"getgender\",{\"1\":{\"264\":1,\"755\":1,\"756\":1,\"816\":2,\"1009\":1,\"1160\":1,\"1161\":1,\"1221\":2,\"1414\":1}}],[\"getusername\",{\"1\":{\"264\":1}}],[\"getbyname\",{\"1\":{\"1433\":3}}],[\"getbytes\",{\"1\":{\"309\":4,\"988\":1,\"997\":5,\"1393\":1,\"1402\":5,\"1449\":1,\"1450\":1}}],[\"getbyid\",{\"1\":{\"271\":1,\"570\":7,\"579\":1,\"613\":1,\"875\":3,\"1280\":3}}],[\"getbrandname\",{\"1\":{\"244\":1}}],[\"getbean\",{\"1\":{\"159\":1}}],[\"getindex\",{\"1\":{\"897\":3,\"1302\":3}}],[\"getinstance\",{\"1\":{\"688\":1,\"784\":1,\"1093\":1,\"1189\":1}}],[\"getinputstream\",{\"1\":{\"307\":2,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"getinterfaces\",{\"1\":{\"629\":3,\"1034\":3}}],[\"getint\",{\"1\":{\"231\":1,\"240\":1,\"245\":3}}],[\"getid\",{\"1\":{\"244\":1,\"264\":1}}],[\"get\",{\"1\":{\"199\":1,\"200\":1,\"221\":1,\"222\":1,\"299\":1,\"307\":4,\"308\":1,\"309\":2,\"349\":1,\"360\":1,\"389\":1,\"496\":1,\"571\":2,\"750\":3,\"751\":3,\"784\":4,\"808\":1,\"809\":1,\"816\":1,\"861\":2,\"866\":1,\"897\":1,\"904\":4,\"906\":1,\"908\":1,\"921\":2,\"949\":5,\"1026\":3,\"1155\":3,\"1156\":3,\"1189\":4,\"1213\":1,\"1214\":1,\"1221\":1,\"1266\":2,\"1271\":1,\"1302\":1,\"1309\":4,\"1311\":1,\"1313\":1,\"1326\":2,\"1354\":5,\"1476\":3}}],[\"getname\",{\"1\":{\"199\":3,\"329\":3,\"615\":1,\"629\":2,\"641\":3,\"660\":1,\"672\":1,\"709\":1,\"751\":2,\"755\":1,\"756\":1,\"793\":1,\"804\":3,\"808\":2,\"812\":2,\"816\":3,\"888\":1,\"891\":1,\"896\":1,\"924\":5,\"926\":1,\"930\":1,\"937\":1,\"939\":3,\"948\":2,\"954\":1,\"956\":2,\"965\":1,\"966\":2,\"981\":1,\"1009\":1,\"1027\":2,\"1034\":2,\"1046\":3,\"1065\":1,\"1077\":1,\"1114\":1,\"1156\":2,\"1160\":1,\"1161\":1,\"1198\":1,\"1209\":3,\"1213\":2,\"1217\":2,\"1221\":3,\"1293\":1,\"1296\":1,\"1301\":1,\"1329\":5,\"1331\":1,\"1335\":1,\"1342\":1,\"1344\":3,\"1353\":2,\"1359\":1,\"1361\":2,\"1370\":1,\"1371\":2,\"1386\":1,\"1414\":1,\"1477\":2}}],[\"gc\",{\"1\":{\"222\":1,\"435\":2}}],[\"gson转换等\",{\"1\":{\"220\":1}}],[\"global\",{\"1\":{\"159\":1,\"350\":2,\"398\":2,\"552\":1}}],[\"d6\",{\"1\":{\"814\":1,\"1219\":1}}],[\"d3\",{\"1\":{\"804\":2,\"806\":3,\"1209\":2,\"1211\":3}}],[\"d357af\",{\"1\":{\"553\":1}}],[\"d2\",{\"1\":{\"802\":3,\"1207\":3}}],[\"d2oop\",{\"1\":{\"707\":8,\"1112\":8}}],[\"d8\",{\"1\":{\"794\":2,\"1199\":2}}],[\"d7\",{\"1\":{\"793\":2,\"816\":4,\"1198\":2,\"1221\":4}}],[\"dp\",{\"1\":{\"714\":1,\"715\":2,\"721\":1,\"1119\":1,\"1120\":2,\"1126\":1,\"1449\":1}}],[\"d=c+1\",{\"1\":{\"652\":1,\"1057\":1}}],[\"d5\",{\"1\":{\"629\":5,\"707\":8,\"812\":2,\"1034\":5,\"1112\":8,\"1217\":2}}],[\"d4\",{\"1\":{\"629\":4,\"808\":2,\"1034\":4,\"1213\":2,\"1466\":3}}],[\"dcl\",{\"1\":{\"505\":1}}],[\"dql\",{\"0\":{\"515\":1},\"1\":{\"505\":1}}],[\"d后台启动服务\",{\"1\":{\"494\":1}}],[\"dskiptests\",{\"1\":{\"494\":1}}],[\"d指定要解压到的位置\",{\"1\":{\"492\":1}}],[\"df\",{\"0\":{\"482\":1},\"1\":{\"482\":1}}],[\"dfs\",{\"1\":{\"386\":4}}],[\"d是目录文件\",{\"1\":{\"441\":1}}],[\"d02e998ad8f9\",{\"1\":{\"496\":3}}],[\"d0\",{\"1\":{\"435\":1}}],[\"d$\",{\"1\":{\"435\":1}}],[\"dg\",{\"1\":{\"435\":1}}],[\"ddl\",{\"0\":{\"506\":1,\"507\":1,\"508\":1},\"1\":{\"505\":1}}],[\"ddl语句执行成功后\",{\"1\":{\"230\":1}}],[\"ddl语句\",{\"1\":{\"230\":1}}],[\"dd\",{\"1\":{\"435\":1,\"635\":3,\"636\":1,\"781\":1,\"966\":1,\"1040\":3,\"1041\":1,\"1186\":1,\"1371\":1}}],[\"dm\",{\"1\":{\"819\":1,\"1224\":1}}],[\"dmapred\",{\"1\":{\"387\":1}}],[\"dml语句影响的行数\",{\"1\":{\"230\":1}}],[\"dml\",{\"0\":{\"514\":1},\"1\":{\"155\":1,\"505\":1}}],[\"dnf\",{\"1\":{\"496\":1}}],[\"dn\",{\"1\":{\"386\":3}}],[\"dn<\",{\"1\":{\"386\":1}}],[\"digit\",{\"1\":{\"819\":2,\"1224\":2}}],[\"divide\",{\"1\":{\"774\":5,\"1179\":5}}],[\"div\",{\"1\":{\"637\":2,\"1042\":2}}],[\"di\",{\"0\":{\"583\":1}}],[\"directory\",{\"1\":{\"443\":1,\"445\":1}}],[\"dir=\",{\"1\":{\"392\":2}}],[\"dir=$hadoop\",{\"1\":{\"386\":8}}],[\"dirs<\",{\"1\":{\"386\":2}}],[\"dirs=\",{\"1\":{\"377\":3}}],[\"dir<\",{\"1\":{\"386\":5}}],[\"dir\",{\"1\":{\"386\":1,\"412\":2,\"981\":5,\"1386\":5}}],[\"distinct\",{\"1\":{\"517\":2}}],[\"distribution=centos\",{\"1\":{\"399\":1}}],[\"distributed<\",{\"1\":{\"389\":1}}],[\"distributed\",{\"1\":{\"386\":8}}],[\"dist\",{\"1\":{\"375\":1,\"377\":1,\"386\":1,\"389\":1,\"392\":1,\"395\":1}}],[\"disabled\",{\"1\":{\"386\":1}}],[\"disable\",{\"1\":{\"354\":1,\"356\":2,\"358\":2,\"360\":2,\"362\":2,\"371\":1,\"386\":2,\"389\":1}}],[\"dispaterservlet\",{\"1\":{\"166\":1}}],[\"dispatcherservlet\",{\"1\":{\"166\":2,\"167\":2}}],[\"dispatcherservlet拦截请求\",{\"1\":{\"166\":1}}],[\"discardoldestpolicy和callerrunspolicy\",{\"1\":{\"112\":1}}],[\"discardpolicy\",{\"1\":{\"112\":1}}],[\"d内\",{\"1\":{\"356\":1}}],[\"dlcdn\",{\"1\":{\"354\":2}}],[\"dogs\",{\"1\":{\"878\":5,\"1283\":5}}],[\"dogclass\",{\"1\":{\"812\":5,\"1217\":5}}],[\"dog\",{\"0\":{\"731\":3,\"1136\":3},\"1\":{\"709\":1,\"726\":1,\"730\":3,\"732\":7,\"812\":10,\"878\":4,\"1114\":1,\"1131\":1,\"1135\":3,\"1137\":7,\"1217\":10,\"1283\":4}}],[\"doget\",{\"1\":{\"299\":1,\"307\":2,\"308\":3,\"309\":1,\"310\":4,\"313\":4,\"314\":2,\"315\":2,\"329\":4,\"333\":4}}],[\"doexception\",{\"1\":{\"573\":1}}],[\"dosystemexception\",{\"1\":{\"573\":1}}],[\"dobusinessexception\",{\"1\":{\"573\":1}}],[\"doublevalue\",{\"1\":{\"774\":1,\"1179\":1}}],[\"double\",{\"1\":{\"511\":1,\"525\":2,\"529\":2,\"615\":1,\"641\":3,\"650\":1,\"652\":1,\"662\":1,\"751\":4,\"767\":8,\"771\":1,\"772\":1,\"773\":2,\"774\":4,\"788\":2,\"790\":1,\"793\":5,\"816\":4,\"840\":1,\"845\":2,\"891\":1,\"930\":5,\"937\":1,\"939\":11,\"1046\":3,\"1055\":1,\"1057\":1,\"1067\":1,\"1156\":4,\"1172\":8,\"1176\":1,\"1177\":1,\"1178\":2,\"1179\":4,\"1193\":2,\"1195\":1,\"1198\":5,\"1221\":4,\"1245\":1,\"1250\":2,\"1296\":1,\"1335\":5,\"1342\":1,\"1344\":11}}],[\"down\",{\"1\":{\"433\":1,\"435\":1}}],[\"download\",{\"1\":{\"358\":4,\"399\":1,\"409\":1,\"496\":7}}],[\"downloads\",{\"1\":{\"353\":1,\"500\":1,\"965\":1,\"1370\":1}}],[\"done<\",{\"1\":{\"386\":1}}],[\"done\",{\"1\":{\"386\":2}}],[\"dofilter\",{\"1\":{\"338\":2}}],[\"do或者localhost\",{\"1\":{\"302\":1}}],[\"do\",{\"1\":{\"302\":2}}],[\"dopost\",{\"1\":{\"299\":1,\"307\":1,\"308\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"329\":2,\"333\":2}}],[\"documentation\",{\"1\":{\"400\":1,\"402\":1}}],[\"doctype\",{\"1\":{\"264\":2,\"267\":1,\"270\":1,\"829\":1,\"1234\":1}}],[\"docs\",{\"1\":{\"100\":1}}],[\"doc\",{\"1\":{\"100\":1,\"402\":1}}],[\"dockerls\",{\"1\":{\"496\":1}}],[\"docker上使用nginx部署前端的配资\",{\"1\":{\"496\":1}}],[\"docker部署有兴趣的同学\",{\"1\":{\"409\":1}}],[\"dockerfile的编写构建springboot服务镜像\",{\"1\":{\"496\":1}}],[\"dockerfile\",{\"0\":{\"119\":1},\"1\":{\"92\":1,\"119\":1,\"496\":1}}],[\"docker\",{\"0\":{\"119\":1},\"1\":{\"92\":3,\"119\":3,\"495\":1,\"496\":244}}],[\"dynamic\",{\"1\":{\"273\":1}}],[\"dtd\",{\"1\":{\"264\":6,\"267\":3,\"270\":3,\"829\":1,\"1234\":1}}],[\"d\",{\"0\":{\"403\":1,\"731\":2,\"1136\":2},\"1\":{\"264\":1,\"280\":1,\"347\":1,\"350\":1,\"356\":1,\"358\":1,\"362\":1,\"404\":1,\"409\":1,\"435\":1,\"476\":3,\"492\":2,\"495\":1,\"496\":23,\"635\":6,\"636\":2,\"652\":2,\"730\":2,\"777\":2,\"782\":1,\"818\":2,\"819\":5,\"866\":1,\"908\":1,\"995\":4,\"1040\":6,\"1041\":2,\"1057\":2,\"1135\":2,\"1182\":2,\"1187\":1,\"1223\":2,\"1224\":5,\"1271\":1,\"1313\":1,\"1400\":4}}],[\"d1ooparraylist\",{\"1\":{\"663\":1,\"664\":1,\"1068\":1,\"1069\":1}}],[\"d11\",{\"1\":{\"654\":1,\"1059\":1}}],[\"d1g\",{\"1\":{\"435\":1}}],[\"d1\",{\"1\":{\"240\":1}}],[\"drawthread\",{\"1\":{\"930\":4,\"939\":4,\"1335\":4,\"1344\":4}}],[\"drawmoney\",{\"1\":{\"930\":2,\"937\":1,\"939\":3,\"1335\":2,\"1342\":1,\"1344\":3}}],[\"drwx\",{\"1\":{\"460\":2}}],[\"drwxr\",{\"0\":{\"441\":1},\"1\":{\"441\":1,\"460\":4}}],[\"drop\",{\"1\":{\"243\":1,\"507\":1,\"512\":1,\"513\":2,\"525\":1,\"526\":3}}],[\"drui会连接到数据库执行该sql\",{\"1\":{\"240\":1}}],[\"druiddatasource\",{\"1\":{\"570\":3,\"615\":9}}],[\"druiddatasourcefactory\",{\"1\":{\"240\":2,\"245\":2}}],[\"druiddemo1\",{\"1\":{\"240\":1}}],[\"druid将强制回收该连接\",{\"1\":{\"240\":1}}],[\"druid配置详解\",{\"0\":{\"240\":1}}],[\"druid数据库连接池jar包\",{\"1\":{\"258\":1,\"264\":1}}],[\"druid数据库连接池演示\",{\"1\":{\"240\":1}}],[\"druid数据库连接池\",{\"0\":{\"238\":1}}],[\"druid连接池是阿里巴巴开源的数据库连接池项目\",{\"1\":{\"237\":1}}],[\"druid\",{\"1\":{\"237\":2,\"239\":1,\"240\":5,\"245\":2,\"570\":1,\"615\":1}}],[\"drive\",{\"1\":{\"226\":1}}],[\"driver=com\",{\"1\":{\"570\":1}}],[\"driverclassname=com\",{\"1\":{\"240\":1}}],[\"driver文件中的驱动类\",{\"1\":{\"228\":1}}],[\"drivermanager工具类\",{\"0\":{\"228\":1}}],[\"drivermanager\",{\"1\":{\"226\":2,\"228\":2,\"229\":2,\"231\":2,\"233\":2}}],[\"driver\",{\"1\":{\"226\":4,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"264\":2,\"267\":4,\"494\":2,\"570\":4,\"615\":3}}],[\"db1\",{\"1\":{\"526\":2,\"627\":1}}],[\"dbaec7422f0c\",{\"1\":{\"496\":1}}],[\"db\",{\"1\":{\"494\":2,\"552\":1,\"570\":1}}],[\"dbhost=mysql\",{\"1\":{\"403\":1}}],[\"dbpassword=password\",{\"1\":{\"403\":1}}],[\"db=mysql\",{\"1\":{\"399\":1}}],[\"dbname\",{\"1\":{\"240\":1}}],[\"db2\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"234\":1,\"240\":1}}],[\"db2驱动\",{\"1\":{\"225\":1}}],[\"db读写\",{\"1\":{\"220\":1}}],[\"dbcp\",{\"1\":{\"237\":1}}],[\"dbc\",{\"1\":{\"118\":1}}],[\"dadada~\",{\"1\":{\"749\":1,\"1154\":1}}],[\"dayofyear\",{\"1\":{\"786\":2,\"1191\":2}}],[\"day\",{\"1\":{\"784\":1,\"1189\":1}}],[\"day07\",{\"1\":{\"1466\":3}}],[\"day05\",{\"1\":{\"1009\":4,\"1012\":2,\"1414\":4,\"1417\":2}}],[\"day06\",{\"1\":{\"939\":4,\"1344\":4}}],[\"day03\",{\"1\":{\"793\":2,\"794\":2,\"1198\":2,\"1199\":2}}],[\"day02\",{\"1\":{\"662\":2,\"663\":2,\"664\":2,\"707\":7,\"1067\":2,\"1068\":2,\"1069\":2,\"1112\":7}}],[\"day01\",{\"1\":{\"654\":1,\"1059\":1}}],[\"day08\",{\"1\":{\"629\":9,\"1034\":9}}],[\"day09\",{\"1\":{\"628\":4,\"641\":12,\"1033\":4,\"1046\":12}}],[\"days\",{\"1\":{\"481\":3}}],[\"daemon\",{\"1\":{\"386\":2,\"415\":1}}],[\"datetimeformatter\",{\"1\":{\"785\":1,\"1190\":1}}],[\"datestr\",{\"1\":{\"781\":3,\"1186\":3}}],[\"dateformat\",{\"1\":{\"781\":3,\"1186\":3}}],[\"date3\",{\"1\":{\"776\":4,\"1181\":4}}],[\"date2\",{\"1\":{\"776\":4,\"1181\":4}}],[\"date1\",{\"1\":{\"776\":3,\"781\":2,\"1181\":3,\"1186\":2}}],[\"datedemo\",{\"1\":{\"776\":1,\"1181\":1}}],[\"date类的对象在java中代表的是当前所在系统的此刻日期时间\",{\"1\":{\"776\":1,\"1181\":1}}],[\"date命令\",{\"0\":{\"476\":1}}],[\"date\",{\"0\":{\"776\":1,\"1181\":1},\"1\":{\"320\":1,\"404\":1,\"476\":6,\"511\":1,\"525\":1,\"635\":8,\"636\":4,\"776\":14,\"777\":6,\"781\":14,\"782\":2,\"784\":3,\"956\":3,\"1040\":8,\"1041\":4,\"1181\":14,\"1182\":6,\"1186\":14,\"1187\":2,\"1189\":3,\"1361\":3}}],[\"datagramsocket的子类multicastsocket可以在接收端绑定组播ip\",{\"1\":{\"1454\":1}}],[\"datagramsocket类成员方法\",{\"0\":{\"1449\":1}}],[\"datagramsocket\",{\"0\":{\"1448\":1},\"1\":{\"1448\":2,\"1449\":8,\"1450\":6}}],[\"datagrampacket\",{\"0\":{\"1447\":1},\"1\":{\"1447\":2,\"1449\":7,\"1450\":7}}],[\"data4\",{\"1\":{\"1011\":2,\"1416\":2}}],[\"data3\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"data1\",{\"1\":{\"996\":1,\"1004\":1,\"1008\":1,\"1401\":1,\"1409\":1,\"1413\":1}}],[\"data2\",{\"1\":{\"969\":1,\"997\":2,\"1002\":1,\"1003\":1,\"1007\":1,\"1008\":1,\"1374\":1,\"1402\":2,\"1407\":1,\"1408\":1,\"1412\":1,\"1413\":1}}],[\"databind<\",{\"1\":{\"566\":1,\"570\":1}}],[\"databind以及在springmvcconfig中开启注解\",{\"1\":{\"566\":1}}],[\"databases\",{\"1\":{\"504\":3,\"507\":1}}],[\"database=star\",{\"1\":{\"494\":1}}],[\"database=0\",{\"1\":{\"494\":1}}],[\"database\",{\"1\":{\"225\":1,\"402\":1,\"414\":1,\"504\":1,\"507\":4}}],[\"data<student>\",{\"1\":{\"875\":1,\"1280\":1}}],[\"data<teacher>\",{\"1\":{\"875\":1,\"1280\":1}}],[\"data<t>\",{\"1\":{\"875\":1,\"1280\":1}}],[\"data<\",{\"1\":{\"389\":1}}],[\"datadir\",{\"1\":{\"496\":12}}],[\"datadir<\",{\"1\":{\"389\":1}}],[\"datadir=\",{\"1\":{\"375\":1}}],[\"datanodes\",{\"1\":{\"386\":1}}],[\"datanode\",{\"1\":{\"382\":3,\"386\":3}}],[\"datanode进程\",{\"1\":{\"381\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"570\":6}}],[\"datasource>\",{\"1\":{\"264\":1,\"267\":2}}],[\"datasource\",{\"1\":{\"237\":1,\"240\":4,\"245\":4,\"494\":7,\"570\":17,\"615\":7}}],[\"data\",{\"1\":{\"110\":1,\"113\":1,\"114\":2,\"375\":5,\"377\":3,\"386\":19,\"402\":1,\"494\":3,\"496\":1,\"570\":2,\"571\":11,\"615\":2,\"794\":4,\"816\":1,\"829\":1,\"965\":1,\"966\":1,\"969\":1,\"994\":1,\"995\":1,\"1199\":4,\"1221\":1,\"1234\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1399\":1,\"1400\":1}}],[\"daocloud\",{\"1\":{\"496\":1}}],[\"dao\",{\"1\":{\"158\":1,\"326\":1,\"570\":4,\"601\":1,\"613\":1,\"615\":2}}],[\"duration\",{\"1\":{\"785\":1,\"1190\":1}}],[\"durability\",{\"1\":{\"151\":1,\"536\":1}}],[\"dubboreference\",{\"1\":{\"107\":1}}],[\"dubboservice\",{\"1\":{\"107\":1}}],[\"dubbo\",{\"0\":{\"96\":1,\"106\":1,\"107\":1},\"1\":{\"92\":1,\"95\":2,\"96\":3,\"106\":8,\"107\":4,\"171\":1}}],[\"def\",{\"1\":{\"819\":1,\"1224\":1}}],[\"defaultcapacity\",{\"1\":{\"831\":2,\"1236\":2}}],[\"defaults\",{\"1\":{\"412\":1,\"494\":1}}],[\"defaultfs<\",{\"1\":{\"386\":1}}],[\"default=\",{\"1\":{\"264\":1,\"267\":1}}],[\"default\",{\"1\":{\"251\":1,\"254\":1,\"395\":1,\"413\":2,\"494\":1,\"495\":2,\"525\":2,\"641\":1,\"721\":1,\"831\":2,\"1027\":1,\"1046\":1,\"1126\":1,\"1236\":2,\"1477\":1}}],[\"defaultthreadfactory\",{\"1\":{\"199\":1,\"948\":3,\"949\":2,\"1353\":3,\"1354\":2,\"1465\":1,\"1466\":1}}],[\"declaredmethod\",{\"1\":{\"812\":4,\"814\":2,\"1217\":4,\"1219\":2}}],[\"declaredmethods\",{\"1\":{\"812\":2,\"814\":2,\"1217\":2,\"1219\":2}}],[\"declaredfield\",{\"1\":{\"808\":3,\"816\":4,\"1213\":3,\"1221\":4}}],[\"declaredfields\",{\"1\":{\"808\":2,\"816\":2,\"1213\":2,\"1221\":2}}],[\"declaredconstructor1\",{\"1\":{\"804\":2,\"1209\":2}}],[\"declaredconstructor\",{\"1\":{\"804\":5,\"808\":3,\"1209\":5,\"1213\":3}}],[\"declaredconstructors\",{\"1\":{\"804\":2,\"1209\":2}}],[\"decompiler\",{\"1\":{\"743\":1,\"1148\":1}}],[\"decoratorpattern\",{\"1\":{\"628\":4,\"1033\":4}}],[\"decode\",{\"1\":{\"331\":1}}],[\"depositthread\",{\"1\":{\"939\":5,\"1344\":5}}],[\"depositmoney\",{\"1\":{\"939\":2,\"1344\":2}}],[\"dep\",{\"1\":{\"526\":7,\"531\":4}}],[\"dept\",{\"1\":{\"526\":10,\"531\":6}}],[\"depends\",{\"1\":{\"494\":1}}],[\"dependency>\",{\"1\":{\"258\":3,\"259\":1,\"264\":7,\"295\":1,\"315\":1,\"318\":1,\"323\":2,\"494\":1,\"544\":1,\"557\":2,\"566\":1,\"570\":11,\"615\":10}}],[\"dependency\",{\"0\":{\"583\":1},\"1\":{\"258\":1,\"358\":1}}],[\"dependencies>\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"dependencies\",{\"1\":{\"258\":2}}],[\"device\",{\"1\":{\"496\":1}}],[\"dev两个文件夹和application\",{\"1\":{\"491\":1}}],[\"dev\",{\"1\":{\"349\":1,\"428\":1,\"491\":1,\"620\":1}}],[\"development\",{\"1\":{\"264\":2,\"267\":2}}],[\"devtools\",{\"1\":{\"251\":1}}],[\"debug\",{\"1\":{\"264\":3,\"280\":7}}],[\"destdir\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"destfile\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"destory\",{\"0\":{\"594\":1}}],[\"destroy\",{\"1\":{\"297\":1,\"298\":1,\"338\":1}}],[\"desc\",{\"1\":{\"509\":1,\"510\":1,\"511\":1,\"519\":2,\"529\":5}}],[\"description>\",{\"1\":{\"386\":21}}],[\"description=\",{\"1\":{\"244\":1}}],[\"description\",{\"1\":{\"243\":2,\"244\":9,\"245\":9,\"270\":2,\"275\":4,\"276\":2,\"277\":6,\"323\":1,\"570\":7,\"613\":6}}],[\"design\",{\"1\":{\"169\":1,\"170\":1}}],[\"delay\",{\"1\":{\"954\":1,\"1359\":1}}],[\"delval\",{\"1\":{\"552\":1}}],[\"delete方法默认只能删除空文件夹\",{\"1\":{\"969\":1,\"1374\":1}}],[\"delete方法直接删除不走回收站\",{\"1\":{\"969\":1,\"1374\":1}}],[\"deletequestion\",{\"1\":{\"866\":1,\"1271\":1}}],[\"deleteresult\",{\"1\":{\"629\":2,\"1034\":2}}],[\"deletemapping\",{\"1\":{\"570\":1}}],[\"deletedirectory\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"deleted\",{\"1\":{\"552\":2}}],[\"delete>\",{\"1\":{\"279\":1,\"280\":1}}],[\"deletebyids\",{\"1\":{\"280\":7}}],[\"deletebyid\",{\"1\":{\"279\":3}}],[\"delete\",{\"1\":{\"245\":1,\"279\":1,\"280\":2,\"283\":1,\"326\":1,\"508\":1,\"514\":2,\"526\":1,\"552\":3,\"570\":8,\"571\":2,\"613\":3,\"615\":3,\"629\":3,\"969\":4,\"971\":1,\"1034\":3,\"1374\":4,\"1376\":1}}],[\"del\",{\"1\":{\"131\":1,\"433\":1,\"435\":1}}],[\"details\",{\"1\":{\"118\":1}}],[\"demo7\",{\"1\":{\"1001\":1,\"1012\":1,\"1406\":1,\"1417\":1}}],[\"demo6\",{\"1\":{\"988\":1,\"1000\":1,\"1012\":1,\"1393\":1,\"1405\":1,\"1417\":1}}],[\"demo5\",{\"1\":{\"981\":1,\"1009\":1,\"1386\":1,\"1414\":1}}],[\"demo4\",{\"1\":{\"979\":1,\"997\":1,\"1009\":1,\"1384\":1,\"1402\":1,\"1414\":1}}],[\"demo01\",{\"1\":{\"763\":1,\"1168\":1}}],[\"demo3\",{\"1\":{\"307\":2,\"921\":1,\"978\":1,\"996\":1,\"1326\":1,\"1383\":1,\"1401\":1}}],[\"demo2\",{\"1\":{\"299\":1,\"302\":1,\"333\":1,\"918\":1,\"920\":1,\"925\":1,\"976\":1,\"995\":1,\"1008\":1,\"1323\":1,\"1325\":1,\"1330\":1,\"1381\":1,\"1400\":1,\"1413\":1}}],[\"demo1\",{\"1\":{\"295\":3,\"302\":1,\"307\":2,\"333\":1,\"873\":1,\"914\":2,\"918\":1,\"920\":1,\"921\":1,\"924\":1,\"930\":1,\"994\":1,\"1007\":1,\"1278\":1,\"1319\":2,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":1,\"1335\":1,\"1399\":1,\"1412\":1}}],[\"demo<\",{\"1\":{\"258\":1,\"264\":1}}],[\"demo\",{\"1\":{\"107\":1,\"297\":1,\"302\":7,\"307\":6,\"322\":2,\"338\":1,\"628\":1,\"629\":5,\"1033\":1,\"1034\":5}}],[\"云原生\",{\"1\":{\"92\":1}}],[\"网络通信协议有两种参考模型\",{\"0\":{\"1437\":1}}],[\"网络通信的三要素\",{\"0\":{\"1425\":1}}],[\"网络体系基本模式\",{\"0\":{\"1424\":1}}],[\"网络\",{\"1\":{\"751\":1,\"1156\":1}}],[\"网络编程可以让程序与网络上的其他设备中的程序进行数据交换\",{\"1\":{\"1423\":1}}],[\"网络编程\",{\"0\":{\"1422\":1},\"1\":{\"747\":1,\"1152\":1}}],[\"网络编程等更高级主题的探索\",{\"1\":{\"49\":1}}],[\"网络请求等\",{\"1\":{\"220\":1}}],[\"网络传输数据时会把所有的用户信息都返回出来\",{\"1\":{\"111\":1}}],[\"网络传输的内容大小就很小\",{\"1\":{\"111\":1}}],[\"网关实现了流量染色技术\",{\"0\":{\"108\":1}}],[\"网关的主要应用场景\",{\"1\":{\"102\":1}}],[\"网关的应用场景\",{\"0\":{\"102\":1}}],[\"网关中\",{\"1\":{\"101\":1}}],[\"网关服务\",{\"1\":{\"97\":1}}],[\"网关这\",{\"1\":{\"95\":1}}],[\"网关\",{\"0\":{\"102\":1},\"1\":{\"92\":1,\"95\":1,\"96\":1,\"97\":1,\"102\":2,\"108\":1,\"171\":1}}],[\"框架中的\",{\"1\":{\"158\":1}}],[\"框架篇\",{\"0\":{\"157\":1}}],[\"框架的优势\",{\"1\":{\"106\":1}}],[\"框架的\",{\"0\":{\"99\":1,\"107\":1}}],[\"框架实现服务间的高性能接口调用\",{\"1\":{\"95\":1}}],[\"框架\",{\"0\":{\"106\":1},\"1\":{\"92\":2,\"96\":1,\"106\":1}}],[\"r>\",{\"1\":{\"1025\":1,\"1029\":1,\"1475\":1,\"1479\":1}}],[\"rs2\",{\"1\":{\"921\":1,\"1326\":1}}],[\"rs1\",{\"1\":{\"921\":1,\"1326\":1}}],[\"rs\",{\"1\":{\"629\":6,\"743\":2,\"774\":2,\"781\":2,\"793\":2,\"812\":2,\"1034\":6,\"1148\":2,\"1179\":2,\"1186\":2,\"1198\":2,\"1217\":2,\"1449\":1,\"1450\":2}}],[\"rsa\",{\"1\":{\"369\":1}}],[\"r用于压缩文件夹\",{\"1\":{\"491\":1}}],[\"r用于删除文件夹\",{\"1\":{\"451\":1}}],[\"r和chmod的\",{\"1\":{\"466\":1}}],[\"r代表4\",{\"1\":{\"465\":1}}],[\"rw\",{\"1\":{\"460\":9}}],[\"rwx\",{\"1\":{\"441\":2}}],[\"r一样\",{\"1\":{\"451\":1,\"466\":1}}],[\"r会一直取代光标所在的文字\",{\"1\":{\"436\":1}}],[\"rf\",{\"1\":{\"418\":1,\"419\":1,\"496\":1}}],[\"rfa\",{\"1\":{\"386\":1}}],[\"right\",{\"0\":{\"532\":1},\"1\":{\"404\":1,\"532\":1,\"794\":4,\"1199\":4}}],[\"rk001\",{\"1\":{\"389\":2}}],[\"r选项用于复制文件夹使用\",{\"1\":{\"373\":1}}],[\"rhel\",{\"1\":{\"360\":1,\"400\":1}}],[\"rap\",{\"1\":{\"743\":1,\"1148\":1}}],[\"rabbitmq已经安装完成了\",{\"1\":{\"358\":1}}],[\"rabbitmqctl\",{\"1\":{\"358\":3}}],[\"rabbitmq使用5672\",{\"1\":{\"358\":1}}],[\"rabbitmq\",{\"1\":{\"358\":42}}],[\"rabbitmq在yum仓库中的版本比较老\",{\"1\":{\"358\":1}}],[\"rabbitmq在企业开发中十分常见\",{\"1\":{\"357\":1}}],[\"rabbitmq一款知名的开源消息队列系统\",{\"1\":{\"357\":1}}],[\"range\",{\"1\":{\"142\":2}}],[\"randomaccess\",{\"1\":{\"187\":1}}],[\"random\",{\"1\":{\"130\":2,\"678\":5,\"679\":5,\"767\":1,\"908\":5,\"1083\":5,\"1084\":5,\"1172\":1,\"1313\":5}}],[\"r\",{\"1\":{\"354\":1,\"373\":6,\"375\":2,\"377\":2,\"386\":2,\"389\":2,\"392\":2,\"395\":2,\"418\":1,\"436\":3,\"437\":1,\"441\":5,\"449\":2,\"451\":1,\"460\":14,\"465\":3,\"466\":2,\"491\":2,\"496\":2,\"819\":5,\"997\":4,\"1025\":1,\"1029\":2,\"1224\":5,\"1402\":4,\"1475\":1,\"1479\":2}}],[\"rm命令支持通配符\",{\"1\":{\"451\":1}}],[\"rm\",{\"0\":{\"451\":1},\"1\":{\"353\":1,\"418\":1,\"419\":1,\"451\":1,\"496\":14}}],[\"rmi\",{\"1\":{\"285\":1,\"496\":3}}],[\"rpm包软件管理器\",{\"1\":{\"473\":1}}],[\"rpm\",{\"1\":{\"346\":4,\"349\":4,\"358\":3,\"362\":1,\"398\":2,\"400\":2,\"409\":1,\"496\":1}}],[\"rpc远程调用框架\",{\"1\":{\"171\":1}}],[\"rpc\",{\"0\":{\"106\":2,\"107\":1},\"1\":{\"92\":1,\"95\":1,\"96\":1,\"106\":3,\"107\":1,\"395\":2}}],[\"roundingmode\",{\"1\":{\"774\":2,\"1179\":2}}],[\"round\",{\"1\":{\"767\":1,\"1172\":1}}],[\"ro\",{\"1\":{\"494\":1,\"495\":2,\"496\":10}}],[\"rollback\",{\"1\":{\"229\":3,\"535\":1}}],[\"root目录\",{\"1\":{\"490\":2,\"492\":1}}],[\"rootdir<\",{\"1\":{\"389\":1}}],[\"root执行\",{\"1\":{\"356\":3,\"358\":3,\"360\":3,\"362\":1}}],[\"root用户是不运行远程登录的\",{\"1\":{\"350\":1}}],[\"root>\",{\"1\":{\"264\":1}}],[\"root\",{\"1\":{\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"264\":1,\"267\":2,\"347\":1,\"350\":3,\"360\":1,\"368\":1,\"373\":1,\"386\":1,\"387\":1,\"398\":7,\"428\":1,\"456\":5,\"458\":3,\"459\":8,\"460\":32,\"466\":3,\"474\":1,\"476\":4,\"485\":5,\"486\":1,\"490\":2,\"492\":1,\"494\":1,\"495\":7,\"496\":18,\"1012\":1,\"1417\":1}}],[\"rocketmqlistener中消费者的模式为单线程即一个队列只对应一个线程来处理消费\",{\"1\":{\"177\":1}}],[\"rocketmq如何保证消息的顺序性\",{\"0\":{\"177\":1}}],[\"run1\",{\"1\":{\"937\":1,\"1342\":1}}],[\"runspeed\",{\"1\":{\"615\":1}}],[\"runwith\",{\"1\":{\"570\":2,\"615\":2}}],[\"runner\",{\"1\":{\"570\":1,\"615\":1}}],[\"running\",{\"1\":{\"404\":1,\"481\":3,\"557\":1,\"948\":1,\"1353\":1}}],[\"runnable\",{\"0\":{\"200\":1},\"1\":{\"199\":2,\"200\":1,\"918\":2,\"920\":3,\"926\":2,\"948\":4,\"955\":1,\"963\":1,\"1025\":1,\"1323\":2,\"1325\":3,\"1331\":2,\"1353\":4,\"1360\":1,\"1368\":1,\"1465\":1,\"1466\":1,\"1475\":1}}],[\"runtime\",{\"1\":{\"259\":1}}],[\"runtimeexception\",{\"1\":{\"162\":1,\"205\":2}}],[\"run\",{\"0\":{\"201\":1,\"202\":1},\"1\":{\"199\":7,\"201\":1,\"202\":1,\"293\":2,\"395\":1,\"494\":2,\"495\":1,\"496\":20,\"615\":1,\"662\":1,\"663\":2,\"737\":1,\"738\":5,\"812\":4,\"914\":1,\"918\":1,\"920\":2,\"924\":1,\"926\":1,\"930\":1,\"937\":1,\"939\":2,\"948\":1,\"954\":1,\"956\":2,\"1067\":1,\"1068\":2,\"1142\":1,\"1143\":5,\"1217\":4,\"1319\":1,\"1323\":1,\"1325\":2,\"1329\":1,\"1331\":1,\"1335\":1,\"1342\":1,\"1344\":2,\"1353\":1,\"1359\":1,\"1361\":2,\"1464\":1,\"1465\":1,\"1466\":2}}],[\"rdb\",{\"1\":{\"128\":3}}],[\"rejectedexecutionexception\",{\"1\":{\"948\":1,\"1353\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"112\":1,\"219\":1,\"944\":1,\"948\":1,\"949\":1,\"1349\":1,\"1353\":1,\"1354\":1}}],[\"reverse\",{\"1\":{\"763\":2,\"1168\":2}}],[\"regex\",{\"1\":{\"743\":1,\"818\":1,\"1148\":1,\"1223\":1}}],[\"registry\",{\"1\":{\"579\":7}}],[\"register\",{\"1\":{\"557\":1}}],[\"regionservers文件\",{\"1\":{\"389\":1}}],[\"receive\",{\"1\":{\"1449\":2,\"1450\":1}}],[\"recently\",{\"1\":{\"115\":1}}],[\"recursiondemo1\",{\"1\":{\"974\":2,\"1379\":2}}],[\"recursion\",{\"1\":{\"972\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"1377\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1}}],[\"recommend2\",{\"1\":{\"773\":1,\"1178\":1}}],[\"recommend1\",{\"1\":{\"773\":1,\"1178\":1}}],[\"recreated\",{\"1\":{\"743\":1,\"1148\":1}}],[\"rename\",{\"1\":{\"512\":1}}],[\"rewrite\",{\"1\":{\"495\":1}}],[\"retrieve\",{\"1\":{\"508\":1}}],[\"retries\",{\"1\":{\"494\":2}}],[\"retain\",{\"1\":{\"386\":2}}],[\"returned\",{\"1\":{\"280\":1}}],[\"return\",{\"1\":{\"199\":1,\"244\":7,\"245\":1,\"264\":6,\"272\":1,\"280\":1,\"281\":1,\"309\":1,\"316\":1,\"544\":1,\"557\":7,\"562\":5,\"570\":24,\"571\":3,\"573\":3,\"579\":7,\"615\":5,\"628\":4,\"629\":11,\"641\":6,\"660\":2,\"672\":5,\"678\":2,\"679\":2,\"688\":1,\"709\":1,\"751\":12,\"755\":4,\"756\":12,\"758\":7,\"793\":7,\"794\":4,\"804\":3,\"812\":2,\"816\":9,\"818\":4,\"823\":2,\"831\":3,\"871\":1,\"873\":1,\"875\":2,\"888\":10,\"891\":14,\"896\":12,\"897\":4,\"921\":2,\"930\":2,\"939\":4,\"951\":1,\"976\":2,\"978\":2,\"979\":2,\"1009\":4,\"1019\":3,\"1022\":2,\"1026\":1,\"1033\":4,\"1034\":11,\"1046\":6,\"1065\":2,\"1077\":5,\"1083\":2,\"1084\":2,\"1093\":1,\"1114\":1,\"1156\":12,\"1160\":4,\"1161\":12,\"1163\":7,\"1198\":7,\"1199\":4,\"1209\":3,\"1217\":2,\"1221\":9,\"1223\":4,\"1228\":2,\"1236\":3,\"1276\":1,\"1278\":1,\"1280\":2,\"1293\":10,\"1296\":14,\"1301\":12,\"1302\":4,\"1326\":2,\"1335\":2,\"1344\":4,\"1356\":1,\"1381\":2,\"1383\":2,\"1384\":2,\"1414\":4,\"1469\":3,\"1472\":2,\"1476\":1}}],[\"represents\",{\"1\":{\"758\":2,\"1163\":2}}],[\"replacement\",{\"1\":{\"743\":1,\"1148\":1}}],[\"replace\",{\"1\":{\"436\":3,\"743\":4,\"1148\":4}}],[\"replication\",{\"1\":{\"378\":1}}],[\"repos\",{\"1\":{\"356\":1,\"358\":1,\"362\":1,\"409\":1}}],[\"repository\",{\"1\":{\"251\":2,\"358\":3,\"360\":1,\"362\":1,\"570\":2}}],[\"repo\",{\"1\":{\"346\":2,\"349\":1,\"356\":4,\"358\":5,\"362\":1,\"398\":1,\"400\":1,\"409\":2,\"496\":4}}],[\"repo<\",{\"1\":{\"251\":1}}],[\"repo1\",{\"1\":{\"250\":1}}],[\"reload\",{\"1\":{\"354\":1,\"356\":1,\"358\":1,\"360\":1,\"415\":1}}],[\"release<\",{\"1\":{\"557\":1,\"570\":3}}],[\"releases\",{\"1\":{\"358\":4,\"496\":4}}],[\"release\",{\"1\":{\"346\":1,\"349\":1,\"358\":4,\"360\":1,\"398\":1,\"400\":1,\"494\":1}}],[\"relay\",{\"1\":{\"155\":1}}],[\"reuqest\",{\"1\":{\"307\":2}}],[\"requires\",{\"1\":{\"616\":2}}],[\"requirepass\",{\"1\":{\"494\":1}}],[\"required\",{\"1\":{\"386\":4}}],[\"requestbody\",{\"1\":{\"570\":2}}],[\"requestmapping\",{\"1\":{\"557\":2,\"570\":1,\"579\":2}}],[\"requests\",{\"1\":{\"495\":1}}],[\"requestdemo4\",{\"1\":{\"310\":1}}],[\"requestdemo3\",{\"1\":{\"310\":1}}],[\"requestdemo1\",{\"1\":{\"308\":1}}],[\"request请求转发\",{\"0\":{\"310\":1}}],[\"request提供的获取参数的通用方法\",{\"1\":{\"308\":1}}],[\"request会判断键是否一样\",{\"1\":{\"308\":1}}],[\"request使用通用方式获取参数\",{\"0\":{\"308\":1}}],[\"requesturi\",{\"1\":{\"307\":2}}],[\"request获取请求数据\",{\"0\":{\"307\":1}}],[\"requestfacade\",{\"1\":{\"306\":1}}],[\"request继承体系\",{\"0\":{\"306\":1}}],[\"request\",{\"0\":{\"304\":1,\"305\":1},\"1\":{\"159\":2,\"299\":2,\"304\":1,\"307\":14,\"308\":1,\"309\":5,\"310\":13,\"322\":4,\"329\":1,\"333\":1,\"338\":2,\"495\":1,\"579\":3}}],[\"req3\",{\"1\":{\"310\":3}}],[\"req4\",{\"1\":{\"310\":5}}],[\"req1\",{\"1\":{\"307\":5,\"308\":1}}],[\"req\",{\"1\":{\"298\":1,\"308\":8,\"313\":8,\"314\":3,\"315\":3,\"329\":7,\"333\":8}}],[\"restcontrolleradvice\",{\"1\":{\"573\":2}}],[\"restcontroller\",{\"1\":{\"570\":1,\"579\":2}}],[\"rest风格\",{\"0\":{\"567\":1}}],[\"restarted\",{\"1\":{\"410\":1}}],[\"restart\",{\"1\":{\"365\":1,\"404\":1,\"494\":3,\"496\":6}}],[\"resp4\",{\"1\":{\"315\":1}}],[\"resp3\",{\"1\":{\"314\":1}}],[\"resp2\",{\"1\":{\"313\":4}}],[\"resp1\",{\"1\":{\"313\":2}}],[\"resp\",{\"1\":{\"308\":3,\"313\":12,\"314\":7,\"315\":4,\"329\":7,\"333\":6}}],[\"responsebody\",{\"1\":{\"557\":2}}],[\"response响应字节数据\",{\"0\":{\"315\":1}}],[\"response响应字符数据\",{\"0\":{\"314\":1}}],[\"responsedemo4\",{\"1\":{\"315\":1}}],[\"responsedemo3\",{\"1\":{\"314\":1}}],[\"responsedemo2\",{\"1\":{\"313\":1}}],[\"responsedemo1\",{\"1\":{\"313\":1}}],[\"response完成重定向\",{\"0\":{\"313\":1}}],[\"response设置响应数据功能介绍\",{\"0\":{\"312\":1}}],[\"responsefacade\",{\"1\":{\"311\":1}}],[\"response继承体系和request继承体系基本一样\",{\"1\":{\"311\":1}}],[\"response\",{\"0\":{\"304\":1,\"311\":1},\"1\":{\"299\":2,\"304\":1,\"307\":3,\"308\":1,\"309\":1,\"310\":8,\"313\":2,\"314\":2,\"315\":2,\"322\":1,\"329\":1,\"338\":2,\"579\":3}}],[\"resp<\",{\"1\":{\"251\":1}}],[\"res\",{\"1\":{\"298\":1,\"481\":2}}],[\"resetting\",{\"1\":{\"280\":1}}],[\"results\",{\"1\":{\"570\":1,\"613\":1}}],[\"resultsetconcurrency\",{\"1\":{\"240\":1}}],[\"resultsettype\",{\"1\":{\"240\":1}}],[\"resultset结果集对象作用\",{\"1\":{\"231\":1}}],[\"resultset结果集对象\",{\"1\":{\"230\":1}}],[\"resultset\",{\"0\":{\"231\":1},\"1\":{\"230\":1,\"231\":7,\"233\":5,\"240\":8,\"245\":10}}],[\"result>\",{\"1\":{\"270\":2}}],[\"result\",{\"1\":{\"270\":1,\"570\":2,\"571\":4,\"573\":6,\"613\":2,\"758\":1,\"1163\":1}}],[\"resultmap=\",{\"1\":{\"270\":1,\"271\":1,\"272\":1,\"273\":3,\"274\":2}}],[\"resultmap>\",{\"1\":{\"270\":1}}],[\"resultmap\",{\"1\":{\"270\":1,\"570\":2,\"613\":2}}],[\"resultmap标签\",{\"0\":{\"270\":1}}],[\"resulttype=\",{\"1\":{\"264\":1,\"270\":2}}],[\"resulttype\",{\"1\":{\"264\":1,\"270\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"579\":2}}],[\"resourcemanager\",{\"1\":{\"382\":1,\"386\":4}}],[\"resourcemanager进程\",{\"1\":{\"381\":1}}],[\"resource\",{\"0\":{\"1001\":1,\"1406\":1},\"1\":{\"264\":2,\"272\":2,\"275\":2,\"277\":2,\"279\":2,\"280\":2,\"316\":2}}],[\"resource=\",{\"1\":{\"264\":1,\"267\":1}}],[\"resources\",{\"1\":{\"103\":1,\"264\":2,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"316\":2,\"494\":1}}],[\"reentrantreadwritelock\",{\"1\":{\"215\":1}}],[\"reentrantlock\",{\"1\":{\"215\":1,\"939\":4,\"1344\":4}}],[\"reentrantlock主要利用cas+aqs队列来实现\",{\"1\":{\"214\":1}}],[\"reentrantlock翻译过来是可重入锁\",{\"1\":{\"214\":1}}],[\"reentrantlock的实现原理\",{\"0\":{\"214\":1}}],[\"removeif\",{\"1\":{\"1027\":1,\"1028\":3,\"1477\":1,\"1478\":3}}],[\"removeif方法里传入了一个predicate断言接口实例\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"removeattribute\",{\"1\":{\"310\":2,\"333\":1}}],[\"removeabandonedtimeout\",{\"1\":{\"240\":1}}],[\"removeabandoned\",{\"1\":{\"240\":1}}],[\"removelast\",{\"1\":{\"187\":1,\"865\":1,\"1270\":1}}],[\"removefirst\",{\"1\":{\"187\":1,\"865\":4,\"1270\":4}}],[\"remove\",{\"1\":{\"184\":1,\"187\":2,\"222\":1,\"245\":1,\"473\":2,\"496\":2,\"750\":6,\"751\":2,\"842\":3,\"861\":2,\"866\":5,\"871\":3,\"875\":3,\"904\":2,\"1155\":6,\"1156\":2,\"1247\":3,\"1266\":2,\"1271\":5,\"1276\":3,\"1280\":3,\"1309\":2}}],[\"remote\",{\"1\":{\"106\":1,\"386\":1}}],[\"readfiletostring\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"readobject\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"readdemo2\",{\"1\":{\"1003\":1,\"1408\":1}}],[\"readdemo1\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"readallbytes\",{\"1\":{\"996\":1,\"1401\":1}}],[\"read3\",{\"1\":{\"994\":2,\"995\":1,\"1399\":2,\"1400\":1}}],[\"read2\",{\"1\":{\"994\":2,\"995\":5,\"1399\":2,\"1400\":5}}],[\"read1\",{\"1\":{\"628\":2,\"994\":2,\"995\":1,\"1033\":2,\"1399\":2,\"1400\":1}}],[\"read\",{\"1\":{\"315\":1,\"628\":12,\"994\":9,\"995\":11,\"996\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":1,\"1007\":1,\"1008\":1,\"1033\":12,\"1399\":9,\"1400\":11,\"1401\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1412\":1,\"1413\":1}}],[\"readline\",{\"1\":{\"307\":1,\"308\":2,\"1008\":2,\"1413\":2,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"reader\",{\"1\":{\"307\":2,\"308\":1,\"1002\":2,\"1003\":2,\"1008\":2,\"1407\":2,\"1408\":2,\"1413\":2}}],[\"readview\",{\"1\":{\"154\":2}}],[\"react\",{\"1\":{\"95\":1}}],[\"red<\",{\"1\":{\"557\":1,\"570\":1}}],[\"red\",{\"1\":{\"544\":1,\"557\":4,\"562\":1,\"566\":1,\"570\":25,\"571\":2,\"573\":3,\"579\":12,\"601\":1,\"613\":2,\"615\":18,\"965\":2,\"1370\":2}}],[\"reduce\",{\"1\":{\"386\":2}}],[\"redirect\",{\"1\":{\"313\":1,\"495\":1}}],[\"redis设计为少量数据\",{\"1\":{\"388\":1}}],[\"redis安装完成\",{\"1\":{\"360\":1}}],[\"redis使用端口6379\",{\"1\":{\"360\":1}}],[\"redis的特点就是\",{\"1\":{\"359\":1}}],[\"redis的过期删除策略\",{\"1\":{\"129\":1}}],[\"redis是一个开源的\",{\"1\":{\"359\":1}}],[\"redis是单线程的\",{\"0\":{\"139\":1}}],[\"redis集群有16384\",{\"1\":{\"138\":1}}],[\"redis集群脑裂\",{\"0\":{\"137\":1}}],[\"redis分片集群中引入了哈希槽的概念\",{\"1\":{\"138\":1}}],[\"redis分布式锁如何合理的控制锁的有效时间\",{\"0\":{\"132\":1}}],[\"redis分布式锁主要利用redis中的setnx来命令来实现\",{\"1\":{\"131\":1}}],[\"redis分布式锁\",{\"0\":{\"131\":1}}],[\"redis提供了哨兵机制来实现redis主从集群的自动故障恢复\",{\"1\":{\"136\":1}}],[\"redis常用的淘汰策略\",{\"1\":{\"130\":1}}],[\"redis数据淘汰策略\",{\"0\":{\"130\":1}}],[\"redis数据过期策略\",{\"0\":{\"129\":1}}],[\"redis处理的每一个写的命令都会记录在aof文件\",{\"1\":{\"128\":1}}],[\"redis缓存店铺信息\",{\"1\":{\"127\":1}}],[\"redis作为缓存\",{\"0\":{\"127\":1,\"128\":1}}],[\"redis中\",{\"1\":{\"123\":1}}],[\"redis篇\",{\"0\":{\"122\":1}}],[\"redisserializer\",{\"1\":{\"113\":1}}],[\"redisson锁可以解决主从数据的一致问题吗\",{\"0\":{\"134\":1}}],[\"redisson锁根据线程唯一标识判断是否是同一个线程\",{\"1\":{\"133\":1}}],[\"redisson的锁是可重入的锁\",{\"1\":{\"133\":1}}],[\"redisson的锁可以重入吗\",{\"0\":{\"133\":1}}],[\"redisson会自动为锁续期\",{\"1\":{\"117\":1}}],[\"redisson\",{\"0\":{\"117\":2},\"1\":{\"109\":1,\"117\":7,\"123\":1}}],[\"redistemplate\",{\"1\":{\"113\":2,\"114\":1}}],[\"redistemplateconfig\",{\"1\":{\"113\":1}}],[\"redis\",{\"0\":{\"110\":2,\"113\":1,\"114\":2,\"115\":1},\"1\":{\"92\":3,\"96\":2,\"109\":3,\"110\":8,\"111\":2,\"113\":4,\"114\":6,\"115\":1,\"117\":3,\"121\":1,\"123\":3,\"139\":7,\"360\":8,\"494\":14,\"496\":65}}],[\"redo\",{\"1\":{\"153\":2}}],[\"reflectdemo\",{\"1\":{\"814\":1,\"1219\":1}}],[\"reflect\",{\"1\":{\"629\":9,\"802\":3,\"804\":3,\"806\":4,\"808\":5,\"812\":3,\"814\":2,\"816\":5,\"1025\":1,\"1034\":9,\"1207\":3,\"1209\":3,\"1211\":4,\"1213\":5,\"1217\":3,\"1219\":2,\"1221\":5,\"1475\":1}}],[\"references\",{\"1\":{\"526\":3,\"529\":3}}],[\"referer\",{\"1\":{\"495\":1}}],[\"refid=\",{\"1\":{\"270\":1}}],[\"ref>元素\",{\"1\":{\"264\":1}}],[\"ref=\",{\"1\":{\"264\":2}}],[\"ref\",{\"1\":{\"142\":4,\"264\":2}}],[\"微服务和前端也都有一定的了解\",{\"1\":{\"121\":1}}],[\"微服务\",{\"1\":{\"92\":1}}],[\"cx\",{\"1\":{\"819\":1,\"1224\":1}}],[\"c3\",{\"1\":{\"803\":1,\"1208\":1}}],[\"c3p0\",{\"1\":{\"237\":1}}],[\"c2\",{\"1\":{\"802\":2,\"803\":1,\"897\":2,\"1207\":2,\"1208\":1,\"1302\":2}}],[\"c11\",{\"1\":{\"774\":5,\"1179\":5}}],[\"c1\",{\"1\":{\"774\":6,\"802\":2,\"803\":1,\"897\":2,\"1179\":6,\"1207\":2,\"1208\":1,\"1302\":2}}],[\"c语言的生日\",{\"1\":{\"769\":1,\"1174\":1}}],[\"c接口\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"c=\",{\"1\":{\"652\":1,\"1057\":1}}],[\"ccc1\",{\"1\":{\"601\":1}}],[\"ccc\",{\"1\":{\"601\":3,\"969\":1,\"1374\":1}}],[\"c选项单独使用\",{\"1\":{\"490\":1}}],[\"cvf\",{\"1\":{\"490\":1}}],[\"c统计字节数量\",{\"1\":{\"455\":1}}],[\"city\",{\"1\":{\"529\":1}}],[\"ciphers\",{\"1\":{\"495\":2}}],[\"ci\",{\"1\":{\"414\":1,\"494\":1,\"496\":6}}],[\"curl\",{\"1\":{\"496\":4}}],[\"currenttimemillis\",{\"1\":{\"615\":2,\"629\":6,\"769\":3,\"776\":1,\"1034\":6,\"1174\":3,\"1181\":1}}],[\"currentthread\",{\"1\":{\"199\":3,\"924\":3,\"926\":2,\"930\":1,\"937\":1,\"939\":3,\"948\":2,\"954\":1,\"956\":2,\"1329\":3,\"1331\":2,\"1335\":1,\"1342\":1,\"1344\":3,\"1353\":2,\"1359\":1,\"1361\":2}}],[\"currentproxy\",{\"1\":{\"162\":1}}],[\"custom\",{\"1\":{\"412\":1,\"496\":2}}],[\"cf\",{\"1\":{\"389\":2}}],[\"cfg\",{\"1\":{\"375\":1,\"460\":2}}],[\"cd直接执行\",{\"1\":{\"442\":1}}],[\"cd命令无需跟选项\",{\"1\":{\"442\":1}}],[\"cd\",{\"0\":{\"442\":1},\"1\":{\"373\":1,\"375\":1,\"377\":4,\"386\":2,\"392\":1,\"395\":1,\"417\":5,\"442\":1,\"486\":2,\"496\":64,\"995\":1,\"1400\":1}}],[\"cdata\",{\"1\":{\"271\":2,\"829\":1,\"1234\":1}}],[\"cdata区中可以按照原来的方式解析\",{\"1\":{\"829\":1,\"1234\":1}}],[\"cdata区\",{\"1\":{\"271\":2}}],[\"cp\",{\"0\":{\"449\":1},\"1\":{\"373\":1,\"418\":1,\"449\":1}}],[\"cpu会轮询为系统的每个线程服务\",{\"1\":{\"959\":1,\"1364\":1}}],[\"cpu同时处理线程的数量有限\",{\"1\":{\"959\":1,\"1364\":1}}],[\"cpu使用率\",{\"1\":{\"481\":1}}],[\"cpu密集型任务\",{\"1\":{\"220\":1}}],[\"cpu\",{\"1\":{\"112\":6,\"211\":1,\"481\":4}}],[\"ceil\",{\"1\":{\"767\":1,\"1172\":1}}],[\"ce\",{\"1\":{\"496\":7}}],[\"cert\",{\"1\":{\"495\":2}}],[\"certs\",{\"1\":{\"358\":4,\"409\":1}}],[\"certificate\",{\"1\":{\"354\":1,\"495\":2}}],[\"certificate选项\",{\"1\":{\"354\":1}}],[\"centos\",{\"1\":{\"354\":1,\"356\":4,\"360\":2,\"456\":3,\"458\":2,\"459\":5,\"460\":2,\"474\":1,\"476\":4,\"485\":3,\"496\":2}}],[\"centos系统默认开启了防火墙\",{\"1\":{\"354\":1}}],[\"center\",{\"1\":{\"323\":1}}],[\"cmd\",{\"1\":{\"354\":2,\"356\":2,\"358\":4,\"360\":2,\"478\":1,\"494\":1}}],[\"ctrl+d退出或登出\",{\"0\":{\"469\":1}}],[\"ctrl+c强制停止\",{\"0\":{\"468\":1}}],[\"ctrl\",{\"1\":{\"347\":1,\"350\":1,\"435\":6}}],[\"c\",{\"0\":{\"402\":1},\"1\":{\"280\":3,\"323\":7,\"325\":1,\"353\":1,\"354\":1,\"375\":1,\"377\":1,\"386\":1,\"389\":1,\"392\":1,\"395\":1,\"435\":1,\"455\":1,\"478\":1,\"490\":6,\"491\":2,\"637\":2,\"714\":1,\"715\":2,\"721\":1,\"743\":3,\"771\":2,\"774\":2,\"793\":1,\"802\":2,\"804\":9,\"806\":3,\"818\":3,\"866\":1,\"895\":1,\"896\":1,\"908\":6,\"994\":1,\"995\":9,\"1042\":2,\"1119\":1,\"1120\":2,\"1126\":1,\"1148\":3,\"1176\":2,\"1179\":2,\"1198\":1,\"1207\":2,\"1209\":9,\"1211\":3,\"1223\":3,\"1271\":1,\"1300\":1,\"1301\":1,\"1313\":6,\"1399\":1,\"1400\":9}}],[\"cyan\",{\"1\":{\"264\":1}}],[\"child\",{\"1\":{\"965\":2,\"1370\":2}}],[\"china\",{\"1\":{\"743\":1,\"1148\":1}}],[\"chmod\",{\"0\":{\"465\":1},\"1\":{\"465\":4,\"486\":1,\"496\":1}}],[\"chown命令可以修改文件或文件夹所属的用户和用户组\",{\"1\":{\"466\":1}}],[\"chown\",{\"0\":{\"466\":1},\"1\":{\"354\":1,\"466\":4}}],[\"choose>\",{\"1\":{\"274\":2}}],[\"choose相当于switch\",{\"1\":{\"274\":2}}],[\"choose\",{\"1\":{\"273\":1}}],[\"checkqq2\",{\"1\":{\"818\":2,\"1223\":2}}],[\"checkqq\",{\"1\":{\"818\":4,\"1223\":4}}],[\"checkage\",{\"1\":{\"638\":2,\"1043\":2}}],[\"check\",{\"1\":{\"354\":2,\"525\":1,\"529\":1}}],[\"cha22\",{\"1\":{\"601\":1}}],[\"cha1\",{\"1\":{\"601\":2}}],[\"cha\",{\"1\":{\"601\":1}}],[\"chain\",{\"1\":{\"338\":2}}],[\"changelistener\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"changenum\",{\"1\":{\"654\":2,\"1059\":2}}],[\"changes\",{\"1\":{\"410\":1}}],[\"change\",{\"1\":{\"320\":1,\"512\":1,\"654\":2,\"1059\":2}}],[\"charat\",{\"1\":{\"678\":1,\"679\":1,\"743\":3,\"818\":1,\"908\":1,\"1083\":1,\"1084\":1,\"1148\":3,\"1223\":1,\"1313\":1}}],[\"character4�g�k\\u001a\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"characters\",{\"1\":{\"758\":1,\"1163\":1}}],[\"characterencodingfilter\",{\"1\":{\"562\":3,\"570\":3,\"579\":3}}],[\"characterencoding=utf8\",{\"1\":{\"226\":2,\"494\":1}}],[\"character\",{\"1\":{\"402\":1,\"414\":1,\"494\":1,\"496\":6,\"788\":1,\"819\":7,\"1009\":5,\"1193\":1,\"1224\":7,\"1414\":5}}],[\"charsequence\",{\"1\":{\"743\":3,\"1148\":3}}],[\"charset=utf\",{\"1\":{\"314\":2,\"318\":1,\"320\":1,\"1466\":2}}],[\"charset\",{\"1\":{\"309\":1,\"997\":3,\"1402\":3}}],[\"charsetsutil\",{\"1\":{\"309\":2}}],[\"chars\",{\"1\":{\"678\":3,\"679\":3,\"743\":3,\"1083\":3,\"1084\":3,\"1148\":3}}],[\"char是直接转换成int类型进行运算的\",{\"1\":{\"651\":1,\"1056\":1}}],[\"char\",{\"1\":{\"511\":1,\"529\":1,\"650\":1,\"652\":2,\"662\":1,\"743\":4,\"755\":4,\"756\":4,\"758\":2,\"788\":1,\"816\":8,\"818\":1,\"888\":4,\"891\":4,\"896\":4,\"908\":1,\"994\":5,\"1002\":2,\"1003\":2,\"1004\":1,\"1008\":3,\"1055\":1,\"1057\":2,\"1067\":1,\"1148\":4,\"1160\":4,\"1161\":4,\"1163\":2,\"1193\":1,\"1221\":8,\"1223\":1,\"1293\":4,\"1296\":4,\"1301\":4,\"1313\":1,\"1399\":5,\"1407\":2,\"1408\":2,\"1409\":1,\"1413\":3}}],[\"ch\",{\"1\":{\"264\":1}}],[\"cj\",{\"1\":{\"226\":2,\"228\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"264\":1,\"267\":2,\"280\":3,\"494\":1,\"570\":1}}],[\"c++\",{\"1\":{\"215\":1,\"866\":3,\"1271\":3}}],[\"c++实现\",{\"1\":{\"210\":1}}],[\"cs\",{\"1\":{\"1424\":1}}],[\"csdn\",{\"1\":{\"118\":1}}],[\"css\",{\"1\":{\"92\":1,\"317\":1,\"747\":1,\"842\":1,\"1152\":1,\"1247\":1}}],[\"cry\",{\"1\":{\"709\":3,\"726\":1,\"732\":4,\"1114\":3,\"1131\":1,\"1137\":4}}],[\"crt\",{\"1\":{\"358\":4,\"409\":1}}],[\"createnewfile\",{\"1\":{\"968\":1,\"969\":2,\"1373\":1,\"1374\":2}}],[\"createcode\",{\"1\":{\"678\":2,\"679\":1,\"1083\":2,\"1084\":1}}],[\"createcomputer\",{\"1\":{\"641\":3,\"1046\":3}}],[\"createrootapplicationcontext\",{\"1\":{\"557\":1}}],[\"createservletapplicationcontext\",{\"1\":{\"557\":1}}],[\"createstatement\",{\"1\":{\"226\":1,\"229\":2,\"231\":1}}],[\"created\",{\"1\":{\"320\":1,\"402\":1,\"474\":1}}],[\"createdatasource\",{\"1\":{\"240\":1,\"245\":1}}],[\"create\",{\"1\":{\"243\":1,\"350\":1,\"378\":1,\"389\":1,\"402\":2,\"414\":1,\"494\":5,\"507\":2,\"508\":1,\"510\":1,\"511\":1,\"525\":1,\"526\":2,\"529\":5}}],[\"createthread\",{\"1\":{\"199\":4,\"205\":1}}],[\"crontab\",{\"1\":{\"116\":1}}],[\"crud\",{\"1\":{\"92\":1,\"245\":1}}],[\"cntrl\",{\"1\":{\"819\":1,\"1224\":1}}],[\"cnf\",{\"1\":{\"496\":4}}],[\"cn\",{\"1\":{\"109\":1,\"169\":1,\"170\":1,\"495\":1}}],[\"code\",{\"1\":{\"494\":1,\"571\":12,\"678\":3,\"679\":3,\"743\":1,\"758\":7,\"819\":2,\"831\":1,\"1002\":5,\"1083\":3,\"1084\":3,\"1148\":1,\"1163\":7,\"1224\":2,\"1236\":1,\"1407\":5}}],[\"co\",{\"1\":{\"362\":3}}],[\"cookie不占服务器资源\",{\"1\":{\"336\":1}}],[\"cookie不安全\",{\"1\":{\"336\":1}}],[\"cookie可以长期存储\",{\"1\":{\"336\":1}}],[\"cookie最大3kb\",{\"1\":{\"336\":1}}],[\"cookie是将数据存储在客户端\",{\"1\":{\"336\":1}}],[\"cookie默认不能直接存储中文\",{\"1\":{\"331\":1}}],[\"cookie存储中文\",{\"1\":{\"331\":1}}],[\"cookie存活在浏览器内存当中\",{\"1\":{\"331\":1}}],[\"cookie在当前浏览器内存中\",{\"1\":{\"331\":1}}],[\"cookie的存活时间\",{\"1\":{\"331\":1}}],[\"cookie的使用细节\",{\"0\":{\"331\":1}}],[\"cookie的实现是基于http协议的\",{\"1\":{\"330\":1}}],[\"cookie原理\",{\"0\":{\"330\":1}}],[\"cookies\",{\"1\":{\"329\":3}}],[\"cookie发送到浏览器后\",{\"1\":{\"329\":1}}],[\"cookie基本使用\",{\"1\":{\"329\":1}}],[\"cookie\",{\"0\":{\"328\":1},\"1\":{\"327\":1,\"329\":20,\"330\":2}}],[\"cookie和session都是来完成一次会话内的多次请求间共享数据的\",{\"1\":{\"336\":1}}],[\"cookie和session\",{\"1\":{\"286\":1}}],[\"copydirectorytodirectory\",{\"1\":{\"1014\":2,\"1419\":2}}],[\"copydemo5\",{\"1\":{\"998\":1,\"1403\":1}}],[\"copyfile\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"copyof方法对数组进行一个长度为10的扩容\",{\"1\":{\"831\":1,\"1236\":1}}],[\"copyof\",{\"1\":{\"831\":1,\"1236\":1}}],[\"copy\",{\"1\":{\"315\":2,\"369\":3,\"386\":4,\"494\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1014\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1419\":1}}],[\"colors\",{\"1\":{\"897\":2,\"1302\":2}}],[\"color\",{\"1\":{\"897\":11,\"1302\":11}}],[\"color=auto\",{\"1\":{\"456\":1}}],[\"collect\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"collectors\",{\"1\":{\"824\":2,\"1023\":2,\"1229\":2,\"1473\":2}}],[\"collection不存在索引不能使用for循环\",{\"1\":{\"862\":1,\"1267\":1}}],[\"collection接口已经实现了iterator接口\",{\"1\":{\"845\":1,\"1250\":1}}],[\"collectiondemo6\",{\"1\":{\"847\":1,\"1252\":1}}],[\"collectiondemo5\",{\"1\":{\"846\":1,\"1251\":1}}],[\"collectiondemo4\",{\"1\":{\"845\":1,\"1250\":1}}],[\"collectiondemo3\",{\"1\":{\"844\":1,\"1249\":1}}],[\"collectiondemo2\",{\"1\":{\"842\":1,\"896\":1,\"1247\":1,\"1301\":1}}],[\"collectiondemo1\",{\"1\":{\"839\":1,\"840\":1,\"909\":1,\"1244\":1,\"1245\":1,\"1314\":1}}],[\"collection是单列集合的祖宗接口\",{\"1\":{\"841\":1,\"1246\":1}}],[\"collection<movie>\",{\"1\":{\"847\":1,\"1252\":1}}],[\"collection<integer>\",{\"1\":{\"840\":1,\"904\":1,\"1245\":1,\"1309\":1}}],[\"collection<string>\",{\"1\":{\"822\":1,\"840\":1,\"842\":2,\"844\":1,\"845\":1,\"846\":1,\"1021\":1,\"1227\":1,\"1245\":1,\"1247\":2,\"1249\":1,\"1250\":1,\"1251\":1,\"1471\":1}}],[\"collection又分了一个list接口和set接口\",{\"1\":{\"836\":1,\"1241\":1}}],[\"collection单例集合\",{\"1\":{\"835\":1,\"1240\":1}}],[\"collections常用的排序的api\",{\"0\":{\"896\":1,\"1301\":1}}],[\"collections常用的api\",{\"0\":{\"895\":1,\"1300\":1}}],[\"collections并不属于集合\",{\"1\":{\"894\":1,\"1299\":1}}],[\"collections\",{\"1\":{\"821\":2,\"894\":1,\"896\":5,\"897\":4,\"1020\":2,\"1226\":2,\"1299\":1,\"1301\":5,\"1302\":4,\"1470\":2}}],[\"collection集合存储自定义类型的对象\",{\"0\":{\"847\":1,\"1252\":1}}],[\"collection集合常用的遍历\",{\"0\":{\"843\":1,\"1248\":1}}],[\"collection集合的格式\",{\"1\":{\"900\":1,\"1305\":1}}],[\"collection集合的特点\",{\"0\":{\"837\":1,\"1242\":1}}],[\"collection集合的体系特点\",{\"0\":{\"834\":1,\"1239\":1}}],[\"collection集合是一个接口\",{\"1\":{\"836\":1,\"1241\":1}}],[\"collection集合体系\",{\"0\":{\"836\":1,\"1241\":1}}],[\"collection集合获取流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"collection集合\",{\"1\":{\"281\":2}}],[\"collection=\",{\"1\":{\"280\":1}}],[\"collection\",{\"0\":{\"842\":1,\"1247\":1,\"1489\":1,\"1495\":1},\"1\":{\"280\":1,\"281\":3,\"839\":4,\"840\":4,\"842\":2,\"844\":2,\"845\":2,\"846\":2,\"847\":2,\"881\":1,\"887\":1,\"888\":2,\"891\":2,\"895\":1,\"906\":1,\"909\":1,\"1244\":4,\"1245\":4,\"1247\":2,\"1249\":2,\"1250\":2,\"1251\":2,\"1252\":2,\"1286\":1,\"1292\":1,\"1293\":2,\"1296\":2,\"1300\":1,\"1311\":1,\"1314\":1}}],[\"collation\",{\"1\":{\"494\":1,\"496\":6}}],[\"collate\",{\"1\":{\"402\":1,\"414\":1}}],[\"column=\",{\"1\":{\"270\":2}}],[\"column\",{\"1\":{\"270\":3,\"570\":2,\"613\":2}}],[\"cores=1\",{\"1\":{\"392\":1}}],[\"core\",{\"1\":{\"264\":1,\"323\":1,\"386\":1}}],[\"core<\",{\"1\":{\"264\":1,\"494\":1,\"566\":1,\"570\":1}}],[\"core依赖\",{\"1\":{\"264\":1}}],[\"corepoolsize\",{\"1\":{\"112\":1,\"219\":2,\"944\":2,\"948\":1,\"949\":1,\"951\":1,\"952\":1,\"955\":1,\"1349\":2,\"1353\":1,\"1354\":1,\"1356\":1,\"1357\":1,\"1360\":1}}],[\"count<\",{\"1\":{\"386\":1}}],[\"count\",{\"1\":{\"226\":2,\"229\":2,\"240\":1,\"245\":6,\"277\":2,\"279\":2,\"280\":2,\"521\":2,\"529\":1,\"823\":1,\"1022\":1,\"1028\":3,\"1228\":1,\"1472\":1,\"1478\":3}}],[\"countdownlatch都是基于aqs实现的\",{\"1\":{\"213\":1}}],[\"conllection\",{\"0\":{\"841\":1,\"1246\":1}}],[\"concat\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"concurrent\",{\"0\":{\"1490\":1,\"1496\":1},\"1\":{\"199\":7,\"921\":2,\"939\":2,\"948\":1,\"949\":1,\"951\":2,\"956\":3,\"1025\":1,\"1326\":2,\"1344\":2,\"1353\":1,\"1354\":1,\"1356\":2,\"1361\":3,\"1465\":1,\"1466\":1,\"1475\":1}}],[\"con22\",{\"1\":{\"601\":1}}],[\"con1\",{\"1\":{\"601\":1}}],[\"con\",{\"1\":{\"601\":2}}],[\"conditions\",{\"1\":{\"386\":4}}],[\"conditionalonclass这样的注解\",{\"1\":{\"168\":1}}],[\"containsvalue\",{\"1\":{\"904\":2,\"1309\":2}}],[\"containskey\",{\"1\":{\"904\":2,\"908\":1,\"1309\":2,\"1313\":1}}],[\"contains\",{\"1\":{\"743\":2,\"842\":3,\"981\":1,\"1148\":2,\"1247\":3,\"1386\":1}}],[\"containerd\",{\"1\":{\"496\":2}}],[\"container\",{\"1\":{\"494\":5,\"582\":1}}],[\"control\",{\"0\":{\"582\":1}}],[\"controller\",{\"1\":{\"100\":1,\"120\":1,\"160\":1,\"166\":1,\"325\":1,\"326\":1,\"329\":2,\"333\":2,\"557\":3,\"566\":1,\"570\":2,\"571\":2,\"573\":1,\"579\":7}}],[\"context<\",{\"1\":{\"615\":1}}],[\"contextconfiguration\",{\"1\":{\"570\":2,\"615\":2}}],[\"context\",{\"1\":{\"312\":1,\"544\":2,\"557\":4,\"570\":10,\"579\":5,\"615\":5}}],[\"contextpath\",{\"1\":{\"307\":2}}],[\"contenttype=\",{\"1\":{\"318\":1,\"320\":1}}],[\"content\",{\"1\":{\"251\":1,\"314\":1,\"1466\":2}}],[\"connect\",{\"1\":{\"494\":2}}],[\"connect=node1\",{\"1\":{\"377\":3}}],[\"connector\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"connectproperties\",{\"1\":{\"240\":1}}],[\"connections\",{\"1\":{\"495\":1}}],[\"connectionimpl\",{\"1\":{\"280\":3}}],[\"connectionutils\",{\"1\":{\"245\":6}}],[\"connection接口中定义了3个对应的方法\",{\"1\":{\"229\":1}}],[\"connection作用\",{\"1\":{\"229\":1}}],[\"connection\",{\"0\":{\"229\":1},\"1\":{\"226\":5,\"229\":8,\"231\":5,\"233\":5,\"236\":1,\"237\":1,\"240\":9,\"245\":29,\"280\":4}}],[\"connectivity\",{\"1\":{\"225\":1}}],[\"conntrack\",{\"1\":{\"240\":1}}],[\"conn\",{\"1\":{\"233\":1}}],[\"conscious\",{\"1\":{\"831\":1,\"1236\":1}}],[\"cons1\",{\"1\":{\"806\":4,\"1211\":4}}],[\"cons\",{\"1\":{\"806\":4,\"1211\":4}}],[\"consumer接口还有一个方法andthen\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"consumer<\",{\"1\":{\"1027\":2,\"1477\":2}}],[\"consumer<t>\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"consumer<string>\",{\"1\":{\"846\":1,\"1251\":1}}],[\"consumer\",{\"0\":{\"1027\":1,\"1477\":1},\"1\":{\"378\":1,\"846\":1,\"1025\":1,\"1027\":12,\"1251\":1,\"1475\":1,\"1477\":12}}],[\"consoleappender\",{\"1\":{\"264\":1}}],[\"console\",{\"1\":{\"264\":4,\"378\":2}}],[\"consistency\",{\"1\":{\"151\":1,\"174\":1,\"536\":1}}],[\"constructor类中用于创建对象的方法\",{\"0\":{\"806\":1,\"1211\":1}}],[\"constructors\",{\"1\":{\"804\":2,\"1209\":2}}],[\"constructor<student>\",{\"1\":{\"804\":3,\"806\":2,\"808\":1,\"1209\":3,\"1211\":2,\"1213\":1}}],[\"constructor<\",{\"1\":{\"804\":9,\"806\":1,\"1209\":9,\"1211\":1}}],[\"constructor\",{\"1\":{\"798\":1,\"804\":11,\"806\":4,\"808\":1,\"1203\":1,\"1209\":11,\"1211\":4,\"1213\":1}}],[\"constraint\",{\"1\":{\"526\":2,\"529\":3}}],[\"const\",{\"1\":{\"142\":2}}],[\"conf的nginx的配置文件\",{\"1\":{\"495\":1}}],[\"confirm\",{\"1\":{\"435\":1}}],[\"config覆盖\",{\"1\":{\"412\":1}}],[\"config>\",{\"1\":{\"335\":2}}],[\"config\",{\"1\":{\"264\":4,\"267\":3,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"298\":1,\"316\":1,\"377\":5,\"496\":2,\"544\":1,\"552\":2,\"557\":2,\"562\":1,\"570\":7,\"579\":14,\"615\":5,\"620\":3}}],[\"config配置文件\",{\"1\":{\"264\":1}}],[\"configuration>\",{\"1\":{\"264\":2,\"267\":1,\"293\":1,\"386\":4,\"389\":1,\"557\":1,\"570\":1}}],[\"configurationproperties\",{\"1\":{\"103\":1}}],[\"configuration\",{\"1\":{\"103\":1,\"264\":1,\"267\":1,\"386\":5,\"410\":1,\"495\":1,\"544\":3,\"552\":1,\"557\":2,\"566\":1,\"570\":4,\"579\":6,\"615\":1}}],[\"conf\",{\"1\":{\"375\":1,\"386\":4,\"392\":3,\"395\":3,\"403\":1,\"404\":2,\"412\":2,\"428\":1,\"475\":2,\"495\":2,\"496\":35}}],[\"conf文件中配置备份的触发条件例如save\",{\"1\":{\"128\":1}}],[\"comunication\",{\"1\":{\"939\":4,\"1344\":4}}],[\"command>out\",{\"1\":{\"424\":1}}],[\"command参数和任何相关的\",{\"1\":{\"422\":1}}],[\"command\",{\"1\":{\"422\":1,\"424\":1,\"431\":1,\"437\":2,\"439\":2,\"494\":2,\"948\":1,\"955\":1,\"1353\":1,\"1360\":1}}],[\"community\",{\"1\":{\"346\":2,\"349\":2,\"398\":2,\"500\":1}}],[\"committing\",{\"1\":{\"280\":1}}],[\"commit\",{\"1\":{\"229\":3,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"535\":1}}],[\"commons\",{\"0\":{\"1013\":1,\"1418\":1},\"1\":{\"315\":2,\"1013\":4,\"1014\":2,\"1418\":4,\"1419\":2}}],[\"common\",{\"1\":{\"97\":1,\"98\":1,\"169\":1,\"386\":1,\"496\":1}}],[\"completed\",{\"1\":{\"948\":1,\"1353\":1}}],[\"compliance\",{\"1\":{\"386\":4}}],[\"computerinterface01\",{\"1\":{\"721\":3,\"1126\":3}}],[\"computerinterface\",{\"1\":{\"714\":1,\"715\":2,\"1119\":1,\"1120\":2}}],[\"computer2\",{\"1\":{\"641\":4,\"1046\":4}}],[\"computer1\",{\"1\":{\"641\":4,\"1046\":4}}],[\"computer\",{\"1\":{\"641\":12,\"714\":2,\"715\":1,\"721\":2,\"1046\":12,\"1119\":2,\"1120\":1,\"1126\":2}}],[\"compiler\",{\"1\":{\"557\":4,\"615\":4}}],[\"compile\",{\"1\":{\"253\":1,\"254\":1,\"259\":2}}],[\"comparingint\",{\"1\":{\"891\":1,\"1296\":1}}],[\"comparable<student>\",{\"1\":{\"891\":1,\"896\":1,\"1296\":1,\"1301\":1}}],[\"comparator\",{\"1\":{\"793\":1,\"891\":2,\"897\":1,\"1019\":1,\"1025\":1,\"1198\":1,\"1296\":2,\"1302\":1,\"1469\":1,\"1475\":1}}],[\"comparator<student>\",{\"1\":{\"793\":2,\"891\":1,\"1198\":2,\"1296\":1}}],[\"comparator<integer>\",{\"1\":{\"793\":1,\"1019\":1,\"1198\":1,\"1469\":1}}],[\"comparator<\",{\"1\":{\"793\":1,\"896\":1,\"1198\":1,\"1301\":1}}],[\"compareto\",{\"1\":{\"891\":1,\"896\":1,\"1296\":1,\"1301\":1}}],[\"compares\",{\"1\":{\"758\":1,\"1163\":1}}],[\"compare\",{\"1\":{\"211\":1,\"758\":1,\"793\":4,\"891\":1,\"1019\":1,\"1163\":1,\"1198\":4,\"1296\":1,\"1469\":1}}],[\"companyname=\",{\"1\":{\"244\":1}}],[\"companyname\",{\"1\":{\"244\":9,\"245\":6,\"270\":3,\"272\":10,\"273\":7,\"274\":6,\"275\":3,\"276\":1,\"277\":5,\"281\":5,\"323\":1}}],[\"company\",{\"1\":{\"243\":2,\"245\":3,\"270\":3,\"272\":3,\"273\":4,\"274\":2,\"275\":1,\"276\":1,\"277\":1}}],[\"component\",{\"1\":{\"579\":2,\"615\":2}}],[\"componentscan\",{\"1\":{\"168\":1,\"557\":2,\"566\":1,\"570\":4,\"579\":4,\"615\":1}}],[\"component注解来表示这是一个aop类\",{\"1\":{\"160\":1}}],[\"compose的使用\",{\"1\":{\"496\":1}}],[\"compose同时编排后端和前端\",{\"1\":{\"495\":1}}],[\"compose启动springboot项目的时候mysql还没有启动完毕\",{\"1\":{\"494\":1}}],[\"compose中的mysql服务\",{\"1\":{\"494\":1}}],[\"compose部署后端\",{\"0\":{\"494\":1}}],[\"compose\",{\"1\":{\"92\":1,\"494\":2,\"496\":35,\"1029\":5,\"1479\":5}}],[\"com\",{\"1\":{\"100\":1,\"160\":1,\"199\":4,\"205\":1,\"226\":4,\"228\":1,\"229\":2,\"231\":2,\"233\":2,\"240\":3,\"244\":1,\"245\":5,\"251\":1,\"256\":1,\"264\":8,\"265\":1,\"267\":5,\"270\":1,\"280\":3,\"281\":1,\"299\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"316\":1,\"323\":1,\"329\":2,\"333\":2,\"338\":1,\"346\":2,\"349\":2,\"353\":1,\"358\":4,\"398\":1,\"399\":1,\"400\":1,\"409\":3,\"496\":3,\"500\":1,\"544\":3,\"547\":1,\"553\":1,\"557\":4,\"562\":1,\"566\":1,\"570\":26,\"571\":2,\"573\":3,\"579\":12,\"601\":1,\"613\":2,\"615\":19,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"660\":1,\"672\":1,\"678\":2,\"679\":1,\"686\":1,\"688\":1,\"701\":1,\"704\":1,\"707\":1,\"708\":2,\"709\":3,\"714\":1,\"715\":1,\"721\":1,\"732\":4,\"738\":2,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":6,\"755\":2,\"756\":2,\"759\":1,\"763\":2,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":1,\"802\":3,\"804\":2,\"806\":3,\"808\":2,\"812\":2,\"814\":1,\"816\":4,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":2,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"855\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":2,\"873\":1,\"875\":5,\"878\":1,\"881\":1,\"887\":1,\"888\":3,\"891\":2,\"893\":1,\"896\":2,\"897\":2,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":1,\"924\":2,\"925\":1,\"930\":3,\"939\":1,\"948\":2,\"949\":1,\"951\":2,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1011\":1,\"1014\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":2,\"1065\":1,\"1077\":1,\"1083\":2,\"1084\":1,\"1091\":1,\"1093\":1,\"1106\":1,\"1109\":1,\"1112\":1,\"1113\":2,\"1114\":3,\"1119\":1,\"1120\":1,\"1126\":1,\"1137\":4,\"1143\":2,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":6,\"1160\":2,\"1161\":2,\"1164\":1,\"1168\":2,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":1,\"1207\":3,\"1209\":2,\"1211\":3,\"1213\":2,\"1217\":2,\"1219\":1,\"1221\":4,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":2,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1260\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":2,\"1278\":1,\"1280\":5,\"1283\":1,\"1286\":1,\"1292\":1,\"1293\":3,\"1296\":2,\"1298\":1,\"1301\":2,\"1302\":2,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":2,\"1330\":1,\"1335\":3,\"1344\":1,\"1353\":2,\"1354\":1,\"1356\":2,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1416\":1,\"1419\":1,\"1433\":2,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"cluster\",{\"1\":{\"362\":3,\"389\":1,\"395\":1}}],[\"cli\",{\"1\":{\"360\":2,\"496\":11}}],[\"clientdemo1\",{\"1\":{\"1449\":1,\"1450\":1,\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"clientport=2181\",{\"1\":{\"375\":1}}],[\"client\",{\"1\":{\"97\":1,\"103\":1,\"413\":2,\"495\":1,\"496\":2,\"1424\":1}}],[\"clear\",{\"0\":{\"471\":1},\"1\":{\"495\":1,\"842\":2,\"904\":2,\"1247\":2,\"1309\":2}}],[\"clear方法\",{\"1\":{\"184\":1}}],[\"clean\",{\"1\":{\"253\":1,\"254\":4,\"400\":1}}],[\"closing\",{\"1\":{\"280\":1}}],[\"close=\",{\"1\":{\"280\":1}}],[\"close\",{\"1\":{\"226\":2,\"229\":2,\"231\":2,\"233\":3,\"240\":3,\"245\":8,\"264\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":2,\"315\":1,\"831\":1,\"997\":1,\"998\":2,\"1000\":2,\"1004\":1,\"1008\":1,\"1009\":2,\"1011\":1,\"1236\":1,\"1402\":1,\"1403\":2,\"1405\":2,\"1409\":1,\"1413\":1,\"1414\":2,\"1416\":1,\"1449\":2,\"1450\":3,\"1458\":1,\"1461\":7,\"1464\":7,\"1465\":7,\"1466\":2}}],[\"cloud如何实现服务注册发现\",{\"0\":{\"172\":1}}],[\"cloud组件有哪些\",{\"0\":{\"171\":1}}],[\"cloud\",{\"0\":{\"102\":1},\"1\":{\"92\":1,\"95\":2,\"96\":1,\"171\":1}}],[\"class作为锁对象\",{\"1\":{\"937\":1,\"938\":1,\"1342\":1,\"1343\":1}}],[\"class类中用于获取成员方法的方法\",{\"1\":{\"810\":1,\"1215\":1}}],[\"class类中用于获取成员变量的方法\",{\"1\":{\"808\":1,\"1213\":1}}],[\"class类中用于获取构造器的方法\",{\"1\":{\"804\":1,\"1209\":1}}],[\"class类中的静态方法\",{\"1\":{\"802\":1,\"1207\":1}}],[\"class文件中所有的方法\",{\"1\":{\"814\":1,\"1219\":1}}],[\"class文件加载到方法区\",{\"1\":{\"676\":1,\"1081\":1}}],[\"class文件\",{\"1\":{\"663\":1,\"1068\":1}}],[\"class文件以及执行main方法\",{\"1\":{\"663\":1,\"1068\":1}}],[\"classname=\",{\"1\":{\"751\":1,\"1156\":1}}],[\"classname\",{\"1\":{\"615\":2,\"751\":9,\"802\":1,\"1156\":9,\"1207\":1}}],[\"classes\",{\"1\":{\"570\":1,\"615\":1}}],[\"classpath\",{\"1\":{\"389\":1,\"494\":1,\"570\":1,\"610\":1,\"615\":1}}],[\"class<dog>\",{\"1\":{\"812\":2,\"1217\":2}}],[\"class<student>\",{\"1\":{\"802\":1,\"804\":3,\"806\":1,\"808\":3,\"1207\":1,\"1209\":3,\"1211\":1,\"1213\":3}}],[\"class<\",{\"1\":{\"386\":1,\"562\":2,\"570\":2,\"579\":2,\"802\":1,\"804\":4,\"806\":1,\"807\":1,\"810\":2,\"813\":1,\"814\":1,\"816\":1,\"1207\":1,\"1209\":4,\"1211\":1,\"1212\":1,\"1215\":2,\"1218\":1,\"1219\":1,\"1221\":1}}],[\"class然后提供服务\",{\"1\":{\"319\":1}}],[\"class=\",{\"1\":{\"264\":1,\"601\":1}}],[\"classic<\",{\"1\":{\"264\":1}}],[\"classic依赖\",{\"1\":{\"264\":1}}],[\"class\",{\"1\":{\"199\":4,\"205\":1,\"226\":2,\"228\":1,\"229\":2,\"231\":2,\"233\":2,\"240\":1,\"244\":1,\"245\":2,\"264\":2,\"265\":1,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"295\":2,\"299\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"316\":1,\"321\":2,\"329\":2,\"333\":2,\"338\":1,\"392\":1,\"494\":1,\"544\":1,\"557\":4,\"562\":4,\"566\":1,\"570\":17,\"571\":2,\"573\":4,\"579\":9,\"610\":1,\"615\":11,\"628\":4,\"629\":7,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"641\":5,\"654\":1,\"660\":1,\"662\":2,\"663\":1,\"664\":1,\"672\":1,\"678\":2,\"679\":1,\"686\":1,\"688\":1,\"704\":1,\"707\":1,\"708\":1,\"709\":4,\"715\":2,\"721\":2,\"732\":4,\"738\":4,\"743\":7,\"747\":1,\"749\":1,\"750\":1,\"751\":6,\"755\":2,\"756\":2,\"759\":1,\"763\":1,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":3,\"794\":2,\"802\":7,\"803\":5,\"804\":11,\"806\":4,\"808\":7,\"812\":5,\"814\":4,\"816\":4,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"870\":2,\"871\":2,\"873\":1,\"875\":4,\"878\":5,\"881\":1,\"887\":1,\"888\":2,\"891\":2,\"893\":1,\"896\":2,\"897\":2,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":2,\"918\":2,\"920\":1,\"921\":2,\"924\":2,\"925\":1,\"930\":3,\"936\":1,\"939\":5,\"948\":2,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":3,\"1011\":1,\"1012\":2,\"1014\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1029\":1,\"1033\":4,\"1034\":7,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":2,\"1046\":5,\"1059\":1,\"1065\":1,\"1067\":2,\"1068\":1,\"1069\":1,\"1077\":1,\"1083\":2,\"1084\":1,\"1091\":1,\"1093\":1,\"1109\":1,\"1112\":1,\"1113\":1,\"1114\":4,\"1120\":2,\"1126\":2,\"1137\":4,\"1143\":4,\"1148\":7,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":6,\"1160\":2,\"1161\":2,\"1164\":1,\"1168\":1,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":3,\"1199\":2,\"1207\":7,\"1208\":5,\"1209\":11,\"1211\":4,\"1213\":7,\"1217\":5,\"1219\":4,\"1221\":4,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1275\":2,\"1276\":2,\"1278\":1,\"1280\":4,\"1283\":5,\"1286\":1,\"1292\":1,\"1293\":2,\"1296\":2,\"1298\":1,\"1301\":2,\"1302\":2,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":2,\"1323\":2,\"1325\":1,\"1326\":2,\"1329\":2,\"1330\":1,\"1335\":3,\"1341\":1,\"1344\":5,\"1353\":2,\"1354\":1,\"1356\":1,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":3,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":4,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1,\"1479\":1}}],[\"class只要出现异常就会回滚\",{\"1\":{\"162\":1}}],[\"cal\",{\"1\":{\"784\":11,\"1189\":11}}],[\"calendar是一个可变日期对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"calendar是一个抽象类\",{\"1\":{\"784\":1,\"1189\":1}}],[\"calendardemo1\",{\"1\":{\"784\":1,\"1189\":1}}],[\"calendar代表了系统此刻日期对应的日历对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"calendar概述\",{\"0\":{\"784\":1,\"1189\":1}}],[\"calendar\",{\"0\":{\"783\":1,\"1188\":1},\"1\":{\"784\":10,\"1189\":10}}],[\"call2\",{\"1\":{\"921\":2,\"1326\":2}}],[\"callalbe接口支持返回执行结果\",{\"1\":{\"200\":1}}],[\"callable<\",{\"1\":{\"948\":1,\"1353\":1}}],[\"callable<string>\",{\"1\":{\"199\":1,\"921\":3,\"1326\":3}}],[\"callablestatement\",{\"1\":{\"229\":1}}],[\"callable接口的call\",{\"1\":{\"200\":1}}],[\"callable接口call方法有返回值\",{\"1\":{\"200\":1}}],[\"callable\",{\"0\":{\"200\":1},\"1\":{\"199\":2,\"921\":1,\"948\":1,\"1025\":1,\"1326\":1,\"1353\":1,\"1475\":1}}],[\"call\",{\"1\":{\"106\":1,\"199\":1,\"921\":3,\"1326\":3}}],[\"cardid\",{\"1\":{\"930\":8,\"939\":16,\"1335\":8,\"1344\":16}}],[\"cards\",{\"1\":{\"897\":2,\"1302\":2}}],[\"card\",{\"1\":{\"897\":16,\"1302\":16}}],[\"car>\",{\"1\":{\"878\":1,\"1283\":1}}],[\"cars\",{\"1\":{\"878\":2,\"1283\":2}}],[\"car2\",{\"1\":{\"663\":7,\"1068\":7}}],[\"car1\",{\"1\":{\"663\":7,\"1068\":7}}],[\"car\",{\"1\":{\"662\":1,\"663\":6,\"877\":2,\"878\":3,\"1067\":1,\"1068\":6,\"1282\":2,\"1283\":3}}],[\"cache\",{\"1\":{\"481\":2,\"495\":1}}],[\"can\",{\"1\":{\"413\":1}}],[\"capacity\",{\"1\":{\"831\":2,\"1236\":2}}],[\"capability\",{\"1\":{\"389\":1}}],[\"cap主要是在分布式项目下的一个理论\",{\"1\":{\"174\":1}}],[\"cat\",{\"0\":{\"447\":1},\"1\":{\"387\":1,\"419\":1,\"447\":1,\"456\":2,\"459\":3,\"496\":3,\"726\":1,\"732\":6,\"1131\":1,\"1137\":6}}],[\"catchmice\",{\"1\":{\"732\":2,\"1137\":2}}],[\"catch\",{\"0\":{\"635\":1,\"1000\":1,\"1040\":1,\"1405\":1},\"1\":{\"205\":2,\"229\":1,\"245\":1,\"316\":1,\"629\":3,\"635\":5,\"636\":1,\"637\":1,\"638\":1,\"816\":1,\"921\":2,\"939\":4,\"948\":1,\"949\":1,\"956\":1,\"998\":1,\"1000\":4,\"1001\":1,\"1007\":1,\"1008\":1,\"1034\":3,\"1040\":5,\"1041\":1,\"1042\":1,\"1043\":1,\"1221\":1,\"1326\":2,\"1344\":4,\"1353\":1,\"1354\":1,\"1361\":1,\"1403\":1,\"1405\":4,\"1406\":1,\"1412\":1,\"1413\":1,\"1458\":1,\"1461\":2,\"1464\":3,\"1465\":3,\"1466\":4}}],[\"catch语句来捕获异常并进行处理\",{\"1\":{\"52\":1}}],[\"catch语句和抛出异常\",{\"1\":{\"45\":1}}],[\"ca\",{\"1\":{\"358\":4,\"409\":1}}],[\"case里面的值间距比较大\",{\"1\":{\"653\":1,\"1058\":1}}],[\"case\",{\"1\":{\"615\":1,\"641\":2,\"653\":2,\"708\":4,\"1046\":2,\"1058\":2,\"1113\":4}}],[\"cas控制数组节点的添加\",{\"1\":{\"217\":1}}],[\"cas\",{\"1\":{\"92\":1,\"211\":6,\"217\":1}}],[\"自己实现\",{\"1\":{\"996\":1,\"1401\":1}}],[\"自行提供服务器\",{\"1\":{\"408\":1}}],[\"自行部署\",{\"1\":{\"408\":1}}],[\"自动调用资源对象的close方法关闭资源\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"自动转换为红黑树\",{\"1\":{\"888\":1,\"1293\":1}}],[\"自动拆箱\",{\"1\":{\"788\":1,\"1193\":1}}],[\"自动装箱\",{\"1\":{\"788\":1,\"1193\":1}}],[\"自动装配\",{\"0\":{\"600\":1}}],[\"自动类型转换\",{\"0\":{\"651\":1,\"729\":1,\"1056\":1,\"1134\":1},\"1\":{\"651\":1,\"1056\":1}}],[\"自动提交\",{\"1\":{\"536\":1}}],[\"自动加载jar包中的meta\",{\"1\":{\"228\":1}}],[\"自动生成后端接口文档\",{\"0\":{\"120\":1}}],[\"自动生成客户端调用\",{\"1\":{\"100\":1,\"120\":1}}],[\"自动生成前端请求代码\",{\"1\":{\"100\":1,\"120\":1}}],[\"自动生成接口文档\",{\"0\":{\"100\":1}}],[\"自动生成基础\",{\"1\":{\"92\":1}}],[\"自定义一个线程池对象\",{\"1\":{\"948\":1,\"949\":1,\"1353\":1,\"1354\":1}}],[\"自定义泛型接口\",{\"0\":{\"874\":1,\"1279\":1}}],[\"自定义泛型方法\",{\"0\":{\"872\":1,\"1277\":1}}],[\"自定义泛型类\",{\"0\":{\"870\":1,\"1275\":1}}],[\"自定义数组排序规则comparator比较器\",{\"1\":{\"793\":1,\"1198\":1}}],[\"自定义编译时异常\",{\"1\":{\"638\":1,\"1043\":1}}],[\"自定义异常\",{\"0\":{\"638\":1,\"1043\":1}}],[\"自定义配置文件路径可以被参数\",{\"1\":{\"412\":1}}],[\"自定义\",{\"1\":{\"412\":1}}],[\"自定义了一个解决tomcat7\",{\"1\":{\"309\":1}}],[\"自定义的一个工具类\",{\"1\":{\"309\":1}}],[\"自定义线程池参数如下\",{\"1\":{\"112\":1}}],[\"自定义统一的错误码\",{\"1\":{\"109\":1}}],[\"自称为java大陆的守护者\",{\"1\":{\"19\":1}}],[\"x>20\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"x=y\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"x==10\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"x=3\",{\"1\":{\"652\":1,\"1057\":1}}],[\"xiaohu\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"xiaominfo\",{\"1\":{\"100\":1}}],[\"x\\u0002�\\u0001c�\\u0005valuexpu7t�\\u0006小张\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"xpsr�\\u0011java\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"xx\",{\"1\":{\"891\":4,\"896\":4,\"1011\":1,\"1296\":4,\"1301\":4,\"1416\":1}}],[\"xxxx\",{\"1\":{\"313\":1}}],[\"xxx\",{\"1\":{\"216\":1,\"233\":1,\"256\":1,\"1011\":1,\"1416\":1}}],[\"x`\",{\"1\":{\"819\":1,\"1224\":1}}],[\"xy\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x+20\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"x+1\",{\"1\":{\"979\":4,\"1384\":4}}],[\"x++\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x+\",{\"1\":{\"819\":2,\"1224\":2}}],[\"xdigit\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x1f\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x20\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x7f\",{\"1\":{\"819\":2,\"1224\":2}}],[\"x00\",{\"1\":{\"819\":2,\"1224\":2}}],[\"x0b\",{\"1\":{\"819\":3,\"1224\":3}}],[\"x85\",{\"1\":{\"819\":1,\"1224\":1}}],[\"x86\",{\"1\":{\"358\":1,\"400\":1}}],[\"xa0\",{\"1\":{\"819\":1,\"1224\":1}}],[\"xhh\",{\"1\":{\"819\":1,\"1224\":1}}],[\"xvf\",{\"1\":{\"490\":2}}],[\"x代表1\",{\"1\":{\"465\":1}}],[\"x意思如下\",{\"1\":{\"441\":1}}],[\"x意思\",{\"0\":{\"441\":1}}],[\"xr\",{\"0\":{\"441\":1},\"1\":{\"441\":1,\"460\":3}}],[\"x64\",{\"1\":{\"353\":2}}],[\"x版本\",{\"1\":{\"349\":1}}],[\"x版本安装\",{\"1\":{\"344\":1}}],[\"x各自有许多使用者\",{\"1\":{\"344\":1}}],[\"x和8\",{\"1\":{\"344\":1}}],[\"xsl\",{\"1\":{\"386\":6}}],[\"xsd\",{\"1\":{\"258\":2,\"264\":2,\"557\":2,\"570\":2,\"601\":1,\"615\":2}}],[\"xsi\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"xsi=\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"x新版本的url和driver的写法\",{\"1\":{\"226\":1}}],[\"xml的创建\",{\"0\":{\"829\":1,\"1234\":1}}],[\"xml的概述\",{\"0\":{\"828\":1,\"1233\":1}}],[\"xml中添加tomcat插件\",{\"1\":{\"293\":1}}],[\"xml中的多余的坐标\",{\"1\":{\"292\":1}}],[\"xml文件\",{\"1\":{\"264\":1,\"386\":3,\"389\":1}}],[\"xmlschema\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"xmlns\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"xmlns=\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"xml\",{\"0\":{\"827\":1,\"1232\":1},\"1\":{\"98\":2,\"258\":2,\"264\":10,\"267\":2,\"270\":1,\"272\":1,\"275\":2,\"277\":1,\"279\":1,\"280\":1,\"285\":1,\"316\":1,\"335\":1,\"386\":8,\"494\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1,\"829\":2,\"1234\":2}}],[\"x\",{\"1\":{\"92\":1,\"355\":1,\"362\":3,\"432\":1,\"435\":4,\"441\":5,\"460\":3,\"465\":4,\"490\":2,\"495\":1,\"652\":1,\"819\":47,\"979\":7,\"1027\":10,\"1028\":3,\"1029\":10,\"1057\":1,\"1224\":47,\"1384\":7,\"1477\":10,\"1478\":3,\"1479\":10}}],[\"+file\",{\"1\":{\"981\":1,\"1386\":1}}],[\"+2\",{\"1\":{\"979\":1,\"1384\":1}}],[\"+v\",{\"1\":{\"908\":1,\"1313\":1}}],[\"+value\",{\"1\":{\"907\":1,\"1312\":1}}],[\"+msg\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"+maps\",{\"1\":{\"906\":1,\"1311\":1}}],[\"+month\",{\"1\":{\"786\":1,\"1191\":1}}],[\"+length\",{\"1\":{\"996\":1,\"1401\":1}}],[\"+len\",{\"1\":{\"996\":1,\"1401\":1}}],[\"+lastthreecards\",{\"1\":{\"897\":1,\"1302\":1}}],[\"+list\",{\"1\":{\"750\":2,\"861\":1,\"1155\":2,\"1266\":1}}],[\"+packet\",{\"1\":{\"1450\":2}}],[\"+page\",{\"1\":{\"544\":5}}],[\"+port\",{\"1\":{\"1449\":1}}],[\"+play3\",{\"1\":{\"897\":1,\"1302\":1}}],[\"+play2\",{\"1\":{\"897\":1,\"1302\":1}}],[\"+play1\",{\"1\":{\"897\":1,\"1302\":1}}],[\"+allcards\",{\"1\":{\"897\":2,\"1302\":2}}],[\"++index\",{\"1\":{\"897\":2,\"1302\":2}}],[\"+n\",{\"1\":{\"978\":2,\"1383\":2}}],[\"+new\",{\"1\":{\"956\":2,\"966\":1,\"1361\":2,\"1371\":1}}],[\"+nums\",{\"1\":{\"893\":1,\"1298\":1}}],[\"+now\",{\"1\":{\"786\":1,\"1191\":1}}],[\"+queue\",{\"1\":{\"865\":2,\"1270\":2}}],[\"+stack\",{\"1\":{\"865\":5,\"1270\":5}}],[\"+s\",{\"1\":{\"823\":2,\"1022\":2,\"1228\":2,\"1472\":2}}],[\"+set\",{\"1\":{\"750\":1,\"1155\":1}}],[\"+dayofyear\",{\"1\":{\"786\":1,\"1191\":1}}],[\"+year\",{\"1\":{\"786\":1,\"1191\":1}}],[\"+ip\",{\"1\":{\"1449\":1}}],[\"+integer\",{\"1\":{\"908\":1,\"1313\":1}}],[\"+i\",{\"1\":{\"769\":1,\"925\":1,\"948\":1,\"1174\":1,\"1330\":1,\"1353\":1}}],[\"+id+\",{\"1\":{\"579\":1}}],[\"+=\",{\"1\":{\"678\":1,\"679\":1,\"921\":1,\"939\":1,\"1083\":1,\"1084\":1,\"1326\":1,\"1344\":1}}],[\"+exception\",{\"1\":{\"573\":1}}],[\"+x\",{\"1\":{\"496\":1}}],[\"+1\",{\"1\":{\"908\":1,\"1313\":1}}],[\"+1g\",{\"1\":{\"453\":1}}],[\"+1个节点设置锁\",{\"1\":{\"134\":1}}],[\"+|\",{\"1\":{\"453\":1}}],[\"+read3\",{\"1\":{\"995\":1,\"1400\":1}}],[\"+read1\",{\"1\":{\"995\":1,\"1400\":1}}],[\"+read\",{\"1\":{\"995\":1,\"1400\":1}}],[\"+rs\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"+rs2\",{\"1\":{\"921\":1,\"1326\":1}}],[\"+rs1\",{\"1\":{\"921\":1,\"1326\":1}}],[\"+r\",{\"1\":{\"435\":2}}],[\"+\",{\"0\":{\"100\":1},\"1\":{\"92\":2,\"95\":3,\"96\":1,\"112\":1,\"115\":1,\"129\":1,\"193\":1,\"199\":3,\"217\":1,\"226\":1,\"229\":1,\"244\":16,\"264\":15,\"272\":4,\"307\":2,\"308\":2,\"313\":2,\"317\":1,\"320\":1,\"329\":2,\"347\":1,\"350\":1,\"435\":5,\"453\":1,\"476\":4,\"615\":6,\"628\":1,\"629\":14,\"641\":2,\"654\":4,\"662\":11,\"672\":11,\"743\":5,\"751\":21,\"755\":8,\"756\":8,\"776\":2,\"781\":2,\"789\":1,\"793\":8,\"794\":3,\"804\":10,\"808\":4,\"812\":6,\"816\":23,\"819\":6,\"831\":4,\"888\":8,\"891\":8,\"893\":1,\"896\":8,\"897\":1,\"914\":2,\"918\":2,\"920\":4,\"921\":1,\"924\":1,\"930\":5,\"933\":5,\"936\":5,\"937\":5,\"939\":13,\"948\":2,\"954\":1,\"956\":4,\"978\":2,\"979\":1,\"995\":2,\"1009\":8,\"1024\":2,\"1026\":1,\"1029\":2,\"1033\":1,\"1034\":14,\"1046\":2,\"1059\":4,\"1067\":11,\"1077\":11,\"1148\":5,\"1156\":21,\"1160\":8,\"1161\":8,\"1181\":2,\"1186\":2,\"1194\":1,\"1198\":8,\"1199\":3,\"1209\":10,\"1213\":4,\"1217\":6,\"1221\":23,\"1224\":6,\"1236\":4,\"1293\":8,\"1296\":8,\"1298\":1,\"1301\":8,\"1302\":1,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":1,\"1329\":1,\"1335\":5,\"1338\":5,\"1341\":5,\"1342\":5,\"1344\":13,\"1353\":2,\"1359\":1,\"1361\":4,\"1383\":2,\"1384\":1,\"1400\":2,\"1414\":8,\"1450\":2,\"1461\":1,\"1464\":1,\"1465\":1,\"1474\":2,\"1476\":1,\"1479\":2}}],[\"异或运算\",{\"1\":{\"192\":1}}],[\"异步\",{\"1\":{\"176\":1}}],[\"异步处理\",{\"1\":{\"92\":1}}],[\"异常3\",{\"1\":{\"634\":1,\"1039\":1}}],[\"异常2\",{\"1\":{\"634\":1,\"1039\":1}}],[\"异常1\",{\"1\":{\"634\":1,\"1039\":1}}],[\"异常体系\",{\"0\":{\"632\":1,\"1037\":1}}],[\"异常一旦出现\",{\"1\":{\"631\":1,\"1036\":1}}],[\"异常是在程序在编译或者运行的过程中可能出现的问题\",{\"1\":{\"631\":1,\"1036\":1}}],[\"异常\",{\"1\":{\"162\":1,\"948\":1,\"1353\":1}}],[\"异常捕获处理\",{\"1\":{\"162\":1}}],[\"异常就像是一个隐藏的陷阱\",{\"1\":{\"37\":1}}],[\"异常的破解\",{\"0\":{\"36\":1,\"630\":1,\"1035\":1},\"2\":{\"640\":1,\"1045\":1}}],[\"异常处理标准格式\",{\"1\":{\"1000\":1,\"1405\":1}}],[\"异常处理代码书写在哪一层\",{\"1\":{\"572\":1}}],[\"异常处理器\",{\"0\":{\"572\":1}}],[\"异常处理的智慧\",{\"0\":{\"37\":1}}],[\"异常处理\",{\"0\":{\"52\":1},\"1\":{\"23\":1,\"41\":1,\"58\":1}}],[\"雪崩的问题\",{\"1\":{\"92\":1}}],[\"击穿\",{\"1\":{\"92\":1}}],[\"击败终极boss\",{\"0\":{\"6\":1}}],[\"m就代表main方法的线程\",{\"1\":{\"926\":1,\"1331\":1}}],[\"m<=\",{\"1\":{\"819\":1,\"1224\":1}}],[\"mpledateformat\",{\"1\":{\"782\":1,\"1187\":1}}],[\"mpconfig\",{\"1\":{\"544\":1}}],[\"m1\",{\"1\":{\"751\":2,\"1156\":2}}],[\"m`\",{\"1\":{\"496\":3}}],[\"mktest\",{\"1\":{\"486\":4}}],[\"mkdirs创建多级目录\",{\"1\":{\"969\":1,\"1374\":1}}],[\"mkdirs\",{\"1\":{\"968\":1,\"969\":1,\"1373\":1,\"1374\":1}}],[\"mkdir来自英文\",{\"1\":{\"445\":1}}],[\"mkdir\",{\"0\":{\"445\":1},\"1\":{\"353\":1,\"375\":3,\"377\":1,\"386\":10,\"418\":1,\"445\":1,\"486\":1,\"496\":6,\"968\":1,\"969\":2,\"1373\":1,\"1374\":2}}],[\"multiply\",{\"1\":{\"774\":2,\"1179\":2}}],[\"multi\",{\"1\":{\"474\":1}}],[\"m统计字符数量\",{\"1\":{\"455\":1}}],[\"mnt\",{\"1\":{\"428\":2}}],[\"mr\",{\"1\":{\"386\":2}}],[\"md\",{\"1\":{\"362\":1,\"981\":2,\"1386\":2}}],[\"md5\",{\"1\":{\"101\":1,\"495\":1}}],[\"m\",{\"1\":{\"280\":6,\"325\":1,\"435\":1,\"440\":1,\"455\":1,\"476\":6,\"481\":2,\"496\":1,\"819\":5,\"924\":2,\"926\":1,\"1224\":5,\"1329\":2,\"1331\":1}}],[\"ms\",{\"1\":{\"615\":1,\"629\":2,\"1034\":2}}],[\"msg\",{\"1\":{\"264\":1,\"310\":5,\"571\":8,\"1450\":3,\"1461\":6,\"1464\":6,\"1465\":6}}],[\"mset\",{\"1\":{\"128\":1}}],[\"mm\",{\"1\":{\"264\":1,\"635\":6,\"636\":2,\"781\":3,\"782\":2,\"966\":2,\"1040\":6,\"1041\":2,\"1186\":3,\"1187\":2,\"1371\":2}}],[\"m2\",{\"1\":{\"251\":1,\"751\":2,\"1156\":2}}],[\"message\",{\"1\":{\"638\":2,\"1043\":2}}],[\"memg\",{\"1\":{\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1}}],[\"mem\",{\"1\":{\"481\":4}}],[\"memory\",{\"1\":{\"395\":1}}],[\"memory=1g\",{\"1\":{\"392\":1}}],[\"media\",{\"1\":{\"428\":1}}],[\"meng\",{\"1\":{\"264\":7,\"265\":1,\"267\":3,\"270\":1,\"299\":1,\"307\":1,\"308\":1,\"309\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"316\":1,\"329\":2,\"333\":2,\"338\":1,\"635\":1,\"636\":1,\"637\":1,\"638\":2,\"660\":1,\"672\":1,\"678\":2,\"679\":1,\"686\":1,\"688\":1,\"704\":1,\"707\":1,\"708\":2,\"709\":3,\"714\":1,\"715\":1,\"721\":1,\"732\":4,\"738\":2,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":6,\"802\":3,\"804\":2,\"806\":3,\"808\":2,\"812\":2,\"814\":1,\"816\":4,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":2,\"873\":1,\"875\":5,\"878\":1,\"881\":1,\"887\":1,\"888\":2,\"891\":2,\"893\":1,\"896\":2,\"897\":2,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":2,\"1065\":1,\"1077\":1,\"1083\":2,\"1084\":1,\"1091\":1,\"1093\":1,\"1109\":1,\"1112\":1,\"1113\":2,\"1114\":3,\"1119\":1,\"1120\":1,\"1126\":1,\"1137\":4,\"1143\":2,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":6,\"1207\":3,\"1209\":2,\"1211\":3,\"1213\":2,\"1217\":2,\"1219\":1,\"1221\":4,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":2,\"1278\":1,\"1280\":5,\"1283\":1,\"1286\":1,\"1292\":1,\"1293\":2,\"1296\":2,\"1298\":1,\"1301\":2,\"1302\":2,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"meng<\",{\"1\":{\"258\":1,\"264\":1}}],[\"mergesql=true\",{\"1\":{\"240\":1}}],[\"methoddemo\",{\"1\":{\"893\":1,\"1298\":1}}],[\"method类中用于触发执行的方法\",{\"0\":{\"812\":1,\"1217\":1}}],[\"methodname\",{\"1\":{\"615\":2}}],[\"method+factory\",{\"0\":{\"590\":1}}],[\"method\",{\"0\":{\"589\":1,\"594\":2},\"1\":{\"163\":1,\"307\":2,\"308\":2,\"629\":15,\"654\":1,\"798\":1,\"810\":4,\"812\":7,\"814\":4,\"1034\":15,\"1059\":1,\"1203\":1,\"1215\":4,\"1217\":7,\"1219\":4}}],[\"metadata\",{\"1\":{\"358\":4}}],[\"meta\",{\"1\":{\"103\":1}}],[\"movies\",{\"1\":{\"751\":6,\"847\":5,\"1156\":6,\"1252\":5}}],[\"movie\",{\"1\":{\"659\":1,\"751\":14,\"847\":6,\"1064\":1,\"1156\":14,\"1252\":6}}],[\"month\",{\"1\":{\"784\":3,\"786\":2,\"1189\":3,\"1191\":2}}],[\"money\",{\"1\":{\"615\":1,\"930\":16,\"933\":6,\"936\":6,\"937\":8,\"939\":39,\"1335\":16,\"1338\":6,\"1341\":6,\"1342\":8,\"1344\":39}}],[\"monitor内部具体的存储结构\",{\"1\":{\"210\":1}}],[\"monitor是jvm级别的对象\",{\"1\":{\"210\":1}}],[\"more\",{\"0\":{\"448\":1},\"1\":{\"419\":1,\"448\":1,\"476\":1,\"495\":1}}],[\"modcount++\",{\"1\":{\"831\":1,\"1236\":1}}],[\"modcount\",{\"1\":{\"831\":1,\"1236\":1}}],[\"modify\",{\"1\":{\"512\":1,\"1027\":3,\"1477\":3}}],[\"mode\",{\"1\":{\"431\":3,\"436\":4}}],[\"modelversion>\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"modelandview\",{\"1\":{\"166\":2,\"579\":3}}],[\"model\",{\"1\":{\"107\":1,\"166\":2,\"325\":1}}],[\"module\",{\"1\":{\"356\":2,\"557\":2}}],[\"modules\",{\"1\":{\"98\":1}}],[\"middleindex\",{\"1\":{\"794\":6,\"1199\":6}}],[\"mix\",{\"1\":{\"495\":1}}],[\"mime\",{\"1\":{\"495\":1}}],[\"migrate\",{\"1\":{\"494\":1}}],[\"migration文件夹下编写v1\",{\"1\":{\"494\":1}}],[\"migration\",{\"1\":{\"494\":2}}],[\"mirrors\",{\"1\":{\"496\":1}}],[\"mirror>\",{\"1\":{\"251\":1}}],[\"mirrorof>\",{\"1\":{\"251\":1}}],[\"milliseconds\",{\"1\":{\"199\":1,\"951\":1,\"1356\":1}}],[\"mincapacity\",{\"1\":{\"831\":18,\"1236\":18}}],[\"minute\",{\"1\":{\"784\":1,\"1189\":1}}],[\"minidle\",{\"1\":{\"240\":1}}],[\"minevictableidletimemillis\",{\"1\":{\"240\":2}}],[\"min\",{\"1\":{\"137\":2,\"521\":3,\"819\":1,\"1224\":1}}],[\"math中的常用方法\",{\"0\":{\"767\":1,\"1172\":1}}],[\"math的构造器是被私有的\",{\"1\":{\"766\":1,\"1171\":1}}],[\"math没有提供公开的构造器\",{\"1\":{\"766\":1,\"1171\":1}}],[\"math\",{\"0\":{\"765\":1,\"1170\":1},\"1\":{\"774\":2,\"831\":1,\"846\":1,\"1179\":2,\"1236\":1,\"1251\":1}}],[\"matches\",{\"1\":{\"818\":1,\"1223\":1}}],[\"match\",{\"1\":{\"519\":1,\"521\":3}}],[\"mail=\",{\"1\":{\"672\":1,\"1077\":1}}],[\"mail\",{\"1\":{\"672\":6,\"1077\":6}}],[\"main线程输出\",{\"1\":{\"924\":1,\"1329\":1}}],[\"mainline\",{\"1\":{\"356\":3}}],[\"mainthread\",{\"1\":{\"199\":1}}],[\"main\",{\"1\":{\"197\":2,\"199\":4,\"205\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"264\":1,\"280\":7,\"494\":1,\"495\":2,\"628\":1,\"629\":2,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"641\":1,\"652\":1,\"654\":1,\"663\":1,\"664\":1,\"678\":1,\"704\":1,\"708\":1,\"715\":1,\"721\":1,\"732\":1,\"738\":2,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":3,\"755\":1,\"756\":1,\"759\":1,\"763\":1,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":2,\"794\":2,\"802\":1,\"814\":1,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":1,\"873\":1,\"878\":1,\"881\":1,\"887\":1,\"888\":1,\"891\":1,\"893\":1,\"896\":1,\"897\":1,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":1,\"924\":1,\"925\":1,\"930\":1,\"939\":1,\"948\":1,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":2,\"1011\":1,\"1012\":2,\"1014\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1033\":1,\"1034\":2,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":1,\"1046\":1,\"1057\":1,\"1059\":1,\"1068\":1,\"1069\":1,\"1083\":1,\"1109\":1,\"1113\":1,\"1120\":1,\"1126\":1,\"1137\":1,\"1143\":2,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":3,\"1160\":1,\"1161\":1,\"1164\":1,\"1168\":1,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":2,\"1199\":2,\"1207\":1,\"1219\":1,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":1,\"1278\":1,\"1283\":1,\"1286\":1,\"1292\":1,\"1293\":1,\"1296\":1,\"1298\":1,\"1301\":1,\"1302\":1,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":1,\"1330\":1,\"1335\":1,\"1344\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":2,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":2,\"1466\":2,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"macbook\",{\"1\":{\"641\":1,\"714\":2,\"721\":2,\"1046\":1,\"1119\":2,\"1126\":2}}],[\"mac\",{\"1\":{\"641\":7,\"1046\":7,\"1430\":1}}],[\"make\",{\"1\":{\"404\":1,\"445\":1}}],[\"makecache\",{\"1\":{\"362\":1}}],[\"manager\",{\"1\":{\"496\":2}}],[\"manages\",{\"1\":{\"389\":1}}],[\"management\",{\"1\":{\"358\":1}}],[\"may\",{\"1\":{\"386\":8}}],[\"master\",{\"1\":{\"362\":1,\"392\":4,\"456\":1}}],[\"master之间通过ping监测彼此的健康状态\",{\"1\":{\"138\":1}}],[\"map<character\",{\"1\":{\"908\":1,\"1313\":1}}],[\"map<string\",{\"1\":{\"308\":2,\"822\":1,\"903\":2,\"904\":4,\"906\":2,\"907\":1,\"908\":1,\"909\":1,\"1021\":1,\"1227\":1,\"1308\":2,\"1309\":4,\"1311\":2,\"1312\":1,\"1313\":1,\"1314\":1,\"1471\":1}}],[\"mapcase\",{\"1\":{\"908\":1,\"1313\":1}}],[\"mapdemo4\",{\"1\":{\"908\":1,\"1313\":1}}],[\"mapdemo3\",{\"1\":{\"907\":1,\"1312\":1}}],[\"mapdemo2\",{\"1\":{\"906\":1,\"1311\":1}}],[\"mapdemo1\",{\"1\":{\"903\":1,\"904\":1,\"1308\":1,\"1309\":1}}],[\"map2\",{\"1\":{\"904\":4,\"1309\":4}}],[\"map1\",{\"1\":{\"904\":5,\"1309\":5}}],[\"map双列集合\",{\"1\":{\"835\":1,\"1240\":1}}],[\"map加工\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"maps\",{\"1\":{\"822\":4,\"903\":8,\"904\":21,\"906\":10,\"907\":10,\"908\":10,\"909\":2,\"1021\":4,\"1227\":4,\"1308\":8,\"1309\":21,\"1311\":10,\"1312\":10,\"1313\":10,\"1314\":2,\"1471\":4}}],[\"map>\",{\"1\":{\"601\":1}}],[\"mapred\",{\"1\":{\"386\":7}}],[\"mapreduce\",{\"1\":{\"379\":1,\"386\":1,\"387\":2}}],[\"map的键是默认的\",{\"1\":{\"281\":1}}],[\"map值为参数值\",{\"1\":{\"281\":1}}],[\"map\",{\"1\":{\"281\":17,\"308\":4,\"386\":2,\"601\":1,\"823\":4,\"881\":1,\"887\":1,\"888\":2,\"891\":2,\"903\":2,\"904\":1,\"906\":2,\"907\":3,\"908\":4,\"909\":2,\"1022\":4,\"1228\":4,\"1286\":1,\"1292\":1,\"1293\":2,\"1296\":2,\"1308\":2,\"1309\":1,\"1311\":2,\"1312\":3,\"1313\":4,\"1314\":2,\"1472\":4}}],[\"map集合常用api\",{\"0\":{\"904\":1,\"1309\":1}}],[\"map集合实现类的特点\",{\"0\":{\"903\":1,\"1308\":1}}],[\"map集合后面的重复的键会覆盖前面的重复的键\",{\"1\":{\"902\":1,\"1307\":1}}],[\"map集合的foeeach底层源码\",{\"1\":{\"908\":1,\"1313\":1}}],[\"map集合的遍历\",{\"0\":{\"905\":1,\"1310\":1}}],[\"map集合的键值对都可以为null\",{\"1\":{\"902\":1,\"1307\":1}}],[\"map集合的键是无序的\",{\"1\":{\"902\":1,\"1307\":1}}],[\"map集合的键无序\",{\"1\":{\"901\":1,\"1306\":1}}],[\"map集合的特点都是由键决定的\",{\"1\":{\"902\":1,\"1307\":1}}],[\"map集合的特点\",{\"0\":{\"902\":1,\"1307\":1}}],[\"map集合的值不做要求可以重复\",{\"1\":{\"901\":1,\"1306\":1}}],[\"map集合的每个元素的格式\",{\"1\":{\"899\":1,\"1304\":1}}],[\"map集合体系\",{\"0\":{\"901\":1,\"1306\":1}}],[\"map集合完整的格式\",{\"1\":{\"900\":1,\"1305\":1}}],[\"map集合整体格式\",{\"0\":{\"900\":1,\"1305\":1}}],[\"map集合也被称为\",{\"1\":{\"899\":1,\"1304\":1}}],[\"map集合是一种双列集合\",{\"1\":{\"899\":1,\"1304\":1}}],[\"map集合概述和使用\",{\"0\":{\"899\":1,\"1304\":1}}],[\"map集合获取流\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"map集合中的\",{\"1\":{\"282\":1}}],[\"map集合\",{\"0\":{\"898\":1,\"1303\":1},\"1\":{\"280\":1,\"281\":1,\"308\":1}}],[\"map集合参数\",{\"1\":{\"272\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"570\":8,\"615\":8}}],[\"mappers>\",{\"1\":{\"264\":1,\"267\":1}}],[\"mapper代理开发\",{\"0\":{\"265\":1}}],[\"mapper>\",{\"1\":{\"264\":1,\"270\":1}}],[\"mapper\",{\"1\":{\"264\":3,\"267\":3,\"270\":4,\"326\":1,\"496\":1,\"570\":1,\"615\":1}}],[\"map接口中都存在of方法可以创建不可变集合\",{\"1\":{\"910\":1,\"1315\":1}}],[\"map接口中\",{\"1\":{\"909\":1,\"1314\":1}}],[\"map接口\",{\"1\":{\"194\":1}}],[\"maxpoolpreparestatementperconnectionsize\",{\"1\":{\"240\":1}}],[\"maxwait=3000\",{\"1\":{\"240\":1}}],[\"maxwait\",{\"1\":{\"240\":1}}],[\"maxactive=10\",{\"1\":{\"240\":1}}],[\"maxactive\",{\"1\":{\"240\":1}}],[\"max\",{\"1\":{\"137\":1,\"240\":2,\"495\":3,\"521\":2,\"767\":1,\"819\":1,\"831\":11,\"952\":2,\"1172\":1,\"1224\":1,\"1236\":11,\"1357\":2}}],[\"maximumpoolsize\",{\"1\":{\"112\":1,\"219\":2,\"944\":2,\"948\":1,\"949\":1,\"1349\":2,\"1353\":1,\"1354\":1}}],[\"maven与springboot多环境兼容\",{\"0\":{\"624\":1}}],[\"maven进阶\",{\"0\":{\"539\":1}}],[\"maven<\",{\"1\":{\"293\":1,\"557\":1,\"570\":1}}],[\"maven插件使用tomcat\",{\"1\":{\"293\":1}}],[\"maven中坐标是资源的唯一标识\",{\"1\":{\"256\":1}}],[\"maven坐标的主要组成\",{\"1\":{\"256\":1}}],[\"maven坐标\",{\"0\":{\"256\":1}}],[\"maven对项目构建的生命周期划分为3套\",{\"1\":{\"254\":1}}],[\"maven构建项目的时候经历了哪些事情就是生命周期\",{\"1\":{\"254\":1}}],[\"maven生命周期\",{\"0\":{\"254\":1}}],[\"maven的常用命令\",{\"0\":{\"253\":1}}],[\"maven的基本使用\",{\"0\":{\"252\":1}}],[\"maven环境配置\",{\"0\":{\"251\":1}}],[\"maven2\",{\"1\":{\"250\":1}}],[\"maven仓库\",{\"0\":{\"250\":1}}],[\"maven简介\",{\"0\":{\"249\":1}}],[\"maven依赖管理就是管理项目的第三方资源\",{\"1\":{\"248\":1}}],[\"maven提供了一套简单的命令来完成项目构建\",{\"1\":{\"248\":1}}],[\"maven提供了一套标准化的项目结构\",{\"1\":{\"248\":1}}],[\"maven是专门用于管理和构建java项目的工具\",{\"1\":{\"248\":1}}],[\"maven\",{\"0\":{\"98\":2,\"248\":1},\"1\":{\"92\":1,\"95\":1,\"98\":3,\"103\":2,\"104\":1,\"107\":1,\"249\":2,\"250\":1,\"251\":3,\"258\":4,\"264\":4,\"293\":2,\"494\":1,\"557\":7,\"570\":5,\"615\":6,\"747\":1,\"1152\":1}}],[\"mv\",{\"0\":{\"450\":1},\"1\":{\"392\":2,\"418\":2,\"450\":1}}],[\"mvc好处\",{\"1\":{\"325\":1}}],[\"mvc是一种分成开发的模式\",{\"1\":{\"325\":1}}],[\"mvc模式和三层架构\",{\"0\":{\"324\":1}}],[\"mvc\",{\"0\":{\"167\":1,\"169\":1,\"325\":1},\"1\":{\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"mvcc的具体实现主要依赖于数据库中记录的隐藏字段\",{\"1\":{\"154\":1}}],[\"mvcc\",{\"1\":{\"154\":1}}],[\"mvcc等常见知识\",{\"1\":{\"92\":1}}],[\"mvn\",{\"1\":{\"98\":2,\"103\":1,\"251\":1,\"494\":1}}],[\"mycallable\",{\"1\":{\"921\":4,\"949\":5,\"1326\":4,\"1354\":5}}],[\"myrunnable\",{\"1\":{\"918\":2,\"948\":2,\"951\":9,\"1323\":2,\"1353\":2,\"1356\":9}}],[\"myarraylist<>\",{\"1\":{\"871\":1,\"1276\":1}}],[\"myarraylist<string>\",{\"1\":{\"871\":1,\"1276\":1}}],[\"myarraylist<t>\",{\"1\":{\"870\":1,\"871\":1,\"1275\":1,\"1276\":1}}],[\"myapi\",{\"1\":{\"108\":1}}],[\"myexception\",{\"1\":{\"638\":6,\"1043\":6}}],[\"myid\",{\"1\":{\"375\":3}}],[\"my\",{\"1\":{\"362\":1,\"428\":1,\"496\":16}}],[\"mykey\",{\"1\":{\"360\":2}}],[\"mythreaddemo04\",{\"1\":{\"199\":1}}],[\"mythreaddemo03\",{\"1\":{\"199\":2}}],[\"mythreaddemo02\",{\"1\":{\"199\":4}}],[\"mythreaddemo01\",{\"1\":{\"199\":7}}],[\"mythread\",{\"1\":{\"199\":1,\"914\":2,\"924\":5,\"1319\":2,\"1329\":5}}],[\"mybatisutil\",{\"1\":{\"816\":3,\"1221\":3}}],[\"mybatisconfig\",{\"1\":{\"570\":2,\"615\":2}}],[\"mybatis会把多个参数封装为mao集合\",{\"1\":{\"281\":1}}],[\"mybatis会将数组封装成一个map集合\",{\"1\":{\"280\":1}}],[\"mybatis提供了paramnameresolver类来进行参数封装\",{\"1\":{\"281\":1}}],[\"mybatis底层对于这些参数进行不同的封装处理方式\",{\"1\":{\"281\":1}}],[\"mybatis接口方法中可以接收各种各样的参数\",{\"1\":{\"281\":1}}],[\"mybatis事务默认开启的\",{\"0\":{\"275\":1}}],[\"mybatis对动态sql有很强大的支持\",{\"1\":{\"273\":1}}],[\"mybatis核心配置文件\",{\"0\":{\"267\":1}}],[\"mybatis的快速入门\",{\"1\":{\"264\":1}}],[\"mybatisdemo\",{\"1\":{\"264\":4,\"265\":1}}],[\"mybatis<\",{\"1\":{\"264\":1,\"570\":2,\"615\":2}}],[\"mybatis快速入门\",{\"0\":{\"263\":1}}],[\"mybatis是一款优秀的持久层框架\",{\"1\":{\"261\":1}}],[\"mybatisplusinterceptor\",{\"1\":{\"544\":8}}],[\"mybatisplus\",{\"0\":{\"544\":1},\"1\":{\"121\":1,\"544\":2}}],[\"mybatis\",{\"0\":{\"99\":1,\"170\":1,\"260\":1},\"1\":{\"92\":2,\"96\":1,\"99\":4,\"170\":2,\"261\":2,\"264\":10,\"267\":6,\"270\":3,\"272\":1,\"273\":2,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"316\":1,\"326\":1,\"544\":2,\"552\":1,\"570\":2,\"615\":2,\"747\":2,\"1152\":2}}],[\"mysql事务默认自动提交\",{\"1\":{\"536\":1}}],[\"mysql事务管理\",{\"1\":{\"229\":1}}],[\"mysql支持多种类型\",{\"1\":{\"511\":1}}],[\"mysql数据模型\",{\"0\":{\"502\":1}}],[\"mysql数据库的sql语句部分大小写\",{\"1\":{\"504\":1}}],[\"mysql数据库的管理员用户同linux一样\",{\"1\":{\"347\":1,\"350\":1}}],[\"mysql数据库可谓是软件行业的明星产品\",{\"1\":{\"344\":1}}],[\"mysql数据库管理系统\",{\"1\":{\"344\":1}}],[\"mysql登陆参数\",{\"0\":{\"501\":1}}],[\"mysql下载官网\",{\"0\":{\"500\":1}}],[\"mysqlbackup\",{\"1\":{\"494\":2}}],[\"mysql>\",{\"1\":{\"398\":2,\"402\":3}}],[\"mysql就安装完成并可用了\",{\"1\":{\"347\":1,\"350\":1}}],[\"mysql安装完成后\",{\"1\":{\"346\":1,\"349\":1}}],[\"mysqld的服务\",{\"1\":{\"346\":1,\"349\":1}}],[\"mysqld\",{\"1\":{\"346\":3,\"347\":2,\"349\":3,\"350\":2,\"398\":4}}],[\"mysql57\",{\"1\":{\"346\":1,\"398\":1}}],[\"mysql5\",{\"0\":{\"345\":1}}],[\"mysql5之后就可以不用写这行注册驱动代码了\",{\"1\":{\"228\":2,\"229\":1,\"231\":1,\"233\":1}}],[\"mysql驱动jar包\",{\"1\":{\"258\":1,\"264\":1}}],[\"mysql默认绑定了3306端口\",{\"1\":{\"347\":1,\"350\":1}}],[\"mysql默认自动提交事务\",{\"1\":{\"229\":1}}],[\"mysql默认的隔离级别是什么\",{\"0\":{\"152\":1}}],[\"mysql80\",{\"1\":{\"349\":1}}],[\"mysql8\",{\"0\":{\"348\":1},\"1\":{\"226\":1}}],[\"mysql主从复制的核心就是二进制日志\",{\"1\":{\"155\":1}}],[\"mysql主从同步原理\",{\"0\":{\"155\":1}}],[\"mysql的安装我们可以通过前面学习的yum命令进行\",{\"1\":{\"345\":1}}],[\"mysql的分库分表\",{\"0\":{\"156\":1}}],[\"mysql的隔离级别有\",{\"1\":{\"152\":1}}],[\"mysql的查询会自动进行类型转换\",{\"1\":{\"150\":1}}],[\"mysql的数据如何与redis数据保持一致性\",{\"0\":{\"127\":1}}],[\"mysql超大分页处理\",{\"0\":{\"148\":1}}],[\"mysql自带的慢日志查询\",{\"1\":{\"141\":1}}],[\"mysql篇\",{\"0\":{\"140\":1}}],[\"mysql\",{\"0\":{\"99\":1,\"398\":1,\"497\":1,\"1485\":1},\"1\":{\"92\":2,\"96\":2,\"121\":1,\"141\":1,\"226\":6,\"228\":1,\"229\":2,\"231\":2,\"233\":2,\"234\":1,\"240\":5,\"264\":2,\"267\":4,\"280\":3,\"344\":2,\"346\":4,\"347\":1,\"349\":4,\"350\":4,\"397\":1,\"398\":3,\"401\":2,\"402\":3,\"494\":13,\"496\":31,\"500\":1,\"501\":1,\"570\":2,\"627\":1,\"747\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"861\":4,\"871\":1,\"881\":6,\"1152\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1266\":4,\"1276\":1,\"1286\":6}}],[\"语音通话\",{\"1\":{\"1444\":1}}],[\"语言实现\",{\"1\":{\"215\":2}}],[\"语法规则\",{\"0\":{\"829\":1,\"1234\":1}}],[\"语法之谜\",{\"1\":{\"642\":1,\"1047\":1}}],[\"语法之迷\",{\"0\":{\"30\":1}}],[\"语法错误不算异常体系\",{\"1\":{\"631\":1,\"1036\":1}}],[\"语法细节如下\",{\"1\":{\"440\":1}}],[\"语法\",{\"1\":{\"322\":1,\"373\":1,\"422\":1,\"442\":1,\"445\":1,\"446\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"453\":2,\"454\":1,\"455\":1,\"457\":1,\"460\":1,\"461\":1,\"462\":1,\"465\":1,\"466\":1,\"473\":1,\"474\":1,\"475\":1,\"478\":1,\"479\":1,\"481\":1,\"482\":1,\"486\":1,\"490\":1,\"491\":1,\"492\":1,\"526\":1}}],[\"语法层面\",{\"1\":{\"215\":1}}],[\"语句和\",{\"1\":{\"155\":1}}],[\"语句\",{\"1\":{\"99\":1,\"155\":1,\"240\":1}}],[\"语句的编写\",{\"1\":{\"92\":1}}],[\"s+\",{\"1\":{\"906\":1,\"908\":1,\"1311\":1,\"1313\":1}}],[\"s3\",{\"1\":{\"738\":2,\"743\":2,\"823\":2,\"1022\":2,\"1143\":2,\"1148\":2,\"1228\":2,\"1472\":2}}],[\"s2是在字符串常量池中的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"s2\",{\"1\":{\"664\":5,\"738\":2,\"743\":10,\"823\":2,\"995\":4,\"1018\":2,\"1022\":2,\"1069\":5,\"1143\":2,\"1148\":10,\"1228\":2,\"1400\":4,\"1468\":2,\"1472\":2}}],[\"s1是在堆内存中的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"s1\",{\"1\":{\"664\":7,\"738\":2,\"743\":9,\"750\":2,\"823\":2,\"824\":2,\"995\":2,\"1018\":2,\"1022\":2,\"1023\":2,\"1069\":7,\"1143\":2,\"1148\":9,\"1155\":2,\"1228\":2,\"1229\":2,\"1400\":2,\"1468\":2,\"1472\":2,\"1473\":2}}],[\"sb\",{\"1\":{\"908\":4,\"1313\":4}}],[\"sb=new\",{\"1\":{\"648\":1,\"1053\":1}}],[\"sbin中的程序\",{\"1\":{\"386\":1}}],[\"sbin\",{\"1\":{\"386\":1,\"392\":2,\"428\":3}}],[\"swing\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"swim\",{\"1\":{\"1018\":3,\"1468\":3}}],[\"swimming\",{\"1\":{\"738\":15,\"1018\":5,\"1143\":15,\"1468\":5}}],[\"switch语句中的执行过程是\",{\"1\":{\"653\":1,\"1058\":1}}],[\"switch\",{\"1\":{\"641\":1,\"653\":1,\"708\":1,\"1046\":1,\"1058\":1,\"1113\":1}}],[\"swap\",{\"1\":{\"211\":1,\"481\":1}}],[\"swagger\",{\"0\":{\"100\":2,\"120\":3},\"1\":{\"100\":5,\"120\":3}}],[\"sd=\",{\"1\":{\"648\":1,\"1053\":1}}],[\"sdf\",{\"1\":{\"635\":6,\"636\":2,\"781\":3,\"782\":5,\"1040\":6,\"1041\":2,\"1186\":3,\"1187\":5}}],[\"sdk\",{\"0\":{\"103\":1,\"104\":1,\"105\":1},\"1\":{\"95\":4,\"97\":4,\"100\":1,\"103\":10,\"104\":1,\"105\":4,\"120\":1}}],[\"sayhello\",{\"1\":{\"1024\":4,\"1474\":4}}],[\"safe\",{\"1\":{\"930\":3,\"1335\":3}}],[\"same\",{\"1\":{\"758\":1,\"1163\":1}}],[\"sa==sb\",{\"1\":{\"648\":1,\"1053\":1}}],[\"sa=new\",{\"1\":{\"648\":1,\"1053\":1}}],[\"save\",{\"1\":{\"557\":3,\"570\":6,\"571\":2,\"613\":1,\"615\":3,\"816\":3,\"1221\":3}}],[\"salary=\",{\"1\":{\"816\":1,\"1221\":1}}],[\"salary\",{\"1\":{\"525\":2,\"816\":9,\"1221\":9}}],[\"s`\",{\"1\":{\"496\":3}}],[\"s选项\",{\"1\":{\"475\":1}}],[\"s就是super\",{\"1\":{\"428\":1}}],[\"socket4\",{\"1\":{\"1465\":3}}],[\"socket3\",{\"1\":{\"1464\":3}}],[\"socket2\",{\"1\":{\"1461\":2}}],[\"socket1\",{\"1\":{\"1458\":1}}],[\"socket类成员方法\",{\"0\":{\"1458\":1}}],[\"socket\",{\"0\":{\"1457\":1},\"1\":{\"1449\":6,\"1450\":6,\"1457\":1,\"1458\":7,\"1461\":15,\"1464\":22,\"1465\":22,\"1466\":23}}],[\"so\",{\"1\":{\"831\":1,\"1236\":1}}],[\"sortcards\",{\"1\":{\"897\":5,\"1302\":5}}],[\"sort\",{\"1\":{\"793\":7,\"794\":3,\"896\":3,\"897\":1,\"1019\":4,\"1198\":7,\"1199\":3,\"1301\":3,\"1302\":1,\"1469\":4}}],[\"somename\",{\"1\":{\"495\":2}}],[\"software\",{\"1\":{\"386\":4}}],[\"source>8<\",{\"1\":{\"615\":1}}],[\"source>\",{\"1\":{\"557\":1,\"615\":1}}],[\"source>1\",{\"1\":{\"557\":1}}],[\"sourceencoding>\",{\"1\":{\"557\":1}}],[\"sourceencoding>utf\",{\"1\":{\"557\":1}}],[\"source=51ea6336b76b9ea01f2d5cad2110fe0a\",{\"1\":{\"281\":1,\"888\":1,\"1293\":1}}],[\"source\",{\"1\":{\"108\":1,\"353\":1,\"358\":4,\"389\":1,\"486\":1,\"743\":1,\"1148\":1}}],[\"srv\",{\"1\":{\"428\":1}}],[\"srpms\",{\"1\":{\"358\":2}}],[\"srcdir\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"srcfile\",{\"1\":{\"1014\":1,\"1419\":1}}],[\"src\",{\"1\":{\"240\":1,\"245\":1,\"494\":3,\"816\":1,\"965\":1,\"966\":1,\"969\":2,\"994\":1,\"995\":1,\"996\":1,\"997\":2,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":2,\"1008\":2,\"1009\":2,\"1011\":2,\"1012\":2,\"1221\":1,\"1370\":1,\"1371\":1,\"1374\":2,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":2,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":2,\"1413\":2,\"1414\":2,\"1416\":2,\"1417\":2}}],[\"smtp服务\",{\"1\":{\"355\":1}}],[\"short\",{\"1\":{\"650\":1,\"651\":1,\"788\":2,\"1055\":1,\"1056\":1,\"1193\":2}}],[\"show\",{\"1\":{\"320\":1,\"504\":3,\"507\":1,\"509\":1,\"872\":1,\"1277\":1}}],[\"sh任务放到后台\",{\"1\":{\"424\":3}}],[\"shanghai\",{\"1\":{\"404\":1,\"494\":1}}],[\"shared\",{\"1\":{\"495\":1}}],[\"share\",{\"1\":{\"387\":1,\"402\":1,\"495\":3,\"496\":5}}],[\"shell\",{\"1\":{\"389\":1}}],[\"sh即在$hbase\",{\"1\":{\"389\":1}}],[\"sh命令哦\",{\"1\":{\"386\":1}}],[\"sh这个命令来自于\",{\"1\":{\"386\":1}}],[\"shuffle\",{\"1\":{\"895\":1,\"897\":1,\"1300\":1,\"1302\":1}}],[\"shuffle<\",{\"1\":{\"386\":1}}],[\"shutdownnow\",{\"1\":{\"948\":2,\"1353\":2}}],[\"shutdown\",{\"1\":{\"199\":1,\"948\":2,\"1353\":2}}],[\"sh文件\",{\"1\":{\"386\":3,\"389\":1}}],[\"sh\",{\"1\":{\"354\":1,\"375\":2,\"377\":2,\"378\":3,\"386\":6,\"389\":2,\"392\":5,\"395\":1,\"424\":6}}],[\"s\",{\"1\":{\"309\":5,\"353\":2,\"354\":1,\"358\":3,\"375\":3,\"377\":3,\"386\":2,\"389\":2,\"392\":2,\"395\":2,\"435\":2,\"475\":3,\"476\":4,\"481\":3,\"496\":2,\"743\":1,\"751\":3,\"755\":2,\"763\":4,\"781\":2,\"806\":2,\"819\":4,\"821\":12,\"822\":1,\"823\":23,\"824\":2,\"845\":2,\"846\":4,\"866\":6,\"906\":2,\"908\":1,\"988\":2,\"995\":2,\"996\":2,\"1003\":2,\"1008\":2,\"1018\":2,\"1020\":12,\"1021\":1,\"1022\":23,\"1023\":2,\"1026\":2,\"1148\":1,\"1156\":3,\"1160\":2,\"1168\":4,\"1186\":2,\"1211\":2,\"1224\":4,\"1226\":12,\"1227\":1,\"1228\":23,\"1229\":2,\"1250\":2,\"1251\":4,\"1271\":6,\"1311\":2,\"1313\":1,\"1393\":2,\"1400\":2,\"1401\":2,\"1408\":2,\"1413\":2,\"1468\":2,\"1470\":12,\"1471\":1,\"1472\":23,\"1473\":2,\"1476\":2}}],[\"s架构的web项目\",{\"1\":{\"299\":1}}],[\"split\",{\"1\":{\"743\":2,\"1148\":2}}],[\"specified\",{\"1\":{\"758\":1,\"1163\":1}}],[\"specific\",{\"1\":{\"386\":9}}],[\"speed<\",{\"1\":{\"615\":1}}],[\"space\",{\"1\":{\"433\":1,\"819\":1,\"1224\":1}}],[\"spark更加偏向于离线计算而flink更加偏向于实时计算\",{\"1\":{\"394\":1}}],[\"sparkpi\",{\"1\":{\"392\":1}}],[\"spark\",{\"1\":{\"392\":27}}],[\"spark在大数据体系是明星产品\",{\"1\":{\"391\":1}}],[\"spark是一款分布式内存计算引擎\",{\"1\":{\"391\":1}}],[\"spm\",{\"1\":{\"281\":1,\"888\":1,\"1293\":1}}],[\"springcloud\",{\"1\":{\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"springconfig\",{\"1\":{\"570\":4,\"615\":3}}],[\"spring事务\",{\"0\":{\"616\":1}}],[\"spring整合junit\",{\"0\":{\"614\":1}}],[\"spring整合mybatis\",{\"0\":{\"612\":1}}],[\"spring提供了一个ioc容器\",{\"1\":{\"582\":1}}],[\"spring提供了两种事务的使用方法\",{\"1\":{\"161\":1}}],[\"springjunit4classrunner\",{\"1\":{\"570\":2,\"615\":2}}],[\"spring<\",{\"1\":{\"570\":1,\"615\":1}}],[\"springframework<\",{\"1\":{\"557\":1,\"570\":3,\"615\":3}}],[\"springframework\",{\"1\":{\"544\":2,\"557\":8,\"562\":2,\"570\":24,\"573\":2,\"579\":26,\"601\":3,\"615\":10}}],[\"springmvcsupport\",{\"1\":{\"579\":1}}],[\"springmvc需要加载对应的annotationconfigwebapplicationcontext\",{\"1\":{\"557\":1}}],[\"springmvcconfig\",{\"1\":{\"557\":2,\"562\":1,\"566\":1,\"570\":2,\"579\":3}}],[\"springmvc入门案例\",{\"0\":{\"557\":1}}],[\"springmvc技术与servlet技术功能相同\",{\"1\":{\"556\":1}}],[\"springmvc概述\",{\"0\":{\"556\":1}}],[\"springmvc简介\",{\"0\":{\"555\":1}}],[\"springmvc\",{\"0\":{\"554\":1},\"1\":{\"326\":1,\"537\":1,\"557\":1}}],[\"springmvc的执行流程\",{\"0\":{\"166\":1}}],[\"spring框架\",{\"0\":{\"580\":1}}],[\"spring框架并不能解决构造函数的的依赖注入\",{\"1\":{\"165\":1}}],[\"spring框架依据三级缓存已经解决了大部分的循环依赖\",{\"1\":{\"164\":1}}],[\"spring解决循环依赖是通过三级缓存来解决的\",{\"1\":{\"164\":1}}],[\"spring的bean的生命周期\",{\"0\":{\"163\":1}}],[\"spring为方法创建代理\",{\"1\":{\"162\":1}}],[\"spring默认只会回滚非检查异常运行时异常\",{\"1\":{\"162\":1}}],[\"spring中事务失效的场景有哪些\",{\"0\":{\"162\":1}}],[\"spring中的循环引用\",{\"0\":{\"164\":1}}],[\"spring中的事务也是通过aop来实现的\",{\"1\":{\"161\":1}}],[\"spring中的事务是如何实现的\",{\"0\":{\"161\":1}}],[\"spring中的bean是线程安全的吗\",{\"0\":{\"158\":1}}],[\"spring使用aop在方法的前面开启事务\",{\"1\":{\"161\":1}}],[\"spring\",{\"0\":{\"96\":1,\"102\":1,\"103\":1,\"116\":1,\"167\":1,\"169\":2,\"172\":1,\"581\":1},\"1\":{\"92\":1,\"95\":4,\"96\":3,\"103\":5,\"109\":1,\"110\":1,\"111\":1,\"113\":1,\"114\":2,\"116\":2,\"123\":1,\"158\":1,\"159\":2,\"163\":2,\"168\":1,\"169\":2,\"171\":1,\"326\":1,\"494\":13,\"570\":3,\"601\":1,\"615\":2,\"620\":4,\"707\":2,\"708\":1,\"747\":2,\"750\":2,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"1112\":2,\"1113\":1,\"1152\":2,\"1155\":2,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1}}],[\"springboot框架\",{\"0\":{\"617\":1}}],[\"springboot之后适合缺少项目经验的小伙伴来练手\",{\"1\":{\"537\":1}}],[\"springboot项目依赖mysql和redis\",{\"1\":{\"494\":1}}],[\"springbootconfiguration\",{\"1\":{\"168\":1}}],[\"springbootapplication\",{\"1\":{\"168\":1}}],[\"springboot的自动配置原理\",{\"0\":{\"168\":1}}],[\"springbootmysqlmybatis\",{\"1\":{\"109\":1}}],[\"springboot\",{\"0\":{\"169\":1},\"1\":{\"92\":1,\"121\":1,\"701\":1,\"747\":1,\"750\":1,\"881\":6,\"1106\":1,\"1152\":1,\"1155\":1,\"1286\":6}}],[\"springboot开发框架\",{\"1\":{\"92\":1}}],[\"ssh免密\",{\"1\":{\"380\":1}}],[\"ssh免密配置\",{\"0\":{\"369\":1}}],[\"ssh免密登录等等\",{\"1\":{\"363\":1}}],[\"ssh\",{\"1\":{\"368\":1,\"369\":4,\"373\":1,\"460\":2}}],[\"ssh可以让我们通过ssh命令\",{\"1\":{\"368\":1}}],[\"ssh服务支持\",{\"1\":{\"368\":1}}],[\"ssh服务是一种用于远程登录的安全认证协议\",{\"1\":{\"368\":1}}],[\"ssl\",{\"1\":{\"495\":8}}],[\"sslcacert=\",{\"1\":{\"358\":4,\"409\":1}}],[\"sslverify=1\",{\"1\":{\"358\":4,\"409\":1}}],[\"sss\",{\"1\":{\"264\":1}}],[\"ss\",{\"1\":{\"264\":1,\"635\":3,\"636\":1,\"781\":2,\"782\":2,\"966\":1,\"1040\":3,\"1041\":1,\"1186\":2,\"1187\":2,\"1371\":1}}],[\"ssm<\",{\"1\":{\"570\":1}}],[\"ssm整合\",{\"0\":{\"569\":1}}],[\"ssm框架\",{\"1\":{\"121\":1,\"326\":1}}],[\"ssm\",{\"0\":{\"1486\":1},\"1\":{\"92\":1,\"96\":2}}],[\"school\",{\"1\":{\"704\":2,\"1109\":2}}],[\"schema\",{\"1\":{\"402\":1,\"601\":3}}],[\"schemalocation=\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"601\":1,\"615\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"956\":2,\"1361\":2}}],[\"schedule\",{\"1\":{\"954\":2,\"1359\":2}}],[\"scheduler\",{\"0\":{\"116\":1},\"1\":{\"116\":2,\"386\":2}}],[\"scheduledatfixedrate\",{\"1\":{\"955\":1,\"1360\":1}}],[\"scheduledfuture<\",{\"1\":{\"955\":1,\"1360\":1}}],[\"scheduledexecutorservice的优点\",{\"0\":{\"956\":1,\"1361\":1}}],[\"scheduledexecutorservice的方法\",{\"1\":{\"955\":1,\"1360\":1}}],[\"scheduledexecutorservice内部为线程池\",{\"1\":{\"955\":1,\"1360\":1}}],[\"scheduledexecutorservice是jdk1\",{\"1\":{\"955\":1,\"1360\":1}}],[\"scheduledexecutorservice定时器\",{\"0\":{\"955\":1,\"1360\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"951\":1,\"952\":1,\"953\":1,\"955\":1,\"956\":2,\"1356\":1,\"1357\":1,\"1358\":1,\"1360\":1,\"1361\":2}}],[\"scheduled\",{\"1\":{\"109\":1,\"116\":2}}],[\"sc==sd\",{\"1\":{\"648\":1,\"1053\":1}}],[\"sc=\",{\"1\":{\"648\":1,\"1053\":1}}],[\"scores\",{\"1\":{\"845\":2,\"1250\":2}}],[\"score=\",{\"1\":{\"751\":1,\"1156\":1}}],[\"score\",{\"1\":{\"511\":1,\"751\":9,\"845\":2,\"1156\":9,\"1250\":2}}],[\"scope属性\",{\"0\":{\"586\":1}}],[\"scope\",{\"1\":{\"259\":2}}],[\"scope>\",{\"1\":{\"258\":1,\"259\":1,\"264\":1,\"295\":1,\"318\":1,\"557\":1,\"570\":2,\"615\":1}}],[\"scala\",{\"1\":{\"395\":2}}],[\"scanner\",{\"1\":{\"743\":6,\"751\":5,\"1148\":6,\"1156\":5,\"1450\":6,\"1461\":5,\"1464\":5,\"1465\":5}}],[\"scan\",{\"1\":{\"389\":1}}],[\"scp命令的高级用法\",{\"1\":{\"373\":1}}],[\"scp命令是cp命令的升级版\",{\"1\":{\"373\":1}}],[\"scp\",{\"0\":{\"373\":1},\"1\":{\"373\":6,\"375\":2,\"377\":2,\"386\":2,\"389\":2,\"392\":2,\"395\":2}}],[\"scripts\",{\"1\":{\"365\":1}}],[\"scientific\",{\"1\":{\"360\":1}}],[\"sc\",{\"1\":{\"312\":1,\"819\":1,\"1224\":1}}],[\"snapshot<\",{\"1\":{\"258\":1,\"264\":1,\"557\":1,\"570\":1,\"615\":1}}],[\"simpledateformat如何进行字符串时间的解析\",{\"1\":{\"782\":1,\"1187\":1}}],[\"simpledateformat可以格式化哪些时间形式\",{\"1\":{\"782\":1,\"1187\":1}}],[\"simpledateformatdemo1\",{\"1\":{\"781\":1,\"1186\":1}}],[\"simpledateformat的格式化方法\",{\"0\":{\"781\":1,\"1186\":1}}],[\"simpledateformat的构造器\",{\"0\":{\"780\":1,\"1185\":1}}],[\"simpledateformat类的作用\",{\"0\":{\"779\":1,\"1184\":1}}],[\"simpledateformat\",{\"0\":{\"778\":1,\"1183\":1},\"1\":{\"635\":7,\"636\":3,\"780\":2,\"781\":8,\"782\":3,\"966\":2,\"1040\":7,\"1041\":3,\"1185\":2,\"1186\":8,\"1187\":3,\"1371\":2}}],[\"singleinstance2\",{\"1\":{\"688\":6,\"1093\":6}}],[\"singleinstance\",{\"1\":{\"686\":4,\"1091\":4}}],[\"singletonfactories\",{\"1\":{\"164\":1}}],[\"singletonobjects\",{\"1\":{\"164\":1}}],[\"singleton\",{\"1\":{\"158\":4,\"159\":1}}],[\"sing\",{\"1\":{\"629\":3,\"1034\":3}}],[\"si\",{\"1\":{\"481\":2}}],[\"signature\",{\"1\":{\"615\":5}}],[\"signing\",{\"1\":{\"356\":2,\"358\":11}}],[\"sighup\",{\"1\":{\"422\":1}}],[\"sia\",{\"1\":{\"396\":1}}],[\"sizes\",{\"1\":{\"897\":2,\"1302\":2}}],[\"size减一\",{\"1\":{\"863\":1,\"1268\":1}}],[\"size加一\",{\"1\":{\"863\":1,\"1268\":1}}],[\"size++\",{\"1\":{\"831\":1,\"1236\":1}}],[\"size\",{\"1\":{\"395\":2,\"453\":2,\"495\":1,\"750\":5,\"751\":3,\"823\":2,\"831\":12,\"842\":2,\"866\":1,\"897\":14,\"904\":2,\"948\":1,\"1022\":2,\"1155\":5,\"1156\":3,\"1228\":2,\"1236\":12,\"1247\":2,\"1271\":1,\"1302\":14,\"1309\":2,\"1353\":1,\"1472\":2}}],[\"size<\",{\"1\":{\"386\":1}}],[\"site\",{\"1\":{\"254\":4,\"386\":9,\"389\":1}}],[\"sid=\",{\"1\":{\"751\":1,\"1156\":1}}],[\"sid\",{\"1\":{\"240\":1,\"751\":9,\"1156\":9}}],[\"suv\",{\"1\":{\"878\":4,\"1283\":4}}],[\"suvs\",{\"1\":{\"878\":5,\"1283\":5}}],[\"sublist\",{\"1\":{\"897\":1,\"1302\":1}}],[\"subtract\",{\"1\":{\"774\":2,\"1179\":2}}],[\"substring\",{\"1\":{\"743\":4,\"1026\":1,\"1148\":4,\"1476\":1}}],[\"submit5\",{\"1\":{\"949\":2,\"1354\":2}}],[\"submit4\",{\"1\":{\"949\":2,\"1354\":2}}],[\"submit3\",{\"1\":{\"949\":2,\"1354\":2}}],[\"submit2\",{\"1\":{\"949\":2,\"1354\":2}}],[\"submit1\",{\"1\":{\"949\":2,\"1354\":2}}],[\"submit\",{\"1\":{\"199\":1,\"392\":1,\"948\":1,\"949\":5,\"1353\":1,\"1354\":5}}],[\"suppliser\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"supplier=\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"supplier<t>\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"supplier\",{\"0\":{\"1026\":1,\"1476\":1},\"1\":{\"1025\":1,\"1026\":5,\"1475\":1,\"1476\":5}}],[\"support\",{\"1\":{\"557\":2,\"562\":1,\"570\":1,\"579\":1}}],[\"super\",{\"1\":{\"638\":1,\"694\":1,\"700\":1,\"793\":1,\"823\":1,\"877\":1,\"895\":1,\"896\":1,\"924\":1,\"930\":1,\"939\":2,\"1022\":1,\"1027\":2,\"1028\":3,\"1029\":2,\"1043\":1,\"1099\":1,\"1105\":1,\"1198\":1,\"1228\":1,\"1282\":1,\"1300\":1,\"1301\":1,\"1329\":1,\"1335\":1,\"1344\":2,\"1472\":1,\"1477\":2,\"1478\":3,\"1479\":2}}],[\"summer\",{\"1\":{\"707\":2,\"708\":3,\"1112\":2,\"1113\":3}}],[\"sum\",{\"1\":{\"521\":2,\"893\":5,\"921\":3,\"1298\":5,\"1326\":3}}],[\"su命令是用于切换用户的系统命令\",{\"1\":{\"461\":1}}],[\"su和exit命令\",{\"0\":{\"461\":1}}],[\"sudoers\",{\"1\":{\"462\":1}}],[\"sudo命令\",{\"0\":{\"462\":1}}],[\"sudo\",{\"1\":{\"366\":1,\"462\":1,\"496\":9}}],[\"su\",{\"1\":{\"354\":1,\"366\":1,\"461\":1}}],[\"sun\",{\"1\":{\"237\":1,\"323\":1,\"842\":1,\"1247\":1}}],[\"sun公司通过java代码写了一套标准接口\",{\"1\":{\"225\":1}}],[\"success\",{\"1\":{\"233\":1,\"743\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1148\":4,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"sy\",{\"1\":{\"481\":3}}],[\"symlink\",{\"1\":{\"474\":1}}],[\"synclimit=2\",{\"1\":{\"375\":1}}],[\"synchronized只锁定当前链表或红黑二叉树的首节点\",{\"1\":{\"217\":1}}],[\"synchronized来保证并发安全进行实现\",{\"1\":{\"217\":1}}],[\"synchronized和lock有什么区别\",{\"0\":{\"215\":1}}],[\"synchronized\",{\"0\":{\"210\":1},\"1\":{\"210\":1,\"215\":4,\"933\":1,\"936\":1,\"937\":3,\"939\":2,\"1338\":1,\"1341\":1,\"1342\":3,\"1344\":2}}],[\"synchronizedlist\",{\"1\":{\"187\":1}}],[\"synchornized\",{\"1\":{\"92\":1}}],[\"sysfs\",{\"1\":{\"428\":1}}],[\"sys\",{\"1\":{\"428\":1}}],[\"sysconfig\",{\"1\":{\"365\":1,\"371\":1}}],[\"system中常用方法\",{\"0\":{\"769\":1,\"1174\":1}}],[\"system的功能是通用的\",{\"1\":{\"768\":1,\"1173\":1}}],[\"systemexception\",{\"1\":{\"573\":3}}],[\"systemd\",{\"1\":{\"474\":2,\"496\":1}}],[\"systemctl\",{\"0\":{\"474\":1},\"1\":{\"346\":3,\"349\":3,\"354\":2,\"356\":7,\"358\":7,\"360\":7,\"362\":3,\"365\":3,\"371\":2,\"398\":3,\"404\":2,\"415\":3,\"474\":2,\"496\":36}}],[\"system\",{\"0\":{\"768\":1,\"1173\":1},\"1\":{\"142\":2,\"169\":1,\"170\":1,\"199\":5,\"205\":3,\"226\":1,\"229\":1,\"231\":1,\"233\":2,\"240\":2,\"245\":4,\"259\":1,\"264\":1,\"272\":1,\"277\":1,\"279\":1,\"280\":1,\"295\":1,\"299\":2,\"307\":7,\"308\":10,\"309\":2,\"310\":3,\"313\":2,\"318\":1,\"320\":2,\"329\":1,\"333\":1,\"338\":1,\"404\":1,\"474\":2,\"496\":1,\"544\":5,\"557\":1,\"570\":2,\"579\":3,\"615\":5,\"628\":6,\"629\":22,\"635\":5,\"636\":5,\"637\":5,\"638\":1,\"641\":2,\"647\":3,\"648\":2,\"652\":2,\"654\":11,\"662\":3,\"663\":4,\"664\":3,\"678\":1,\"686\":1,\"688\":1,\"704\":3,\"708\":4,\"709\":2,\"715\":5,\"721\":2,\"732\":4,\"737\":1,\"738\":9,\"743\":27,\"747\":2,\"750\":9,\"751\":13,\"755\":4,\"756\":3,\"759\":4,\"760\":1,\"763\":8,\"769\":6,\"771\":6,\"774\":11,\"776\":6,\"781\":7,\"784\":7,\"786\":7,\"790\":1,\"793\":9,\"794\":3,\"802\":3,\"804\":7,\"806\":4,\"808\":4,\"812\":6,\"814\":8,\"818\":4,\"821\":4,\"823\":12,\"824\":2,\"829\":1,\"839\":5,\"840\":7,\"842\":12,\"844\":7,\"845\":4,\"846\":4,\"847\":1,\"861\":6,\"865\":9,\"866\":3,\"871\":1,\"873\":4,\"881\":2,\"887\":4,\"888\":1,\"891\":4,\"893\":2,\"896\":2,\"897\":6,\"903\":1,\"904\":13,\"906\":2,\"907\":3,\"908\":5,\"909\":3,\"914\":2,\"918\":2,\"920\":4,\"921\":2,\"924\":5,\"925\":2,\"930\":3,\"933\":3,\"936\":3,\"937\":3,\"939\":5,\"948\":2,\"949\":5,\"954\":1,\"956\":2,\"965\":5,\"966\":7,\"969\":8,\"971\":2,\"974\":3,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":2,\"994\":5,\"995\":10,\"996\":4,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":2,\"1003\":1,\"1007\":1,\"1008\":3,\"1009\":1,\"1012\":4,\"1018\":5,\"1019\":1,\"1020\":4,\"1022\":12,\"1023\":2,\"1024\":2,\"1026\":2,\"1027\":2,\"1028\":4,\"1029\":4,\"1033\":6,\"1034\":22,\"1040\":5,\"1041\":5,\"1042\":5,\"1043\":1,\"1046\":2,\"1052\":3,\"1053\":2,\"1057\":2,\"1059\":11,\"1067\":3,\"1068\":4,\"1069\":3,\"1083\":1,\"1091\":1,\"1093\":1,\"1109\":3,\"1113\":4,\"1114\":2,\"1120\":5,\"1126\":2,\"1137\":4,\"1142\":1,\"1143\":9,\"1148\":27,\"1152\":2,\"1155\":9,\"1156\":13,\"1160\":4,\"1161\":3,\"1164\":4,\"1165\":1,\"1168\":8,\"1174\":6,\"1176\":6,\"1179\":11,\"1181\":6,\"1186\":7,\"1189\":7,\"1191\":7,\"1195\":1,\"1198\":9,\"1199\":3,\"1207\":3,\"1209\":7,\"1211\":4,\"1213\":4,\"1217\":6,\"1219\":8,\"1223\":4,\"1226\":4,\"1228\":12,\"1229\":2,\"1234\":1,\"1244\":5,\"1245\":7,\"1247\":12,\"1249\":7,\"1250\":4,\"1251\":4,\"1252\":1,\"1266\":6,\"1270\":9,\"1271\":3,\"1276\":1,\"1278\":4,\"1286\":2,\"1292\":4,\"1293\":1,\"1296\":4,\"1298\":2,\"1301\":2,\"1302\":6,\"1308\":1,\"1309\":13,\"1311\":2,\"1312\":3,\"1313\":5,\"1314\":3,\"1319\":2,\"1323\":2,\"1325\":4,\"1326\":2,\"1329\":5,\"1330\":2,\"1335\":3,\"1338\":3,\"1341\":3,\"1342\":3,\"1344\":5,\"1353\":2,\"1354\":5,\"1359\":1,\"1361\":2,\"1370\":5,\"1371\":7,\"1374\":8,\"1376\":2,\"1379\":3,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":2,\"1399\":5,\"1400\":10,\"1401\":4,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":2,\"1408\":1,\"1412\":1,\"1413\":3,\"1414\":1,\"1417\":4,\"1433\":8,\"1449\":5,\"1450\":7,\"1461\":4,\"1464\":4,\"1465\":4,\"1468\":5,\"1469\":1,\"1470\":4,\"1472\":12,\"1473\":2,\"1474\":2,\"1476\":2,\"1477\":2,\"1478\":4,\"1479\":4}}],[\"slots\",{\"1\":{\"395\":1}}],[\"slowsqlmillis=5000\",{\"1\":{\"240\":1}}],[\"slow\",{\"1\":{\"141\":2}}],[\"slow模式和fast模式\",{\"1\":{\"129\":1}}],[\"slf4j<\",{\"1\":{\"264\":1}}],[\"slf4j\",{\"1\":{\"240\":2}}],[\"sleeping\",{\"1\":{\"481\":3}}],[\"sleep\",{\"0\":{\"207\":1},\"1\":{\"207\":4,\"629\":3,\"925\":2,\"926\":1,\"939\":2,\"948\":1,\"956\":1,\"1034\":3,\"1330\":2,\"1331\":1,\"1344\":2,\"1353\":1,\"1361\":1}}],[\"slaves\",{\"1\":{\"137\":2,\"392\":3,\"395\":1}}],[\"study\",{\"1\":{\"662\":1,\"664\":2,\"1067\":1,\"1069\":2}}],[\"student�\\u0016��c>\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"studentdata\",{\"1\":{\"875\":1,\"1280\":1}}],[\"studentclass\",{\"1\":{\"808\":7,\"1213\":7}}],[\"student>\",{\"1\":{\"802\":1,\"829\":1,\"1207\":1,\"1234\":1}}],[\"student3\",{\"1\":{\"759\":3,\"1164\":3}}],[\"student2\",{\"1\":{\"751\":2,\"756\":4,\"759\":1,\"760\":1,\"1156\":2,\"1161\":4,\"1164\":1,\"1165\":1}}],[\"student1\",{\"1\":{\"751\":2,\"756\":4,\"759\":2,\"760\":1,\"1156\":2,\"1161\":4,\"1164\":2,\"1165\":1}}],[\"students\",{\"1\":{\"751\":8,\"793\":3,\"888\":6,\"891\":7,\"896\":5,\"1156\":8,\"1198\":3,\"1293\":6,\"1296\":7,\"1301\":5}}],[\"student\",{\"1\":{\"511\":2,\"659\":1,\"660\":3,\"662\":1,\"664\":4,\"751\":17,\"755\":11,\"756\":21,\"758\":2,\"759\":3,\"793\":17,\"802\":7,\"804\":8,\"806\":11,\"808\":8,\"816\":8,\"823\":4,\"875\":6,\"888\":14,\"891\":18,\"896\":15,\"1009\":13,\"1022\":4,\"1064\":1,\"1065\":3,\"1067\":1,\"1069\":4,\"1156\":17,\"1160\":11,\"1161\":21,\"1163\":2,\"1164\":3,\"1198\":17,\"1207\":7,\"1209\":8,\"1211\":11,\"1213\":8,\"1221\":8,\"1228\":4,\"1280\":6,\"1293\":14,\"1296\":18,\"1301\":15,\"1414\":13,\"1472\":4}}],[\"stereotype\",{\"1\":{\"557\":1,\"570\":2,\"579\":1,\"615\":2}}],[\"stdoutimpl\",{\"1\":{\"544\":1,\"552\":1}}],[\"stdout\",{\"1\":{\"544\":1,\"552\":1}}],[\"st\",{\"1\":{\"481\":2}}],[\"stime\",{\"1\":{\"478\":1}}],[\"str\",{\"1\":{\"762\":1,\"1026\":1,\"1167\":1,\"1476\":1}}],[\"stream常用api\",{\"0\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"stream<t>\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"stream<map\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"stream<integer>\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"stream<string>\",{\"1\":{\"822\":3,\"823\":3,\"824\":1,\"1021\":3,\"1022\":3,\"1023\":1,\"1227\":3,\"1228\":3,\"1229\":1,\"1471\":3,\"1472\":3,\"1473\":1}}],[\"streamtest4\",{\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"streamtest3\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"streamtest2\",{\"1\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"streamtest\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"streamdemo\",{\"1\":{\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"stream流的收集操作\",{\"0\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"stream流的获取\",{\"0\":{\"822\":1,\"1021\":1,\"1227\":1,\"1471\":1}}],[\"stream流\",{\"0\":{\"820\":1,\"1020\":1,\"1225\":1,\"1470\":1},\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"stream\",{\"1\":{\"389\":1,\"821\":1,\"822\":7,\"823\":14,\"824\":4,\"1020\":1,\"1021\":7,\"1022\":14,\"1023\":4,\"1028\":1,\"1226\":1,\"1227\":7,\"1228\":14,\"1229\":4,\"1470\":1,\"1471\":7,\"1472\":14,\"1473\":4,\"1478\":1},\"2\":{\"826\":1,\"1032\":1,\"1231\":1,\"1482\":1}}],[\"strings\",{\"1\":{\"891\":8,\"1296\":8}}],[\"string>\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"string内容不可变\",{\"1\":{\"764\":1,\"1169\":1}}],[\"string底层拼接字符串的原理就是\",{\"1\":{\"764\":1,\"1169\":1}}],[\"stringbuilder内容可变\",{\"1\":{\"764\":1,\"1169\":1}}],[\"stringbuilder在拼接字符串的时候\",{\"1\":{\"764\":1,\"1169\":1}}],[\"stringbuilder性能好的原因\",{\"0\":{\"764\":1,\"1169\":1}}],[\"stringbuilder只是拼接字符串的手段\",{\"1\":{\"763\":1,\"1168\":1}}],[\"stringbuilder1\",{\"1\":{\"763\":9,\"1168\":9}}],[\"stringbuilder常用方法\",{\"0\":{\"763\":1,\"1168\":1}}],[\"stringbuilder构造器\",{\"0\":{\"762\":1,\"1167\":1}}],[\"stringbuilder是一个可变字符串类\",{\"1\":{\"761\":1,\"1166\":1}}],[\"stringbuilder\",{\"0\":{\"761\":1,\"1166\":1},\"1\":{\"762\":2,\"763\":17,\"908\":2,\"1167\":2,\"1168\":17,\"1313\":2}}],[\"stringbuffer\",{\"1\":{\"307\":3,\"873\":6,\"1278\":6}}],[\"stringotherdemo05\",{\"1\":{\"743\":1,\"1148\":1}}],[\"string常用api\",{\"1\":{\"743\":1,\"1148\":1}}],[\"stringequalsdemo04\",{\"1\":{\"743\":1,\"1148\":1}}],[\"stringdemo03\",{\"1\":{\"743\":3,\"1148\":3}}],[\"stringdemo02\",{\"1\":{\"743\":1,\"1148\":1}}],[\"stringdemo01\",{\"1\":{\"743\":1,\"1148\":1}}],[\"string类常见的面试题\",{\"1\":{\"743\":1,\"1148\":1}}],[\"string类定义的变量可以存储字符串\",{\"1\":{\"742\":1,\"1147\":1}}],[\"string类\",{\"0\":{\"742\":1,\"1147\":1}}],[\"string的构造器方法把字符集\",{\"1\":{\"309\":2}}],[\"stringfuturetask\",{\"1\":{\"199\":3}}],[\"string\",{\"0\":{\"111\":2},\"1\":{\"111\":2,\"113\":1,\"114\":1,\"199\":5,\"205\":1,\"226\":5,\"229\":5,\"231\":7,\"233\":8,\"234\":1,\"240\":6,\"244\":13,\"245\":13,\"264\":19,\"272\":6,\"275\":4,\"277\":4,\"279\":1,\"280\":1,\"281\":2,\"298\":1,\"307\":18,\"308\":14,\"309\":9,\"310\":3,\"312\":2,\"316\":1,\"320\":1,\"329\":2,\"333\":3,\"557\":3,\"562\":2,\"570\":9,\"571\":4,\"579\":4,\"615\":7,\"628\":1,\"629\":16,\"635\":2,\"636\":2,\"637\":1,\"638\":2,\"641\":5,\"648\":6,\"652\":1,\"654\":1,\"660\":4,\"662\":3,\"663\":1,\"664\":1,\"672\":10,\"678\":4,\"679\":3,\"704\":4,\"707\":1,\"708\":1,\"709\":3,\"714\":2,\"715\":1,\"721\":3,\"732\":1,\"738\":2,\"743\":34,\"747\":1,\"749\":2,\"750\":4,\"751\":27,\"754\":1,\"755\":7,\"756\":6,\"758\":9,\"759\":1,\"762\":1,\"763\":4,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"780\":1,\"781\":8,\"784\":1,\"786\":1,\"790\":1,\"793\":9,\"794\":2,\"802\":2,\"804\":7,\"806\":2,\"808\":3,\"809\":1,\"810\":2,\"812\":9,\"813\":1,\"814\":1,\"816\":12,\"818\":3,\"821\":3,\"822\":2,\"823\":4,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":2,\"846\":2,\"847\":1,\"861\":1,\"865\":1,\"866\":4,\"871\":2,\"873\":3,\"878\":1,\"881\":1,\"887\":3,\"888\":6,\"891\":6,\"893\":1,\"896\":6,\"897\":14,\"903\":1,\"904\":1,\"906\":2,\"907\":2,\"908\":4,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":4,\"924\":2,\"925\":1,\"926\":4,\"930\":7,\"937\":1,\"939\":14,\"948\":1,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"965\":5,\"966\":4,\"969\":1,\"970\":1,\"971\":3,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":2,\"988\":4,\"994\":2,\"995\":11,\"996\":4,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":3,\"1004\":1,\"1007\":1,\"1008\":5,\"1009\":8,\"1011\":2,\"1012\":3,\"1014\":3,\"1018\":1,\"1019\":1,\"1020\":3,\"1021\":2,\"1022\":4,\"1023\":1,\"1024\":2,\"1026\":3,\"1033\":1,\"1034\":16,\"1040\":2,\"1041\":2,\"1042\":1,\"1043\":2,\"1046\":5,\"1053\":6,\"1057\":1,\"1059\":1,\"1065\":4,\"1067\":3,\"1068\":1,\"1069\":1,\"1077\":10,\"1083\":4,\"1084\":3,\"1109\":4,\"1112\":1,\"1113\":1,\"1114\":3,\"1119\":2,\"1120\":1,\"1126\":3,\"1137\":1,\"1143\":2,\"1148\":34,\"1152\":1,\"1154\":2,\"1155\":4,\"1156\":27,\"1159\":1,\"1160\":7,\"1161\":6,\"1163\":9,\"1164\":1,\"1167\":1,\"1168\":4,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1185\":1,\"1186\":8,\"1189\":1,\"1191\":1,\"1195\":1,\"1198\":9,\"1199\":2,\"1207\":2,\"1209\":7,\"1211\":2,\"1213\":3,\"1214\":1,\"1215\":2,\"1217\":9,\"1218\":1,\"1219\":1,\"1221\":12,\"1223\":3,\"1226\":3,\"1227\":2,\"1228\":4,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":2,\"1251\":2,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":4,\"1276\":2,\"1278\":3,\"1283\":1,\"1286\":1,\"1292\":3,\"1293\":6,\"1296\":6,\"1298\":1,\"1301\":6,\"1302\":14,\"1308\":1,\"1309\":1,\"1311\":2,\"1312\":2,\"1313\":4,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":4,\"1329\":2,\"1330\":1,\"1331\":4,\"1335\":7,\"1342\":1,\"1344\":14,\"1353\":1,\"1354\":1,\"1356\":1,\"1359\":1,\"1361\":1,\"1370\":5,\"1371\":4,\"1374\":1,\"1375\":1,\"1376\":3,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":2,\"1393\":4,\"1399\":2,\"1400\":11,\"1401\":4,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":3,\"1409\":1,\"1412\":1,\"1413\":5,\"1414\":8,\"1416\":2,\"1417\":3,\"1419\":3,\"1433\":4,\"1449\":5,\"1450\":5,\"1457\":1,\"1458\":2,\"1461\":5,\"1464\":5,\"1465\":5,\"1466\":2,\"1468\":1,\"1469\":1,\"1470\":3,\"1471\":2,\"1472\":4,\"1473\":1,\"1474\":2,\"1476\":3}}],[\"stylesheet\",{\"1\":{\"386\":3}}],[\"stopped\",{\"1\":{\"481\":2}}],[\"stop\",{\"1\":{\"354\":1,\"356\":2,\"358\":2,\"360\":2,\"362\":2,\"365\":1,\"371\":1,\"386\":2,\"389\":1,\"392\":1,\"474\":1,\"496\":4}}],[\"stores\",{\"1\":{\"386\":1}}],[\"store\",{\"1\":{\"110\":1,\"251\":1,\"1012\":1,\"1417\":1}}],[\"staitc\",{\"1\":{\"955\":1,\"1360\":1}}],[\"star2\",{\"1\":{\"629\":3,\"1034\":3}}],[\"staragentproxy\",{\"1\":{\"629\":2,\"1034\":2}}],[\"star\",{\"1\":{\"494\":1,\"496\":1,\"629\":12,\"1034\":12}}],[\"starttime\",{\"1\":{\"769\":3,\"1174\":3}}],[\"startswith\",{\"1\":{\"743\":2,\"821\":2,\"823\":5,\"824\":1,\"1020\":2,\"1022\":5,\"1023\":1,\"1148\":2,\"1226\":2,\"1228\":5,\"1229\":1,\"1470\":2,\"1472\":5,\"1473\":1}}],[\"startup\",{\"1\":{\"354\":1,\"494\":1}}],[\"start方法只能被调用一次\",{\"1\":{\"201\":1}}],[\"start\",{\"0\":{\"201\":1},\"1\":{\"199\":4,\"201\":1,\"202\":1,\"205\":3,\"346\":1,\"349\":1,\"356\":1,\"358\":1,\"360\":1,\"362\":1,\"365\":1,\"375\":1,\"377\":2,\"386\":5,\"389\":2,\"392\":1,\"395\":1,\"398\":1,\"404\":2,\"415\":1,\"474\":1,\"496\":7,\"535\":1,\"641\":5,\"662\":1,\"663\":2,\"914\":1,\"918\":1,\"920\":3,\"921\":2,\"924\":2,\"926\":1,\"930\":2,\"939\":5,\"1046\":5,\"1067\":1,\"1068\":2,\"1319\":1,\"1323\":1,\"1325\":3,\"1326\":2,\"1329\":2,\"1331\":1,\"1335\":2,\"1344\":5,\"1464\":1,\"1466\":1}}],[\"starter<\",{\"1\":{\"544\":1}}],[\"starter\",{\"0\":{\"103\":1,\"618\":1},\"1\":{\"95\":1,\"97\":1}}],[\"standalone集群\",{\"1\":{\"391\":1,\"394\":1}}],[\"standardcharsets\",{\"1\":{\"309\":9,\"997\":5,\"1402\":5}}],[\"stack\",{\"1\":{\"361\":1,\"865\":8,\"1270\":8}}],[\"stable\",{\"1\":{\"356\":2}}],[\"state\",{\"1\":{\"963\":1,\"1368\":1}}],[\"statement\",{\"0\":{\"230\":1},\"1\":{\"226\":6,\"229\":7,\"231\":6,\"233\":1}}],[\"status=\",{\"1\":{\"244\":1}}],[\"status\",{\"1\":{\"243\":2,\"244\":9,\"245\":9,\"270\":2,\"272\":11,\"273\":8,\"274\":6,\"275\":4,\"276\":2,\"277\":5,\"281\":5,\"323\":2,\"346\":1,\"349\":1,\"356\":1,\"358\":1,\"360\":1,\"362\":1,\"398\":1,\"474\":1,\"496\":22,\"511\":1,\"529\":2,\"769\":1,\"1174\":1}}],[\"stat\",{\"1\":{\"240\":4}}],[\"static应用知识\",{\"0\":{\"681\":1,\"1086\":1}}],[\"static注意事项\",{\"0\":{\"680\":1,\"1085\":1}}],[\"static的应用\",{\"0\":{\"678\":1,\"1083\":1}}],[\"static修饰成员变量的内存原理\",{\"0\":{\"676\":1,\"1081\":1}}],[\"static是静态的意思\",{\"1\":{\"675\":1,\"1080\":1}}],[\"static关键字的作用\",{\"0\":{\"675\":1,\"1080\":1}}],[\"static关键字\",{\"0\":{\"674\":1,\"1079\":1}}],[\"static\",{\"1\":{\"199\":4,\"205\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"245\":1,\"264\":1,\"309\":1,\"316\":3,\"495\":1,\"571\":8,\"628\":1,\"629\":5,\"635\":2,\"636\":2,\"637\":2,\"638\":2,\"641\":2,\"652\":1,\"654\":3,\"663\":1,\"664\":1,\"678\":2,\"679\":1,\"680\":1,\"682\":1,\"686\":1,\"688\":3,\"704\":5,\"707\":7,\"708\":2,\"714\":1,\"715\":1,\"721\":3,\"732\":2,\"738\":3,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":3,\"755\":1,\"756\":1,\"758\":1,\"759\":1,\"763\":2,\"767\":7,\"769\":4,\"771\":1,\"772\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":6,\"794\":3,\"802\":1,\"812\":1,\"814\":1,\"816\":1,\"818\":3,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"831\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":1,\"873\":3,\"878\":2,\"881\":1,\"887\":1,\"888\":1,\"891\":1,\"893\":2,\"895\":2,\"896\":3,\"897\":4,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":1,\"924\":1,\"925\":2,\"926\":2,\"930\":1,\"937\":1,\"939\":1,\"948\":1,\"949\":1,\"951\":6,\"952\":4,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":5,\"976\":2,\"978\":2,\"979\":2,\"981\":2,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":4,\"1011\":1,\"1012\":2,\"1014\":1,\"1018\":2,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1026\":1,\"1027\":1,\"1028\":1,\"1029\":1,\"1033\":1,\"1034\":5,\"1040\":2,\"1041\":2,\"1042\":2,\"1043\":2,\"1046\":2,\"1057\":1,\"1059\":3,\"1068\":1,\"1069\":1,\"1083\":2,\"1084\":1,\"1085\":1,\"1087\":1,\"1091\":1,\"1093\":3,\"1109\":5,\"1112\":7,\"1113\":2,\"1119\":1,\"1120\":1,\"1126\":3,\"1137\":2,\"1143\":3,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":3,\"1160\":1,\"1161\":1,\"1163\":1,\"1164\":1,\"1168\":2,\"1172\":7,\"1174\":4,\"1176\":1,\"1177\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":6,\"1199\":3,\"1207\":1,\"1217\":1,\"1219\":1,\"1221\":1,\"1223\":3,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1236\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":1,\"1278\":3,\"1283\":2,\"1286\":1,\"1292\":1,\"1293\":1,\"1296\":1,\"1298\":2,\"1300\":2,\"1301\":3,\"1302\":4,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":1,\"1330\":2,\"1331\":2,\"1335\":1,\"1342\":1,\"1344\":1,\"1353\":1,\"1354\":1,\"1356\":6,\"1357\":4,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":5,\"1381\":2,\"1383\":2,\"1384\":2,\"1386\":2,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":4,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":3,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":3,\"1466\":3,\"1468\":2,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1,\"1476\":1,\"1477\":1,\"1478\":1,\"1479\":1}}],[\"serializable\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"serialversionuid\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"serverreadrunnable\",{\"1\":{\"1466\":3}}],[\"serverreaderrunnable\",{\"1\":{\"1465\":4}}],[\"serverreaderthread\",{\"1\":{\"1464\":6,\"1466\":3}}],[\"serversocket类成员方法\",{\"0\":{\"1461\":1}}],[\"serversocket\",{\"0\":{\"1460\":1},\"1\":{\"1460\":1,\"1461\":5,\"1464\":5,\"1465\":5,\"1466\":6}}],[\"serverdemo2\",{\"1\":{\"1449\":1,\"1450\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"server=utf8mb4\",{\"1\":{\"494\":2,\"496\":12}}],[\"servertimezone=asia\",{\"1\":{\"494\":1}}],[\"servertimezone=utc\",{\"1\":{\"226\":1,\"627\":1}}],[\"server具有许多配置选项\",{\"1\":{\"410\":1}}],[\"server配置数据库\",{\"0\":{\"403\":1}}],[\"server服务器上能否远程登录mysql\",{\"1\":{\"402\":1}}],[\"server存在\",{\"1\":{\"386\":1}}],[\"server内\",{\"1\":{\"354\":1}}],[\"server\",{\"0\":{\"399\":1,\"401\":1},\"1\":{\"317\":1,\"346\":1,\"349\":1,\"353\":7,\"354\":5,\"358\":18,\"373\":7,\"375\":21,\"377\":25,\"378\":4,\"386\":16,\"387\":1,\"389\":12,\"392\":13,\"395\":9,\"397\":2,\"398\":1,\"401\":1,\"402\":1,\"403\":1,\"404\":4,\"415\":2,\"494\":4,\"495\":11,\"496\":12,\"620\":3,\"1424\":2}}],[\"servletcontainersinitconfig\",{\"1\":{\"557\":1,\"562\":1,\"579\":1}}],[\"servletconfig\",{\"1\":{\"298\":2,\"570\":1}}],[\"servlet+html+ajax\",{\"1\":{\"321\":1}}],[\"servlet+jsp\",{\"1\":{\"321\":1}}],[\"servletoutputstream\",{\"1\":{\"312\":1,\"315\":3}}],[\"servletinputstream\",{\"1\":{\"307\":2}}],[\"servlet要想被访问\",{\"1\":{\"302\":1}}],[\"servletdemo3\",{\"1\":{\"307\":1}}],[\"servletdemo2\",{\"1\":{\"299\":1}}],[\"servletdemo1\",{\"1\":{\"295\":2}}],[\"servlet是根接口有抽象实现类genericservlet\",{\"1\":{\"299\":1}}],[\"servlet是javaee规范之一\",{\"1\":{\"294\":1}}],[\"servlet是java提供的动态web资源开发技术\",{\"1\":{\"294\":1}}],[\"servlet体系结构\",{\"0\":{\"299\":1}}],[\"servlet方法介绍\",{\"0\":{\"298\":1}}],[\"servlet方法由web服务器调用\",{\"1\":{\"296\":1}}],[\"servlet方法由谁调用\",{\"1\":{\"296\":1}}],[\"servlet时\",{\"1\":{\"297\":1}}],[\"servlet运行在servlet容器\",{\"1\":{\"297\":1}}],[\"servlet生命周期\",{\"0\":{\"297\":1}}],[\"servlet由web服务器创建\",{\"1\":{\"296\":1}}],[\"servlet由谁创建\",{\"1\":{\"296\":1}}],[\"servlet执行流程\",{\"0\":{\"296\":1}}],[\"servletexception\",{\"1\":{\"295\":1,\"299\":3,\"307\":3,\"308\":3,\"309\":1,\"310\":6,\"313\":6,\"314\":3,\"315\":3,\"329\":6,\"333\":6,\"338\":2}}],[\"servletresponse\",{\"1\":{\"295\":2,\"298\":1,\"311\":1,\"338\":1}}],[\"servletrequest\",{\"1\":{\"295\":2,\"298\":1,\"306\":1,\"338\":1}}],[\"servlet<\",{\"1\":{\"295\":1,\"323\":1,\"557\":1,\"570\":1}}],[\"servlet需要依赖于tomcat才能运行\",{\"1\":{\"290\":1}}],[\"servlet容器会调用servlet的\",{\"1\":{\"297\":1}}],[\"servlet容器\",{\"1\":{\"290\":1,\"291\":1}}],[\"servlet\",{\"0\":{\"294\":1,\"302\":1},\"1\":{\"259\":1,\"285\":1,\"295\":4,\"299\":5,\"307\":5,\"308\":5,\"310\":10,\"313\":10,\"314\":5,\"315\":6,\"318\":1,\"319\":1,\"321\":1,\"325\":1,\"329\":12,\"333\":12,\"337\":1,\"338\":2,\"351\":2,\"557\":2,\"562\":2,\"570\":4,\"579\":15}}],[\"servicept\",{\"1\":{\"615\":2}}],[\"service方法外\",{\"1\":{\"320\":1}}],[\"service中\",{\"1\":{\"320\":1}}],[\"services<\",{\"1\":{\"386\":1}}],[\"services\",{\"1\":{\"228\":1,\"494\":1,\"496\":2}}],[\"service\",{\"1\":{\"107\":1,\"158\":1,\"295\":2,\"297\":1,\"298\":1,\"326\":1,\"386\":1,\"428\":1,\"474\":2,\"494\":1,\"496\":3,\"570\":8,\"615\":9}}],[\"sex=\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"sex\",{\"1\":{\"888\":12,\"891\":12,\"896\":12,\"1293\":12,\"1296\":12,\"1301\":12}}],[\"sequence\",{\"1\":{\"758\":1,\"1163\":1}}],[\"season>\",{\"1\":{\"707\":1,\"1112\":1}}],[\"season\",{\"1\":{\"707\":8,\"708\":4,\"1112\":8,\"1113\":4}}],[\"searchfile\",{\"1\":{\"981\":3,\"1386\":3}}],[\"search\",{\"1\":{\"473\":2}}],[\"separated\",{\"1\":{\"386\":2}}],[\"separator=\",{\"1\":{\"280\":1}}],[\"separator\",{\"1\":{\"280\":1}}],[\"seek\",{\"1\":{\"751\":5,\"1156\":5}}],[\"see\",{\"1\":{\"386\":8}}],[\"selinux是一个安全子系统\",{\"1\":{\"428\":1}}],[\"selinux=disabled\",{\"1\":{\"371\":1}}],[\"selinux=enforcing\",{\"1\":{\"371\":1}}],[\"selinux的配置同防火墙一样\",{\"1\":{\"371\":1}}],[\"selinux\",{\"1\":{\"371\":2,\"428\":1}}],[\"selects\",{\"1\":{\"908\":3,\"1313\":3}}],[\"selectresult\",{\"1\":{\"629\":2,\"1034\":2}}],[\"selectpage\",{\"1\":{\"544\":1}}],[\"selectbyname\",{\"1\":{\"326\":1}}],[\"selectbyid\",{\"1\":{\"283\":1,\"326\":1}}],[\"selectbyconditionsingle\",{\"1\":{\"274\":2}}],[\"selectbycondition\",{\"1\":{\"272\":4,\"273\":3,\"281\":1}}],[\"selectlist\",{\"1\":{\"264\":1,\"265\":1}}],[\"select>\",{\"1\":{\"264\":1,\"270\":3,\"271\":1,\"272\":1,\"273\":3,\"274\":2}}],[\"selectall\",{\"1\":{\"264\":2,\"265\":2,\"283\":1,\"326\":1}}],[\"select\",{\"1\":{\"146\":1,\"148\":3,\"231\":1,\"233\":4,\"240\":1,\"243\":1,\"245\":1,\"264\":1,\"270\":3,\"271\":5,\"272\":3,\"273\":4,\"274\":4,\"283\":5,\"302\":2,\"504\":1,\"507\":1,\"514\":2,\"516\":1,\"517\":2,\"518\":4,\"519\":3,\"521\":7,\"522\":1,\"523\":1,\"525\":1,\"526\":2,\"531\":5,\"532\":2,\"533\":3,\"536\":1,\"570\":4,\"613\":4,\"629\":3,\"829\":3,\"1034\":3,\"1234\":3}}],[\"secret=news3cretkey\",{\"1\":{\"413\":1}}],[\"secret\",{\"1\":{\"413\":1}}],[\"secretkey\",{\"1\":{\"101\":4}}],[\"security\",{\"1\":{\"413\":3,\"428\":1,\"1025\":1,\"1475\":1}}],[\"section\",{\"1\":{\"413\":1}}],[\"secondarynamenode\",{\"1\":{\"386\":1}}],[\"seconds<\",{\"1\":{\"386\":1}}],[\"seconds\",{\"1\":{\"331\":1,\"386\":1,\"948\":2,\"949\":1,\"956\":2,\"1353\":2,\"1354\":1,\"1361\":2,\"1465\":1,\"1466\":1}}],[\"send\",{\"1\":{\"1449\":2,\"1450\":1}}],[\"sendfile\",{\"1\":{\"495\":1}}],[\"sendredirect\",{\"1\":{\"313\":1}}],[\"sent\",{\"1\":{\"495\":1}}],[\"sentinel\",{\"1\":{\"171\":1}}],[\"semaphore\",{\"1\":{\"213\":1}}],[\"set<map\",{\"1\":{\"907\":2,\"1312\":2}}],[\"set<integer>\",{\"1\":{\"891\":1,\"1296\":1}}],[\"set<student>\",{\"1\":{\"888\":1,\"891\":2,\"1293\":1,\"1296\":2}}],[\"set<string>\",{\"1\":{\"881\":2,\"891\":1,\"904\":1,\"906\":1,\"909\":1,\"1286\":2,\"1296\":1,\"1309\":1,\"1311\":1,\"1314\":1}}],[\"set集合中的每个元素都是键值对实体类型了\",{\"1\":{\"907\":1,\"1312\":1}}],[\"set集合去重复的原因是先判断哈希值\",{\"1\":{\"888\":1,\"1293\":1}}],[\"set集合的功能其实和collection集合的api一致\",{\"1\":{\"881\":1,\"1286\":1}}],[\"set集合的特点\",{\"0\":{\"880\":1,\"1285\":1}}],[\"set集合实现类的特点\",{\"0\":{\"881\":1,\"1286\":1}}],[\"set集合体系的特点\",{\"1\":{\"881\":1,\"1286\":1}}],[\"set集合体系\",{\"0\":{\"879\":1,\"1284\":1}}],[\"set系列集合\",{\"0\":{\"839\":1,\"1244\":1}}],[\"set下有hashset和treeset常用实现类\",{\"1\":{\"836\":1,\"1241\":1}}],[\"setfield\",{\"1\":{\"808\":1,\"1213\":1}}],[\"setsize\",{\"1\":{\"897\":1,\"1302\":1}}],[\"setsid\",{\"1\":{\"751\":1,\"1156\":1}}],[\"setsex\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"sets\",{\"1\":{\"881\":10,\"909\":2,\"1286\":10,\"1314\":2}}],[\"setsalary\",{\"1\":{\"816\":1,\"1221\":1}}],[\"setscore\",{\"1\":{\"751\":1,\"1156\":1}}],[\"setstatus\",{\"1\":{\"244\":1,\"275\":1,\"277\":1,\"312\":1,\"313\":2}}],[\"setstring\",{\"1\":{\"233\":2,\"245\":6}}],[\"setheight\",{\"1\":{\"793\":1,\"1198\":1}}],[\"setheader\",{\"1\":{\"312\":1,\"313\":2,\"314\":1}}],[\"sethobbies\",{\"1\":{\"672\":1,\"1077\":1}}],[\"setproperty\",{\"1\":{\"1012\":2,\"1417\":2}}],[\"setprice\",{\"1\":{\"641\":3,\"1046\":3}}],[\"setpassword\",{\"1\":{\"264\":1,\"570\":1,\"615\":1}}],[\"setname\",{\"1\":{\"641\":3,\"660\":1,\"672\":1,\"709\":1,\"751\":2,\"755\":1,\"756\":1,\"793\":1,\"804\":1,\"806\":1,\"812\":1,\"816\":2,\"888\":1,\"891\":1,\"896\":1,\"924\":3,\"926\":1,\"1009\":1,\"1046\":3,\"1065\":1,\"1077\":1,\"1114\":1,\"1156\":2,\"1160\":1,\"1161\":1,\"1198\":1,\"1209\":1,\"1211\":1,\"1217\":1,\"1221\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1329\":3,\"1331\":1,\"1414\":1}}],[\"setnx命令是如果key不存在才能set对应的值\",{\"1\":{\"131\":1}}],[\"setnx\",{\"1\":{\"117\":3}}],[\"setmoney\",{\"1\":{\"930\":1,\"939\":2,\"1335\":1,\"1344\":2}}],[\"setmail\",{\"1\":{\"672\":1,\"1077\":1}}],[\"setmaxage\",{\"1\":{\"331\":1}}],[\"setmsg\",{\"1\":{\"571\":1}}],[\"setbasepackage\",{\"1\":{\"570\":1,\"615\":1}}],[\"setbrandname\",{\"1\":{\"244\":1,\"275\":1,\"277\":1}}],[\"settime\",{\"1\":{\"776\":1,\"777\":1,\"1181\":1,\"1182\":1}}],[\"settings\",{\"1\":{\"320\":1}}],[\"setter\",{\"1\":{\"660\":1,\"1065\":1}}],[\"settypealiasespackage\",{\"1\":{\"570\":1,\"615\":1}}],[\"seturl\",{\"1\":{\"570\":1,\"615\":1}}],[\"setusername\",{\"1\":{\"264\":1,\"570\":1,\"615\":1}}],[\"setdemo4\",{\"1\":{\"891\":1,\"1296\":1}}],[\"setdemo3\",{\"1\":{\"888\":1,\"1293\":1}}],[\"setdemo2\",{\"1\":{\"887\":1,\"1292\":1}}],[\"setdemo1\",{\"1\":{\"881\":1,\"1286\":1}}],[\"setdescription\",{\"1\":{\"244\":1,\"275\":1,\"277\":1}}],[\"setdata\",{\"1\":{\"571\":1}}],[\"setdatasource\",{\"1\":{\"570\":2,\"615\":1}}],[\"setdriverclassname\",{\"1\":{\"570\":1,\"615\":1}}],[\"setencoding\",{\"1\":{\"562\":1,\"570\":1,\"579\":1}}],[\"setex\",{\"1\":{\"129\":1}}],[\"setcardid\",{\"1\":{\"930\":1,\"939\":2,\"1335\":1,\"1344\":2}}],[\"setclassname\",{\"1\":{\"751\":1,\"1156\":1}}],[\"setcolor\",{\"1\":{\"897\":1,\"1302\":1}}],[\"setcode\",{\"1\":{\"571\":1}}],[\"setcontenttype\",{\"1\":{\"314\":2}}],[\"setcompanyname\",{\"1\":{\"244\":1,\"275\":1,\"277\":1}}],[\"setcharacterencoding\",{\"1\":{\"309\":3}}],[\"set>\",{\"1\":{\"277\":1,\"601\":1}}],[\"setaccessible\",{\"1\":{\"806\":3,\"807\":1,\"808\":2,\"809\":1,\"812\":1,\"813\":1,\"816\":1,\"1211\":3,\"1212\":1,\"1213\":2,\"1214\":1,\"1217\":1,\"1218\":1,\"1221\":1}}],[\"setactor\",{\"1\":{\"751\":1,\"1156\":1}}],[\"setage\",{\"1\":{\"660\":1,\"672\":1,\"751\":1,\"755\":1,\"756\":1,\"793\":1,\"804\":1,\"806\":1,\"816\":2,\"888\":1,\"891\":1,\"896\":1,\"1009\":1,\"1065\":1,\"1077\":1,\"1156\":1,\"1160\":1,\"1161\":1,\"1198\":1,\"1209\":1,\"1211\":1,\"1221\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1414\":1}}],[\"setattribute\",{\"1\":{\"310\":2,\"322\":1,\"333\":2}}],[\"setaddr\",{\"1\":{\"264\":1}}],[\"setautocommit\",{\"1\":{\"229\":2}}],[\"setgender\",{\"1\":{\"264\":1,\"755\":1,\"756\":1,\"816\":2,\"1009\":1,\"1160\":1,\"1161\":1,\"1221\":2,\"1414\":1}}],[\"setordered\",{\"1\":{\"244\":1,\"275\":1,\"277\":1}}],[\"setindex\",{\"1\":{\"897\":1,\"1302\":1}}],[\"setint\",{\"1\":{\"240\":1,\"245\":6}}],[\"setid\",{\"1\":{\"244\":1,\"264\":1,\"277\":1}}],[\"setxxx\",{\"1\":{\"233\":1}}],[\"set方法注入\",{\"1\":{\"164\":1}}],[\"set\",{\"1\":{\"128\":3,\"131\":1,\"221\":1,\"222\":1,\"226\":1,\"229\":1,\"245\":1,\"273\":1,\"277\":2,\"330\":1,\"350\":2,\"358\":2,\"360\":1,\"365\":1,\"386\":1,\"398\":2,\"402\":1,\"404\":1,\"414\":1,\"435\":1,\"437\":3,\"494\":1,\"496\":6,\"514\":2,\"536\":1,\"570\":1,\"601\":1,\"613\":1,\"750\":3,\"784\":2,\"808\":1,\"809\":1,\"839\":2,\"840\":2,\"861\":2,\"881\":1,\"888\":1,\"891\":7,\"906\":1,\"907\":1,\"908\":1,\"909\":3,\"910\":1,\"1155\":3,\"1189\":2,\"1213\":1,\"1214\":1,\"1244\":2,\"1245\":2,\"1266\":2,\"1286\":1,\"1293\":1,\"1296\":7,\"1311\":1,\"1312\":1,\"1313\":1,\"1314\":3,\"1315\":1}}],[\"setkeyserializer\",{\"1\":{\"113\":1}}],[\"session占用服务器资源\",{\"1\":{\"336\":1}}],[\"session默认30分钟\",{\"1\":{\"336\":1}}],[\"session无大小限制\",{\"1\":{\"336\":1}}],[\"session安全\",{\"1\":{\"336\":1}}],[\"session是将数据存储在服务端\",{\"1\":{\"336\":1}}],[\"session是基于cookie实现的\",{\"1\":{\"334\":1}}],[\"session销毁\",{\"1\":{\"335\":1}}],[\"session中的数据是否还在\",{\"1\":{\"335\":1}}],[\"session的钝化\",{\"1\":{\"335\":1}}],[\"session的使用细节\",{\"0\":{\"335\":1}}],[\"session原理\",{\"0\":{\"334\":1}}],[\"sessiondemo2\",{\"1\":{\"333\":1}}],[\"sessiondemo1\",{\"1\":{\"333\":1}}],[\"session对象功能\",{\"1\":{\"333\":1}}],[\"session\",{\"0\":{\"110\":1,\"332\":1},\"1\":{\"109\":1,\"110\":5,\"114\":2,\"123\":1,\"159\":4,\"264\":3,\"316\":2,\"322\":1,\"327\":1,\"333\":7,\"335\":3,\"495\":2}}],[\"skip\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"skip是跳过前几个元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"skill\",{\"1\":{\"629\":5,\"1034\":5}}],[\"sk\",{\"1\":{\"95\":1,\"104\":2}}],[\"sql分类\",{\"0\":{\"505\":1}}],[\"sql独有\",{\"1\":{\"504\":1}}],[\"sql参数占位符\",{\"1\":{\"272\":1,\"281\":1}}],[\"sql文件\",{\"1\":{\"272\":1,\"281\":1,\"494\":1}}],[\"sql>\",{\"1\":{\"270\":1,\"829\":1,\"1234\":1}}],[\"sql片段\",{\"1\":{\"270\":1}}],[\"sqlsessionfatory工具类抽取\",{\"0\":{\"316\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"570\":9,\"615\":9}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"264\":2,\"272\":1,\"275\":1,\"277\":1,\"279\":1,\"280\":1,\"316\":2}}],[\"sqlsessionfactoryutils\",{\"1\":{\"316\":1}}],[\"sqlsessionfactory\",{\"1\":{\"264\":4,\"265\":1,\"272\":3,\"275\":3,\"277\":3,\"279\":3,\"280\":3,\"316\":7}}],[\"sqlsession\",{\"1\":{\"264\":5,\"265\":4,\"272\":4,\"275\":5,\"277\":5,\"279\":5,\"280\":5}}],[\"sql的映射文件\",{\"1\":{\"264\":1}}],[\"sql的连接的类型\",{\"1\":{\"142\":1}}],[\"sql语句可以单行或多行书写\",{\"1\":{\"504\":1}}],[\"sql语句随着用户的输入或外部条件的变化而变化\",{\"1\":{\"273\":1}}],[\"sql语句\",{\"1\":{\"240\":1}}],[\"sql语句中的参数值用\",{\"1\":{\"233\":1}}],[\"sql语句执行时间超过2秒\",{\"1\":{\"141\":1}}],[\"sql注入是通过操作输入来修改事先定义好的sql语句\",{\"1\":{\"233\":1}}],[\"sql注入\",{\"1\":{\"233\":1}}],[\"sql\",{\"0\":{\"243\":1,\"504\":1},\"1\":{\"92\":1,\"99\":1,\"226\":5,\"228\":1,\"229\":7,\"230\":2,\"231\":6,\"233\":8,\"240\":9,\"245\":13,\"273\":1,\"402\":1,\"494\":2,\"570\":2,\"615\":2}}],[\"等需要调用的时候再获取结果\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"等功能\",{\"1\":{\"965\":1,\"1370\":1}}],[\"等进行条件判断\",{\"1\":{\"533\":1}}],[\"等一系列\",{\"1\":{\"484\":1}}],[\"等等\",{\"1\":{\"428\":1}}],[\"等提供高质量软件包的项目\",{\"1\":{\"360\":1}}],[\"等待接收客户端的socket连接请求\",{\"1\":{\"1461\":1}}],[\"等待接收客户端的socket通信连接\",{\"1\":{\"1461\":1}}],[\"等待接收数据即可\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"等待服务器确认\",{\"1\":{\"1441\":1}}],[\"等待任务执行完毕后关闭线程池\",{\"1\":{\"948\":1,\"1353\":1}}],[\"等待t2线程死亡\",{\"1\":{\"205\":1}}],[\"等待t1线程死亡\",{\"1\":{\"205\":1}}],[\"等待waiting\",{\"1\":{\"203\":1}}],[\"等依赖项\",{\"1\":{\"119\":1}}],[\"等依赖\",{\"1\":{\"96\":1}}],[\"等开发工具\",{\"1\":{\"92\":1}}],[\"等知识\",{\"1\":{\"92\":1}}],[\"等\",{\"1\":{\"92\":1,\"100\":1,\"103\":1,\"104\":1,\"120\":1,\"735\":1,\"924\":1,\"1140\":1,\"1329\":1}}],[\"awt\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"a通过z\",{\"1\":{\"819\":2,\"1224\":2}}],[\"a通过z或a到z\",{\"1\":{\"819\":1,\"1224\":1}}],[\"a通过d\",{\"1\":{\"819\":1,\"1224\":1}}],[\"a11\",{\"1\":{\"774\":4,\"1179\":4}}],[\"a1\",{\"1\":{\"774\":5,\"1179\":5}}],[\"a+b\",{\"1\":{\"774\":1,\"1179\":1}}],[\"a对象\",{\"0\":{\"731\":1,\"1136\":1}}],[\"after\",{\"1\":{\"629\":4,\"1027\":2,\"1029\":1,\"1034\":4,\"1477\":2,\"1479\":1}}],[\"aftertime\",{\"1\":{\"615\":2}}],[\"aftercompletion\",{\"1\":{\"579\":2}}],[\"a6342b4a171c\",{\"1\":{\"496\":2}}],[\"actionlistener\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"activate\",{\"1\":{\"620\":3}}],[\"active\",{\"1\":{\"620\":1,\"948\":1,\"1353\":1}}],[\"active=prod\",{\"1\":{\"494\":1}}],[\"actor=\",{\"1\":{\"751\":1,\"1156\":1}}],[\"actor\",{\"1\":{\"751\":9,\"1156\":9}}],[\"accounts\",{\"1\":{\"615\":2}}],[\"accountservicetest\",{\"1\":{\"615\":1}}],[\"accountserviceimpl\",{\"1\":{\"615\":1}}],[\"accountservice\",{\"1\":{\"615\":7}}],[\"accountdao\",{\"1\":{\"615\":8}}],[\"account\",{\"1\":{\"615\":19,\"930\":15,\"939\":28,\"1335\":15,\"1344\":28}}],[\"accompanying\",{\"1\":{\"386\":4}}],[\"accept\",{\"1\":{\"495\":1,\"846\":1,\"908\":1,\"1027\":2,\"1251\":1,\"1313\":1,\"1461\":2,\"1464\":1,\"1465\":1,\"1466\":6,\"1477\":2}}],[\"access\",{\"1\":{\"495\":2}}],[\"accesskey\",{\"1\":{\"101\":2}}],[\"avant\",{\"1\":{\"529\":1}}],[\"avail\",{\"1\":{\"481\":1}}],[\"availability\",{\"1\":{\"174\":1}}],[\"avg\",{\"1\":{\"521\":2}}],[\"average\",{\"1\":{\"481\":3}}],[\"a选项表示\",{\"1\":{\"440\":1}}],[\"aux|grep\",{\"1\":{\"496\":1}}],[\"aux\",{\"1\":{\"386\":1}}],[\"autumn\",{\"1\":{\"707\":2,\"708\":1,\"1112\":2,\"1113\":1}}],[\"author>\",{\"1\":{\"829\":3,\"1234\":3}}],[\"author\",{\"1\":{\"829\":2,\"1234\":2}}],[\"authentication\",{\"1\":{\"494\":1}}],[\"auth\",{\"1\":{\"413\":2}}],[\"authcheck\",{\"1\":{\"160\":1}}],[\"autorefresh=1\",{\"1\":{\"362\":1}}],[\"auto\",{\"1\":{\"243\":1,\"494\":2,\"496\":1,\"525\":2,\"526\":2,\"529\":5}}],[\"autocommit\",{\"1\":{\"229\":1,\"280\":1,\"536\":2}}],[\"autoconfigure\",{\"1\":{\"103\":1}}],[\"autowired\",{\"1\":{\"163\":1,\"570\":6,\"579\":5,\"615\":4}}],[\"amp\",{\"1\":{\"829\":2,\"1234\":2}}],[\"amount\",{\"1\":{\"784\":1,\"1189\":1}}],[\"am\",{\"1\":{\"386\":1}}],[\"against\",{\"1\":{\"758\":1,\"1163\":1}}],[\"aggregation<\",{\"1\":{\"386\":2}}],[\"aggregation\",{\"1\":{\"386\":2}}],[\"agreed\",{\"1\":{\"386\":4}}],[\"age>\",{\"1\":{\"829\":2,\"1234\":2}}],[\"ages1\",{\"1\":{\"1019\":6,\"1469\":6}}],[\"ages\",{\"1\":{\"793\":5,\"873\":3,\"1198\":5,\"1278\":3}}],[\"age1\",{\"1\":{\"790\":2,\"1195\":2}}],[\"age=null\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"age=18\",{\"1\":{\"806\":1,\"1211\":1}}],[\"age=1000\",{\"1\":{\"806\":1,\"1211\":1}}],[\"age=\",{\"1\":{\"672\":1,\"751\":1,\"755\":1,\"756\":1,\"793\":1,\"804\":1,\"816\":2,\"888\":1,\"891\":1,\"896\":1,\"1009\":1,\"1077\":1,\"1156\":1,\"1160\":1,\"1161\":1,\"1198\":1,\"1209\":1,\"1221\":2,\"1293\":1,\"1296\":1,\"1301\":1,\"1414\":1}}],[\"age+\",{\"1\":{\"638\":1,\"1043\":1}}],[\"agent\",{\"0\":{\"399\":1,\"401\":1},\"1\":{\"307\":5,\"397\":1,\"401\":2,\"404\":3,\"495\":1}}],[\"age\",{\"1\":{\"226\":1,\"229\":1,\"518\":1,\"519\":1,\"526\":2,\"529\":2,\"638\":3,\"660\":8,\"672\":6,\"751\":9,\"755\":9,\"756\":16,\"790\":2,\"793\":9,\"804\":9,\"808\":5,\"816\":18,\"829\":4,\"888\":12,\"891\":16,\"896\":14,\"1009\":9,\"1043\":3,\"1065\":8,\"1077\":6,\"1156\":9,\"1160\":9,\"1161\":16,\"1195\":2,\"1198\":9,\"1209\":9,\"1213\":5,\"1221\":18,\"1234\":4,\"1293\":12,\"1296\":16,\"1301\":14,\"1414\":9}}],[\"at\",{\"1\":{\"386\":4,\"404\":1}}],[\"atomicxxx类\",{\"1\":{\"211\":1}}],[\"atomicity\",{\"1\":{\"151\":1,\"536\":1}}],[\"ad\",{\"1\":{\"819\":1,\"1224\":1}}],[\"ad7c841ad50e\",{\"1\":{\"496\":6}}],[\"ad294e28d290\",{\"1\":{\"496\":9}}],[\"administrator\",{\"1\":{\"358\":1}}],[\"admin\",{\"1\":{\"358\":3,\"413\":4,\"415\":2,\"629\":2,\"704\":1,\"743\":2,\"1012\":4,\"1034\":2,\"1109\":1,\"1148\":2,\"1417\":4}}],[\"add方法如下\",{\"1\":{\"831\":1,\"1236\":1}}],[\"addall\",{\"1\":{\"821\":1,\"842\":1,\"895\":1,\"896\":1,\"897\":1,\"1020\":1,\"1226\":1,\"1247\":1,\"1300\":1,\"1301\":1,\"1302\":1,\"1470\":1}}],[\"add1\",{\"1\":{\"721\":2,\"1126\":2}}],[\"addpathpatterns\",{\"1\":{\"579\":2}}],[\"addinterceptor\",{\"1\":{\"579\":2}}],[\"addinterceptors\",{\"1\":{\"579\":2}}],[\"addinnerinterceptor\",{\"1\":{\"544\":1}}],[\"additivity=\",{\"1\":{\"264\":1}}],[\"addcookie\",{\"1\":{\"329\":2}}],[\"addresourcelocations\",{\"1\":{\"579\":1}}],[\"addresourcehandler\",{\"1\":{\"579\":1}}],[\"addresourcehandlers\",{\"1\":{\"579\":1}}],[\"address\",{\"1\":{\"395\":1,\"1447\":2,\"1449\":1,\"1450\":1}}],[\"address<\",{\"1\":{\"386\":3}}],[\"addr=\",{\"1\":{\"264\":1}}],[\"addr\",{\"1\":{\"264\":9,\"495\":1,\"526\":2}}],[\"addlast\",{\"1\":{\"187\":1,\"865\":5,\"1270\":5}}],[\"addfirst\",{\"1\":{\"187\":1,\"865\":3,\"1270\":3}}],[\"add\",{\"1\":{\"187\":3,\"231\":1,\"245\":2,\"275\":4,\"276\":1,\"354\":2,\"356\":1,\"358\":4,\"360\":1,\"496\":2,\"512\":1,\"526\":1,\"529\":3,\"721\":7,\"747\":21,\"749\":6,\"750\":7,\"751\":20,\"774\":2,\"784\":3,\"793\":4,\"814\":7,\"821\":2,\"823\":6,\"824\":6,\"831\":5,\"839\":12,\"840\":15,\"842\":9,\"844\":4,\"845\":4,\"846\":4,\"847\":3,\"861\":6,\"866\":6,\"871\":5,\"875\":3,\"878\":9,\"881\":16,\"888\":4,\"891\":14,\"897\":4,\"909\":1,\"1020\":2,\"1022\":6,\"1023\":6,\"1027\":14,\"1028\":8,\"1126\":7,\"1152\":21,\"1154\":6,\"1155\":7,\"1156\":20,\"1179\":2,\"1189\":3,\"1198\":4,\"1219\":7,\"1226\":2,\"1228\":6,\"1229\":6,\"1236\":5,\"1244\":12,\"1245\":15,\"1247\":9,\"1249\":4,\"1250\":4,\"1251\":4,\"1252\":3,\"1266\":6,\"1271\":6,\"1276\":5,\"1280\":3,\"1283\":9,\"1286\":16,\"1293\":4,\"1296\":14,\"1302\":4,\"1314\":1,\"1470\":2,\"1472\":6,\"1473\":6,\"1477\":14,\"1478\":8}}],[\"air\",{\"1\":{\"641\":1,\"1046\":1}}],[\"ai\",{\"1\":{\"344\":1}}],[\"a0\",{\"1\":{\"309\":4}}],[\"aaa\",{\"1\":{\"302\":3,\"314\":1,\"956\":1,\"969\":3,\"1361\":1,\"1374\":3}}],[\"assign\",{\"1\":{\"552\":1}}],[\"as不写也可以\",{\"1\":{\"517\":1}}],[\"asia\",{\"1\":{\"404\":1}}],[\"ascii使用1个字节存储一个字符\",{\"1\":{\"984\":1,\"1389\":1}}],[\"ascii字符集\",{\"0\":{\"984\":1,\"1389\":1}}],[\"ascii\",{\"1\":{\"819\":2,\"984\":1,\"1224\":2,\"1389\":1}}],[\"asc\",{\"1\":{\"358\":4,\"519\":3}}],[\"aservlet\",{\"1\":{\"329\":2}}],[\"as\",{\"1\":{\"270\":4,\"386\":4,\"517\":3,\"758\":1,\"1163\":1}}],[\"aspectj\",{\"1\":{\"615\":5}}],[\"aspectj<\",{\"1\":{\"615\":1}}],[\"aspect和\",{\"1\":{\"160\":1}}],[\"aspect\",{\"1\":{\"160\":1,\"615\":2}}],[\"abs\",{\"1\":{\"767\":1,\"1172\":1}}],[\"abstractdemo\",{\"1\":{\"709\":3,\"1114\":3}}],[\"abstractdispatcherservletinitializer\",{\"1\":{\"557\":2}}],[\"abstract\",{\"1\":{\"628\":3,\"641\":2,\"709\":4,\"714\":1,\"721\":1,\"732\":2,\"738\":2,\"1033\":3,\"1046\":2,\"1114\":4,\"1119\":1,\"1126\":1,\"1137\":2,\"1143\":2}}],[\"abstractannotationconfigdispatcherservletinitializer\",{\"1\":{\"562\":2,\"570\":2,\"579\":2}}],[\"abstractwrapper\",{\"1\":{\"547\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"211\":1}}],[\"ab\",{\"1\":{\"743\":2,\"1148\":2}}],[\"abcdefghijklmn\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890\",{\"1\":{\"678\":1,\"679\":1,\"1083\":1,\"1084\":1}}],[\"abc我是中国人\",{\"1\":{\"1004\":1,\"1008\":1,\"1409\":1,\"1413\":1}}],[\"abc\",{\"1\":{\"347\":1,\"350\":2,\"743\":12,\"763\":1,\"819\":1,\"995\":2,\"1004\":1,\"1008\":1,\"1148\":12,\"1168\":1,\"1224\":1,\"1400\":2,\"1409\":1,\"1413\":1}}],[\"aba\",{\"1\":{\"211\":1}}],[\"abortpolicy\",{\"1\":{\"199\":1,\"948\":2,\"949\":1,\"1353\":2,\"1354\":1,\"1465\":1,\"1466\":1}}],[\"anobject\",{\"1\":{\"758\":6,\"1163\":6}}],[\"anonymous\",{\"1\":{\"738\":2,\"1143\":2}}],[\"anotherstring\",{\"1\":{\"758\":3,\"1163\":3}}],[\"another\",{\"1\":{\"495\":2}}],[\"animal1\",{\"1\":{\"737\":1,\"738\":2,\"1142\":1,\"1143\":2}}],[\"animal动物\",{\"0\":{\"731\":1,\"1136\":1}}],[\"animal\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"709\":3,\"726\":4,\"730\":1,\"732\":13,\"737\":2,\"738\":7,\"1114\":3,\"1131\":4,\"1135\":1,\"1137\":13,\"1142\":2,\"1143\":7}}],[\"anull\",{\"1\":{\"495\":1}}],[\"any\",{\"1\":{\"386\":4,\"410\":1}}],[\"an\",{\"1\":{\"386\":4}}],[\"anp\",{\"1\":{\"347\":1,\"350\":1,\"354\":1}}],[\"andthen\",{\"1\":{\"1027\":2,\"1029\":5,\"1477\":2,\"1479\":5}}],[\"and\",{\"1\":{\"211\":1,\"233\":4,\"272\":6,\"273\":12,\"274\":4,\"277\":3,\"358\":3,\"386\":6,\"402\":1,\"404\":4,\"423\":1,\"495\":1,\"518\":2,\"529\":1,\"758\":2,\"1028\":2,\"1163\":2,\"1478\":2}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"557\":1}}],[\"annotationconfigwebapplicationcontext\",{\"1\":{\"557\":3}}],[\"annotations\",{\"1\":{\"169\":1,\"570\":1,\"613\":1}}],[\"annotation\",{\"1\":{\"160\":1,\"299\":1,\"307\":1,\"308\":1,\"310\":2,\"313\":2,\"314\":1,\"315\":1,\"329\":2,\"333\":2,\"338\":1,\"544\":2,\"557\":4,\"570\":16,\"573\":2,\"579\":21,\"615\":9}}],[\"a创建成功存入一次缓存singletonobjects\",{\"1\":{\"164\":1}}],[\"a在初始化的时候需要b对象\",{\"1\":{\"164\":1}}],[\"a\",{\"0\":{\"400\":1,\"731\":2,\"1136\":2},\"1\":{\"148\":2,\"188\":1,\"211\":1,\"280\":4,\"386\":4,\"436\":4,\"440\":3,\"491\":1,\"494\":1,\"496\":18,\"637\":3,\"648\":3,\"652\":1,\"726\":3,\"730\":4,\"743\":3,\"758\":6,\"763\":1,\"767\":6,\"774\":2,\"781\":1,\"793\":4,\"819\":13,\"831\":2,\"866\":1,\"891\":1,\"893\":1,\"897\":2,\"908\":1,\"994\":1,\"995\":3,\"997\":3,\"1011\":1,\"1029\":2,\"1042\":3,\"1053\":3,\"1057\":1,\"1131\":3,\"1135\":4,\"1148\":3,\"1163\":6,\"1168\":1,\"1172\":6,\"1179\":2,\"1186\":1,\"1198\":4,\"1224\":13,\"1236\":2,\"1271\":1,\"1296\":1,\"1298\":1,\"1302\":2,\"1313\":1,\"1399\":1,\"1400\":3,\"1402\":3,\"1416\":1,\"1464\":1,\"1465\":1,\"1479\":2}}],[\"alnum\",{\"1\":{\"819\":2,\"1224\":2}}],[\"alpha\",{\"1\":{\"819\":2,\"1224\":2}}],[\"al\",{\"1\":{\"440\":1}}],[\"alexei\",{\"1\":{\"396\":1}}],[\"alter\",{\"1\":{\"347\":1,\"350\":2,\"398\":2,\"512\":5,\"526\":2,\"529\":3}}],[\"alias\",{\"1\":{\"495\":2}}],[\"alive\",{\"1\":{\"495\":1}}],[\"align=\",{\"1\":{\"323\":1}}],[\"aliyun\",{\"1\":{\"251\":1,\"496\":1}}],[\"aliyun<\",{\"1\":{\"251\":2}}],[\"alibaba<\",{\"1\":{\"258\":1,\"264\":1,\"570\":1,\"615\":1}}],[\"alibaba\",{\"1\":{\"240\":1,\"245\":1,\"570\":1,\"615\":1}}],[\"allcards\",{\"1\":{\"897\":9,\"1302\":9}}],[\"allargsconstructor\",{\"1\":{\"570\":2,\"615\":2}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"494\":1}}],[\"all=\",{\"1\":{\"462\":1}}],[\"all\",{\"1\":{\"142\":2,\"264\":1,\"392\":2,\"398\":1,\"400\":1,\"402\":2,\"440\":1,\"462\":2,\"504\":1,\"570\":2,\"579\":1}}],[\"allkeys\",{\"1\":{\"130\":2}}],[\"always\",{\"1\":{\"128\":2}}],[\"aof的文件的名称\",{\"1\":{\"128\":1}}],[\"aof默认是关闭的需要我们到配置文件中手动开启\",{\"1\":{\"128\":1}}],[\"aof全称append\",{\"1\":{\"128\":1}}],[\"aof\",{\"1\":{\"128\":4}}],[\"aop思想\",{\"1\":{\"572\":1}}],[\"aopcontext\",{\"1\":{\"162\":1}}],[\"aop\",{\"0\":{\"615\":1},\"1\":{\"92\":1,\"160\":1,\"615\":2}}],[\"arithmeticexception\",{\"1\":{\"774\":1,\"1179\":1}}],[\"arr\",{\"1\":{\"654\":11,\"793\":7,\"794\":20,\"873\":6,\"1059\":11,\"1198\":7,\"1199\":20,\"1278\":6}}],[\"array1\",{\"1\":{\"873\":2,\"1278\":2}}],[\"arraydemo2\",{\"1\":{\"793\":1,\"1198\":1}}],[\"arraycopy\",{\"1\":{\"769\":1,\"1174\":1}}],[\"array>\",{\"1\":{\"601\":1}}],[\"arraysdemo1\",{\"1\":{\"793\":1,\"1198\":1}}],[\"arrays类常用的api\",{\"0\":{\"793\":1,\"1198\":1}}],[\"arrays类概述\",{\"0\":{\"792\":1,\"1197\":1}}],[\"arrays类\",{\"0\":{\"791\":1,\"1196\":1}}],[\"arrays\",{\"1\":{\"308\":2,\"628\":2,\"672\":2,\"793\":16,\"794\":5,\"822\":1,\"831\":1,\"839\":2,\"840\":1,\"842\":2,\"844\":1,\"893\":2,\"988\":2,\"995\":1,\"1019\":6,\"1021\":1,\"1033\":2,\"1077\":2,\"1198\":16,\"1199\":5,\"1227\":1,\"1236\":1,\"1244\":2,\"1245\":1,\"1247\":2,\"1249\":1,\"1298\":2,\"1393\":2,\"1400\":1,\"1469\":6,\"1471\":1}}],[\"arraylisy<>\",{\"1\":{\"187\":1}}],[\"arraylist集合底层原理\",{\"0\":{\"863\":1,\"1268\":1}}],[\"arraylist扩容的核心方法\",{\"1\":{\"831\":1,\"1236\":1}}],[\"arraylist扩容原理\",{\"0\":{\"831\":1,\"1236\":1}}],[\"arraylist源码深入\",{\"0\":{\"830\":1,\"1235\":1}}],[\"arraylist>\",{\"1\":{\"814\":1,\"1219\":1}}],[\"arraylisttest03\",{\"1\":{\"751\":1,\"1156\":1}}],[\"arraylisttest02\",{\"1\":{\"751\":1,\"1156\":1}}],[\"arraylisttest01\",{\"1\":{\"751\":1,\"1156\":1}}],[\"arraylist常用api\",{\"0\":{\"750\":1,\"1155\":1}}],[\"arraylistdemo03\",{\"1\":{\"750\":1,\"1155\":1}}],[\"arraylistdemo02\",{\"1\":{\"749\":1,\"1154\":1}}],[\"arraylistdemo01\",{\"1\":{\"747\":1,\"1152\":1}}],[\"arraylist<card>\",{\"1\":{\"897\":1,\"1302\":1}}],[\"arraylist<dog>\",{\"1\":{\"878\":1,\"1283\":1}}],[\"arraylist<suv>\",{\"1\":{\"878\":1,\"1283\":1}}],[\"arraylist<student>\",{\"1\":{\"751\":2,\"1156\":2}}],[\"arraylist<string>\",{\"1\":{\"749\":1,\"750\":1,\"814\":1,\"1154\":1,\"1155\":1,\"1219\":1}}],[\"arraylist<bmw>\",{\"1\":{\"878\":1,\"1283\":1}}],[\"arraylist<t>\",{\"1\":{\"871\":1,\"1276\":1}}],[\"arraylist<movie>\",{\"1\":{\"751\":1,\"1156\":1}}],[\"arraylist<object>\",{\"1\":{\"749\":1,\"1154\":1}}],[\"arraylist<integer>\",{\"1\":{\"749\":1,\"751\":2,\"814\":1,\"1154\":1,\"1156\":2,\"1219\":1}}],[\"arraylist<\",{\"1\":{\"749\":3,\"788\":1,\"878\":1,\"1154\":3,\"1193\":1,\"1283\":1}}],[\"arraylist<>\",{\"1\":{\"231\":1,\"245\":1,\"749\":3,\"750\":1,\"751\":4,\"793\":1,\"814\":2,\"821\":3,\"822\":1,\"823\":1,\"824\":1,\"831\":1,\"840\":2,\"842\":2,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"866\":1,\"871\":1,\"878\":3,\"896\":1,\"897\":4,\"1020\":3,\"1021\":1,\"1022\":1,\"1023\":1,\"1027\":4,\"1028\":2,\"1154\":3,\"1155\":1,\"1156\":4,\"1198\":1,\"1219\":2,\"1226\":3,\"1227\":1,\"1228\":1,\"1229\":1,\"1236\":1,\"1245\":2,\"1247\":2,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1271\":1,\"1276\":1,\"1283\":3,\"1301\":1,\"1302\":4,\"1470\":3,\"1471\":1,\"1472\":1,\"1473\":1,\"1477\":4,\"1478\":2}}],[\"arraylist对于泛型的支持\",{\"0\":{\"748\":1,\"1153\":1}}],[\"arraylist与linkedlist的区别\",{\"0\":{\"187\":1}}],[\"arraylist\",{\"0\":{\"744\":1,\"1149\":1},\"1\":{\"184\":2,\"187\":7,\"231\":1,\"245\":1,\"746\":1,\"747\":4,\"748\":1,\"749\":2,\"750\":2,\"751\":10,\"793\":1,\"814\":4,\"821\":1,\"823\":1,\"831\":2,\"838\":1,\"839\":2,\"840\":2,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"860\":1,\"861\":1,\"866\":1,\"871\":1,\"878\":1,\"896\":1,\"897\":1,\"1020\":1,\"1022\":1,\"1151\":1,\"1152\":4,\"1153\":1,\"1154\":2,\"1155\":2,\"1156\":10,\"1198\":1,\"1219\":4,\"1226\":1,\"1228\":1,\"1236\":2,\"1243\":1,\"1244\":2,\"1245\":2,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1265\":1,\"1266\":1,\"1271\":1,\"1276\":1,\"1283\":1,\"1301\":1,\"1302\":1,\"1470\":1,\"1472\":1}}],[\"arraylist底层是基于数组实现的\",{\"1\":{\"861\":1,\"863\":1,\"1266\":1,\"1268\":1}}],[\"arraylist底层是用动态的数组实现的\",{\"1\":{\"183\":1}}],[\"arraylist底层的实现原理是什么\",{\"0\":{\"183\":1}}],[\"array变量是保存在栈中的并且保存的是数组对象的首地址\",{\"1\":{\"182\":1}}],[\"array\",{\"1\":{\"181\":1,\"182\":1,\"184\":1,\"280\":1,\"281\":2,\"601\":1,\"831\":6,\"839\":2,\"840\":2,\"842\":2,\"873\":2,\"1236\":6,\"1244\":2,\"1245\":2,\"1247\":2,\"1278\":2}}],[\"arrayblockingqueue<>\",{\"1\":{\"199\":1,\"948\":2,\"949\":1,\"1353\":2,\"1354\":1,\"1465\":1,\"1466\":1}}],[\"arrayblockingqueue等\",{\"1\":{\"112\":1}}],[\"arrayblockingqueue\",{\"1\":{\"112\":1,\"199\":1}}],[\"around\",{\"1\":{\"615\":2}}],[\"around注解来标识在注解中填写表达式或者是切入点的方法\",{\"1\":{\"160\":1}}],[\"archives\",{\"1\":{\"500\":1}}],[\"archive\",{\"1\":{\"375\":1,\"377\":1,\"386\":1,\"389\":1,\"392\":1,\"395\":1}}],[\"argument\",{\"1\":{\"758\":1,\"1163\":1}}],[\"arg参数指定的命令\",{\"1\":{\"422\":1}}],[\"arg\",{\"1\":{\"422\":1}}],[\"arg2\",{\"1\":{\"281\":1}}],[\"arg3\",{\"1\":{\"281\":1}}],[\"arg1\",{\"1\":{\"281\":3}}],[\"arg0\",{\"1\":{\"281\":6}}],[\"args\",{\"1\":{\"199\":4,\"205\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"240\":1,\"264\":1,\"628\":1,\"629\":9,\"635\":1,\"636\":1,\"637\":1,\"638\":1,\"641\":1,\"652\":1,\"654\":1,\"663\":1,\"664\":1,\"678\":1,\"704\":1,\"708\":1,\"715\":1,\"721\":1,\"732\":1,\"738\":2,\"743\":6,\"747\":1,\"749\":1,\"750\":1,\"751\":3,\"755\":1,\"756\":1,\"759\":1,\"763\":1,\"769\":1,\"771\":1,\"774\":1,\"776\":1,\"781\":2,\"784\":1,\"786\":1,\"793\":2,\"794\":2,\"802\":1,\"812\":1,\"813\":1,\"814\":1,\"818\":1,\"821\":1,\"822\":1,\"823\":1,\"824\":1,\"839\":1,\"840\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"847\":1,\"861\":1,\"865\":1,\"866\":1,\"871\":1,\"873\":1,\"878\":1,\"881\":1,\"887\":1,\"888\":1,\"891\":1,\"893\":1,\"896\":1,\"897\":1,\"903\":1,\"904\":1,\"906\":1,\"907\":1,\"908\":2,\"909\":1,\"914\":1,\"918\":1,\"920\":1,\"921\":1,\"924\":1,\"925\":1,\"930\":1,\"939\":1,\"948\":1,\"949\":1,\"951\":1,\"954\":1,\"956\":1,\"965\":1,\"966\":1,\"969\":1,\"971\":1,\"974\":2,\"976\":1,\"978\":1,\"979\":1,\"981\":1,\"988\":1,\"994\":1,\"995\":1,\"996\":1,\"997\":1,\"998\":1,\"1000\":1,\"1001\":1,\"1002\":1,\"1003\":1,\"1004\":1,\"1007\":1,\"1008\":2,\"1009\":2,\"1011\":1,\"1012\":2,\"1014\":1,\"1018\":1,\"1019\":1,\"1020\":1,\"1021\":1,\"1022\":1,\"1023\":1,\"1033\":1,\"1034\":9,\"1040\":1,\"1041\":1,\"1042\":1,\"1043\":1,\"1046\":1,\"1057\":1,\"1059\":1,\"1068\":1,\"1069\":1,\"1083\":1,\"1109\":1,\"1113\":1,\"1120\":1,\"1126\":1,\"1137\":1,\"1143\":2,\"1148\":6,\"1152\":1,\"1154\":1,\"1155\":1,\"1156\":3,\"1160\":1,\"1161\":1,\"1164\":1,\"1168\":1,\"1174\":1,\"1176\":1,\"1179\":1,\"1181\":1,\"1186\":2,\"1189\":1,\"1191\":1,\"1198\":2,\"1199\":2,\"1207\":1,\"1217\":1,\"1218\":1,\"1219\":1,\"1223\":1,\"1226\":1,\"1227\":1,\"1228\":1,\"1229\":1,\"1244\":1,\"1245\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1252\":1,\"1266\":1,\"1270\":1,\"1271\":1,\"1276\":1,\"1278\":1,\"1283\":1,\"1286\":1,\"1292\":1,\"1293\":1,\"1296\":1,\"1298\":1,\"1301\":1,\"1302\":1,\"1308\":1,\"1309\":1,\"1311\":1,\"1312\":1,\"1313\":2,\"1314\":1,\"1319\":1,\"1323\":1,\"1325\":1,\"1326\":1,\"1329\":1,\"1330\":1,\"1335\":1,\"1344\":1,\"1353\":1,\"1354\":1,\"1356\":1,\"1359\":1,\"1361\":1,\"1370\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1379\":2,\"1381\":1,\"1383\":1,\"1384\":1,\"1386\":1,\"1393\":1,\"1399\":1,\"1400\":1,\"1401\":1,\"1402\":1,\"1403\":1,\"1405\":1,\"1406\":1,\"1407\":1,\"1408\":1,\"1409\":1,\"1412\":1,\"1413\":2,\"1414\":2,\"1416\":1,\"1417\":2,\"1419\":1,\"1433\":1,\"1449\":2,\"1450\":2,\"1458\":1,\"1461\":2,\"1464\":2,\"1465\":2,\"1466\":2,\"1468\":1,\"1469\":1,\"1470\":1,\"1471\":1,\"1472\":1,\"1473\":1}}],[\"artifact\",{\"1\":{\"494\":1}}],[\"artifactid>\",{\"1\":{\"258\":4,\"259\":1,\"264\":8,\"293\":1,\"295\":1,\"315\":1,\"318\":1,\"323\":2,\"494\":1,\"544\":1,\"557\":4,\"566\":1,\"570\":13,\"615\":11}}],[\"artifactid\",{\"1\":{\"256\":1,\"258\":1}}],[\"artifacts\",{\"1\":{\"251\":1,\"362\":3}}],[\"article\",{\"1\":{\"118\":1}}],[\"are\",{\"1\":{\"243\":1,\"386\":1}}],[\"arm\",{\"1\":{\"146\":1}}],[\"apache\",{\"0\":{\"289\":1},\"1\":{\"249\":2,\"251\":1,\"258\":3,\"264\":7,\"290\":1,\"293\":1,\"315\":1,\"316\":3,\"351\":1,\"354\":6,\"375\":8,\"377\":1,\"386\":10,\"389\":2,\"392\":2,\"395\":1,\"544\":1,\"552\":1,\"557\":4,\"570\":5,\"613\":1,\"615\":3,\"1013\":1,\"1014\":2,\"1418\":1,\"1419\":2}}],[\"apply\",{\"1\":{\"823\":1,\"1022\":1,\"1029\":6,\"1228\":1,\"1472\":1,\"1479\":6}}],[\"apple\",{\"1\":{\"763\":1,\"1168\":1}}],[\"applicable\",{\"1\":{\"386\":5}}],[\"applications\",{\"1\":{\"386\":1}}],[\"application\",{\"1\":{\"104\":1,\"159\":1,\"322\":1,\"491\":1,\"495\":2,\"1012\":2,\"1417\":2}}],[\"app\",{\"1\":{\"386\":2,\"494\":3,\"495\":3,\"496\":21}}],[\"append\",{\"1\":{\"763\":13,\"873\":3,\"908\":1,\"1168\":13,\"1278\":3,\"1313\":1}}],[\"appender>\",{\"1\":{\"264\":1}}],[\"appendfsync\",{\"1\":{\"128\":3}}],[\"appendfilename\",{\"1\":{\"128\":1}}],[\"appendonly\",{\"1\":{\"128\":2}}],[\"api如下\",{\"0\":{\"1433\":1}}],[\"api调用\",{\"1\":{\"793\":1,\"1198\":1}}],[\"api非常多建议查阅jdk文档\",{\"1\":{\"785\":1,\"1190\":1}}],[\"api<\",{\"1\":{\"264\":1,\"295\":1,\"318\":1,\"557\":1,\"570\":1}}],[\"api详解\",{\"0\":{\"227\":1}}],[\"api平台项目就是采用的nacos作为注册中心\",{\"1\":{\"173\":1}}],[\"api\",{\"0\":{\"95\":1,\"101\":1,\"102\":2,\"108\":1,\"841\":1,\"842\":1,\"1246\":1,\"1247\":1},\"1\":{\"92\":1,\"95\":4,\"96\":1,\"97\":15,\"100\":1,\"101\":8,\"102\":6,\"104\":1,\"108\":1,\"259\":1,\"495\":3,\"804\":1,\"806\":1,\"808\":2,\"812\":1,\"816\":1,\"924\":2,\"925\":1,\"1209\":1,\"1211\":1,\"1213\":2,\"1217\":1,\"1221\":1,\"1329\":2,\"1330\":1}}],[\"api的熟悉程度\",{\"1\":{\"79\":1}}],[\"ak\",{\"1\":{\"95\":1,\"104\":2}}],[\"axios\",{\"1\":{\"92\":1}}],[\"aqs内部维护了一个先进先出的双向队列\",{\"1\":{\"213\":1}}],[\"aqs是多线程中的抽象队列同步器\",{\"1\":{\"213\":1}}],[\"aqs框架\",{\"1\":{\"211\":1}}],[\"aqs\",{\"1\":{\"92\":1}}],[\"了解线程通信\",{\"1\":{\"939\":1,\"1344\":1}}],[\"了解即可\",{\"1\":{\"721\":1,\"1126\":1}}],[\"了解过索引吗\",{\"0\":{\"143\":1}}],[\"了解如何解决消息顺序消费\",{\"1\":{\"92\":1}}],[\"了解缓存穿透\",{\"1\":{\"92\":1}}],[\"了解\",{\"0\":{\"621\":1,\"717\":1,\"1122\":1},\"1\":{\"92\":3,\"682\":1,\"1087\":1}}],[\"了解了继承的定义\",{\"1\":{\"43\":1}}],[\"熟练的人应该使用下面的方式\",{\"1\":{\"649\":1,\"1054\":1}}],[\"熟练使用\",{\"1\":{\"92\":1}}],[\"熟练掌握\",{\"1\":{\"92\":1}}],[\"熟悉rocketmq的基本用法\",{\"1\":{\"92\":1}}],[\"熟悉\",{\"1\":{\"92\":8}}],[\"熟悉常用集合类\",{\"1\":{\"92\":1}}],[\"熟悉了各种数据结构和算法\",{\"1\":{\"70\":1}}],[\"胜利与重生\",{\"0\":{\"89\":1}}],[\"胜利的果实\",{\"0\":{\"73\":1}}],[\"战斗过程中\",{\"1\":{\"86\":1}}],[\"战胜了多态的挑战后\",{\"1\":{\"45\":1}}],[\"夺回了被封锁的java知识\",{\"1\":{\"86\":1}}],[\"夺回知识宝藏\",{\"0\":{\"86\":1}}],[\"夺回大陆意味着我可以在这个广阔的领域中尽情探索\",{\"1\":{\"8\":1}}],[\"夺回大陆的意义\",{\"0\":{\"8\":1}}],[\"夺回大陆\",{\"0\":{\"27\":1},\"1\":{\"0\":1}}],[\"激烈战斗\",{\"0\":{\"85\":1}}],[\"大型并发系统环境中使用executors如果不注意可能会出现系统风险\",{\"1\":{\"952\":1,\"1357\":1}}],[\"大王\",{\"1\":{\"897\":1,\"1302\":1}}],[\"大\",{\"1\":{\"831\":2,\"1236\":2}}],[\"大写字母\",{\"1\":{\"819\":1,\"1224\":1}}],[\"大写字母字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"大转小就需要强制类型转换\",{\"1\":{\"727\":1,\"1132\":1}}],[\"大小王排序的问题\",{\"1\":{\"897\":1,\"1302\":1}}],[\"大小排序\",{\"1\":{\"481\":1}}],[\"大小写无关\",{\"1\":{\"264\":1}}],[\"大多数情况下\",{\"1\":{\"409\":1}}],[\"大多数都是以集群化\",{\"1\":{\"363\":1}}],[\"大于8位\",{\"1\":{\"347\":1,\"350\":2}}],[\"大于8的话把链表转换为红黑树\",{\"1\":{\"190\":1}}],[\"大数据集群\",{\"1\":{\"390\":1,\"393\":1}}],[\"大数据的软件本身就是集群化\",{\"1\":{\"384\":1}}],[\"大数据\",{\"1\":{\"344\":1}}],[\"大米\",{\"1\":{\"245\":3}}],[\"大部分\",{\"1\":{\"158\":1}}],[\"大概不超过5\",{\"1\":{\"124\":1}}],[\"大厂\",{\"1\":{\"105\":1}}],[\"大幅节省时间\",{\"1\":{\"100\":1,\"120\":1}}],[\"大幅减少重复代码\",{\"1\":{\"95\":1}}],[\"大陆重新回到了和谐与繁荣的轨道上\",{\"1\":{\"89\":1}}],[\"大陆的核心区域\",{\"1\":{\"84\":1}}],[\"大厅的墙壁缓缓打开\",{\"1\":{\"83\":1}}],[\"大家纷纷得到了机会展示自己的才华\",{\"1\":{\"61\":1}}],[\"机器人被击败后\",{\"1\":{\"83\":1}}],[\"机器人拥有强大的力量和智慧\",{\"1\":{\"82\":1}}],[\"带后缀\",{\"1\":{\"966\":1,\"1371\":1}}],[\"带有空格或者其他特殊符号建议使用\",{\"1\":{\"454\":1}}],[\"带来了胜利的曙光\",{\"1\":{\"82\":1}}],[\"带着温暖的笑容相互交流\",{\"1\":{\"1\":1}}],[\"漫长的战斗看似无解\",{\"1\":{\"82\":1}}],[\"老师游泳游得超过了光速\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"老师游泳很很很块\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"老师游的很快\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"老师\",{\"1\":{\"875\":1,\"1280\":1}}],[\"老师在游泳\",{\"1\":{\"738\":1,\"1143\":1}}],[\"老师告诉主角\",{\"1\":{\"81\":1}}],[\"老虎跑的快\",{\"1\":{\"737\":1,\"738\":2,\"1142\":1,\"1143\":2}}],[\"老者向我解释道\",{\"1\":{\"2\":1}}],[\"能被systemctl管理的软件\",{\"1\":{\"474\":1}}],[\"能持有\",{\"1\":{\"210\":1}}],[\"能使用\",{\"1\":{\"92\":1}}],[\"能够接收的内容长度\",{\"1\":{\"1447\":1}}],[\"能够防止编译器的优化发生\",{\"1\":{\"212\":1}}],[\"能够增加并发度\",{\"1\":{\"112\":1}}],[\"能够很方便地对用户每个属性进行独立的更新和查询操作\",{\"1\":{\"111\":1}}],[\"能够在分布式多机场景下保证获取登录用户信息的一致性\",{\"1\":{\"110\":1}}],[\"能够生成更美观的\",{\"1\":{\"100\":1}}],[\"能够独立部署前后端分离项目\",{\"1\":{\"92\":1}}],[\"能够使用\",{\"1\":{\"92\":1}}],[\"能够使用消息队列实现业务的\",{\"1\":{\"92\":1}}],[\"能够通过\",{\"1\":{\"92\":1}}],[\"能够自由地运用各种知识和技能\",{\"1\":{\"7\":1}}],[\"能力的进化\",{\"0\":{\"81\":1}}],[\"团结的力量\",{\"0\":{\"80\":1}}],[\"试炼的任务也愈发艰巨\",{\"1\":{\"79\":1}}],[\"无返回值\",{\"1\":{\"1025\":1,\"1475\":1}}],[\"无\",{\"1\":{\"1025\":2,\"1475\":2}}],[\"无实际含义\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"无限等待状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"无法继承其他类\",{\"1\":{\"915\":1,\"1320\":1}}],[\"无法代理自己\",{\"1\":{\"162\":1}}],[\"无序\",{\"1\":{\"839\":3,\"840\":2,\"880\":1,\"881\":3,\"892\":1,\"1244\":3,\"1245\":2,\"1285\":1,\"1286\":3,\"1297\":1}}],[\"无索引\",{\"0\":{\"839\":1,\"1244\":1},\"1\":{\"839\":4,\"840\":2,\"880\":1,\"881\":6,\"889\":1,\"890\":1,\"891\":1,\"892\":2,\"902\":1,\"903\":4,\"904\":1,\"906\":1,\"1244\":4,\"1245\":2,\"1285\":1,\"1286\":6,\"1294\":1,\"1295\":1,\"1296\":1,\"1297\":2,\"1307\":1,\"1308\":4,\"1309\":1,\"1311\":1}}],[\"无static关键字修饰\",{\"1\":{\"677\":1,\"1082\":1}}],[\"无static修饰\",{\"1\":{\"675\":1,\"1080\":1}}],[\"无参\",{\"1\":{\"660\":1,\"1025\":1,\"1065\":1,\"1475\":1}}],[\"无参构造器会被重载\",{\"1\":{\"660\":1,\"1065\":1}}],[\"无参构造\",{\"0\":{\"588\":1}}],[\"无参数构造器执行\",{\"1\":{\"804\":1,\"806\":1,\"1209\":1,\"1211\":1}}],[\"无参数\",{\"1\":{\"443\":1}}],[\"无选项\",{\"1\":{\"443\":1}}],[\"无论查询哪个数据都要从头开始找\",{\"1\":{\"853\":1,\"1258\":1}}],[\"无论命名捕获组的\",{\"1\":{\"819\":1,\"1224\":1}}],[\"无论第n个捕获组匹配什么\",{\"1\":{\"819\":1,\"1224\":1}}],[\"无论工作目录是什么\",{\"1\":{\"484\":1}}],[\"无论什么命令\",{\"1\":{\"439\":1}}],[\"无论是后端开发\",{\"1\":{\"344\":1}}],[\"无论是web开发\",{\"1\":{\"63\":1}}],[\"无操作\",{\"1\":{\"335\":1}}],[\"无锁状态\",{\"1\":{\"213\":1}}],[\"无需安装\",{\"1\":{\"408\":1}}],[\"无需手动安装\",{\"1\":{\"119\":1}}],[\"无需编写繁琐的\",{\"1\":{\"99\":1}}],[\"无数的岔路口使得主角难以判断前行的方向\",{\"1\":{\"77\":1}}],[\"无尽的迷宫\",{\"0\":{\"77\":1}}],[\"极限挑战的到来\",{\"0\":{\"76\":1}}],[\"的消息\",{\"1\":{\"1450\":1}}],[\"的代码写法\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"的形式存储\",{\"1\":{\"985\":1,\"1390\":1}}],[\"的增删改查操作\",{\"1\":{\"875\":1,\"1280\":1}}],[\"的增强版\",{\"1\":{\"100\":1}}],[\"的增强版框架\",{\"1\":{\"99\":1}}],[\"的功能\",{\"1\":{\"873\":1,\"1278\":1}}],[\"的间隔\",{\"1\":{\"785\":2,\"1190\":2}}],[\"的方法\",{\"1\":{\"907\":1,\"1312\":1}}],[\"的方法体\",{\"1\":{\"732\":1,\"1137\":1}}],[\"的方式把double值转化为bigdecimal对象\",{\"1\":{\"773\":1,\"1178\":1}}],[\"的学生开始学习了\",{\"1\":{\"662\":1,\"1067\":1}}],[\"的写法\",{\"1\":{\"453\":1}}],[\"的意思\",{\"1\":{\"440\":1}}],[\"的意思～\",{\"1\":{\"437\":1}}],[\"的显示结果\",{\"1\":{\"437\":1}}],[\"的内容储存成\",{\"1\":{\"437\":1}}],[\"的内存访问速度⾮常快\",{\"1\":{\"139\":1}}],[\"的字符\",{\"1\":{\"819\":3,\"1224\":3}}],[\"的字符串\",{\"1\":{\"435\":4}}],[\"的字样\",{\"1\":{\"436\":1}}],[\"的话\",{\"1\":{\"435\":1}}],[\"的组合按键\",{\"1\":{\"435\":1}}],[\"的时候\",{\"1\":{\"424\":1}}],[\"的时候可以指定数组的长度\",{\"1\":{\"217\":1}}],[\"的符号\",{\"1\":{\"423\":1}}],[\"的别名\",{\"1\":{\"418\":1}}],[\"的端口号\",{\"1\":{\"395\":1}}],[\"的ip地址\",{\"1\":{\"395\":1}}],[\"的全称叫\",{\"1\":{\"360\":1}}],[\"的全称是\",{\"1\":{\"211\":1}}],[\"的参数\",{\"1\":{\"320\":1}}],[\"的获取\",{\"1\":{\"309\":1}}],[\"的概念\",{\"1\":{\"249\":1}}],[\"的值\",{\"1\":{\"233\":1}}],[\"的值为\",{\"1\":{\"211\":1}}],[\"的位置编号\",{\"1\":{\"233\":1}}],[\"的记录\",{\"1\":{\"222\":1}}],[\"的弱引用\",{\"1\":{\"222\":1}}],[\"的实现通常会提供更好的性能\",{\"1\":{\"215\":1}}],[\"的实现原理\",{\"0\":{\"188\":1}}],[\"的原子指令\",{\"1\":{\"211\":1}}],[\"的思想很简单\",{\"1\":{\"211\":1}}],[\"的flag变量\",{\"1\":{\"208\":1}}],[\"的进程\",{\"1\":{\"197\":1}}],[\"的区别\",{\"0\":{\"194\":1,\"424\":1}}],[\"的元素留在原来位置\",{\"1\":{\"193\":1}}],[\"的次幂\",{\"0\":{\"193\":1}}],[\"的数组长度一定是\",{\"0\":{\"193\":1}}],[\"的数据网格\",{\"1\":{\"117\":1}}],[\"的寻址算法\",{\"0\":{\"192\":1}}],[\"的首个元素是否和key一样\",{\"1\":{\"190\":1}}],[\"的空间花费则体现在它的每一个元素都需要消耗比\",{\"1\":{\"187\":1}}],[\"的空间浪费主要体现在在\",{\"1\":{\"187\":1}}],[\"的源码\",{\"1\":{\"185\":1}}],[\"的构造函数中\",{\"1\":{\"184\":1}}],[\"的核心组件有哪些\",{\"0\":{\"167\":1}}],[\"的线程安全问题\",{\"1\":{\"158\":1}}],[\"的并发性和数据⼀致性\",{\"1\":{\"151\":1}}],[\"的性能和稳定性\",{\"1\":{\"139\":1}}],[\"的单线程操作是指\",{\"1\":{\"139\":1}}],[\"的键\",{\"1\":{\"130\":1}}],[\"的键值对转化为字节数组\",{\"1\":{\"113\":1}}],[\"的好处\",{\"0\":{\"120\":1}}],[\"的作用域通常有下面几种\",{\"1\":{\"159\":1}}],[\"的作用\",{\"0\":{\"120\":1,\"423\":1}}],[\"的作用和它们对项目开发的影响\",{\"0\":{\"100\":1}}],[\"的优势\",{\"0\":{\"119\":1}}],[\"的优点是非常简单方便\",{\"1\":{\"110\":1}}],[\"的规则\",{\"1\":{\"114\":1}}],[\"的支持\",{\"1\":{\"114\":1,\"351\":1}}],[\"的序列化方式\",{\"1\":{\"113\":1}}],[\"的利用率\",{\"1\":{\"112\":1}}],[\"的大小写\",{\"1\":{\"436\":1}}],[\"的大小\",{\"1\":{\"111\":1}}],[\"的地址和\",{\"1\":{\"110\":1}}],[\"的连接配置\",{\"1\":{\"107\":1}}],[\"的官方文档\",{\"1\":{\"107\":1}}],[\"的架构设计允许开发者轻松扩展和定制功能\",{\"1\":{\"106\":1}}],[\"的高性能\",{\"1\":{\"106\":1}}],[\"的经历去回答\",{\"1\":{\"105\":1}}],[\"的目的是帮助开发者更轻松地使用我们系统提供的功能\",{\"1\":{\"105\":1}}],[\"的目录\",{\"1\":{\"75\":1}}],[\"的设计技巧\",{\"0\":{\"105\":1}}],[\"的定位和功能\",{\"1\":{\"103\":1}}],[\"的安全性\",{\"1\":{\"101\":1}}],[\"的灵活查询\",{\"0\":{\"99\":1}}],[\"的基本概念\",{\"0\":{\"98\":1}}],[\"的\",{\"0\":{\"103\":1,\"190\":1,\"731\":1,\"1136\":1},\"1\":{\"95\":1,\"99\":1,\"110\":1,\"111\":2,\"112\":1,\"117\":1,\"123\":1,\"158\":1,\"159\":1,\"193\":1,\"222\":1,\"662\":1,\"715\":1,\"1067\":1,\"1120\":1}}],[\"的编写\",{\"1\":{\"92\":1}}],[\"的自动装配原理\",{\"1\":{\"92\":1}}],[\"的循环依赖\",{\"1\":{\"92\":1}}],[\"的生命周期\",{\"1\":{\"92\":1}}],[\"的持久化策略以及数据过期策略\",{\"1\":{\"92\":1}}],[\"的使用\",{\"0\":{\"421\":1,\"431\":1},\"1\":{\"92\":1}}],[\"的旅程\",{\"1\":{\"75\":1}}],[\"的回忆\",{\"1\":{\"75\":1}}],[\"回车字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"回车键\",{\"1\":{\"433\":1}}],[\"回滚事务\",{\"1\":{\"229\":3}}],[\"回滚指针\",{\"1\":{\"154\":1}}],[\"回收空闲连接时\",{\"1\":{\"240\":1}}],[\"回收该连接\",{\"1\":{\"240\":1}}],[\"回收\",{\"1\":{\"222\":1}}],[\"回答如下\",{\"1\":{\"210\":1}}],[\"回到一般模式中\",{\"1\":{\"436\":1}}],[\"回到a对象初始化\",{\"1\":{\"164\":1}}],[\"回到自己的世界\",{\"1\":{\"27\":1}}],[\"回顾整个探险过程\",{\"1\":{\"73\":1}}],[\"从socket通信管道中得到一个字节输入流\",{\"1\":{\"1461\":1,\"1464\":1,\"1465\":1}}],[\"从socket通信管道中得到一个字节输出流\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"从0\",{\"1\":{\"995\":1,\"1400\":1}}],[\"从0开始\",{\"1\":{\"523\":1,\"743\":1,\"750\":1,\"1148\":1,\"1155\":1}}],[\"从父路径名\",{\"1\":{\"965\":1,\"1370\":1}}],[\"从父类到子类\",{\"0\":{\"730\":1,\"1135\":1}}],[\"从jdk8后当链表长度超过8的时候\",{\"1\":{\"888\":1,\"1293\":1}}],[\"从jdk1\",{\"1\":{\"721\":1,\"1126\":1}}],[\"从列表中删除最后一个元素并返回第一个元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"从列表中删除第一个元素并返回第一个元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"从列表中获取最后一个元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"从列表中获取第一个元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"从该节点到其所有后代叶节点的简单路径上\",{\"1\":{\"858\":1,\"1263\":1}}],[\"从name集合中取出姓张的放到新的集合\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"从入门到如土\",{\"1\":{\"750\":1,\"1155\":1}}],[\"从当前位置\",{\"1\":{\"743\":1,\"1148\":1}}],[\"从子类到父类\",{\"0\":{\"729\":1,\"1134\":1}}],[\"从内存的角度来看是子类可以继承父类的所有属性和方法\",{\"1\":{\"694\":1,\"1099\":1}}],[\"从左到右依次是\",{\"1\":{\"478\":1}}],[\"从文件中通过关键字过滤文件\",{\"1\":{\"454\":1}}],[\"从文件中加载数据到session中\",{\"1\":{\"335\":1}}],[\"从光标所在行的最后一个字符处开始输入\",{\"1\":{\"436\":1}}],[\"从目前光标所在的下一个字符处开始输入\",{\"1\":{\"436\":1}}],[\"从目前光标所在处输入\",{\"1\":{\"436\":1}}],[\"从第一行到最后一行寻找\",{\"1\":{\"435\":2}}],[\"从数据库查询\",{\"1\":{\"325\":1}}],[\"从多个条件中选择一个\",{\"1\":{\"274\":1}}],[\"从1开始\",{\"1\":{\"233\":1}}],[\"从流量控制\",{\"1\":{\"171\":1}}],[\"从库重做中继日志中的事件\",{\"1\":{\"155\":1}}],[\"从库读取主库的二进制日志文件\",{\"1\":{\"155\":1}}],[\"从⽽实现并发处理\",{\"1\":{\"139\":1}}],[\"从⽽提⾼了\",{\"1\":{\"139\":1}}],[\"从节点负责读数据\",{\"1\":{\"135\":1}}],[\"从而提高字节输出流写数据的性能\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"从而提高字节输入流读数据的性能\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"从而影响后续任务执行\",{\"1\":{\"954\":1,\"1359\":1}}],[\"从而避免了线程安全问题\",{\"1\":{\"221\":1}}],[\"从而避免只在一个redis实例上加锁\",{\"1\":{\"134\":1}}],[\"从而达到阻止重排序的效果\",{\"1\":{\"212\":1}}],[\"从而找到对应值\",{\"1\":{\"188\":1}}],[\"从而实现一些特殊的功能\",{\"1\":{\"337\":1}}],[\"从而实现最相似用户的推荐\",{\"1\":{\"118\":1}}],[\"从而实现统一的公共依赖和依赖版本定义\",{\"1\":{\"98\":1}}],[\"从而规范了异常返回\",{\"1\":{\"109\":1}}],[\"从而进行特定的处理\",{\"1\":{\"108\":1}}],[\"从而更好地掌控探险的进程\",{\"1\":{\"56\":1}}],[\"从迷茫到自信\",{\"1\":{\"73\":1}}],[\"从启程开始\",{\"1\":{\"70\":1}}],[\"似乎只有真正掌握java知识的人才能够解决\",{\"1\":{\"69\":1}}],[\"迫于困境\",{\"0\":{\"69\":1}}],[\"结论\",{\"1\":{\"983\":1,\"1388\":1}}],[\"结合使用\",{\"1\":{\"424\":1}}],[\"结束\",{\"1\":{\"738\":1,\"1018\":1,\"1143\":1,\"1468\":1}}],[\"结束的符号\",{\"1\":{\"280\":1}}],[\"结束与新的开始\",{\"0\":{\"18\":1}}],[\"结果\",{\"1\":{\"1028\":2,\"1029\":4,\"1478\":2,\"1479\":4}}],[\"结果才为true\",{\"1\":{\"758\":1,\"1163\":1}}],[\"结果中找到有\",{\"1\":{\"375\":1}}],[\"结果映射\",{\"0\":{\"269\":1}}],[\"结果处理\",{\"1\":{\"233\":1}}],[\"结构不用额外存储序列化对象信息\",{\"1\":{\"111\":1}}],[\"结构整体存储\",{\"1\":{\"111\":1}}],[\"结构\",{\"1\":{\"111\":1}}],[\"结构采用\",{\"1\":{\"111\":1}}],[\"结语\",{\"0\":{\"68\":1}}],[\"摆脱了所有的束缚和困难\",{\"1\":{\"66\":1}}],[\"决战终极试炼\",{\"0\":{\"65\":1}}],[\"邀请所有的小伙伴一起分享自己的经验和思考\",{\"1\":{\"61\":1}}],[\"集合大小\",{\"1\":{\"904\":1,\"1309\":1}}],[\"集合大小不固定\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"集合工具类\",{\"0\":{\"894\":1,\"1299\":1}}],[\"集合自定义comparable比较器\",{\"1\":{\"891\":1,\"1296\":1}}],[\"集合体系的全部接口和实现类都是支持泛型的使用\",{\"1\":{\"868\":1,\"1273\":1}}],[\"集合中存储的是对象的地址\",{\"1\":{\"847\":1,\"1252\":1}}],[\"集合中只能存储引用类型\",{\"1\":{\"749\":1,\"1154\":1}}],[\"集合添加泛型可以在编译阶段约束集合只能操作某种数据类型\",{\"1\":{\"840\":1,\"1245\":1}}],[\"集合都是支持泛型的\",{\"1\":{\"840\":1,\"1245\":1}}],[\"集合对泛型的支持\",{\"0\":{\"840\":1,\"1245\":1},\"1\":{\"840\":1,\"1245\":1}}],[\"集合分为collection\",{\"1\":{\"835\":1,\"1240\":1}}],[\"集合类体系结构\",{\"0\":{\"835\":1,\"1240\":1}}],[\"集合类等高级知识\",{\"1\":{\"23\":1}}],[\"集合只能存储引用类型的数据\",{\"1\":{\"833\":1,\"1238\":1}}],[\"集合非常适合做元素增删操作\",{\"1\":{\"833\":1,\"1238\":1}}],[\"集合更想一个气球\",{\"1\":{\"833\":1,\"1238\":1}}],[\"集合是java中存储对象数据的一种容器\",{\"1\":{\"833\":1,\"1238\":1}}],[\"集合和数组都是容器\",{\"1\":{\"833\":1,\"1238\":1}}],[\"集合和泛型其实也只能支持包装类\",{\"1\":{\"788\":1,\"1193\":1}}],[\"集合概述\",{\"0\":{\"833\":1,\"1238\":1}}],[\"集合\",{\"0\":{\"832\":1,\"1237\":1},\"1\":{\"824\":1,\"1023\":1,\"1229\":1,\"1473\":1}}],[\"集合就非常合适做元素个数不确定\",{\"1\":{\"744\":1,\"1149\":1}}],[\"集合的数据在创建的时候就已经提供\",{\"1\":{\"909\":1,\"1314\":1}}],[\"集合的长度\",{\"1\":{\"904\":1,\"1309\":1}}],[\"集合的并发修改异常问题\",{\"0\":{\"866\":1,\"1271\":1}}],[\"集合的特点\",{\"1\":{\"744\":1,\"833\":1,\"1149\":1,\"1238\":1}}],[\"集合的名字\",{\"1\":{\"280\":1}}],[\"集合与数组类似\",{\"1\":{\"744\":1,\"1149\":1}}],[\"集群化软件前置准备\",{\"1\":{\"389\":1}}],[\"集群化软件之间需要通过端口互相通讯\",{\"1\":{\"371\":1}}],[\"集群化\",{\"1\":{\"376\":1}}],[\"集群的每一个节点负责一部分的哈希槽\",{\"1\":{\"138\":1}}],[\"集群中有多个master\",{\"1\":{\"138\":1}}],[\"集群脑裂\",{\"1\":{\"137\":1}}],[\"集中限流\",{\"1\":{\"102\":1}}],[\"集中接受客户端的请求\",{\"1\":{\"96\":1}}],[\"集思广益的大会\",{\"0\":{\"61\":1}}],[\"正好是n次\",{\"1\":{\"819\":3,\"1224\":3}}],[\"正则表达式结构摘要\",{\"0\":{\"819\":1,\"1224\":1}}],[\"正则表达式的规则\",{\"1\":{\"818\":1,\"1223\":1}}],[\"正则表达式可以用一些规定的字符类指定规则\",{\"1\":{\"818\":1,\"1223\":1}}],[\"正则表达式\",{\"0\":{\"818\":1,\"1223\":1},\"1\":{\"818\":1,\"1223\":1}}],[\"正例\",{\"1\":{\"773\":1,\"1178\":1}}],[\"正确的用户名和密码\",{\"1\":{\"743\":1,\"1148\":1}}],[\"正在运行的程序\",{\"1\":{\"958\":1,\"1363\":1}}],[\"正在为你查询\",{\"1\":{\"629\":1,\"1034\":1}}],[\"正在删除\",{\"1\":{\"629\":1,\"1034\":1}}],[\"正在调用的方法对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"正在不断完善中\",{\"1\":{\"223\":1}}],[\"正数\",{\"1\":{\"331\":1}}],[\"正常情况不用关闭\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"正常情况下首先查询缓存\",{\"1\":{\"124\":1}}],[\"正常返回\",{\"1\":{\"240\":1}}],[\"正常close连接时设置为true\",{\"1\":{\"240\":1}}],[\"正是主角通过之前的学习和挑战获得的经验\",{\"1\":{\"82\":1}}],[\"正当主角犹豫不决的时候\",{\"1\":{\"60\":1}}],[\"正如故事一开始所述\",{\"1\":{\"28\":1}}],[\"为当前线程对象设置名字\",{\"1\":{\"924\":1,\"1329\":1}}],[\"为偶数就是\",{\"1\":{\"831\":1,\"1236\":1}}],[\"为某个字段增加或者减少指定的值\",{\"1\":{\"784\":1,\"1189\":1}}],[\"为null返回true\",{\"1\":{\"759\":1,\"1164\":1}}],[\"为true\",{\"1\":{\"743\":1,\"1148\":1}}],[\"为tomcat用户配置密码\",{\"1\":{\"354\":1}}],[\"为明星对象生成一个代理对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"为明星生成代理对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"为普通用户配置sudo认证\",{\"1\":{\"462\":1}}],[\"为普通用户授权\",{\"1\":{\"462\":1}}],[\"为取消行号\",{\"1\":{\"437\":1}}],[\"为强制离开不储存档案\",{\"1\":{\"437\":1}}],[\"为止\",{\"1\":{\"436\":1}}],[\"为在目前光标所在的上一行处输入新的一行\",{\"1\":{\"436\":1}}],[\"为在目前光标所在的下一行处输入新的一行\",{\"1\":{\"436\":1}}],[\"为将已复制的数据在光标下一行贴上\",{\"1\":{\"435\":1}}],[\"为向前删除一个字符\",{\"1\":{\"435\":1}}],[\"为向后删除一个字符\",{\"1\":{\"435\":1}}],[\"为数字\",{\"1\":{\"435\":6}}],[\"为zabbix\",{\"0\":{\"403\":1}}],[\"为zabbix创建表结构\",{\"1\":{\"397\":1}}],[\"为每一台虚拟机都制作快照\",{\"1\":{\"372\":1}}],[\"为每个请求类别定义特定的处理策略\",{\"1\":{\"108\":1}}],[\"为企业提供消息的发布\",{\"1\":{\"357\":1}}],[\"为何\",{\"0\":{\"193\":1}}],[\"为例介绍\",{\"1\":{\"158\":1}}],[\"为缓存键设置不同的失效时间\",{\"1\":{\"115\":1}}],[\"为\",{\"1\":{\"110\":1,\"112\":1,\"222\":3,\"360\":1,\"435\":1,\"436\":4,\"831\":4,\"1236\":4}}],[\"为什么最后只有两滴水\",{\"1\":{\"995\":1,\"1400\":1}}],[\"为什么不是调用run方法启动多线程\",{\"1\":{\"916\":1,\"1321\":1}}],[\"为什么用继承\",{\"1\":{\"690\":1,\"1095\":1}}],[\"为什么工具类中的方法不用实例方法去做\",{\"1\":{\"679\":1,\"1084\":1}}],[\"为什么java的数组下标从0开始而不是从1开始\",{\"0\":{\"182\":1}}],[\"为什么会有误判\",{\"1\":{\"124\":1}}],[\"为什么需要自定义序列化器\",{\"0\":{\"113\":1}}],[\"为什么选择使用\",{\"0\":{\"110\":1}}],[\"为什么要使用\",{\"0\":{\"106\":1}}],[\"为解决同一用户重复加入队伍\",{\"1\":{\"109\":1}}],[\"为解决首次访问系统的用户主页加载过慢的问题\",{\"1\":{\"109\":1}}],[\"为解决多个子系统内代码大量重复的问题\",{\"1\":{\"95\":1}}],[\"为解决开发者调用成本过高的问题\",{\"1\":{\"95\":1}}],[\"为用户分配唯一\",{\"1\":{\"95\":1}}],[\"为防止接口被恶意调用\",{\"1\":{\"95\":1}}],[\"为自己的未来铺平道路\",{\"1\":{\"68\":1}}],[\"为这片大陆带来了希望和繁荣\",{\"1\":{\"68\":1}}],[\"为未来的挑战做好准备\",{\"1\":{\"67\":1}}],[\"为夺回大陆做好充分准备\",{\"1\":{\"58\":1}}],[\"为夺回整个大陆而努力\",{\"1\":{\"58\":1}}],[\"为探险带来更多的乐趣\",{\"1\":{\"57\":1}}],[\"为了解决线程安全问题\",{\"1\":{\"931\":1,\"1336\":1}}],[\"为了解锁这个大陆的全部知识\",{\"1\":{\"49\":1}}],[\"为了解锁知识的密码\",{\"1\":{\"41\":1}}],[\"为了保险起见在第一个2后面加l\",{\"1\":{\"781\":1,\"1186\":1}}],[\"为了数据库中的表可以在新的环境中不用手动创建\",{\"1\":{\"494\":1}}],[\"为了方便\",{\"1\":{\"398\":1}}],[\"为了确保集群的稳定\",{\"1\":{\"384\":1}}],[\"为了更清晰的表达如何加锁和释放锁\",{\"1\":{\"939\":1,\"1344\":1}}],[\"为了更加方面的互相传输\",{\"1\":{\"373\":1}}],[\"为了更好地管理和操控这些数据\",{\"1\":{\"56\":1}}],[\"为了避免后续出现问题\",{\"1\":{\"372\":1}}],[\"为了避免出现网络不通的问题\",{\"1\":{\"371\":1}}],[\"为了简单起见\",{\"1\":{\"365\":1}}],[\"为了防止sql注入\",{\"1\":{\"271\":2}}],[\"为了防止某个客户端获取锁后发生异常导致锁永远不会被释放\",{\"1\":{\"117\":1}}],[\"为了线程安全使用的是reentrantlock进行加锁\",{\"1\":{\"217\":1}}],[\"为了提高秒杀的性能\",{\"1\":{\"176\":1}}],[\"为了实现单线程模型\",{\"1\":{\"139\":1}}],[\"为了加快响应速度\",{\"1\":{\"123\":1}}],[\"为了明确接口的返回\",{\"1\":{\"109\":1}}],[\"为了夺回这些宝藏\",{\"1\":{\"86\":1}}],[\"为了夺回大陆\",{\"1\":{\"85\":1}}],[\"为了打造更加与众不同的探险体验\",{\"1\":{\"57\":1}}],[\"图形界面开发\",{\"0\":{\"57\":1}}],[\"图形界面的绚丽\",{\"0\":{\"38\":1}}],[\"同上\",{\"1\":{\"952\":2,\"1357\":2}}],[\"同于自动化安装配置linux软件\",{\"1\":{\"473\":1}}],[\"同rabbitmq一样\",{\"1\":{\"376\":1}}],[\"同ssh登陆一样\",{\"1\":{\"373\":1}}],[\"同样的操作启动node2和node3\",{\"1\":{\"365\":1}}],[\"同样的操作克隆出\",{\"1\":{\"365\":1}}],[\"同样在缓存重构之前需要进行二次校验判断是否被重构过了\",{\"1\":{\"125\":1}}],[\"同tomcat一样\",{\"1\":{\"355\":1}}],[\"同一个对象多次调用hashcode\",{\"1\":{\"887\":1,\"1292\":1}}],[\"同一个类里面调用\",{\"1\":{\"162\":1}}],[\"同一生命周期内\",{\"1\":{\"254\":1}}],[\"同一套java代码操作不同的关系型数据库\",{\"1\":{\"225\":1}}],[\"同一时刻至多只有一个线程\",{\"1\":{\"210\":1}}],[\"同步方法可读性方便\",{\"1\":{\"938\":1,\"1343\":1}}],[\"同步方法锁的范围更大\",{\"1\":{\"938\":1,\"1343\":1}}],[\"同步方法其实底层也是有隐式锁对象的\",{\"1\":{\"938\":1,\"1343\":1}}],[\"同步方法底层原理\",{\"0\":{\"938\":1,\"1343\":1}}],[\"同步方法默认用类名\",{\"1\":{\"937\":1,\"938\":1,\"1342\":1,\"1343\":1}}],[\"同步方法默认用this作为锁的对象\",{\"1\":{\"937\":1,\"938\":1,\"1342\":1,\"1343\":1}}],[\"同步方法\",{\"0\":{\"937\":1,\"1342\":1},\"1\":{\"939\":2,\"1344\":2}}],[\"同步代码块锁的范围更小\",{\"1\":{\"938\":1,\"1343\":1}}],[\"同步代码块\",{\"0\":{\"933\":1,\"1338\":1}}],[\"同步\",{\"1\":{\"215\":1}}],[\"同步刷盘\",{\"1\":{\"128\":1}}],[\"同步和异步等概念\",{\"1\":{\"55\":1}}],[\"同时接收多个客户端消息\",{\"0\":{\"1463\":1}}],[\"同时有多个线程在被cpu处理并执行\",{\"1\":{\"960\":1,\"1365\":1}}],[\"同时有大量并发请求到达\",{\"1\":{\"115\":1}}],[\"同时定义了泛型的类就是泛型类\",{\"1\":{\"870\":1,\"1275\":1}}],[\"同时集合也提供了非常多且好用的api～\",{\"1\":{\"744\":1,\"1149\":1}}],[\"同时string类提供了很多操作字符串的功能\",{\"1\":{\"742\":1,\"1147\":1}}],[\"同时又实现接口\",{\"1\":{\"717\":1,\"1122\":1}}],[\"同时node2和node3也同时运行了不少程序\",{\"1\":{\"384\":1}}],[\"同时也要省略\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"同时也要省略分号\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"同时也提高可读性\",{\"1\":{\"704\":1,\"1109\":1}}],[\"同时也提供了imap\",{\"1\":{\"355\":1}}],[\"同时也支持部署在docker中\",{\"1\":{\"409\":1}}],[\"同时也可以作为流量代理服务器\",{\"1\":{\"355\":1}}],[\"同时也向读者传递坚持和勇气的力量\",{\"1\":{\"18\":1}}],[\"同时对软链接和tomcat安装文件夹进行修改\",{\"1\":{\"354\":1}}],[\"同时我们也可以给消费者添加消费线程来加快消费的进度\",{\"1\":{\"179\":1}}],[\"同时会创建objectfactory对象存入三级缓存singletonfactories\",{\"1\":{\"164\":1}}],[\"同时提高了系统的可维护性\",{\"1\":{\"160\":1}}],[\"同时拓展了多线程编程\",{\"1\":{\"58\":1}}],[\"同时\",{\"1\":{\"33\":1,\"48\":1,\"198\":1,\"1019\":1,\"1469\":1}}],[\"多收\",{\"1\":{\"1450\":1}}],[\"多发\",{\"1\":{\"1450\":1}}],[\"多发多收\",{\"0\":{\"1450\":1}}],[\"多环境开发启动命令\",{\"0\":{\"622\":1}}],[\"多拦截器执行顺序\",{\"0\":{\"578\":1}}],[\"多行多列\",{\"1\":{\"533\":1}}],[\"多行单列\",{\"1\":{\"533\":1}}],[\"多行注释\",{\"1\":{\"504\":1}}],[\"多对多\",{\"1\":{\"529\":1}}],[\"多对一\",{\"1\":{\"529\":1}}],[\"多个线程其实是并发与并行同时进行的\",{\"1\":{\"958\":1,\"1363\":1}}],[\"多个线程同时执行\",{\"1\":{\"931\":1,\"1336\":1}}],[\"多个线程同时访问同一个共享资源且存在修改资源的时候\",{\"1\":{\"930\":1,\"1335\":1}}],[\"多个线程同时操作同一个共享资源的时候\",{\"1\":{\"928\":1,\"1333\":1}}],[\"多个接口中存在同名的默认方法\",{\"1\":{\"717\":1,\"1122\":1}}],[\"多个接口中有同样的静态方法不冲突\",{\"1\":{\"717\":1,\"1122\":1}}],[\"多个单词下划线连接起来\",{\"1\":{\"704\":1,\"1109\":1}}],[\"多个类称为子类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"多个类可以单独继承某个类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"多个事务之间\",{\"1\":{\"536\":1}}],[\"多个用户可以组成一个组\",{\"1\":{\"463\":1}}],[\"多个参数\",{\"1\":{\"281\":2}}],[\"多数据操作\",{\"0\":{\"551\":1}}],[\"多数用于命令的指向目标\",{\"1\":{\"439\":1}}],[\"多数是需要java运行环境的\",{\"1\":{\"370\":1}}],[\"多数需要远程登录以及远程执行命令\",{\"1\":{\"369\":1}}],[\"多台服务器共同工作\",{\"1\":{\"363\":1}}],[\"多次请求之间不能共享数据\",{\"1\":{\"286\":1}}],[\"多条件变量\",{\"1\":{\"215\":1}}],[\"多了一个减一的操作\",{\"1\":{\"182\":1}}],[\"多版本并发控制\",{\"1\":{\"154\":1}}],[\"多表查询\",{\"0\":{\"530\":1},\"1\":{\"141\":1}}],[\"多路复⽤是指操作系统提供的⼀种\",{\"1\":{\"139\":1}}],[\"多路复⽤技术实现的\",{\"1\":{\"139\":1}}],[\"多路复⽤技术\",{\"1\":{\"139\":1}}],[\"多路复⽤机制\",{\"1\":{\"139\":1}}],[\"多协议支持\",{\"1\":{\"106\":1}}],[\"多结合自己开发\",{\"1\":{\"105\":1}}],[\"多线程的创建\",{\"0\":{\"913\":1,\"1318\":1}}],[\"多线程用在哪\",{\"1\":{\"912\":1,\"1317\":1}}],[\"多线程是指从硬件上实现多条执行流程的技术\",{\"1\":{\"912\":1,\"1317\":1}}],[\"多线程是什么\",{\"1\":{\"912\":1,\"1317\":1}}],[\"多线程\",{\"0\":{\"911\":1,\"912\":1,\"1316\":1,\"1317\":1},\"1\":{\"92\":1,\"747\":1,\"1152\":1}}],[\"多线程编程\",{\"0\":{\"55\":1}}],[\"多态写法\",{\"1\":{\"861\":1,\"1266\":1}}],[\"多态情况下不能使用子类独有的功能\",{\"1\":{\"727\":1,\"1132\":1}}],[\"多态产生的一个问题\",{\"0\":{\"727\":1,\"1132\":1}}],[\"多态侧重行为多态\",{\"1\":{\"725\":1,\"1130\":1}}],[\"多态中成员访问的特点\",{\"0\":{\"725\":1,\"1130\":1}}],[\"多态的常见形式\",{\"1\":{\"724\":1,\"1129\":1}}],[\"多态是同类型的对象\",{\"0\":{\"724\":1,\"1129\":1}}],[\"多态和异常处理的知识\",{\"1\":{\"49\":1}}],[\"多态\",{\"0\":{\"667\":1,\"722\":1,\"1072\":1,\"1127\":1},\"1\":{\"41\":1,\"842\":1,\"844\":1,\"845\":1,\"846\":1,\"881\":2,\"903\":2,\"904\":2,\"906\":2,\"907\":1,\"908\":1,\"1247\":1,\"1249\":1,\"1250\":1,\"1251\":1,\"1286\":2,\"1308\":2,\"1309\":2,\"1311\":2,\"1312\":1,\"1313\":1}}],[\"并删除\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"并不是乱码而是java的一种存储机制\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"并不会输入一个字符\",{\"1\":{\"432\":1}}],[\"并支持繁体汉字以及部分日韩文字\",{\"1\":{\"985\":1,\"1390\":1}}],[\"并指定线程名称\",{\"1\":{\"926\":1,\"1331\":1}}],[\"并确认\",{\"1\":{\"887\":1,\"1292\":1}}],[\"并确保事务的原子性\",{\"1\":{\"616\":1}}],[\"并进行检查\",{\"1\":{\"868\":1,\"1273\":1}}],[\"并用来校验数据格式的合法性\",{\"1\":{\"818\":1,\"1223\":1}}],[\"并展示处理\",{\"1\":{\"751\":1,\"1156\":1}}],[\"并展示文件的信息\",{\"1\":{\"440\":1}}],[\"并返回boolean\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"并返回队列中未执行的任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"并返回oldvalue\",{\"1\":{\"750\":1,\"1155\":1}}],[\"并返回被删除的元素\",{\"1\":{\"750\":1,\"1155\":1}}],[\"并启动后\",{\"1\":{\"744\":1,\"1149\":1}}],[\"并\",{\"1\":{\"710\":1,\"1115\":1}}],[\"并按照它们的版本号顺序执行\",{\"1\":{\"494\":1}}],[\"并按照相似度进行排序\",{\"1\":{\"118\":1}}],[\"并可以自动解决依赖问题\",{\"1\":{\"473\":1}}],[\"并取代为\",{\"1\":{\"435\":1}}],[\"并将该字符串取代为\",{\"1\":{\"435\":3}}],[\"并将这些知识应用于实际项目中\",{\"1\":{\"90\":1}}],[\"并登陆mysql\",{\"1\":{\"414\":1}}],[\"并为用户提供技术支持服务\",{\"1\":{\"396\":1}}],[\"并执行\",{\"1\":{\"387\":1}}],[\"并执行统一的安全认证\",{\"1\":{\"96\":1}}],[\"并填入1\",{\"1\":{\"375\":1}}],[\"并解压\",{\"1\":{\"375\":1}}],[\"并解放了被压抑的java知识\",{\"1\":{\"89\":1}}],[\"并协同组成分布式集群一起工作\",{\"1\":{\"375\":1}}],[\"并修改固定ip为\",{\"1\":{\"365\":1}}],[\"并赋予权限\",{\"1\":{\"358\":1}}],[\"并提供网站服务\",{\"1\":{\"351\":1}}],[\"并提供了作为web服务器的一些特有功能\",{\"1\":{\"351\":1}}],[\"并配置远程密码使用如下sql命令\",{\"1\":{\"350\":1}}],[\"并设置外键唯一\",{\"1\":{\"529\":1}}],[\"并设置远程登录密码\",{\"1\":{\"350\":1}}],[\"并设置锁的超时时间\",{\"1\":{\"117\":1}}],[\"并在此点抛出\",{\"1\":{\"638\":1,\"1043\":1}}],[\"并在\",{\"1\":{\"295\":1}}],[\"并在有事件发⽣时通知进程\",{\"1\":{\"139\":1}}],[\"并重写接口中的所有方法\",{\"1\":{\"295\":1}}],[\"并由web服务器运行servlet\",{\"1\":{\"294\":1}}],[\"并会删掉额外的逗号\",{\"1\":{\"277\":1}}],[\"并会将请求涉及到的拦截器和\",{\"1\":{\"166\":1,\"167\":1}}],[\"并传入对应的sql语句\",{\"1\":{\"233\":1}}],[\"并传递给\",{\"1\":{\"167\":1}}],[\"并成功更新\",{\"1\":{\"211\":1}}],[\"并行的理解\",{\"0\":{\"960\":1,\"1365\":1}}],[\"并行\",{\"1\":{\"198\":1}}],[\"并给予客户端响应\",{\"1\":{\"167\":1}}],[\"并发的理解\",{\"0\":{\"959\":1,\"1364\":1}}],[\"并发与并行\",{\"0\":{\"958\":1,\"1363\":1}}],[\"并发与并行的区别\",{\"0\":{\"198\":1}}],[\"并发异常\",{\"1\":{\"866\":1,\"1271\":1}}],[\"并发\",{\"1\":{\"198\":1}}],[\"并发事务的问题\",{\"1\":{\"152\":1}}],[\"并发事务会导致的问题有\",{\"1\":{\"152\":1}}],[\"并发事务带来哪些问题\",{\"0\":{\"152\":1}}],[\"并发编程篇\",{\"0\":{\"195\":1}}],[\"并发编程\",{\"1\":{\"92\":2}}],[\"并封装了\",{\"1\":{\"109\":1}}],[\"并说明抽象公共模块的目的和好处\",{\"1\":{\"107\":1}}],[\"并保存到数据库中\",{\"1\":{\"101\":1}}],[\"并通过语法source\",{\"1\":{\"486\":1}}],[\"并通过\",{\"1\":{\"112\":1,\"114\":1}}],[\"并通过分布式锁保证多机部署时定时任务不会重复执行\",{\"1\":{\"109\":1}}],[\"并通过一行代码发起调用\",{\"1\":{\"97\":1}}],[\"并通过客户端\",{\"1\":{\"95\":1}}],[\"并集中处理签名校验\",{\"1\":{\"95\":1}}],[\"并使用相同的签名算法生成签名\",{\"1\":{\"101\":1}}],[\"并使用\",{\"1\":{\"95\":1,\"103\":1,\"282\":1}}],[\"并了解\",{\"1\":{\"92\":1}}],[\"并向着更广阔的世界进发\",{\"1\":{\"83\":1}}],[\"并且值小于50\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"并且值执行一次\",{\"1\":{\"316\":1}}],[\"并且测试其特性\",{\"1\":{\"948\":1,\"949\":1,\"1353\":1,\"1354\":1}}],[\"并且还可以创建临时线程\",{\"1\":{\"946\":1,\"1351\":1}}],[\"并且释放占用的锁\",{\"1\":{\"939\":2,\"1344\":2}}],[\"并且释放锁则是可重入锁\",{\"1\":{\"133\":1}}],[\"并且给object\",{\"1\":{\"831\":1,\"1236\":1}}],[\"并且给实际需要定时执行的方法增加\",{\"1\":{\"116\":1}}],[\"并且自动触发\",{\"1\":{\"682\":1,\"1087\":1}}],[\"并且自定义sdk\",{\"1\":{\"121\":1}}],[\"并且可以独立回滚\",{\"1\":{\"616\":1}}],[\"并且创建request对象传递到service方法中\",{\"1\":{\"306\":1}}],[\"并且在整个生命周期中都不可改变\",{\"1\":{\"909\":1,\"1314\":1}}],[\"并且在构造器执行前执行\",{\"1\":{\"682\":1,\"1087\":1}}],[\"并且在同一目录下\",{\"1\":{\"266\":1}}],[\"并且在项目启动类通过\",{\"1\":{\"107\":1}}],[\"并且保持参数类型和返回值类型一致\",{\"1\":{\"266\":1}}],[\"并且将mapper接口和sql映射文件放置在同一目录下\",{\"1\":{\"266\":1}}],[\"并且允许再次尝试\",{\"1\":{\"211\":1}}],[\"并且只能关联一个线程\",{\"1\":{\"210\":1}}],[\"并且\",{\"1\":{\"189\":1,\"610\":1}}],[\"并且数组是连续的\",{\"1\":{\"182\":1}}],[\"并且配合lua脚本实现操作redis的原子性\",{\"1\":{\"176\":1}}],[\"并且不会后移\",{\"1\":{\"866\":1,\"1271\":1}}],[\"并且不能跳过索引中的列\",{\"1\":{\"150\":1}}],[\"并且不利于跨语言兼容\",{\"1\":{\"113\":1}}],[\"并且该字段比较长\",{\"1\":{\"149\":1}}],[\"并且添加索引的字段是查询比较频繁的字段\",{\"1\":{\"149\":1}}],[\"并且需要返回的列\",{\"1\":{\"147\":1}}],[\"并且name不是主键也不是唯一索引而且表含有主键id\",{\"1\":{\"146\":1}}],[\"并且叶子节点之间使用双向指针相互连接\",{\"1\":{\"144\":1}}],[\"并且呢该项目使用docker容器技术部署到服务器上避免了配置复杂的环境\",{\"1\":{\"121\":1}}],[\"并且手动输入启动\",{\"1\":{\"119\":1}}],[\"并且通过\",{\"1\":{\"113\":1}}],[\"并且通过彼此的倾听和交流\",{\"1\":{\"61\":1}}],[\"并且提供组队和创建队伍的功能\",{\"1\":{\"121\":1}}],[\"并且提供了离线文档导出\",{\"1\":{\"100\":1}}],[\"并且提高应用部署效率\",{\"1\":{\"119\":1}}],[\"并且提高\",{\"1\":{\"112\":1}}],[\"并且为这片大陆带来了希望和繁荣\",{\"1\":{\"66\":1}}],[\"并灵活地操作各种形式的数据\",{\"1\":{\"53\":1}}],[\"并掌握了运行时多态的原理\",{\"1\":{\"44\":1}}],[\"字母数字字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"字段映射与表名映射\",{\"0\":{\"548\":1}}],[\"字段名\",{\"1\":{\"533\":2}}],[\"字段列表\",{\"1\":{\"516\":1,\"519\":1,\"522\":1,\"523\":1,\"531\":2,\"532\":2,\"533\":3}}],[\"字节缓冲输出流\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"字节缓冲输入流\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"字节缓冲流\",{\"0\":{\"1007\":1,\"1412\":1}}],[\"字节解码\",{\"1\":{\"996\":1,\"1401\":1}}],[\"字节长度\",{\"1\":{\"996\":2,\"1401\":2}}],[\"字节流的使用\",{\"0\":{\"992\":1,\"1397\":1}}],[\"字节流等\",{\"1\":{\"53\":1}}],[\"字节输出流\",{\"1\":{\"991\":1,\"1396\":1}}],[\"字节输入流\",{\"1\":{\"991\":1,\"1396\":1}}],[\"字节个数\",{\"1\":{\"966\":1,\"1371\":1}}],[\"字节数组\",{\"1\":{\"1447\":1}}],[\"字节数\",{\"1\":{\"455\":1}}],[\"字节数据都是装在buffer桶中的\",{\"1\":{\"995\":1,\"1400\":1}}],[\"字节数据\",{\"1\":{\"315\":1}}],[\"字符缓冲流\",{\"0\":{\"1008\":1,\"1413\":1}}],[\"字符输出流\",{\"1\":{\"991\":1,\"1396\":1}}],[\"字符输入流\",{\"1\":{\"991\":1,\"1396\":1}}],[\"字符输入流获取数据\",{\"1\":{\"309\":3}}],[\"字符文件\",{\"1\":{\"990\":1,\"1395\":1}}],[\"字符集的编码\",{\"0\":{\"988\":1,\"1393\":1}}],[\"字符集基础知识\",{\"0\":{\"983\":1,\"1388\":1}}],[\"字符类\",{\"1\":{\"819\":2,\"1224\":2}}],[\"字符x\",{\"1\":{\"819\":1,\"1224\":1}}],[\"字符\",{\"1\":{\"819\":3,\"1224\":3}}],[\"字符型拓展\",{\"0\":{\"648\":1,\"1053\":1}}],[\"字符编码的问题\",{\"1\":{\"623\":1}}],[\"字符按键以及shift组合\",{\"1\":{\"433\":1}}],[\"字符多的时候\",{\"1\":{\"271\":2}}],[\"字符少的时候\",{\"1\":{\"271\":2}}],[\"字符串创建文件对象\",{\"1\":{\"965\":1,\"1370\":1}}],[\"字符串和\",{\"1\":{\"965\":1,\"1370\":1}}],[\"字符串类型的值\",{\"1\":{\"814\":1,\"1219\":1}}],[\"字符串类型的小数\",{\"1\":{\"790\":1,\"1195\":1}}],[\"字符串类型的整数\",{\"1\":{\"790\":2,\"1195\":2}}],[\"字符串类型也是一个类\",{\"1\":{\"646\":1,\"1051\":1}}],[\"字符串本身就重写了equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"字符串的比较还是要用equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"字符串内容比较\",{\"1\":{\"743\":1,\"1148\":1}}],[\"字符串常量池\",{\"1\":{\"743\":4,\"1148\":4}}],[\"字符串数组我们可以直接通过request对象获取数据\",{\"1\":{\"308\":1}}],[\"字符串不加单引号\",{\"1\":{\"150\":2}}],[\"字符串\",{\"1\":{\"111\":1,\"308\":1,\"435\":2,\"511\":1,\"749\":1,\"965\":1,\"1154\":1,\"1370\":1}}],[\"字符流读写数据的性能\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"字符流\",{\"1\":{\"53\":1}}],[\"字数\",{\"1\":{\"58\":1}}],[\"以内存为基准\",{\"1\":{\"994\":1,\"995\":1,\"1399\":1,\"1400\":1}}],[\"以当前代码的默认字符集进行编码\",{\"1\":{\"988\":1,\"1393\":1}}],[\"以utf\",{\"1\":{\"986\":1,\"1391\":1}}],[\"以此提高查找数据的性能\",{\"1\":{\"855\":1,\"1260\":1}}],[\"以此类推\",{\"1\":{\"831\":1,\"1236\":1}}],[\"以外的任何字母\",{\"1\":{\"819\":1,\"1224\":1}}],[\"以什么分割成字符串数组\",{\"1\":{\"743\":1,\"1148\":1}}],[\"以分号结尾\",{\"1\":{\"504\":1}}],[\"以完全格式化的形式展现信息\",{\"1\":{\"478\":1}}],[\"以容易阅读的方式展现文件的大小例如\",{\"1\":{\"440\":1}}],[\"以列表的形式展现内容\",{\"1\":{\"440\":1}}],[\"以在最底一行输入命令\",{\"1\":{\"432\":1}}],[\"以输入字符\",{\"1\":{\"432\":1}}],[\"以为\",{\"1\":{\"422\":1}}],[\"以root的身份复制到node2的\",{\"1\":{\"373\":1}}],[\"以root用户操作\",{\"1\":{\"354\":1}}],[\"以下是常用的几个命令\",{\"1\":{\"432\":1}}],[\"以下内容来自官方页面\",{\"1\":{\"399\":1}}],[\"以下简称\",{\"1\":{\"361\":1}}],[\"以下操作2选一即可\",{\"1\":{\"354\":1}}],[\"以便后续使用\",{\"1\":{\"682\":1,\"1087\":1}}],[\"以便在同一次会话的多次请求之间共享数据\",{\"1\":{\"327\":1}}],[\"以便更好地理解和解决问题\",{\"1\":{\"52\":1}}],[\"以后我们如果hashset不想使用\",{\"1\":{\"881\":2,\"1286\":2}}],[\"以后有一种技术可以强行向string的集合中添加其他的元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"以后用到lambda表达式就一行代码就ok了\",{\"1\":{\"738\":1,\"1143\":1}}],[\"以后每次请求都携带cookie数据进行访问\",{\"1\":{\"329\":1}}],[\"以后每次每次扩容都是达到了扩容阈值\",{\"1\":{\"191\":1}}],[\"以后也会被spring接管\",{\"1\":{\"267\":1}}],[\"以后会被spring接管\",{\"1\":{\"267\":1}}],[\"以后在mapper映射文件中sql语句上面的resulttype返回值类型就可以不带包名了\",{\"1\":{\"267\":1,\"268\":1}}],[\"以防止进程不会进行close而霸占连接\",{\"1\":{\"240\":1}}],[\"以保证该程序连接不会池kill掉\",{\"1\":{\"240\":1}}],[\"以减少搜索时间\",{\"1\":{\"189\":1}}],[\"以流量为切入点\",{\"1\":{\"171\":1}}],[\"以处于中间状态\",{\"1\":{\"151\":1}}],[\"以\",{\"1\":{\"150\":2,\"440\":1}}],[\"以确保性能和稳定性\",{\"1\":{\"115\":1}}],[\"以及utf\",{\"1\":{\"986\":1,\"1391\":1}}],[\"以及中间经历的各种状态及状态转换\",{\"1\":{\"962\":1,\"1367\":1}}],[\"以及通知其他线程怎么做\",{\"1\":{\"939\":1,\"1344\":1}}],[\"以及子类成员空间\",{\"1\":{\"694\":1,\"1099\":1}}],[\"以及将$java\",{\"1\":{\"353\":1}}],[\"以及如何解决\",{\"0\":{\"124\":1}}],[\"以及\",{\"1\":{\"121\":1}}],[\"以及在项目中使用\",{\"0\":{\"120\":1}}],[\"以及自定义序列化器的实现方式\",{\"0\":{\"113\":1}}],[\"以及它的作用\",{\"0\":{\"108\":1}}],[\"以及它在项目中的实际应用\",{\"0\":{\"102\":1}}],[\"以及它们之间是如何协作和交互的\",{\"0\":{\"97\":1}}],[\"以适应不同的业务需求\",{\"1\":{\"106\":1}}],[\"以鉴权\",{\"1\":{\"95\":1}}],[\"以夺回完整的java知识\",{\"1\":{\"88\":1}}],[\"以创造出更大的价值\",{\"1\":{\"68\":1}}],[\"以战胜强大的对手\",{\"1\":{\"65\":1}}],[\"以巩固和应用所学的java知识\",{\"1\":{\"62\":1}}],[\"以上就是主角在java大陆中学习和提升技能的过程\",{\"1\":{\"58\":1}}],[\"以提高代码的效率和性能\",{\"1\":{\"35\":1}}],[\"可运行状态\",{\"1\":{\"963\":1,\"1368\":1}}],[\"可运行runnable\",{\"1\":{\"203\":1}}],[\"可变参数必须放在形参列表的最后面\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数在方法内部本身就是一个数组\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数的注意事项\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数的作用\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数的格式\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数用在形参中可以接收多个数据\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可变参数\",{\"0\":{\"893\":1,\"1298\":1}}],[\"可排序\",{\"1\":{\"890\":2,\"891\":1,\"1295\":2,\"1296\":1}}],[\"可通过索引操作元素\",{\"1\":{\"860\":1,\"1265\":1}}],[\"可重复\",{\"1\":{\"838\":1,\"839\":2,\"840\":2,\"860\":2,\"861\":1,\"1243\":1,\"1244\":2,\"1245\":2,\"1265\":2,\"1266\":1}}],[\"可重复的\",{\"0\":{\"838\":1,\"1243\":1}}],[\"可重复读\",{\"1\":{\"152\":1}}],[\"可打印字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"可打断\",{\"1\":{\"215\":1}}],[\"可见字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"可不是动物对象\",{\"1\":{\"738\":2,\"1143\":2}}],[\"可判断的条件不一样\",{\"1\":{\"522\":1}}],[\"可参考如下配置\",{\"1\":{\"495\":1}}],[\"可作为内容输入的端口\",{\"1\":{\"455\":1}}],[\"可作为内容的输入端口\",{\"1\":{\"454\":1}}],[\"可配合\",{\"1\":{\"435\":1}}],[\"可用的命令非常多\",{\"1\":{\"434\":1}}],[\"可用性降低\",{\"1\":{\"176\":1}}],[\"可用性\",{\"1\":{\"174\":2}}],[\"可扩展\",{\"1\":{\"388\":1}}],[\"可扩展性\",{\"1\":{\"105\":1,\"106\":1}}],[\"可基于内存也可持久化的key\",{\"1\":{\"359\":1}}],[\"可选\",{\"1\":{\"354\":1,\"439\":2,\"449\":1,\"454\":1}}],[\"可超时\",{\"1\":{\"215\":1}}],[\"可中断\",{\"1\":{\"214\":1}}],[\"可靠性差\",{\"1\":{\"128\":1}}],[\"可靠性高\",{\"1\":{\"128\":1}}],[\"可能因为其中某个任务的异常使timer线程死掉\",{\"1\":{\"954\":1,\"1359\":1}}],[\"可能出现oom错误\",{\"1\":{\"952\":1,\"1357\":1}}],[\"可能出现什么问题\",{\"1\":{\"929\":1,\"1334\":1}}],[\"可能匹配也可能不匹配行终止符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"可能需要拆分链表\",{\"1\":{\"191\":1}}],[\"可能会出现bug\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"可能会出现线程安全问题\",{\"1\":{\"930\":1,\"1335\":1}}],[\"可能会出现\",{\"1\":{\"928\":1,\"1333\":1}}],[\"可能会切换到其他的状态\",{\"1\":{\"204\":1}}],[\"可能会存在资源竞争问题\",{\"1\":{\"158\":1}}],[\"可能会导致内存占用过多\",{\"1\":{\"115\":1}}],[\"可能造成索引失效\",{\"1\":{\"150\":1}}],[\"可能返回多条数据\",{\"1\":{\"142\":1}}],[\"可能丢失大量的数据\",{\"1\":{\"128\":1}}],[\"可能有多个服务器实例同时执行同一个定时任务\",{\"1\":{\"116\":1}}],[\"可视化工具中阅读\",{\"1\":{\"113\":1}}],[\"可理解性\",{\"1\":{\"105\":1}}],[\"可以广播发送\",{\"1\":{\"1443\":1}}],[\"可以省略大括号不写\",{\"1\":{\"1019\":2,\"1469\":2}}],[\"可以省略不写\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"可以提高io功能开发效率\",{\"1\":{\"1013\":1,\"1418\":1}}],[\"可以提高原始字节流\",{\"1\":{\"1006\":1,\"1411\":1}}],[\"可以实现打印什么就是什么数据\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"可以实现在给定的延迟后运行任务\",{\"1\":{\"951\":1,\"1356\":1}}],[\"可以防止敏感信息暴露\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"可以防止空指针异常\",{\"1\":{\"756\":1,\"1161\":1}}],[\"可以创建多级文件夹\",{\"1\":{\"968\":1,\"1373\":1}}],[\"可以创建一个不可变集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"可以创建一个用户\",{\"1\":{\"354\":1}}],[\"可以得到线程执行的结果\",{\"1\":{\"923\":1,\"1328\":1}}],[\"可以得到基于\",{\"1\":{\"100\":1,\"120\":1}}],[\"可以交给thread了\",{\"1\":{\"921\":1,\"1326\":1}}],[\"可以解决这个问题\",{\"1\":{\"921\":1,\"1326\":1}}],[\"可以解决多态下的劣势\",{\"1\":{\"730\":1,\"1135\":1}}],[\"可以继续继承和实现接口\",{\"1\":{\"919\":1,\"922\":1,\"1324\":1,\"1327\":1}}],[\"可以重复\",{\"1\":{\"902\":1,\"1307\":1}}],[\"可以重定向到任意位置资源\",{\"1\":{\"313\":1}}],[\"可以传一个参数或多个\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可以传入一个类型一致\",{\"1\":{\"184\":1}}],[\"可以不穿参数\",{\"1\":{\"893\":1,\"1298\":1}}],[\"可以去重复\",{\"1\":{\"880\":1,\"1285\":1}}],[\"可以完成队列结构\",{\"1\":{\"865\":1,\"1270\":1}}],[\"可以变成这样\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"可以破坏封装线\",{\"1\":{\"817\":1,\"1222\":1}}],[\"可以暴力反射\",{\"1\":{\"806\":1,\"1211\":1}}],[\"可以放心使用\",{\"1\":{\"785\":1,\"1190\":1}}],[\"可以对date对象或时间毫秒值格式化成我们喜欢的时间形式\",{\"1\":{\"779\":1,\"1184\":1}}],[\"可以搜索出学生的信息\",{\"1\":{\"751\":1,\"1156\":1}}],[\"可以理解为干爹\",{\"1\":{\"724\":1,\"1129\":1}}],[\"可以用于做系统的配置信息\",{\"1\":{\"704\":1,\"1109\":1}}],[\"可以节约内存空间\",{\"1\":{\"684\":1,\"1089\":1}}],[\"可以保证系统中\",{\"1\":{\"684\":1,\"1089\":1}}],[\"可以保证命令的原子性\",{\"1\":{\"132\":1}}],[\"可以修饰成员变量\",{\"1\":{\"675\":1,\"1080\":1}}],[\"可以分为三类\",{\"1\":{\"511\":1}}],[\"可以接着写\",{\"1\":{\"495\":1}}],[\"可以编写对个创建表的语句\",{\"1\":{\"494\":1}}],[\"可以退出用户的登陆\",{\"1\":{\"469\":1}}],[\"可以强制停止某些程序的运行\",{\"1\":{\"468\":1}}],[\"可以查看文件尾部内容\",{\"1\":{\"460\":1}}],[\"可以查看用户的联系方式\",{\"1\":{\"121\":1}}],[\"可以组合使用\",{\"1\":{\"440\":1}}],[\"可以粘贴\",{\"1\":{\"435\":2}}],[\"可以自行设置\",{\"1\":{\"428\":1}}],[\"可以部署在操作系统之上\",{\"1\":{\"408\":1}}],[\"可以\",{\"1\":{\"392\":1,\"878\":1,\"1283\":1}}],[\"可以支撑海量数据的分布式计算\",{\"1\":{\"391\":1,\"394\":1}}],[\"可以看出node1承载了太多的压力\",{\"1\":{\"384\":1}}],[\"可以看做是命令日志文件\",{\"1\":{\"128\":1}}],[\"可以基于内存存储数据并提供超低延迟\",{\"1\":{\"359\":1}}],[\"可以检查是否正常启动成功\",{\"1\":{\"354\":1}}],[\"可以复制下载链接在windows系统中使用迅雷等软件加速下载然后上传到linux内即可\",{\"1\":{\"354\":1}}],[\"可以有效防止服务器被黑\",{\"1\":{\"354\":1}}],[\"可以有多个\",{\"1\":{\"145\":1}}],[\"可以让你重复的找到一些你搜寻的关键词\",{\"1\":{\"435\":1}}],[\"可以让用户编写的web应用程序\",{\"1\":{\"351\":1}}],[\"可以让⼀个进程同时监听多个\",{\"1\":{\"139\":1}}],[\"可以在线程执行完毕后通过futuretask的get方法获取执行结果\",{\"1\":{\"922\":1,\"1327\":1}}],[\"可以在线程执行完毕后通过调用其get方法得到线程执行完毕的结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"可以在使用泛型的时候代表一切类型\",{\"1\":{\"877\":1,\"1282\":1}}],[\"可以在编译阶段约束操作的数据类型\",{\"1\":{\"868\":1,\"1273\":1}}],[\"可以在编译阶段约束集合对象只能操作某种类型的数\",{\"1\":{\"749\":1,\"1154\":1}}],[\"可以在运行时得到一个类的全部成分然后操作\",{\"1\":{\"817\":1,\"1222\":1}}],[\"可以在多台服务器上部署\",{\"1\":{\"375\":1}}],[\"可以在转发的资源间使用request对象共享数据\",{\"1\":{\"310\":1}}],[\"可以在后置处理器中通过动态代理增强某个bean\",{\"1\":{\"163\":1}}],[\"可以大大简化重复代码\",{\"1\":{\"308\":1}}],[\"可以将方法内部出现的异常直接捕获处理\",{\"1\":{\"635\":1,\"1040\":1}}],[\"可以将方法内部出现的异常抛出去给本方法的调用者处理\",{\"1\":{\"634\":1,\"1039\":1}}],[\"可以将文件\",{\"1\":{\"475\":1}}],[\"可以将web项目部署到服务器中\",{\"1\":{\"291\":1}}],[\"可以将threadlocal类形象的比喻成存放数据的盒子\",{\"1\":{\"221\":1}}],[\"可以配置多个urlpattern\",{\"1\":{\"302\":1}}],[\"可以配置多个environment\",{\"1\":{\"267\":1}}],[\"可以配合第三方工具来根据\",{\"1\":{\"100\":1,\"120\":1}}],[\"可以随时替换底层数据库\",{\"1\":{\"225\":1}}],[\"可以定制线程对象的创建\",{\"1\":{\"219\":1}}],[\"可以设置当前线程指定的名称\",{\"1\":{\"926\":1,\"1331\":1}}],[\"可以设置在服务器启动的时候创建对象节约第一次访问时间\",{\"1\":{\"297\":1}}],[\"可以设置对应的jar包的作用范围\",{\"1\":{\"259\":1}}],[\"可以设置公平锁\",{\"1\":{\"214\":1}}],[\"可以设置超时时间\",{\"1\":{\"214\":1}}],[\"可以被隐式转换为lambda表达式来表示接口的一个实现\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"可以被共享访问\",{\"1\":{\"675\":1,\"1080\":1}}],[\"可以被systemctl所管理\",{\"1\":{\"346\":1,\"349\":1}}],[\"可以被设置为\",{\"1\":{\"211\":1}}],[\"可以被调用多次\",{\"1\":{\"201\":1}}],[\"可以调用集合的toarray\",{\"1\":{\"184\":1}}],[\"可以给消息指定一个唯一的业务key\",{\"1\":{\"178\":1}}],[\"可以针对该字段创建前缀索引\",{\"1\":{\"149\":1}}],[\"可以避免读取到不需要的数据\",{\"1\":{\"144\":1}}],[\"可以通过class文件中查看到\",{\"1\":{\"743\":1,\"1148\":1}}],[\"可以通过容器名称相互连接\",{\"1\":{\"494\":1}}],[\"可以通过top命令查看cpu\",{\"1\":{\"481\":1}}],[\"可以通过touch命令创建文件\",{\"1\":{\"446\":1}}],[\"可以通过ps命令查看linux系统中的进程信息\",{\"1\":{\"478\":1}}],[\"可以通过su切换到root用户得到最大的权限\",{\"1\":{\"462\":1}}],[\"可以通过exit命令退回上一个用户\",{\"1\":{\"461\":1}}],[\"可以通过选项控制命令的行为细节\",{\"1\":{\"439\":1}}],[\"可以通过端口占用检查mysql的网络状态\",{\"1\":{\"347\":1,\"350\":1}}],[\"可以通过aop上下文对象\",{\"1\":{\"162\":1}}],[\"可以通过限制删除操作执行的时长和频率来减少删除操作对cpu的影响\",{\"1\":{\"129\":1}}],[\"可以通过实现threadfactory接口自定义线程的创建逻辑\",{\"1\":{\"112\":1}}],[\"可以按照不同的规则删除\",{\"1\":{\"129\":1}}],[\"可以从磁盘中读取该rdb文件\",{\"1\":{\"128\":1}}],[\"可以从易用性\",{\"1\":{\"105\":1}}],[\"可以采用延迟双删的方案来保证双写一致性\",{\"1\":{\"127\":1}}],[\"可以控制应用程序的版本\",{\"1\":{\"119\":1}}],[\"可以把低级的字节输出流包装成一个高级的缓冲字节输出流管道\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"可以把低级的字节输入流包装成一个高级的缓冲字节输入流管道\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"可以把字符串类型转换成真实的数据类型\",{\"0\":{\"790\":1,\"1195\":1}}],[\"可以把输出重定向到某个文件中\",{\"1\":{\"424\":1}}],[\"可以把\",{\"1\":{\"119\":1}}],[\"可以主动释放锁\",{\"1\":{\"117\":1}}],[\"可以根据需要进行对应的修改\",{\"1\":{\"494\":1}}],[\"可以根据任务的特性选择不同类型的队列\",{\"1\":{\"112\":1}}],[\"可以根据系统的资源情况和任务的特性来设置合适的值\",{\"1\":{\"112\":1}}],[\"可以根据不同的需求选择合适的协议\",{\"1\":{\"106\":1}}],[\"可以使用thread的常用方法\",{\"1\":{\"924\":1,\"1329\":1}}],[\"可以使用注解定义映射关系\",{\"1\":{\"570\":1,\"613\":1}}],[\"可以使用su切换到root或者sudo提权\",{\"1\":{\"473\":1}}],[\"可以使用echo命令在命令行输出指定内容\",{\"1\":{\"457\":1}}],[\"可以使用以下按键\",{\"1\":{\"433\":1}}],[\"可以使用以下语法使用环境变量来覆盖配置文件中的所有选项\",{\"1\":{\"413\":1}}],[\"可以使用root用户执行shutdown来快速关机\",{\"1\":{\"365\":1}}],[\"可以使用redisson封装的共享锁\",{\"1\":{\"127\":1}}],[\"可以使用redisson实现的布隆过滤器\",{\"1\":{\"124\":1}}],[\"可以使用arrays\",{\"1\":{\"184\":1}}],[\"可以使用\",{\"1\":{\"165\":1,\"281\":4,\"354\":1,\"435\":1}}],[\"可以使用keepalivetime和timeunit方法来设置\",{\"1\":{\"112\":1}}],[\"可以使用maximumpoolsize方法来设置\",{\"1\":{\"112\":1}}],[\"可以使用corepoolsize方法来设置\",{\"1\":{\"112\":1}}],[\"可以使程序更加可靠\",{\"1\":{\"51\":1}}],[\"可以一定程度上节省内存\",{\"1\":{\"111\":1}}],[\"可以只获取昵称\",{\"1\":{\"111\":1}}],[\"可以直接使用thread类中的start方法启动线程\",{\"1\":{\"923\":1,\"1328\":1}}],[\"可以直接使用返回值类型而且不区分大小写了\",{\"1\":{\"268\":1}}],[\"可以直接使用返回值类型\",{\"1\":{\"267\":1}}],[\"可以直接修改后面的hashset\",{\"1\":{\"881\":2,\"1286\":2}}],[\"可以直接打印出内容\",{\"1\":{\"839\":1,\"840\":1,\"1244\":1,\"1245\":1}}],[\"可以直接得到这个类的成员方法对象\",{\"1\":{\"798\":1,\"1203\":1}}],[\"可以直接得到这个类的成员变量对象\",{\"1\":{\"798\":1,\"1203\":1}}],[\"可以直接得到这个类的构造器对象\",{\"1\":{\"798\":1,\"1203\":1}}],[\"可以直接通过类名进行访问\",{\"1\":{\"766\":1,\"1171\":1}}],[\"可以直接通过界面发送请求来测试接口\",{\"1\":{\"100\":1,\"120\":1}}],[\"可以直接返回\",{\"1\":{\"298\":1}}],[\"可以直接调用\",{\"0\":{\"202\":1}}],[\"可以直接在项目中注入该对象并使用\",{\"1\":{\"104\":1}}],[\"可以进行后续操作\",{\"1\":{\"101\":1}}],[\"可以增强\",{\"1\":{\"101\":1}}],[\"可溯源性\",{\"1\":{\"95\":1}}],[\"可维护\",{\"1\":{\"51\":1}}],[\"封装要发送的数据\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"封装要做的事情\",{\"1\":{\"921\":1,\"1326\":1}}],[\"封装成牌对象\",{\"1\":{\"897\":1,\"1302\":1}}],[\"封装学生数据\",{\"1\":{\"751\":1,\"1156\":1}}],[\"封装电影数据\",{\"1\":{\"751\":1,\"1156\":1}}],[\"封装作用\",{\"1\":{\"668\":1,\"1073\":1}}],[\"封装步骤\",{\"1\":{\"668\":1,\"1073\":1}}],[\"封装的基本思想\",{\"1\":{\"668\":1,\"1073\":1}}],[\"封装数据\",{\"1\":{\"321\":1,\"326\":1}}],[\"封装为request对象\",{\"1\":{\"306\":1}}],[\"封装为map集合\",{\"1\":{\"281\":2}}],[\"封装http协议操作\",{\"1\":{\"291\":1}}],[\"封装了dql查询语句的结果\",{\"1\":{\"231\":1}}],[\"封装了要被线程执行的代码\",{\"1\":{\"201\":1}}],[\"封装了对各\",{\"1\":{\"97\":1}}],[\"封装\",{\"0\":{\"667\":1,\"668\":1,\"1072\":1,\"1073\":1},\"1\":{\"51\":1}}],[\"而创建新线程的开销是很大的\",{\"1\":{\"940\":1,\"1345\":1}}],[\"而double的tostring按double的实际能表达的精度对尾数进行了截断\",{\"1\":{\"773\":1,\"1178\":1}}],[\"而string在运算拼接字符串的时候\",{\"1\":{\"764\":1,\"1169\":1}}],[\"而servlet接口中有service方法\",{\"1\":{\"296\":1}}],[\"而前面的一种更加安全\",{\"1\":{\"758\":1,\"1163\":1}}],[\"而animal都不会吃骨头\",{\"0\":{\"731\":1,\"1136\":1}}],[\"而这桶水只有两滴水\",{\"1\":{\"995\":1,\"1400\":1}}],[\"而这个对象中是包含了父类成员空间\",{\"1\":{\"694\":1,\"1099\":1}}],[\"而这正是驱动他继续前进的力量\",{\"1\":{\"49\":1}}],[\"而学生继承父类\",{\"1\":{\"691\":1,\"1096\":1}}],[\"而大部分学生没有工资\",{\"1\":{\"691\":1,\"1096\":1}}],[\"而引用类型是在堆内存中的\",{\"1\":{\"654\":2,\"1059\":2}}],[\"而直接跳到catch\",{\"1\":{\"636\":1,\"1041\":1}}],[\"而having是分组后对结果进行过滤\",{\"1\":{\"522\":1}}],[\"而httpjspbase又继承httpservlet\",{\"1\":{\"319\":1}}],[\"而非输入字符\",{\"1\":{\"432\":1}}],[\"而浏览器不支持中文\",{\"1\":{\"309\":2}}],[\"而且任务队列也满了\",{\"1\":{\"947\":1,\"1352\":1}}],[\"而且任务队列也排满了\",{\"1\":{\"946\":1,\"1351\":1}}],[\"而且2人都需要取钱10万元\",{\"1\":{\"929\":1,\"1334\":1}}],[\"而且下面的什么都不用动\",{\"1\":{\"732\":1,\"1137\":1}}],[\"而且便于维护\",{\"1\":{\"704\":1,\"1109\":1}}],[\"而且初始化之后不能被改变\",{\"1\":{\"704\":1,\"1109\":1}}],[\"而且在堆内存中\",{\"1\":{\"676\":1,\"1081\":1}}],[\"而且public的修饰符的类也必须是java文件名相同\",{\"1\":{\"659\":1,\"1064\":1}}],[\"而且sa和sb的地址也不一样\",{\"1\":{\"648\":1,\"1053\":1}}],[\"而且大多数rpm包在官方\",{\"1\":{\"360\":1}}],[\"而且如果一个键对应多个值\",{\"1\":{\"308\":1}}],[\"而且做得更详细\",{\"1\":{\"308\":1}}],[\"而且\",{\"1\":{\"273\":1}}],[\"而且不区分大小写了\",{\"1\":{\"267\":1}}],[\"而后者永远为true所以登入成功了\",{\"1\":{\"233\":1}}],[\"而使用\",{\"1\":{\"215\":1}}],[\"而runnable接口的run\",{\"1\":{\"200\":1}}],[\"而进程正相反\",{\"1\":{\"197\":1}}],[\"而各线程则不一定\",{\"1\":{\"197\":1}}],[\"而value值默认为同一个object对象\",{\"1\":{\"194\":1}}],[\"而\",{\"1\":{\"187\":2,\"197\":1,\"207\":1,\"222\":2}}],[\"而undo\",{\"1\":{\"153\":1}}],[\"而b+树只有叶子节点上保存数据\",{\"1\":{\"144\":1}}],[\"而此时又有新的任务提交\",{\"1\":{\"112\":1}}],[\"而如果用\",{\"1\":{\"111\":1}}],[\"而不会改变原本的\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"而不是m通过p\",{\"1\":{\"819\":1,\"1224\":1}}],[\"而不是直接调用name字符串里面的equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"而不是对象的地址\",{\"1\":{\"755\":1,\"1160\":1}}],[\"而不是四舍五入\",{\"1\":{\"650\":1,\"1055\":1}}],[\"而不是\",{\"1\":{\"281\":1}}],[\"而不是再重新建立一个\",{\"1\":{\"236\":1}}],[\"而不是更新和返回整个\",{\"1\":{\"111\":1}}],[\"而不需要开发者显式地处理底层网络通信和数据序列化等问题\",{\"1\":{\"106\":1}}],[\"而是调用start方法呢\",{\"1\":{\"916\":1,\"1321\":1}}],[\"而是调用objects的equals的方法来比较两个对象\",{\"1\":{\"758\":1,\"1163\":1}}],[\"而是引用所有字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"而是别人需要我们写或者我们可以写的时候才会使用\",{\"1\":{\"738\":1,\"1143\":1}}],[\"而是自己成为事务管理员\",{\"1\":{\"616\":1}}],[\"而是输出到out\",{\"1\":{\"424\":1}}],[\"而是用独立zookeeper\",{\"1\":{\"389\":1}}],[\"而是arrays的一个内部类\",{\"1\":{\"184\":1}}],[\"而是直接交由系统自动根据\",{\"1\":{\"100\":1,\"120\":1}}],[\"而是一个新的开始\",{\"1\":{\"49\":1}}],[\"而是一个java大师\",{\"1\":{\"40\":1}}],[\"而异常处理技术成为他应对困境的一把利器\",{\"1\":{\"52\":1}}],[\"感到异常的压抑和迷茫\",{\"1\":{\"77\":1}}],[\"感谢这段探索带给他的一切\",{\"1\":{\"48\":1}}],[\"感慨万分\",{\"1\":{\"7\":1}}],[\"即适用于函数式编程场景的接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"即为\",{\"1\":{\"831\":1,\"1236\":1}}],[\"即包含了基本的数学运算方法的类\",{\"1\":{\"766\":1,\"1171\":1}}],[\"即一个类永远只能创建一个对象\",{\"1\":{\"684\":1,\"1089\":1}}],[\"即这一组数据库命令要么同时成功\",{\"1\":{\"535\":1}}],[\"即匹配任意内容\",{\"1\":{\"451\":1}}],[\"即要创建的文件夹的路径\",{\"1\":{\"445\":1}}],[\"即列出所有的文件\",{\"1\":{\"440\":1}}],[\"即输出内容不打印到屏幕上\",{\"1\":{\"424\":1}}],[\"即\",{\"1\":{\"373\":1,\"380\":1,\"441\":1,\"831\":1,\"1236\":1}}],[\"即让用户开发的web应用程序\",{\"1\":{\"351\":1}}],[\"即连接池\",{\"1\":{\"240\":1}}],[\"即servertimezone=utc\",{\"1\":{\"226\":1}}],[\"即最小不可拆分的操作\",{\"1\":{\"211\":1}}],[\"即table\",{\"1\":{\"190\":1}}],[\"即数组和链表或红黑树\",{\"1\":{\"188\":1}}],[\"即使任务没有完成\",{\"1\":{\"948\":1,\"1353\":1}}],[\"即使毫无意义\",{\"0\":{\"670\":1,\"1075\":1}}],[\"即使关闭xshell退出当前session依然继续运行\",{\"1\":{\"424\":1}}],[\"即使关闭xshell退出当前会话依然继续运行\",{\"1\":{\"424\":1}}],[\"即使系统发⽣故障或宕机\",{\"1\":{\"151\":1}}],[\"即使他的技能和知识都在提升\",{\"1\":{\"14\":1}}],[\"即所查询的数据缓存中不存在\",{\"1\":{\"124\":1}}],[\"即同时更新数据库和缓存\",{\"1\":{\"115\":1}}],[\"即linkedblockingqueue\",{\"1\":{\"112\":1}}],[\"即可在\",{\"1\":{\"437\":1}}],[\"即可\",{\"1\":{\"435\":1,\"437\":1}}],[\"即可进入zabbix页面\",{\"1\":{\"405\":1}}],[\"即可进入mysql数据库\",{\"1\":{\"347\":1,\"350\":1}}],[\"即可看到hbase的web\",{\"1\":{\"389\":1}}],[\"即可通过scp互传文件\",{\"1\":{\"373\":1}}],[\"即可自动生效\",{\"1\":{\"110\":1}}],[\"即可使用\",{\"1\":{\"103\":1}}],[\"即可实现一行代码调用接口\",{\"1\":{\"95\":1}}],[\"即将结束在java大陆的旅程\",{\"1\":{\"48\":1}}],[\"经典代码\",{\"1\":{\"1008\":1,\"1413\":1}}],[\"经典问题\",{\"0\":{\"979\":1,\"1384\":1}}],[\"经典的代码\",{\"1\":{\"881\":1,\"1286\":1}}],[\"经典\",{\"1\":{\"861\":1,\"1266\":1}}],[\"经比较后第一个\",{\"1\":{\"831\":1,\"1236\":1}}],[\"经常使用的是声明式事务\",{\"1\":{\"161\":1}}],[\"经历了一系列的探险和挑战\",{\"1\":{\"65\":1}}],[\"经历了一系列领悟和挑战\",{\"1\":{\"47\":1}}],[\"经过高度优化\",{\"1\":{\"106\":1}}],[\"经过一段时间的不懈努力\",{\"1\":{\"64\":1}}],[\"经过艰苦的战斗和努力\",{\"1\":{\"89\":1}}],[\"经过艰苦的学习和不断的实践\",{\"1\":{\"58\":1}}],[\"经过艰苦的努力\",{\"1\":{\"41\":1}}],[\"经过五关斩六将的努力\",{\"1\":{\"40\":1}}],[\"经过多次的失败和尝试\",{\"1\":{\"6\":1}}],[\"经过漫长的探险\",{\"1\":{\"6\":1}}],[\"如此才可以解析类中的全部成分\",{\"1\":{\"803\":1,\"1208\":1}}],[\"如拼接\",{\"1\":{\"761\":1,\"1166\":1}}],[\"如我要向下移动\",{\"1\":{\"437\":1}}],[\"如安装oracle数据库就可以放到该目录下\",{\"1\":{\"428\":1}}],[\"如windowsmaclinux\",{\"1\":{\"409\":1}}],[\"如图\",{\"1\":{\"405\":1}}],[\"如需停止\",{\"1\":{\"392\":1}}],[\"如需停止可使用\",{\"1\":{\"389\":1}}],[\"如需停止可以执行\",{\"1\":{\"386\":2}}],[\"如需停止将start更换为stop\",{\"1\":{\"386\":2}}],[\"如下图\",{\"1\":{\"405\":1}}],[\"如下\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"386\":1,\"743\":1,\"1148\":1}}],[\"如上图\",{\"1\":{\"384\":1}}],[\"如无报错即配置成功\",{\"1\":{\"375\":1}}],[\"如无账户\",{\"1\":{\"353\":1}}],[\"如tomcat管理和控制平台\",{\"1\":{\"351\":1}}],[\"如try\",{\"1\":{\"45\":1}}],[\"如123456\",{\"1\":{\"350\":1}}],[\"如setint\",{\"1\":{\"233\":1}}],[\"如秒\",{\"1\":{\"219\":1}}],[\"如偏向锁\",{\"1\":{\"215\":1}}],[\"如读写事件\",{\"1\":{\"139\":1}}],[\"如linkedblockingqueue\",{\"1\":{\"112\":1}}],[\"如果lambda方法体重只有一行代码\",{\"1\":{\"1019\":2,\"1469\":2}}],[\"如果linux内下载过慢\",{\"1\":{\"354\":1}}],[\"如果只有一个参数\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"如果只需要安装agent的话\",{\"1\":{\"401\":1}}],[\"如果文件过大会引起内存溢出\",{\"1\":{\"996\":1,\"1401\":1}}],[\"如果字节已经没有可读的返回\",{\"1\":{\"994\":2,\"1399\":2}}],[\"如果删除的是一个文件\",{\"1\":{\"969\":1,\"1374\":1}}],[\"如果该线程出现异常而结束\",{\"1\":{\"951\":1,\"1356\":1}}],[\"如果该用户是管理员则可以执行方法\",{\"1\":{\"160\":1}}],[\"如果小明和小红同时来取钱\",{\"1\":{\"929\":1,\"1334\":1}}],[\"如果在main方法中写\",{\"1\":{\"926\":1,\"1331\":1}}],[\"如果task任务没有执行完\",{\"1\":{\"921\":1,\"1326\":1}}],[\"如果table\",{\"1\":{\"190\":1}}],[\"如果直接调用run方法会当成普通方法执行\",{\"1\":{\"916\":1,\"1321\":1}}],[\"如果希望增删改查都快\",{\"1\":{\"892\":2,\"1297\":2}}],[\"如果希望元素可以重复\",{\"1\":{\"892\":2,\"1297\":2}}],[\"如果想使用treeset存储自定义类型\",{\"1\":{\"891\":1,\"1296\":1}}],[\"如果想要进行多次移动的话\",{\"1\":{\"435\":1}}],[\"如果想要tomcat可以正常使用\",{\"1\":{\"354\":1}}],[\"如果哈希值一样\",{\"1\":{\"888\":1,\"1293\":1}}],[\"如果位置不为null\",{\"1\":{\"888\":1,\"1293\":1}}],[\"如果某一个节点是红色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"如果某个线程因为执行异常而结束\",{\"1\":{\"951\":1,\"1356\":1}}],[\"如果某个成员方法是非public的\",{\"1\":{\"813\":1,\"1218\":1}}],[\"如果某个成员变量是非public的\",{\"1\":{\"809\":1,\"1214\":1}}],[\"如果某个sql的type是index或者是all那么这个sql就需要优化\",{\"1\":{\"142\":1}}],[\"如果迭代器越界了会出现nosuchelementexception异常\",{\"1\":{\"844\":1,\"1249\":1}}],[\"如果要对对象进行排序\",{\"1\":{\"892\":1,\"1297\":1}}],[\"如果要存储基本数据类型的数据可以选用包装类\",{\"1\":{\"833\":1,\"1238\":1}}],[\"如果要永久生效\",{\"1\":{\"386\":1}}],[\"如果mincapacity大于最大容量\",{\"1\":{\"831\":1,\"1236\":1}}],[\"如果mapper接口名称和sql映射文件名称相同\",{\"1\":{\"266\":1}}],[\"如果master故障\",{\"1\":{\"136\":1}}],[\"如果新容量大于\",{\"1\":{\"831\":1,\"1236\":1}}],[\"如果遇到私有的构造器\",{\"1\":{\"806\":1,\"1211\":1}}],[\"如果进行一一比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"如果进行limit分页查询\",{\"1\":{\"148\":1}}],[\"如果通过了上面的层层判断\",{\"1\":{\"756\":1,\"1161\":1}}],[\"如果o是null\",{\"1\":{\"756\":1,\"1161\":1}}],[\"如果owner持有的线程已经释放了锁\",{\"1\":{\"210\":1}}],[\"如果后面的元素元素也是小于80分\",{\"1\":{\"751\":1,\"1156\":1}}],[\"如果多个接口中存在规范冲突则不能多继承\",{\"1\":{\"717\":1,\"1122\":1}}],[\"如果多个客户端同时尝试获取同一个锁\",{\"1\":{\"117\":1}}],[\"如果父类中的方法不能够满足子类的方法\",{\"1\":{\"697\":1,\"1102\":1}}],[\"如果父类范围还没有找到就会报错\",{\"1\":{\"696\":1,\"1101\":1}}],[\"如果我们在supplier定义后\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"如果我们想调用dog中独有的吃骨头方法\",{\"1\":{\"730\":1,\"1135\":1}}],[\"如果我们想通过echo输出pwd的内容\",{\"1\":{\"458\":1}}],[\"如果我们有一天不想用这个猫对象\",{\"1\":{\"726\":1,\"1131\":1}}],[\"如果我们把子类所有的属性方法定义到父类\",{\"1\":{\"691\":1,\"1096\":1}}],[\"如果我们把子类所有的方法和属性都定义到人类里面\",{\"1\":{\"691\":1,\"1096\":1}}],[\"如果case里面的值都是比较接近的\",{\"1\":{\"653\":1,\"1058\":1}}],[\"如果企业想要通过异常方式管理自己的某个业务问题\",{\"1\":{\"638\":1,\"1043\":1}}],[\"如果出现异常\",{\"1\":{\"636\":1,\"1041\":1}}],[\"如果出现https相关错误\",{\"1\":{\"354\":1}}],[\"如果出现hash值相同的key\",{\"1\":{\"188\":1}}],[\"如果异常最终抛出去给虚拟机将会引起程序的死亡\",{\"1\":{\"634\":1,\"1039\":1}}],[\"如果查询参数返回值的名称与实体类的属性名称不匹配\",{\"1\":{\"570\":1,\"613\":1}}],[\"如果给所有的列添加数据\",{\"1\":{\"514\":1}}],[\"如果存在则不创建\",{\"1\":{\"507\":1}}],[\"如果存在主键\",{\"1\":{\"145\":1}}],[\"如果都已经配置完毕\",{\"1\":{\"495\":1}}],[\"如果部署了多个该服务\",{\"1\":{\"495\":1}}],[\"如果显示\",{\"1\":{\"478\":1}}],[\"如果目标不存在则进行改名\",{\"1\":{\"450\":1}}],[\"如果修改过\",{\"1\":{\"437\":1}}],[\"如果修改了list内容\",{\"0\":{\"186\":1},\"1\":{\"186\":1}}],[\"如果刚刚我们执行\",{\"1\":{\"435\":1}}],[\"如果当前目录的\",{\"1\":{\"423\":1}}],[\"如果可以登录继续向下走\",{\"1\":{\"402\":1}}],[\"如果你想要重复删除\",{\"1\":{\"435\":1}}],[\"如果你想设置简单密码\",{\"1\":{\"398\":1}}],[\"如果你将右手放在键盘上的话\",{\"1\":{\"435\":1}}],[\"如果你创建了一个threadlocal变量\",{\"1\":{\"221\":1}}],[\"如果复制文件夹\",{\"1\":{\"373\":1}}],[\"如果同学们使用macos系统\",{\"1\":{\"366\":1}}],[\"如果需要写有参构造器\",{\"1\":{\"660\":1,\"1065\":1}}],[\"如果需要取消高亮在底线命令模式输入noh\",{\"1\":{\"435\":1}}],[\"如果需要存储\",{\"1\":{\"331\":1}}],[\"如果需要保证线程安全\",{\"1\":{\"187\":1}}],[\"如果一个节点没有子节点或者父节点\",{\"1\":{\"858\":1,\"1263\":1}}],[\"如果一个客户端在持有锁时\",{\"1\":{\"117\":1}}],[\"如果一切正常\",{\"1\":{\"405\":1}}],[\"如果一样会把值拼接一起形成一个数组\",{\"1\":{\"308\":1}}],[\"如果方法是静态方法\",{\"1\":{\"938\":1,\"1343\":1}}],[\"如果方法是实例方法\",{\"1\":{\"938\":1,\"1343\":1}}],[\"如果方法上配置了\",{\"1\":{\"616\":1}}],[\"如果方法中有多个参数\",{\"1\":{\"272\":1,\"281\":1}}],[\"如果方法出现异常则会回滚事务\",{\"1\":{\"161\":1}}],[\"如果sql模板一样\",{\"1\":{\"234\":1}}],[\"如果\",{\"1\":{\"222\":1,\"240\":1}}],[\"如果获取锁是被会使用cas自旋锁进行尝试\",{\"1\":{\"217\":1}}],[\"如果获取失败的直接先返回过期的数据\",{\"1\":{\"125\":1}}],[\"如果发生冲突\",{\"1\":{\"217\":1}}],[\"如果发生回滚就执行逆操作\",{\"1\":{\"153\":1}}],[\"如果队列中的某一个线程修改为1\",{\"1\":{\"213\":1}}],[\"如果相等\",{\"1\":{\"211\":1}}],[\"如果相同直接覆盖value\",{\"1\":{\"190\":1}}],[\"如果代码块中调用了wait\",{\"1\":{\"210\":1}}],[\"如果线程任务执行完毕且空闲了一段时间则会被回收掉\",{\"1\":{\"951\":1,\"1356\":1}}],[\"如果线程有执行结果\",{\"1\":{\"919\":1,\"1324\":1}}],[\"如果线程调用了sleep\",{\"1\":{\"204\":1}}],[\"如果线程调用了wait\",{\"1\":{\"204\":1}}],[\"如果线程相同\",{\"1\":{\"133\":1}}],[\"如果超过\",{\"1\":{\"190\":1}}],[\"如果超过指定数量的哨兵\",{\"1\":{\"136\":1}}],[\"如果key不同\",{\"1\":{\"188\":1}}],[\"如果key相同\",{\"1\":{\"188\":1}}],[\"如果key存在了\",{\"1\":{\"131\":1}}],[\"如果不一样\",{\"1\":{\"888\":1,\"1293\":1}}],[\"如果不加where会删除所有的数据\",{\"1\":{\"514\":1}}],[\"如果不将\",{\"1\":{\"423\":1}}],[\"如果不写构造器\",{\"1\":{\"660\":1,\"1065\":1}}],[\"如果不写\",{\"1\":{\"281\":1}}],[\"如果不相等\",{\"1\":{\"211\":1}}],[\"如果不调用不会阻塞\",{\"1\":{\"200\":1}}],[\"如果不是空则会直接把该数组赋值给内部的数组\",{\"1\":{\"185\":1}}],[\"如果不传递参数那么返回的则是object类型的数组\",{\"1\":{\"184\":1}}],[\"如果不存在主键\",{\"1\":{\"145\":1}}],[\"如果数学成绩一样\",{\"1\":{\"519\":1}}],[\"如果数组下标从1开始\",{\"1\":{\"182\":1}}],[\"如果数据库中也没有该数据\",{\"1\":{\"124\":1}}],[\"如果保存数据库失败那么就说明该消息已经消费过了\",{\"1\":{\"178\":1}}],[\"如果注册中心超过一定的时间没有收到心跳则会被剔除掉\",{\"1\":{\"172\":1}}],[\"如果服务的提供者有集群\",{\"1\":{\"172\":1}}],[\"如果有多个重复的元素\",{\"1\":{\"842\":1,\"1247\":1}}],[\"如果有的话\",{\"1\":{\"819\":1,\"1224\":1}}],[\"如果有该session对象直接使用\",{\"1\":{\"334\":1}}],[\"如果有\",{\"1\":{\"250\":1}}],[\"如果有线程持有\",{\"1\":{\"210\":1}}],[\"如果有则加载该类\",{\"1\":{\"168\":1}}],[\"如果有一个请求设置成功了\",{\"1\":{\"125\":1}}],[\"如果这行代码是return语句\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"如果这个\",{\"1\":{\"158\":1}}],[\"如果这些线程在一定时间内没有执行任务\",{\"1\":{\"112\":1}}],[\"如果仅仅是尾部模糊匹配\",{\"1\":{\"150\":1}}],[\"如果符合最左法则\",{\"1\":{\"150\":1}}],[\"如果索引了多列\",{\"1\":{\"150\":1}}],[\"如果是文件夹\",{\"1\":{\"981\":1,\"1386\":1}}],[\"如果是文件\",{\"1\":{\"981\":2,\"1386\":2}}],[\"如果是null直接存入\",{\"1\":{\"888\":1,\"1293\":1}}],[\"如果是奇数的话会丢掉小数\",{\"1\":{\"831\":1,\"1236\":1}}],[\"如果是非public的构造器\",{\"1\":{\"807\":1,\"1212\":1}}],[\"如果是执行\",{\"1\":{\"435\":1}}],[\"如果是自己解压安装\",{\"1\":{\"412\":1}}],[\"如果是正式使用\",{\"1\":{\"350\":1}}],[\"如果是post就调用request的getreader\",{\"1\":{\"308\":1}}],[\"如果是get就调用request的getquerystring\",{\"1\":{\"308\":1}}],[\"如果是\",{\"1\":{\"193\":1}}],[\"如果是链表\",{\"1\":{\"191\":1}}],[\"如果是红黑树\",{\"1\":{\"190\":1,\"191\":1}}],[\"如果是要在指定位置\",{\"1\":{\"187\":1}}],[\"如果是rr隔离级别仅在事务中第一次执行快照读时生成readview\",{\"1\":{\"154\":1}}],[\"如果是rc隔离级别\",{\"1\":{\"154\":1}}],[\"如果是头部模糊匹配\",{\"1\":{\"150\":1}}],[\"如果是字符串类型的字段\",{\"1\":{\"149\":1}}],[\"如果是b树因为b树的每个节点下的键值都由数据\",{\"1\":{\"144\":1}}],[\"如果表没有主键\",{\"1\":{\"145\":1}}],[\"如果哨兵发现某一台实例没有在规定的时间内响应\",{\"1\":{\"136\":1}}],[\"如果redis的key过期后会立即删除吗\",{\"1\":{\"129\":1}}],[\"如果redis服务宕机可以设置redis集群来提高redis服务的可用性\",{\"1\":{\"126\":1}}],[\"如果没有可读的字符返回\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"如果没有执行完毕会等待执行完毕后\",{\"1\":{\"922\":1,\"1327\":1}}],[\"如果没有执行完毕并且锁的ttl快到期了\",{\"1\":{\"132\":1}}],[\"如果没有就不写\",{\"1\":{\"812\":2,\"1217\":2}}],[\"如果没有创建\",{\"1\":{\"688\":1,\"1093\":1}}],[\"如果没有提前处理异常\",{\"1\":{\"631\":1,\"1036\":1}}],[\"如果没有奖金\",{\"1\":{\"525\":1}}],[\"如果没有hadoop集群\",{\"1\":{\"390\":1,\"393\":1}}],[\"如果没有会创建session对象\",{\"1\":{\"334\":1}}],[\"如果没有\",{\"1\":{\"250\":1}}],[\"如果没有线程持有\",{\"1\":{\"210\":1}}],[\"如果没有获取到锁会进入阻塞状态\",{\"1\":{\"204\":1}}],[\"如果没有获取到cpu的执行权\",{\"1\":{\"204\":1}}],[\"如果没有该消息那么则会创建成功也会直接返回成功\",{\"1\":{\"178\":1}}],[\"如果没有重构则查询数据库更新逻辑过期时间和数据\",{\"1\":{\"125\":1}}],[\"如果没有过期则返回数据\",{\"1\":{\"125\":1}}],[\"如果已经过期了我们就删除掉他\",{\"1\":{\"129\":1}}],[\"如果已经过期\",{\"1\":{\"125\":1}}],[\"如果缓存中不存在\",{\"1\":{\"124\":1}}],[\"如果缓存中存在则直接返回数据\",{\"1\":{\"124\":1}}],[\"如果缓存数据量很大\",{\"1\":{\"115\":1}}],[\"如果被缓存可能引发安全问题\",{\"1\":{\"115\":1}}],[\"如果过期则重新生成缓存\",{\"1\":{\"115\":1}}],[\"如果所有线程都处于活动状态\",{\"1\":{\"112\":1}}],[\"如果用户每发起一个请求\",{\"1\":{\"940\":1,\"1345\":1}}],[\"如果用没有强转的a对象能调用到狗的吃骨头\",{\"0\":{\"731\":1,\"1136\":1}}],[\"如果用\",{\"1\":{\"111\":1}}],[\"如果签名一致\",{\"1\":{\"101\":1}}],[\"如\",{\"1\":{\"103\":1,\"215\":1,\"288\":2,\"373\":2,\"529\":3,\"647\":3,\"773\":1,\"1052\":3,\"1178\":1}}],[\"如何才可以让服务端可以处理多个客户端的通信需求\",{\"0\":{\"1464\":1}}],[\"如何得到线程对象\",{\"0\":{\"943\":1,\"1348\":1}}],[\"如何实现\",{\"1\":{\"939\":1,\"1344\":1}}],[\"如何实现数组和list之间的转换\",{\"0\":{\"184\":1}}],[\"如何创建不可变集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"如何获取时间毫秒值\",{\"1\":{\"777\":1,\"1182\":1}}],[\"如何确定核心线程数\",{\"0\":{\"220\":1}}],[\"如何停止一个正在运行的线程\",{\"0\":{\"208\":1}}],[\"如何保证线程的顺序执行\",{\"0\":{\"205\":1}}],[\"如何避免消息的重复消费\",{\"0\":{\"178\":1}}],[\"如何分析慢查询\",{\"0\":{\"142\":1}}],[\"如何定位慢查询\",{\"0\":{\"141\":1}}],[\"如何解决消息大量堆积的问题\",{\"0\":{\"179\":1}}],[\"如何解决\",{\"0\":{\"125\":1,\"126\":1},\"1\":{\"572\":1,\"931\":1,\"1336\":1}}],[\"如何合理设置线程池的参数\",{\"0\":{\"112\":1}}],[\"如何将这些知识巧妙地运用起来解决实际的问题\",{\"1\":{\"59\":1}}],[\"如何处理它们成为了新目标\",{\"1\":{\"45\":1}}],[\"如多线程\",{\"1\":{\"46\":1}}],[\"如数组\",{\"1\":{\"34\":1}}],[\"也包含了几万个汉字\",{\"1\":{\"985\":1,\"1390\":1}}],[\"也可能出现oom错误\",{\"1\":{\"952\":1,\"1357\":1}}],[\"也可以破坏泛型的约束性\",{\"1\":{\"817\":1,\"1222\":1}}],[\"也可以把字符串的时间形式解析成日期对象\",{\"1\":{\"779\":1,\"1184\":1}}],[\"也可以被类多实现\",{\"1\":{\"715\":1,\"1120\":1}}],[\"也可以访问实例的成员\",{\"1\":{\"680\":1,\"1085\":1}}],[\"也可以使用对象访问\",{\"1\":{\"677\":1,\"1082\":1}}],[\"也可以使用环境变量指定\",{\"1\":{\"410\":1}}],[\"也可以理解为实体类\",{\"0\":{\"672\":1,\"1077\":1}}],[\"也可以省略\",{\"1\":{\"461\":1,\"1019\":1,\"1469\":1}}],[\"也可以在redis\",{\"1\":{\"128\":1}}],[\"也可以有主观回答\",{\"1\":{\"120\":1}}],[\"也可以主观回答\",{\"1\":{\"105\":1,\"107\":1,\"108\":1}}],[\"也不能通过索引获取元素\",{\"1\":{\"880\":1,\"1285\":1}}],[\"也有bug\",{\"1\":{\"866\":1,\"1271\":1}}],[\"也有可能是代表去到第几个什么什么的意思\",{\"1\":{\"437\":1}}],[\"也没有\",{\"1\":{\"715\":1,\"1120\":1}}],[\"也属于引用数据类型\",{\"1\":{\"646\":1,\"1051\":1}}],[\"也称作超级权限者的用户主目录\",{\"1\":{\"428\":1}}],[\"也称主线程\",{\"1\":{\"197\":1}}],[\"也经常能见到zookeeper作为一致性协调服务存在\",{\"1\":{\"374\":1}}],[\"也封装为map集合\",{\"1\":{\"281\":3}}],[\"也放满时\",{\"1\":{\"219\":1}}],[\"也比eureka要方便好用一些\",{\"1\":{\"173\":1}}],[\"也就是没有读取完\",{\"1\":{\"995\":1,\"1400\":1}}],[\"也就是线程从生到死的过程\",{\"1\":{\"962\":1,\"1367\":1}}],[\"也就是集合中键值对的个数\",{\"1\":{\"904\":1,\"1309\":1}}],[\"也就是实现arrays\",{\"1\":{\"873\":1,\"1278\":1}}],[\"也就是让它回到上一个位置\",{\"1\":{\"751\":1,\"1156\":1}}],[\"也就是在编译时\",{\"1\":{\"743\":1,\"1148\":1}}],[\"也就是在表头\",{\"1\":{\"240\":1}}],[\"也就是不保证线程安全\",{\"1\":{\"187\":1}}],[\"也就是我们平常说的\",{\"1\":{\"166\":1}}],[\"也就是说操作一旦开始\",{\"1\":{\"211\":1}}],[\"也就是说创建一个链表数组\",{\"1\":{\"189\":1}}],[\"也就是说\",{\"1\":{\"159\":1}}],[\"也会创建objectfactory对象存入三级缓存singletonfactories\",{\"1\":{\"164\":1}}],[\"也要同时更新缓存的数据\",{\"1\":{\"127\":1}}],[\"也发现了自己的成长与进步\",{\"1\":{\"83\":1}}],[\"也是一种容器\",{\"1\":{\"744\":1,\"1149\":1}}],[\"也是执行sql语句的\",{\"1\":{\"233\":1}}],[\"也是java世界的传奇\",{\"1\":{\"90\":1}}],[\"也是对整个java大陆的融会贯通\",{\"1\":{\"83\":1}}],[\"也是对java世界的热爱与拥抱\",{\"1\":{\"75\":1}}],[\"也是他成长的见证\",{\"1\":{\"75\":1}}],[\"也收获了坚持和勇气\",{\"1\":{\"75\":1}}],[\"也真正成为了一个java世界的探险家\",{\"1\":{\"73\":1}}],[\"也证明了自己在java编程上的深厚造诣\",{\"1\":{\"73\":1}}],[\"也决定将自己的知识和经验传授给更多初学者\",{\"1\":{\"49\":1}}],[\"也解开了多态的奥秘\",{\"1\":{\"44\":1}}],[\"也成为了他的启蒙宝典\",{\"1\":{\"18\":1}}],[\"它就代表哪个多线程对象\",{\"1\":{\"924\":1,\"1329\":1}}],[\"它对数据库中的数据的改变就是永久的\",{\"1\":{\"536\":1}}],[\"它会连接到docker\",{\"1\":{\"494\":1}}],[\"它会把传进来的参数自动切割为键和值的map集合\",{\"1\":{\"308\":1}}],[\"它能控制程序只能访问特定位件\",{\"1\":{\"428\":1}}],[\"它可以写出更简洁\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"它可以快速地储存\",{\"1\":{\"361\":1}}],[\"它可以提高代码的可扩展性和可维护性\",{\"1\":{\"44\":1}}],[\"它让客户端再发起一个请求以完成整个处理\",{\"1\":{\"288\":1}}],[\"它基于项目对象模型\",{\"1\":{\"249\":1}}],[\"它允许应用程序重复使用一个现有的数据库连接\",{\"1\":{\"236\":1}}],[\"它允许一个计算机程序调用另一个地址的函数或方法\",{\"1\":{\"106\":1}}],[\"它支持公平锁和非公平锁\",{\"1\":{\"214\":1}}],[\"它是一种面向连接的可靠通信协议\",{\"1\":{\"1439\":1}}],[\"它是一个为分布式应用提供一致性服务的软件\",{\"1\":{\"374\":1}}],[\"它是一个不可分割的单位\",{\"1\":{\"151\":1}}],[\"它是jdk5之后出现的\",{\"1\":{\"845\":1,\"1250\":1}}],[\"它是系统内存的映射\",{\"1\":{\"428\":1}}],[\"它是做为一个基础框架使用的\",{\"1\":{\"213\":1}}],[\"它的功能是全部单列集合都可以继承使用\",{\"1\":{\"841\":1,\"1246\":1}}],[\"它的主要功能有\",{\"1\":{\"248\":1}}],[\"它的底层由monitor实现的\",{\"1\":{\"210\":1}}],[\"它的步骤是这样的\",{\"1\":{\"155\":1}}],[\"它们指向的是同一个地址\",{\"1\":{\"185\":1}}],[\"它们会继续尝试获取锁\",{\"1\":{\"117\":1}}],[\"它主要记录的是逻辑日志\",{\"1\":{\"153\":1}}],[\"它在你实现的用户匹配功能中起到了什么作用\",{\"0\":{\"118\":1}}],[\"它提供了开箱即用的分布式锁功能\",{\"1\":{\"117\":1}}],[\"它有哪些优势\",{\"0\":{\"110\":1}}],[\"它有什么优势\",{\"0\":{\"106\":1}}],[\"它有什么作用\",{\"0\":{\"101\":1}}],[\"它代表着热爱和创造力\",{\"1\":{\"8\":1}}],[\"谜题的答案藏在多态的世界中\",{\"1\":{\"44\":1}}],[\"继续将年龄大于25的筛选出来\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"继续调用grow\",{\"1\":{\"831\":1,\"1236\":1}}],[\"继续探索java的世界\",{\"1\":{\"68\":1}}],[\"继续探索java的更高级主题\",{\"1\":{\"49\":1}}],[\"继续探索java的奥秘\",{\"1\":{\"46\":1}}],[\"继续书写他在java大陆的传奇\",{\"1\":{\"46\":1}}],[\"继续深入古堡\",{\"1\":{\"44\":1}}],[\"继承设计规范\",{\"0\":{\"691\":1,\"1096\":1}}],[\"继承就是类与类之间的关系\",{\"1\":{\"690\":1,\"1095\":1}}],[\"继承的特点\",{\"0\":{\"693\":1,\"1098\":1}}],[\"继承的内存运行原理\",{\"0\":{\"692\":1,\"1097\":1}}],[\"继承的好处\",{\"1\":{\"690\":1,\"1095\":1}}],[\"继承的基本介绍\",{\"0\":{\"690\":1,\"1095\":1}}],[\"继承的用途以及如何在java中实现继承\",{\"1\":{\"43\":1}}],[\"继承exception并重写构造器\",{\"1\":{\"638\":1,\"1043\":1}}],[\"继承inputstream拓展原始类的功能\",{\"1\":{\"628\":1,\"1033\":1}}],[\"继承2\",{\"1\":{\"306\":1}}],[\"继承1\",{\"1\":{\"306\":1}}],[\"继承httpservlet\",{\"1\":{\"301\":1}}],[\"继承statement\",{\"1\":{\"233\":1}}],[\"继承thread类\",{\"0\":{\"914\":1,\"1319\":1},\"1\":{\"199\":1,\"914\":1,\"923\":1,\"1319\":1,\"1328\":1}}],[\"继承等概念\",{\"1\":{\"51\":1}}],[\"继承\",{\"0\":{\"542\":1,\"667\":1,\"689\":1,\"1072\":1,\"1094\":1},\"1\":{\"41\":1,\"43\":1,\"49\":1}}],[\"门上刻着\",{\"1\":{\"43\":1}}],[\"门前有一位老者\",{\"1\":{\"2\":1}}],[\"掌握多线程的创建方式一\",{\"1\":{\"914\":1,\"1319\":1}}],[\"掌握多态的精髓\",{\"1\":{\"44\":1}}],[\"掌握string其他常用的api\",{\"1\":{\"743\":1,\"1148\":1}}],[\"掌握的\",{\"1\":{\"496\":1}}],[\"掌握\",{\"1\":{\"92\":1}}],[\"掌握基础技巧\",{\"0\":{\"50\":1}}],[\"掌握对象的奥秘\",{\"0\":{\"42\":1}}],[\"掌握了如何捕获\",{\"1\":{\"37\":1}}],[\"和printwriter两个类\",{\"1\":{\"1010\":1,\"1415\":1}}],[\"和字符流\",{\"1\":{\"990\":1,\"1395\":1}}],[\"和栈结构\",{\"1\":{\"865\":1,\"1270\":1}}],[\"和map\",{\"1\":{\"835\":1,\"1240\":1}}],[\"和属性都是私有的\",{\"1\":{\"808\":1,\"1213\":1}}],[\"和string的使用类似\",{\"1\":{\"785\":1,\"1190\":1}}],[\"和修饰成员变量的用法\",{\"0\":{\"675\":1,\"1080\":1}}],[\"和上面一致\",{\"1\":{\"494\":1}}],[\"和上面的一致\",{\"1\":{\"494\":1}}],[\"和加压其他参数分开\",{\"1\":{\"490\":1}}],[\"和cp命令的\",{\"1\":{\"451\":1}}],[\"和底线命令模式\",{\"1\":{\"431\":1}}],[\"和用户终端没有关系\",{\"1\":{\"424\":1}}],[\"和zabbix的元数据mysql共用一个实例\",{\"1\":{\"414\":1}}],[\"和redis一样\",{\"1\":{\"388\":1}}],[\"和转发的特点完全相反\",{\"1\":{\"313\":1}}],[\"和future\",{\"1\":{\"200\":1}}],[\"和第\",{\"1\":{\"187\":1}}],[\"和排它锁\",{\"1\":{\"127\":1}}],[\"和请求中的签名进行比对\",{\"1\":{\"101\":1}}],[\"和\",{\"0\":{\"100\":1,\"120\":1,\"200\":1,\"201\":1,\"399\":1,\"424\":1,\"459\":1},\"1\":{\"41\":1,\"92\":3,\"101\":2,\"107\":1,\"110\":1,\"158\":1,\"187\":1,\"221\":1,\"264\":1,\"281\":2,\"351\":1,\"529\":1,\"714\":1,\"721\":1,\"758\":1,\"759\":1,\"831\":1,\"1119\":1,\"1126\":1,\"1163\":1,\"1164\":1,\"1236\":1}}],[\"对方端口是\",{\"1\":{\"1450\":1}}],[\"对方端口\",{\"1\":{\"1449\":1}}],[\"对方地址\",{\"1\":{\"1449\":1}}],[\"对信息安全要求较高的场景\",{\"1\":{\"1440\":1}}],[\"对一个数据进行判断\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"对buffer桶进行解码\",{\"1\":{\"995\":4,\"1400\":4}}],[\"对每一个节点\",{\"1\":{\"858\":1,\"1263\":1}}],[\"对每个接口的调用进行集中的统计\",{\"1\":{\"102\":1}}],[\"对数组进行默认升序排序\",{\"1\":{\"793\":1,\"1198\":1}}],[\"对数组进行排序\",{\"1\":{\"793\":1,\"1198\":1}}],[\"对数据库的crud基本操作\",{\"1\":{\"326\":1}}],[\"对新的需求进行建模\",{\"1\":{\"528\":1}}],[\"对文件夹内的全部内容应用同样的操作\",{\"1\":{\"465\":1}}],[\"对吧\",{\"1\":{\"437\":1}}],[\"对windowsmac系统\",{\"1\":{\"409\":1}}],[\"对\",{\"1\":{\"384\":1}}],[\"对业务逻辑的封装\",{\"1\":{\"326\":1}}],[\"对http协议封装的servlet实现类\",{\"1\":{\"299\":1}}],[\"对外提供网上浏览服务\",{\"1\":{\"291\":1}}],[\"对status的修改操作使用的是cas\",{\"1\":{\"213\":1}}],[\"对应的静态资源的映射\",{\"1\":{\"579\":1}}],[\"对应的任务也跟着停止\",{\"1\":{\"424\":1}}],[\"对应的二进制的转为十进制的编码的字符集编码utf\",{\"1\":{\"309\":2}}],[\"对应于get\",{\"1\":{\"187\":1}}],[\"对应上面的array就是\",{\"1\":{\"182\":1}}],[\"对了\",{\"1\":{\"179\":1}}],[\"对事务进行隔离\",{\"1\":{\"152\":1}}],[\"对内存不友好\",{\"1\":{\"129\":1}}],[\"对cpu友好\",{\"1\":{\"129\":1}}],[\"对于英文\",{\"1\":{\"984\":1,\"1389\":1}}],[\"对于静态方法建议使用字节码\",{\"1\":{\"936\":1,\"1341\":1}}],[\"对于实例方法建议使用this作为锁对象\",{\"1\":{\"936\":1,\"1341\":1}}],[\"对于自定义的类型如student对象\",{\"1\":{\"891\":1,\"1296\":1}}],[\"对于字符串类型\",{\"1\":{\"891\":1,\"1296\":1}}],[\"对于数值类型\",{\"1\":{\"891\":1,\"1296\":1}}],[\"对于yumrpm\",{\"1\":{\"412\":1}}],[\"对于事务处理没有记忆能力\",{\"1\":{\"286\":1}}],[\"对于cpu来说就多了一次指令\",{\"1\":{\"182\":1}}],[\"对于用户的每一个操作请求总是能够在有限的时间内返回结果\",{\"1\":{\"174\":1}}],[\"对于有状态单例\",{\"1\":{\"158\":1}}],[\"对于很多用不到的key不需要浪费时间进行检查是否过期\",{\"1\":{\"129\":1}}],[\"对于⽤户加⼊队伍的限制\",{\"1\":{\"123\":1}}],[\"对于系统的⾸⻚\",{\"1\":{\"123\":1}}],[\"对于主页用户推荐列表的存储\",{\"1\":{\"114\":1}}],[\"对于登录用户信息的存储\",{\"1\":{\"114\":1}}],[\"对请求参数和数据进行签名\",{\"1\":{\"101\":1}}],[\"对象序列化\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"对象序列化和反序列化\",{\"0\":{\"1009\":1,\"1414\":1}}],[\"对象如果要序列化必须要实现serializable接口\",{\"1\":{\"1009\":2,\"1414\":2}}],[\"对象作为锁对象\",{\"1\":{\"936\":1,\"1341\":1}}],[\"对象集合获取\",{\"0\":{\"746\":1,\"1151\":1}}],[\"对象进行强制类型转换\",{\"1\":{\"730\":1,\"1135\":1}}],[\"对象变量\",{\"0\":{\"730\":1,\"1135\":1}}],[\"对象名称\",{\"1\":{\"724\":2,\"1129\":2}}],[\"对象已经提前为你创建好了\",{\"1\":{\"685\":1,\"1090\":1}}],[\"对象是具体存在的实例\",{\"1\":{\"658\":1,\"1063\":1}}],[\"对象的反序列化\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"对象的哈希值特点\",{\"0\":{\"887\":1,\"1292\":1}}],[\"对象的类必须实现接口\",{\"1\":{\"629\":1,\"1034\":1}}],[\"对象的创建权由程序转交给外部\",{\"1\":{\"582\":1}}],[\"对象的生命周期是指一个对象从被创建到被销毁的过程\",{\"1\":{\"297\":1}}],[\"对象参数\",{\"1\":{\"272\":1}}],[\"对象锁\",{\"1\":{\"210\":3}}],[\"对象给dispatcherservlet\",{\"1\":{\"166\":1}}],[\"对象\",{\"1\":{\"41\":1,\"51\":1,\"103\":1,\"264\":1,\"265\":1,\"707\":1,\"743\":1,\"802\":1,\"803\":1,\"1112\":1,\"1148\":1,\"1207\":1,\"1208\":1}}],[\"对java的知识一无所知\",{\"1\":{\"28\":1}}],[\"分割线\",{\"1\":{\"840\":1,\"1245\":1}}],[\"分\",{\"1\":{\"781\":1,\"944\":1,\"1186\":1,\"1349\":1}}],[\"分为有参和无参构造器\",{\"1\":{\"660\":1,\"1065\":1}}],[\"分为4个阶段\",{\"1\":{\"297\":1}}],[\"分页限定\",{\"1\":{\"516\":1}}],[\"分页查询语法\",{\"1\":{\"523\":1}}],[\"分页查询\",{\"0\":{\"523\":1},\"1\":{\"516\":1}}],[\"分组后\",{\"1\":{\"522\":1}}],[\"分组后条件过滤\",{\"1\":{\"522\":1}}],[\"分组后的条件\",{\"1\":{\"516\":1}}],[\"分组条件限定\",{\"1\":{\"522\":1}}],[\"分组字段名\",{\"1\":{\"522\":1}}],[\"分组字段\",{\"1\":{\"516\":1}}],[\"分组查询语法\",{\"1\":{\"522\":1}}],[\"分组查询\",{\"0\":{\"520\":1,\"522\":1},\"1\":{\"516\":1}}],[\"分区容错性\",{\"1\":{\"174\":2}}],[\"分发flink安装包到其它机器\",{\"1\":{\"395\":1}}],[\"分发hbase到其它机器\",{\"1\":{\"389\":1}}],[\"分发hadoop到其它机器\",{\"1\":{\"386\":1}}],[\"分发\",{\"1\":{\"167\":1,\"392\":1}}],[\"分片集群特征\",{\"1\":{\"138\":1}}],[\"分片集群解决海量数据的存储和高并发的写操作\",{\"0\":{\"138\":1}}],[\"分别关联两方主键\",{\"1\":{\"529\":1}}],[\"分别在node1\",{\"1\":{\"377\":2}}],[\"分别加上\",{\"1\":{\"107\":1}}],[\"分别为\",{\"1\":{\"97\":1}}],[\"分别是命令模式\",{\"1\":{\"431\":1}}],[\"分别是owner\",{\"1\":{\"210\":1}}],[\"分别是分布式锁\",{\"1\":{\"125\":1}}],[\"分别是\",{\"1\":{\"41\":1,\"168\":1,\"199\":1}}],[\"分布式同步\",{\"1\":{\"374\":1}}],[\"分布式锁的实现是基于\",{\"1\":{\"117\":1}}],[\"分布式锁的使用场景和实现原理\",{\"0\":{\"117\":1}}],[\"分布式锁保证接口幂等性\",{\"1\":{\"117\":1}}],[\"分布式锁解决了接口幂等性的问题\",{\"0\":{\"117\":1}}],[\"分布式锁来实现操作互斥\",{\"1\":{\"109\":1}}],[\"分布式\",{\"1\":{\"96\":1,\"110\":1,\"114\":1}}],[\"分享解决问题的经验\",{\"1\":{\"3\":1}}],[\"寻找目录\",{\"1\":{\"418\":1}}],[\"寻找与java相关的谜题线索\",{\"1\":{\"41\":1}}],[\"寻找大陆归宿\",{\"0\":{\"17\":1}}],[\"听说这里隐藏着许多关于java知识的宝藏\",{\"1\":{\"41\":1}}],[\"解析格式必须要一样\",{\"1\":{\"782\":1,\"1187\":1}}],[\"解析字符串时间\",{\"1\":{\"781\":1,\"1186\":1}}],[\"解析并渲染真正的视图\",{\"1\":{\"167\":1}}],[\"解压test\",{\"1\":{\"490\":2}}],[\"解压tomcat安装包\",{\"1\":{\"354\":1}}],[\"解压模式\",{\"1\":{\"490\":1}}],[\"解压的过程\",{\"1\":{\"490\":1}}],[\"解压\",{\"1\":{\"375\":1,\"377\":2,\"386\":2,\"389\":1,\"392\":1,\"395\":1}}],[\"解压并部署tomcat\",{\"0\":{\"354\":1}}],[\"解压并安装tomcat\",{\"1\":{\"352\":1}}],[\"解压缩jdk安装文件\",{\"1\":{\"353\":1}}],[\"解释\",{\"1\":{\"347\":1,\"350\":1}}],[\"解释一下mvcc\",{\"0\":{\"154\":1}}],[\"解码\",{\"0\":{\"988\":1,\"1393\":1},\"1\":{\"309\":2,\"988\":1,\"1393\":1}}],[\"解耦合就是降低两个类之间的联系的紧密程度\",{\"1\":{\"726\":1,\"1131\":1}}],[\"解耦合在框架中非常常见\",{\"1\":{\"726\":1,\"1131\":1}}],[\"解耦\",{\"1\":{\"176\":1}}],[\"解决排序中j\",{\"1\":{\"897\":1,\"1302\":1}}],[\"解决浮点型运算精度失真问题\",{\"1\":{\"775\":1,\"1180\":1}}],[\"解决get请求方式获取参数乱码的工具类\",{\"1\":{\"309\":1}}],[\"解决思路\",{\"1\":{\"309\":2}}],[\"解决乱码\",{\"1\":{\"309\":3}}],[\"解决上面的sql语法错误问题\",{\"1\":{\"273\":1}}],[\"解决方案\",{\"1\":{\"309\":1,\"751\":1,\"1156\":1}}],[\"解决方案mybatis提供了where标签\",{\"1\":{\"273\":1}}],[\"解决方案三\",{\"1\":{\"270\":1}}],[\"解决方案二\",{\"1\":{\"270\":1}}],[\"解决方案一\",{\"1\":{\"270\":1}}],[\"解决方法\",{\"1\":{\"152\":1,\"162\":3}}],[\"解决方法包括\",{\"1\":{\"115\":7}}],[\"解决原生方式中的硬编码问题\",{\"1\":{\"265\":1}}],[\"解决硬编码问题\",{\"1\":{\"264\":2}}],[\"解决的是一个事务查询选择版本的问题\",{\"1\":{\"154\":1}}],[\"解决\",{\"1\":{\"124\":1,\"125\":1,\"126\":1,\"137\":1}}],[\"解决集群间登录态同步问题\",{\"1\":{\"109\":1}}],[\"解决各种难题\",{\"1\":{\"77\":1}}],[\"解锁\",{\"1\":{\"939\":2,\"1344\":2}}],[\"解锁宝藏中的关卡\",{\"1\":{\"86\":1}}],[\"解锁了java大陆的主角意识到\",{\"1\":{\"67\":1}}],[\"解锁知识的密码\",{\"0\":{\"41\":1}}],[\"解谜之道\",{\"0\":{\"31\":1}}],[\"曾经的蔑视和不屑\",{\"1\":{\"40\":1}}],[\"展示出了创意与技术的完美结合\",{\"1\":{\"39\":1}}],[\"创建接收端对象\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"创建接收端的socket对象并指定端口号\",{\"1\":{\"1448\":1}}],[\"创建接收的数据包对象\",{\"1\":{\"1447\":1}}],[\"创建发送端对象\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"创建发送端的socket对象与服务器连接\",{\"1\":{\"1457\":1}}],[\"创建发送端的socket对象\",{\"1\":{\"1448\":1}}],[\"创建发送端数据包对象\",{\"1\":{\"1447\":1}}],[\"创建普通字节输出流\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"创建字节输出流管道\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"创建字节输出流与目标文件接通\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"创建字节输入流管道\",{\"1\":{\"1007\":1,\"1412\":1}}],[\"创建字节输入流管道与原图片接通\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"创建字节输入流管道与源文件路径接通\",{\"1\":{\"994\":1,\"1399\":1}}],[\"创建字节输入流管道与源文件对象接通\",{\"1\":{\"994\":1,\"1399\":1}}],[\"创建一级目录\",{\"1\":{\"969\":1,\"1374\":1}}],[\"创建一个数据包对象封装对象\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"创建一个数据包对象接收数据\",{\"1\":{\"1449\":1,\"1450\":1}}],[\"创建一个打印流对象\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"创建一个字符输入流管道与文件接通\",{\"1\":{\"1002\":1,\"1003\":1,\"1407\":1,\"1408\":1}}],[\"创建一个新的空的文件夹\",{\"1\":{\"968\":1,\"1373\":1}}],[\"创建一个线程池\",{\"1\":{\"951\":1,\"1356\":1}}],[\"创建一个共享的账户对象\",{\"1\":{\"930\":1,\"1335\":1}}],[\"创建一个任务对象\",{\"1\":{\"918\":1,\"1323\":1}}],[\"创建一个默认长度为16的数组\",{\"1\":{\"888\":1,\"1293\":1}}],[\"创建一个arraylist集合对象\",{\"1\":{\"861\":1,\"1266\":1}}],[\"创建一个dog对象\",{\"1\":{\"812\":1,\"1217\":1}}],[\"创建一个date对象\",{\"1\":{\"776\":1,\"1181\":1}}],[\"创建一个日期对象\",{\"1\":{\"776\":1,\"1181\":1}}],[\"创建一个指定字符串内容的可变字符串对象\",{\"1\":{\"762\":1,\"1167\":1}}],[\"创建一个空白的可变的字符串对象\",{\"1\":{\"762\":1,\"1167\":1}}],[\"创建一个空的集合对象\",{\"1\":{\"746\":1,\"1151\":1}}],[\"创建一个自定义student学生类\",{\"1\":{\"751\":1,\"1156\":1}}],[\"创建一个自定义电影movie类\",{\"1\":{\"751\":1,\"1156\":1}}],[\"创建一个接口的子类学生对象\",{\"1\":{\"738\":1,\"1143\":1}}],[\"创建一个类对象\",{\"1\":{\"629\":1,\"1034\":1}}],[\"创建一个文件字节输出流管道与目标文件接通\",{\"1\":{\"997\":1,\"1402\":1}}],[\"创建一个文件字节输入流管道与源文件接通\",{\"1\":{\"995\":1,\"996\":1,\"1400\":1,\"1401\":1}}],[\"创建一个文件字节输入流\",{\"1\":{\"994\":1,\"1399\":1}}],[\"创建一个文件\",{\"1\":{\"409\":1}}],[\"创建一个主题\",{\"1\":{\"378\":1}}],[\"创建file对象\",{\"1\":{\"965\":1,\"969\":1,\"1370\":1,\"1374\":1}}],[\"创建socket通信管道请求与服务器的连接\",{\"1\":{\"1458\":1,\"1461\":1,\"1464\":1,\"1465\":1}}],[\"创建scheduledexecutorservice线程池\",{\"1\":{\"956\":1,\"1361\":1}}],[\"创建springmvc的配置类\",{\"1\":{\"557\":1}}],[\"创建的线程数量最大上限是integer\",{\"1\":{\"952\":1,\"1357\":1}}],[\"创建只有一个线程的线程对象\",{\"1\":{\"951\":1,\"1356\":1}}],[\"创建固定线程数量的线程池\",{\"1\":{\"951\":1,\"1356\":1}}],[\"创建两个线程对象\",{\"1\":{\"930\":1,\"1335\":1}}],[\"创建任务对象\",{\"1\":{\"921\":1,\"1326\":1}}],[\"创建myrunnable任务对象\",{\"1\":{\"918\":1,\"1323\":1}}],[\"创建mythread类对象\",{\"1\":{\"914\":1,\"1319\":1}}],[\"创建日期对象\",{\"1\":{\"777\":1,\"1182\":1}}],[\"创建学生对象\",{\"1\":{\"751\":1,\"1156\":1}}],[\"创建影片对象\",{\"1\":{\"751\":1,\"1156\":1}}],[\"创建arraylist集合后\",{\"1\":{\"863\":1,\"1268\":1}}],[\"创建arraylist对象没有约定泛型并不规范\",{\"1\":{\"748\":1,\"1153\":1}}],[\"创建arraylist对象\",{\"1\":{\"747\":1,\"750\":1,\"1152\":1,\"1155\":1}}],[\"创建a对象调用构造函数生成一个半成品的a对象\",{\"1\":{\"164\":1}}],[\"创建了一个对象\",{\"1\":{\"686\":1,\"688\":1,\"1091\":1,\"1093\":1}}],[\"创建了两个对象\",{\"1\":{\"648\":1,\"1053\":1}}],[\"创建对象字节输出流\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"创建对象\",{\"1\":{\"965\":1,\"1009\":1,\"1370\":1,\"1414\":1}}],[\"创建对象bigdecimal封装浮点型数据\",{\"1\":{\"772\":1,\"1177\":1}}],[\"创建对象返回\",{\"1\":{\"641\":1,\"1046\":1}}],[\"创建对象和调用对象的方法\",{\"1\":{\"42\":1}}],[\"创建数据库\",{\"1\":{\"507\":2}}],[\"创建压缩文件\",{\"1\":{\"490\":1}}],[\"创建软连接\",{\"1\":{\"475\":1}}],[\"创建软链接\",{\"1\":{\"375\":3,\"377\":3,\"386\":1}}],[\"创建用户组\",{\"1\":{\"463\":1}}],[\"创建grafana使用的数据库作为元数据存储\",{\"1\":{\"414\":1}}],[\"创建表\",{\"0\":{\"510\":1},\"1\":{\"389\":1}}],[\"创建所需目录\",{\"1\":{\"386\":1}}],[\"创建测试主题\",{\"1\":{\"378\":1}}],[\"创建zookeeper的数据目录\",{\"1\":{\"375\":1}}],[\"创建文件几乎不用\",{\"1\":{\"969\":1,\"1374\":1}}],[\"创建文件words\",{\"1\":{\"387\":1}}],[\"创建文件test\",{\"1\":{\"387\":1}}],[\"创建文件\",{\"0\":{\"967\":1,\"1372\":1},\"1\":{\"375\":1,\"965\":1,\"969\":1,\"1370\":1,\"1374\":1}}],[\"创建文件使用vim编辑\",{\"1\":{\"356\":1}}],[\"创建文件夹\",{\"1\":{\"353\":1,\"375\":1}}],[\"创建timer定时器\",{\"1\":{\"954\":1,\"1359\":1}}],[\"创建timer定时器对象\",{\"1\":{\"954\":1,\"1359\":1}}],[\"创建tomcat软链接\",{\"1\":{\"354\":1}}],[\"创建tomcat用户\",{\"1\":{\"354\":1}}],[\"创建tb\",{\"1\":{\"243\":1}}],[\"创建cookie\",{\"1\":{\"329\":1}}],[\"创建cookie对象\",{\"1\":{\"329\":1}}],[\"创建jsp文件\",{\"1\":{\"318\":1}}],[\"创建连接等初始化工作\",{\"1\":{\"297\":1}}],[\"创建\",{\"1\":{\"295\":2,\"297\":1,\"396\":1,\"507\":1,\"508\":1}}],[\"创建项目\",{\"1\":{\"292\":1}}],[\"创建模块\",{\"1\":{\"264\":1}}],[\"创建user表\",{\"1\":{\"264\":1}}],[\"创建线程池\",{\"1\":{\"1466\":1}}],[\"创建线程池对象\",{\"1\":{\"948\":1,\"949\":1,\"1353\":1,\"1354\":1}}],[\"创建线程对象是新建状态\",{\"1\":{\"204\":1}}],[\"创建线程的方式有哪些\",{\"0\":{\"199\":1}}],[\"创建索引的原则有哪些\",{\"0\":{\"149\":1}}],[\"创意与技术的结合\",{\"0\":{\"39\":1}}],[\"创造出更加出色的作品\",{\"1\":{\"90\":1}}],[\"创造出了一系列惊人的技巧\",{\"1\":{\"87\":1}}],[\"创造出属于我的辉煌\",{\"1\":{\"8\":1}}],[\"创造出属于自己的世界\",{\"1\":{\"8\":1}}],[\"创造\",{\"1\":{\"27\":1}}],[\"巧妙运用技巧\",{\"0\":{\"71\":1}}],[\"巧妙运用数据结构\",{\"0\":{\"35\":1}}],[\"巧妙地运用不同的数据结构\",{\"1\":{\"35\":1}}],[\"巧妙的运用\",{\"1\":{\"0\":1,\"68\":1}}],[\"链表查询慢\",{\"1\":{\"853\":1,\"1258\":1}}],[\"链表中的元素是在内存中不连续存储的\",{\"1\":{\"853\":1,\"1258\":1}}],[\"链表的尾部插入数据\",{\"1\":{\"190\":1}}],[\"链表\",{\"0\":{\"853\":1,\"1258\":1},\"1\":{\"34\":1,\"848\":1,\"888\":1,\"1253\":1,\"1293\":1}}],[\"里面只能有一个抽象方法\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"里面是定义线程以后要干啥\",{\"1\":{\"914\":1,\"1319\":1}}],[\"里面的类可以理解成寄生\",{\"1\":{\"734\":1,\"1139\":1}}],[\"里面有方法需要我们重写\",{\"1\":{\"163\":1}}],[\"里面存放二进制的0和1\",{\"1\":{\"124\":1}}],[\"里面寄居着各种不同的数据结构\",{\"1\":{\"34\":1}}],[\"里面展示了各种各样的物品\",{\"1\":{\"33\":1}}],[\"里面展示着java大陆的各个角落和有趣的挑战\",{\"1\":{\"2\":1}}],[\"第x天的桃子吃掉二分之一再吃掉一个\",{\"1\":{\"979\":1,\"1384\":1}}],[\"第4颗子弹\",{\"1\":{\"865\":1,\"1270\":1}}],[\"第3颗子弹\",{\"1\":{\"865\":1,\"1270\":1}}],[\"第2颗子弹\",{\"1\":{\"865\":1,\"1270\":1}}],[\"第1颗子弹\",{\"1\":{\"865\":1,\"1270\":1}}],[\"第\",{\"1\":{\"831\":2,\"1236\":2}}],[\"第七\",{\"1\":{\"164\":1}}],[\"第六\",{\"1\":{\"164\":1}}],[\"第五\",{\"1\":{\"164\":1}}],[\"第四行和第五行\",{\"1\":{\"481\":1}}],[\"第四\",{\"1\":{\"164\":1}}],[\"第三方bean依赖注入\",{\"0\":{\"610\":1}}],[\"第三方bean管理\",{\"0\":{\"609\":1}}],[\"第三行\",{\"1\":{\"481\":1}}],[\"第三个case里面的值是1000\",{\"1\":{\"653\":1,\"1058\":1}}],[\"第三个\",{\"1\":{\"441\":1}}],[\"第三部分\",{\"0\":{\"437\":1}}],[\"第三\",{\"1\":{\"155\":1,\"164\":1}}],[\"第三次挑战的胜利令主角更加坚定了学习java的信心\",{\"1\":{\"36\":1}}],[\"第二枪打多少血量\",{\"1\":{\"850\":1,\"1255\":1}}],[\"第二种情况\",{\"1\":{\"653\":1,\"1058\":1}}],[\"第二行\",{\"1\":{\"481\":1}}],[\"第二行开始\",{\"1\":{\"287\":1,\"288\":1}}],[\"第二个参数为一个consumer\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"第二个结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"第二个case里面的值是2\",{\"1\":{\"653\":1,\"1058\":1}}],[\"第二个\",{\"1\":{\"441\":1}}],[\"第二部分\",{\"0\":{\"436\":1}}],[\"第二\",{\"1\":{\"155\":1,\"164\":1}}],[\"第二次挑战胜利后\",{\"1\":{\"34\":1}}],[\"第一步获取类对象\",{\"1\":{\"804\":1,\"1209\":1}}],[\"第一种情况\",{\"1\":{\"653\":1,\"1058\":1}}],[\"第一幕\",{\"1\":{\"642\":1,\"1047\":1}}],[\"第一行\",{\"1\":{\"481\":1}}],[\"第一个结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"第一个\",{\"1\":{\"441\":1,\"831\":1,\"1236\":1}}],[\"第一位表示文件类型\",{\"1\":{\"441\":1}}],[\"第一部分\",{\"1\":{\"435\":1}}],[\"第一次被选\",{\"1\":{\"908\":1,\"1313\":1}}],[\"第一次是无序的\",{\"1\":{\"881\":1,\"1286\":1}}],[\"第一次创建集合并添加第一个元素的时候\",{\"1\":{\"863\":1,\"1268\":1}}],[\"第一次\",{\"1\":{\"688\":1,\"1093\":1}}],[\"第一次启动mysql\",{\"1\":{\"398\":1}}],[\"第一次设置root远程登录\",{\"1\":{\"350\":1}}],[\"第一次添加数据初始化数组长度为16\",{\"1\":{\"191\":1}}],[\"第一次探索和遭遇挑战等一系列的事件\",{\"1\":{\"49\":1}}],[\"第一次探索\",{\"1\":{\"0\":1,\"10\":1}}],[\"第一\",{\"1\":{\"155\":1,\"164\":1}}],[\"面向连接\",{\"1\":{\"286\":1}}],[\"面向对象中的内容\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"面向对象三大特征之一\",{\"0\":{\"689\":1,\"722\":1,\"1094\":1,\"1127\":1}}],[\"面向对象进阶\",{\"0\":{\"673\":1,\"1078\":1}}],[\"面向对象\",{\"0\":{\"662\":1,\"1067\":1},\"1\":{\"92\":1}}],[\"面向对象编程是一项非常重要的技能\",{\"1\":{\"51\":1}}],[\"面向对象编程\",{\"0\":{\"51\":1}}],[\"面向对象的三大特征\",{\"0\":{\"666\":1,\"667\":1,\"1071\":1,\"1072\":1}}],[\"面向对象的思想\",{\"0\":{\"658\":1,\"1063\":1}}],[\"面向对象的秘密\",{\"0\":{\"33\":1}}],[\"面向对象的力量\",{\"0\":{\"32\":1},\"1\":{\"657\":1,\"1062\":1}}],[\"面试热点\",{\"0\":{\"863\":1,\"1268\":1}}],[\"面试\",{\"0\":{\"683\":1,\"1088\":1}}],[\"面试常考\",{\"0\":{\"680\":1,\"1085\":1}}],[\"面试总结\",{\"1\":{\"223\":1}}],[\"面试总结篇\",{\"0\":{\"91\":1}}],[\"面试海岛\",{\"0\":{\"223\":1}}],[\"面试官好\",{\"1\":{\"121\":1}}],[\"面临威胁\",{\"0\":{\"84\":1}}],[\"面对困境\",{\"1\":{\"80\":1}}],[\"面对挑战\",{\"1\":{\"71\":1}}],[\"面对这个困境\",{\"1\":{\"59\":1}}],[\"面对前方的困境\",{\"0\":{\"59\":1}}],[\"面对复杂多变的探险环境\",{\"1\":{\"55\":1}}],[\"面对终极试炼的挑战\",{\"1\":{\"16\":1}}],[\"还需释放已经建立的连接\",{\"1\":{\"1439\":1}}],[\"还有一个是在堆内存中new出来的s1\",{\"1\":{\"743\":1,\"1148\":1}}],[\"还有一种方法是使用arrays\",{\"1\":{\"184\":1}}],[\"还有一种我了解的解决方案是布隆过滤器\",{\"1\":{\"124\":1}}],[\"还是没有\",{\"1\":{\"715\":1,\"1120\":1}}],[\"还是跟你对该档案的档案权限有关啊\",{\"1\":{\"437\":1}}],[\"还是先解锁\",{\"1\":{\"10\":1}}],[\"还可以定义java代码的动态内容\",{\"1\":{\"317\":1}}],[\"还支持灵活的在线调试\",{\"1\":{\"100\":1,\"120\":1}}],[\"还支持子父依赖多模块管理\",{\"1\":{\"98\":1}}],[\"还提供了服务治理等功能\",{\"1\":{\"106\":1}}],[\"还提供了\",{\"1\":{\"99\":1}}],[\"还学会了团队合作和坚持不懈的精神\",{\"1\":{\"89\":1}}],[\"还封锁了人们对java知识的获取途径\",{\"1\":{\"84\":1}}],[\"还加快了他们解决问题的速度\",{\"1\":{\"80\":1}}],[\"还使用多线程和并发编程提升程序的效率\",{\"1\":{\"71\":1}}],[\"还锻炼了团队合作和解决问题的能力\",{\"1\":{\"64\":1}}],[\"还培养了解决问题的思维能力\",{\"1\":{\"31\":1}}],[\"挑战五\",{\"0\":{\"38\":1}}],[\"挑战四\",{\"0\":{\"36\":1}}],[\"挑战三\",{\"0\":{\"34\":1}}],[\"挑战二\",{\"0\":{\"32\":1}}],[\"挑战一的胜利使得主角更加自信\",{\"1\":{\"32\":1}}],[\"挑战一\",{\"0\":{\"30\":1}}],[\"挑战的开始\",{\"0\":{\"3\":1}}],[\"主线程的默认名称就叫main\",{\"1\":{\"924\":1,\"1329\":1}}],[\"主线程\",{\"1\":{\"921\":1,\"1326\":1}}],[\"主线程执行输出\",{\"1\":{\"914\":1,\"918\":1,\"920\":1,\"1319\":1,\"1323\":1,\"1325\":1}}],[\"主机状态\",{\"0\":{\"480\":1}}],[\"主键且自增长\",{\"1\":{\"525\":1}}],[\"主键是一行数据的唯一标识\",{\"1\":{\"525\":1}}],[\"主键约束\",{\"1\":{\"525\":1}}],[\"主键\",{\"1\":{\"243\":1}}],[\"主键索引就是聚集索引\",{\"1\":{\"145\":1}}],[\"主要看变量中存储的是什么\",{\"1\":{\"654\":2,\"1059\":2}}],[\"主要\",{\"0\":{\"626\":1}}],[\"主要解决\",{\"1\":{\"379\":1}}],[\"主要分为2部分\",{\"1\":{\"352\":1}}],[\"主要修改root密码和允许root远程登录\",{\"1\":{\"350\":1}}],[\"主要配置管理员用户root的密码以及配置允许远程登录的权限\",{\"1\":{\"347\":1}}],[\"主要功能\",{\"1\":{\"322\":1}}],[\"主要作用就是使原来的hash值更加均匀\",{\"1\":{\"192\":1}}],[\"主要相同不同点在于几点\",{\"1\":{\"173\":1}}],[\"主要通过增加以下配置\",{\"1\":{\"137\":1}}],[\"主库在事务提交时\",{\"1\":{\"155\":1}}],[\"主观下线\",{\"1\":{\"136\":1}}],[\"主观回答\",{\"1\":{\"96\":1,\"97\":1,\"99\":1,\"100\":1,\"103\":1,\"104\":1,\"107\":1,\"111\":1,\"113\":1,\"114\":1,\"116\":1}}],[\"主节点主要负责写数据\",{\"1\":{\"135\":1}}],[\"主页推荐用户列表的存储\",{\"1\":{\"114\":1}}],[\"主动向他伸出援助之手\",{\"1\":{\"29\":1}}],[\"主角们意识到自己还有许多可以学习和探索的东西\",{\"1\":{\"90\":1}}],[\"主角们也在这次冒险中获得了巨大的成长\",{\"1\":{\"89\":1}}],[\"主角们需要借助自己的智慧和团队的力量\",{\"1\":{\"88\":1}}],[\"主角需要运用自己所学的java技能\",{\"1\":{\"86\":1}}],[\"主角需要寻找线索并解决谜题\",{\"1\":{\"41\":1}}],[\"主角将以更高的水平回归自己的起点\",{\"1\":{\"83\":1}}],[\"主角将继续探索\",{\"1\":{\"75\":1}}],[\"主角看到了迷宫的出口\",{\"1\":{\"83\":1}}],[\"主角遇到了一个神秘的老师\",{\"1\":{\"81\":1}}],[\"主角遇到了一个善良而慷慨的老师傅\",{\"1\":{\"29\":1}}],[\"主角遇到了其他正在进行终极试炼的探险者\",{\"1\":{\"80\":1}}],[\"主角置身其中\",{\"1\":{\"77\":1}}],[\"主角回顾着整本\",{\"1\":{\"75\":1}}],[\"主角获得了巨大的成就感和满足感\",{\"1\":{\"74\":1}}],[\"主角获得了java大陆的全部知识\",{\"1\":{\"49\":1}}],[\"主角感慨万分\",{\"1\":{\"73\":1,\"83\":1}}],[\"主角感到有些无从下手\",{\"1\":{\"59\":1}}],[\"主角感到自己似乎成了眼神蔑视的对象\",{\"1\":{\"28\":1}}],[\"主角终于战胜了绝地之地的最终试炼\",{\"1\":{\"73\":1}}],[\"主角终于成功地解锁了java城的所有知识宝藏\",{\"1\":{\"40\":1}}],[\"主角还未完全掌握java的所有知识\",{\"1\":{\"72\":1}}],[\"主角开始巧妙地运用之前学到的技巧\",{\"1\":{\"71\":1}}],[\"主角开始逐渐理解语法的规则和机制\",{\"1\":{\"31\":1}}],[\"主角陷入了困境\",{\"1\":{\"69\":1}}],[\"主角和他的伙伴们成功夺回了大陆\",{\"1\":{\"89\":1}}],[\"主角和他的伙伴们到达了大陆的最高峰\",{\"1\":{\"88\":1}}],[\"主角和他的伙伴们不满足于只夺回宝藏\",{\"1\":{\"87\":1}}],[\"主角和他的伙伴们决定展开一场激烈的战斗\",{\"1\":{\"85\":1}}],[\"主角和他的伙伴们面临着前所未有的威胁\",{\"1\":{\"84\":1}}],[\"主角和小伙伴们不断拓展自己的思维和技能边界\",{\"1\":{\"66\":1}}],[\"主角和小伙伴们来到了终极试炼的战场\",{\"1\":{\"65\":1}}],[\"主角和小伙伴们终于成功地克服了一个个困难\",{\"1\":{\"64\":1}}],[\"主角和小伙伴们逐渐获得了相当的经验和技巧\",{\"1\":{\"63\":1}}],[\"主角和java大师来到了挑战五\",{\"1\":{\"38\":1}}],[\"主角和java大师来到了挑战三的领域\",{\"1\":{\"34\":1}}],[\"主角明确了下一步的行动计划\",{\"1\":{\"62\":1}}],[\"主角明白到单线程无法胜任\",{\"1\":{\"55\":1}}],[\"主角明白获取和处理数据的重要性\",{\"1\":{\"53\":1}}],[\"主角明白\",{\"1\":{\"47\":1}}],[\"主角明白这将是学习继承的重要机会\",{\"1\":{\"43\":1}}],[\"主角已经成功地学习了java的各个知识点\",{\"1\":{\"59\":1}}],[\"主角已经成为了真正的java大师\",{\"1\":{\"27\":1}}],[\"主角渐渐意识到\",{\"1\":{\"57\":1}}],[\"主角决定再次回顾之前学到的知识\",{\"1\":{\"70\":1}}],[\"主角决定组织一场集思广益的大会\",{\"1\":{\"61\":1}}],[\"主角决定进一步拓展自己的技巧\",{\"1\":{\"54\":1}}],[\"主角决心面对挑战\",{\"1\":{\"44\":1}}],[\"主角决心继续探索\",{\"1\":{\"40\":1}}],[\"主角经历了许多意想不到的困难\",{\"1\":{\"52\":1}}],[\"主角经历了一系列的历练后\",{\"1\":{\"26\":1}}],[\"主角意识到自己需要掌握更多的技能来应对即将出现的挑战\",{\"1\":{\"50\":1}}],[\"主角为即将到来的新挑战和成长充满期待\",{\"1\":{\"49\":1}}],[\"主角解锁了对象\",{\"1\":{\"49\":1}}],[\"主角诞生于一个java大陆\",{\"1\":{\"49\":1}}],[\"主角注视着java大陆的边界\",{\"1\":{\"49\":2}}],[\"主角深信这是一个无比美妙的循环\",{\"1\":{\"48\":1}}],[\"主角也为即将到来的新挑战充满期待\",{\"1\":{\"48\":1}}],[\"主角也学习了多级继承和重写方法的技巧\",{\"1\":{\"43\":1}}],[\"主角思绪万千\",{\"1\":{\"48\":1}}],[\"主角掌握的不仅是java的语法和概念\",{\"1\":{\"47\":1}}],[\"主角带着对知识的渴望与热情\",{\"1\":{\"46\":1}}],[\"主角迎接了新的挑战\",{\"1\":{\"46\":1}}],[\"主角成功解锁了知识的宝藏\",{\"1\":{\"46\":1}}],[\"主角成为了城市的英雄\",{\"1\":{\"40\":1}}],[\"主角学到了如何运用java编程的各种技巧和思想\",{\"1\":{\"83\":1}}],[\"主角学会了优雅地处理异常\",{\"1\":{\"45\":1}}],[\"主角学习了异常的分类\",{\"1\":{\"45\":1}}],[\"主角学习了异常的分类和处理机制\",{\"1\":{\"37\":1}}],[\"主角学习了如何声明类\",{\"1\":{\"42\":1}}],[\"主角学习了如何通过定义类和创建对象来实现面向对象编程\",{\"1\":{\"33\":1}}],[\"主角面对一个巨大的机器人\",{\"1\":{\"82\":1}}],[\"主角面对各种异常情况\",{\"1\":{\"45\":1}}],[\"主角面临着许多选择\",{\"1\":{\"10\":1}}],[\"主角在经历了一系列的探险和挑战之后\",{\"1\":{\"76\":1}}],[\"主角在解开谜题的同时\",{\"1\":{\"44\":1}}],[\"主角在java大陆的旅程中迈出了坚实的一步\",{\"1\":{\"43\":1}}],[\"主角在探索java大陆的过程中发现了一座神秘的古堡\",{\"1\":{\"41\":1}}],[\"主角在探索数据结构的过程中\",{\"1\":{\"35\":1}}],[\"主角来到了java大陆的绝地之地\",{\"1\":{\"69\":1}}],[\"主角来到了古堡的最后一层\",{\"1\":{\"45\":1}}],[\"主角来到了古堡的下一层\",{\"1\":{\"43\":1}}],[\"主角来到一个名为java城的地方\",{\"1\":{\"28\":1}}],[\"主角发现邪恶势力们所控制的知识宝藏\",{\"1\":{\"86\":1}}],[\"主角发现他们每个人都具备独特的技能和特长\",{\"1\":{\"60\":1}}],[\"主角发现了许多与宝藏和任务相关的数据\",{\"1\":{\"56\":1}}],[\"主角发现了一些残破的标识物和提示信息\",{\"1\":{\"78\":1}}],[\"主角发现了一道看似无解的谜题\",{\"1\":{\"44\":1}}],[\"主角发现了一本陈旧的书\",{\"1\":{\"42\":1}}],[\"主角发现自己置身于一个巨大的迷宫\",{\"1\":{\"30\":1}}],[\"主角找到了几个线索\",{\"1\":{\"41\":1}}],[\"主角通过学习类\",{\"1\":{\"51\":1}}],[\"主角通过绘制图形\",{\"1\":{\"39\":1}}],[\"主角通过挑战任务\",{\"1\":{\"23\":1}}],[\"主角逐渐成长并战胜了一个个困难\",{\"1\":{\"68\":1}}],[\"主角逐渐意识到多态的威力\",{\"1\":{\"44\":1}}],[\"主角逐渐掌握了对象的奥秘\",{\"1\":{\"42\":1}}],[\"主角逐渐掌握了避免和解决异常的智慧\",{\"1\":{\"37\":1}}],[\"主角逐渐明白了知识的重要性\",{\"1\":{\"12\":1}}],[\"主角必须学会运用面向对象编程的力量\",{\"1\":{\"32\":1}}],[\"主角必须解决这些谜题\",{\"1\":{\"30\":1}}],[\"主角不仅仅学会了基本的语法要点\",{\"1\":{\"31\":1}}],[\"主角不断地学习和实践\",{\"1\":{\"13\":1}}],[\"主角作为一个初学者\",{\"1\":{\"28\":1}}],[\"主角告别了这个充满了奇幻与挑战的大陆\",{\"1\":{\"27\":1}}],[\"主角完成了所有的目标\",{\"1\":{\"27\":1}}],[\"主角化身为真正的java大师\",{\"1\":{\"26\":1}}],[\"主角的技能得到了显著的提升\",{\"1\":{\"58\":1}}],[\"主角的故事并未结束\",{\"1\":{\"49\":1}}],[\"主角的知识水平逐渐升华\",{\"1\":{\"47\":1}}],[\"主角的探索之旅并不顺利\",{\"1\":{\"25\":1}}],[\"主角的传奇故事结束了\",{\"1\":{\"18\":1}}],[\"主角利用自己学到的技巧\",{\"1\":{\"24\":1}}],[\"主角继续踏上探索的征程\",{\"1\":{\"24\":1}}],[\"主角并不满足于只学习基础知识\",{\"1\":{\"23\":1}}],[\"主角并没有退缩\",{\"1\":{\"16\":1}}],[\"主角依次解开了各种谜题\",{\"1\":{\"22\":1}}],[\"主角踏上了第一次探索之旅\",{\"1\":{\"21\":1}}],[\"主角下定决心\",{\"1\":{\"20\":1}}],[\"主角才能够畅游这个大陆的每个角落\",{\"1\":{\"20\":1}}],[\"主角醒来\",{\"1\":{\"19\":1}}],[\"主角战胜了所有的终极试炼\",{\"1\":{\"17\":1}}],[\"主角走到了迷失的路途的最后一站\",{\"1\":{\"15\":1}}],[\"主角勇敢地踏上了探索的道路\",{\"1\":{\"11\":1}}],[\"幸运的是\",{\"1\":{\"29\":1}}],[\"师徒相助的契机\",{\"0\":{\"29\":1}}],[\"仿佛周围的人们认为他无法解锁这个城市的宝藏\",{\"1\":{\"28\":1}}],[\"蔑视的眼神\",{\"0\":{\"28\":1}}],[\"敬请期待\",{\"1\":{\"27\":1}}],[\"用完会自动关闭\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"用futuretask把callable对象封装成线程任务对象\",{\"1\":{\"921\":1,\"1326\":1}}],[\"用treeset集合\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用linkedhashset集合\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用linkedlist集合\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用hashset集合\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用arraylist集合\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用obj对象调用调用该方法参数二\",{\"1\":{\"812\":1,\"1217\":1}}],[\"用的最多\",{\"1\":{\"892\":1,\"1297\":1}}],[\"用的不多\",{\"1\":{\"789\":1,\"1194\":1}}],[\"用的少\",{\"1\":{\"682\":1,\"1087\":1}}],[\"用在方法内部\",{\"1\":{\"635\":1,\"1040\":1}}],[\"用在方法上\",{\"1\":{\"634\":1,\"1039\":1}}],[\"用以限制用户和程序的相关权限\",{\"1\":{\"371\":1}}],[\"用以达到执行代码对服务器进行攻击的方法\",{\"1\":{\"233\":1}}],[\"用它来执行sql\",{\"1\":{\"264\":1,\"265\":1}}],[\"用volatile关键字修饰的共享变量\",{\"1\":{\"212\":1}}],[\"用来存储接收的内容\",{\"1\":{\"1447\":1}}],[\"用来判断list值并移除\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"用来设置哪些请求归属springmvc处理\",{\"1\":{\"557\":1}}],[\"用来设置打印级别\",{\"1\":{\"264\":1}}],[\"用来定义数据库的访问权限和安全级别\",{\"1\":{\"505\":1}}],[\"用来定义数据库对象\",{\"1\":{\"505\":1}}],[\"用来查询数据库中表的记录\",{\"1\":{\"505\":1}}],[\"用来对数据库中的表进行增删改\",{\"1\":{\"505\":1}}],[\"用来模糊匹配\",{\"1\":{\"451\":1}}],[\"用来部署jdk\",{\"1\":{\"353\":1}}],[\"用来启动线程\",{\"1\":{\"201\":1}}],[\"用来创建某个对象的\",{\"1\":{\"164\":2}}],[\"用\",{\"1\":{\"110\":1,\"212\":1,\"215\":2,\"435\":2}}],[\"用于存储数组列表元素的数组\",{\"1\":{\"831\":1,\"1236\":1}}],[\"用于存放等待执行的任务的阻塞队列\",{\"1\":{\"112\":1}}],[\"用于计算两个\",{\"1\":{\"785\":2,\"1190\":2}}],[\"用于做时间的格式化和解析的\",{\"1\":{\"785\":1,\"1190\":1}}],[\"用于装数据的\",{\"1\":{\"744\":1,\"1149\":1}}],[\"用于指定访问当前对象的成员变量\",{\"1\":{\"661\":1,\"1066\":1}}],[\"用于提升查询的性能\",{\"1\":{\"529\":1}}],[\"用于限制加入表的数据\",{\"1\":{\"525\":1}}],[\"用于解压zip压缩包\",{\"1\":{\"492\":1}}],[\"用于解压模式\",{\"1\":{\"490\":1}}],[\"用于解决浮点型运算精度失真的问题\",{\"1\":{\"771\":1,\"1176\":1}}],[\"用于解决get方式的乱码问题\",{\"1\":{\"309\":1}}],[\"用于解决分布式环境下的并发控制问题\",{\"1\":{\"117\":1}}],[\"用于查看进度\",{\"1\":{\"490\":1}}],[\"用于压缩模式\",{\"1\":{\"490\":1}}],[\"用于分隔用户和用户组\",{\"1\":{\"466\":1}}],[\"用于修改文件或文件夹的所属用户组\",{\"1\":{\"466\":1}}],[\"用于修改文件或文件夹的所属用户\",{\"1\":{\"466\":1}}],[\"用于删除文件或文件夹\",{\"1\":{\"451\":1}}],[\"用于复制文件夹使用\",{\"1\":{\"449\":1}}],[\"用于复制文件\",{\"1\":{\"449\":1}}],[\"用于什么用途\",{\"1\":{\"439\":1}}],[\"用于简化集合和数组操作的api\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"用于简化\",{\"1\":{\"322\":1}}],[\"用于简化jdbc开发\",{\"1\":{\"261\":1}}],[\"用于实现乐观锁\",{\"1\":{\"211\":1}}],[\"用于网关服务\",{\"1\":{\"171\":1}}],[\"用于将那些与业务无关\",{\"1\":{\"160\":1}}],[\"用于创建线程\",{\"1\":{\"219\":1}}],[\"用于创建线程的工厂\",{\"1\":{\"112\":1}}],[\"用于创建一个客户端\",{\"1\":{\"103\":1}}],[\"用于自动从\",{\"1\":{\"103\":1}}],[\"用于开启自动导入以及给出配置文件的编辑提示\",{\"1\":{\"103\":1}}],[\"用于管理\",{\"1\":{\"98\":1}}],[\"用于快速构建基础的后端项目\",{\"1\":{\"96\":1}}],[\"用户数据报协议\",{\"1\":{\"1438\":1}}],[\"用户输入过来的不是以双引号接收的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"用户详情\",{\"1\":{\"529\":1}}],[\"用户cpu使用率\",{\"1\":{\"481\":1}}],[\"用户\",{\"1\":{\"466\":1,\"529\":1}}],[\"用户组修改为test\",{\"1\":{\"466\":1}}],[\"用户组名称\",{\"1\":{\"463\":2}}],[\"用户组\",{\"1\":{\"463\":1,\"466\":1}}],[\"用户组管理命令\",{\"1\":{\"463\":1}}],[\"用户组权限\",{\"1\":{\"441\":1}}],[\"用户刚刚启动\",{\"1\":{\"432\":1}}],[\"用户的很多用于程序和文件都放在这个目录下\",{\"1\":{\"428\":1}}],[\"用户打开浏览器\",{\"1\":{\"327\":1}}],[\"用户名\",{\"1\":{\"228\":1,\"461\":2,\"462\":1,\"501\":1}}],[\"用户发送请求查询某个队伍详细信息\",{\"1\":{\"124\":1}}],[\"用户只需要引入sdk即可一行代码调用接口\",{\"1\":{\"121\":1}}],[\"用户只需在项目中引入\",{\"1\":{\"95\":1}}],[\"用户登录\",{\"1\":{\"109\":1}}],[\"用户身份等因素来进行分类\",{\"1\":{\"108\":1}}],[\"用户如何使用你开发的客户端\",{\"0\":{\"104\":1}}],[\"用户标识一起发送给\",{\"1\":{\"101\":1}}],[\"用户调用某个接口时\",{\"1\":{\"97\":1}}],[\"用户可以调用接口\",{\"1\":{\"95\":1}}],[\"用java的力量创造更美好的世界\",{\"1\":{\"27\":1}}],[\"用尽了我所学的一切\",{\"1\":{\"6\":1}}],[\"坚持和奋斗的意义所在\",{\"1\":{\"27\":1}}],[\"踏上回家的旅程\",{\"1\":{\"27\":1}}],[\"踏上自己的java探险之旅\",{\"1\":{\"8\":1}}],[\"守护者感叹道\",{\"1\":{\"27\":1}}],[\"守护者告诉主角\",{\"1\":{\"20\":1}}],[\"最小单位是按照单个字符读取的\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"最小值\",{\"1\":{\"521\":1}}],[\"最全的\",{\"1\":{\"786\":1,\"1191\":1}}],[\"最好的方式是调用方法\",{\"1\":{\"772\":1,\"1177\":1}}],[\"最好再把无参构造器写出来\",{\"1\":{\"660\":1,\"1065\":1}}],[\"最常用的\",{\"1\":{\"518\":1}}],[\"最大线程3个\",{\"1\":{\"951\":1,\"1356\":1}}],[\"最大线程数\",{\"1\":{\"112\":1}}],[\"最大数量>=核心数量\",{\"1\":{\"944\":1,\"1349\":1}}],[\"最大值\",{\"1\":{\"521\":1}}],[\"最大有多少个线程\",{\"1\":{\"219\":1}}],[\"最关键的点是\",{\"1\":{\"198\":1}}],[\"最多丢失1秒的数据\",{\"1\":{\"128\":1}}],[\"最后建立连接\",{\"1\":{\"1441\":1}}],[\"最后修改时间\",{\"1\":{\"966\":1,\"1371\":1}}],[\"最后注意\",{\"0\":{\"568\":1}}],[\"最后附上实操的历史命令\",{\"1\":{\"496\":1}}],[\"最后的最后\",{\"1\":{\"495\":1}}],[\"最后的nopassword表示使用sudo命令无需密码\",{\"1\":{\"462\":1}}],[\"最后保存即可\",{\"1\":{\"462\":1}}],[\"最后安装\",{\"1\":{\"409\":1}}],[\"最后一行没有逗号\",{\"1\":{\"511\":1}}],[\"最后一部分\",{\"1\":{\"288\":1}}],[\"最后一次会覆盖掉前面的例如\",{\"1\":{\"128\":1}}],[\"最后我一直都很想加入贵公司\",{\"1\":{\"121\":1}}],[\"最后\",{\"1\":{\"27\":1,\"49\":1}}],[\"最终输出的对象序列化文件\",{\"1\":{\"1009\":1,\"1414\":1}}],[\"最终得到的就是我们想要的结果\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"最终一定要tostring把stringbuilder转为string类型\",{\"1\":{\"764\":1,\"1169\":1}}],[\"最终还需要知道stringbuilder性能好的原因\",{\"1\":{\"763\":1,\"1168\":1}}],[\"最终对外提供服务的其实就是这个字节码文件\",{\"1\":{\"319\":1}}],[\"最终形成闭环\",{\"1\":{\"164\":1}}],[\"最终的目的还是要恢复成string类型\",{\"1\":{\"763\":1,\"1168\":1}}],[\"最终的目的为了简化代码编写\",{\"1\":{\"736\":1,\"1141\":1}}],[\"最终的访问的结果不一样\",{\"1\":{\"154\":1}}],[\"最终的试炼\",{\"0\":{\"82\":1}}],[\"最终都会被转发到正确的节点\",{\"1\":{\"138\":1}}],[\"最终到达了知识的宝藏\",{\"1\":{\"49\":1}}],[\"最终\",{\"1\":{\"17\":1,\"38\":1,\"39\":1,\"66\":1,\"68\":1,\"88\":1}}],[\"最终试炼\",{\"0\":{\"15\":1}}],[\"要发送内容的字节长度\",{\"1\":{\"1447\":1}}],[\"要发送的内容\",{\"1\":{\"1447\":1}}],[\"要素一\",{\"0\":{\"1426\":1}}],[\"要分配的最大数组大小\",{\"1\":{\"831\":1,\"1236\":1}}],[\"要压缩的文件\",{\"1\":{\"490\":1}}],[\"要创建的文件\",{\"1\":{\"490\":1}}],[\"要下载的文件\",{\"1\":{\"488\":1}}],[\"要删除\",{\"1\":{\"437\":1}}],[\"要删除的id\",{\"1\":{\"279\":1,\"280\":1}}],[\"要运行后台中的\",{\"1\":{\"423\":1}}],[\"要与打包压缩的文件\",{\"1\":{\"420\":1}}],[\"要确保已经完成了集群化环境前置准备环节的全部内容\",{\"1\":{\"375\":1}}],[\"要通过standardcharsets\",{\"1\":{\"309\":2}}],[\"要修改的id\",{\"1\":{\"277\":1}}],[\"要修改变量\",{\"1\":{\"211\":1}}],[\"要小于防火墙超时设置\",{\"1\":{\"240\":1}}],[\"要在url后面开启预编译\",{\"1\":{\"234\":1}}],[\"要在java大陆上一展身手\",{\"1\":{\"14\":1}}],[\"要更新的变量值\",{\"1\":{\"211\":1}}],[\"要么间接继承了object类\",{\"1\":{\"753\":1,\"1158\":1}}],[\"要么同时成功\",{\"1\":{\"536\":1,\"616\":1}}],[\"要么同时失败\",{\"1\":{\"151\":1,\"535\":1,\"536\":1,\"616\":1}}],[\"要么移动到原始位置+增加的数组大小这个位置上\",{\"1\":{\"191\":1}}],[\"要么全部回滚\",{\"1\":{\"151\":1}}],[\"要么全部提交\",{\"1\":{\"151\":1}}],[\"要遵循最左前缀法则\",{\"1\":{\"150\":1}}],[\"要求\",{\"1\":{\"647\":1,\"1052\":1}}],[\"要求以\",{\"1\":{\"647\":1,\"1052\":1}}],[\"要求变量的使用严格符合类型规定\",{\"1\":{\"645\":1,\"1050\":1}}],[\"要求非空且唯一\",{\"1\":{\"525\":1}}],[\"要求程序从池中get到连接后\",{\"1\":{\"240\":1}}],[\"要求至少有1个slave\",{\"1\":{\"137\":1}}],[\"要求主角运用所学的所有知识与技巧\",{\"1\":{\"26\":1}}],[\"要注意需要给lock设置一个合理的过期时间\",{\"1\":{\"125\":1}}],[\"要从开发者出发\",{\"1\":{\"105\":1}}],[\"要学好java\",{\"1\":{\"29\":1}}],[\"与操作\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"与文件大小一样大\",{\"1\":{\"996\":1,\"1401\":1}}],[\"与源文件接通\",{\"1\":{\"994\":1,\"1399\":1}}],[\"与map体系一致\",{\"1\":{\"903\":1,\"1308\":1}}],[\"与x对应的控制字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"与string相比\",{\"1\":{\"764\":1,\"1169\":1}}],[\"与synchronized一样\",{\"1\":{\"214\":1}}],[\"与此string进行比较的对象\",{\"1\":{\"758\":1,\"1163\":1}}],[\"与现实世界进行对接\",{\"1\":{\"734\":1,\"1139\":1}}],[\"与类一起加载一次\",{\"1\":{\"686\":1,\"688\":1,\"1091\":1,\"1093\":1}}],[\"与initialsize相同\",{\"1\":{\"240\":1}}],[\"与该用户的角色进行判断\",{\"1\":{\"160\":1}}],[\"与\",{\"0\":{\"111\":1,\"194\":1},\"1\":{\"211\":2,\"435\":4,\"437\":1}}],[\"与伙伴们的交流\",{\"0\":{\"60\":1}}],[\"与守护者再次相遇\",{\"1\":{\"27\":1}}],[\"与黑影进行了一场激烈的对决\",{\"1\":{\"25\":1}}],[\"与星际文明进行了交流\",{\"1\":{\"24\":1}}],[\"使java语言表达能力得到了提升\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"使程序可以忽略挂起信号继续运行\",{\"1\":{\"422\":1}}],[\"使程序更加易读和高效\",{\"1\":{\"5\":1}}],[\"使坐标生效\",{\"1\":{\"258\":1}}],[\"使线程正常退出\",{\"1\":{\"208\":1}}],[\"使⽤了\",{\"1\":{\"139\":1}}],[\"使⽤⼀个主线程来处理所有的客户端请求和数据操作\",{\"1\":{\"139\":1}}],[\"使⽤\",{\"1\":{\"123\":1}}],[\"使失效时间分散\",{\"1\":{\"115\":1}}],[\"使用静态变量\",{\"1\":{\"1465\":1}}],[\"使用组播地址\",{\"1\":{\"1454\":1}}],[\"使用广播地址\",{\"1\":{\"1453\":1}}],[\"使用tcp协议\",{\"1\":{\"1439\":1}}],[\"使用tail命令\",{\"1\":{\"460\":1}}],[\"使用使用compose\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"使用使用andthen\",{\"1\":{\"1029\":1,\"1479\":1}}],[\"使用andthen\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"使用isequal生成一个断言\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"使用isequal\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"使用in等关键字进行条件判断\",{\"1\":{\"533\":1}}],[\"使用interrupt方法中断线程\",{\"1\":{\"208\":1}}],[\"使用注解\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"使用注解开发会比使用配置文件开发更方便\",{\"1\":{\"283\":1}}],[\"使用文件字节输入流一次读取字节数组数据\",{\"1\":{\"996\":1,\"1401\":1}}],[\"使用文件字节输入流每次读取一个字节数组数据\",{\"1\":{\"995\":1,\"1400\":1}}],[\"使用while循环\",{\"1\":{\"995\":1,\"1400\":1}}],[\"使用where标签\",{\"1\":{\"274\":1}}],[\"使用循环\",{\"1\":{\"995\":1,\"1400\":1}}],[\"使用循环读取字符\",{\"1\":{\"1002\":1,\"1407\":1}}],[\"使用循环读\",{\"1\":{\"994\":1,\"1399\":1}}],[\"使用executors的工具方法直接得到一个线程池对象\",{\"1\":{\"951\":1,\"1356\":1}}],[\"使用executorservice的实现类threadpoolexecutor自己创建一个线程对象\",{\"1\":{\"943\":1,\"1348\":1}}],[\"使用executor\",{\"1\":{\"943\":1,\"1348\":1}}],[\"使用eat方法告诉这个狗\",{\"1\":{\"812\":1,\"1217\":1}}],[\"使用foreach遍历map集合\",{\"1\":{\"907\":1,\"1312\":1}}],[\"使用foreach遍历后得到的每一个元素\",{\"1\":{\"280\":1}}],[\"使用泛型上下限\",{\"1\":{\"878\":1,\"1283\":1}}],[\"使用了泛型定义的接口就是泛型接口\",{\"1\":{\"874\":1,\"1279\":1}}],[\"使用lambda表达式predicate\",{\"1\":{\"1028\":2,\"1478\":2}}],[\"使用lambda表达式\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"使用lru\",{\"1\":{\"115\":1}}],[\"使用类对象获取eat的方法\",{\"1\":{\"812\":1,\"1217\":1}}],[\"使用类对象中的run方法告诉这个dog应该跑\",{\"1\":{\"812\":1,\"1217\":1}}],[\"使用反射技术获取方法对象并使用\",{\"0\":{\"811\":1,\"1216\":1}}],[\"使用反射技术获取构造器对象并使用\",{\"0\":{\"805\":1,\"1210\":1}}],[\"使用比较器对象自定义排序\",{\"1\":{\"793\":1,\"1198\":1}}],[\"使用指定的格式\",{\"1\":{\"780\":1,\"1185\":1}}],[\"使用默认格式\",{\"1\":{\"780\":1,\"1185\":1}}],[\"使用形式\",{\"1\":{\"738\":1,\"1143\":1}}],[\"使用父类类型作为参数\",{\"1\":{\"726\":1,\"1131\":1}}],[\"使用场景\",{\"1\":{\"682\":2,\"1026\":1,\"1027\":1,\"1028\":1,\"1029\":1,\"1087\":2,\"1476\":1,\"1477\":1,\"1478\":1,\"1479\":1}}],[\"使用string的一个解码构造器\",{\"1\":{\"995\":1,\"1400\":1}}],[\"使用string开发一个验证码\",{\"1\":{\"678\":1,\"679\":1,\"1083\":1,\"1084\":1}}],[\"使用stream实现\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"使用simpledateformat解析字符串时间成为日期对象\",{\"1\":{\"781\":1,\"1186\":1}}],[\"使用systemctl管控\",{\"1\":{\"358\":1,\"360\":1}}],[\"使用编译阶段不处理也可以\",{\"1\":{\"637\":1,\"1042\":1}}],[\"使用属性占位符$\",{\"1\":{\"602\":1}}],[\"使用数据库\",{\"1\":{\"507\":2}}],[\"使用docker\",{\"0\":{\"494\":1},\"1\":{\"495\":1}}],[\"使用docker部署前后端分离项目\",{\"0\":{\"493\":1}}],[\"使用df命令查看磁盘的使用情况\",{\"1\":{\"482\":1}}],[\"使用gzip模式解压test\",{\"1\":{\"490\":1}}],[\"使用gzip模式\",{\"1\":{\"490\":1}}],[\"使用普通用户切换到root用户需要输入密码\",{\"1\":{\"461\":1}}],[\"使用q退出查看\",{\"1\":{\"448\":1}}],[\"使用空格翻页\",{\"1\":{\"448\":1}}],[\"使用方法\",{\"1\":{\"424\":1}}],[\"使用环境变量\",{\"0\":{\"413\":1}}],[\"使用下面命令查看该密码\",{\"1\":{\"398\":1}}],[\"使用灵活的告警机制\",{\"1\":{\"396\":1}}],[\"使用本机当前的同名账户登陆\",{\"1\":{\"373\":1}}],[\"使用compose\",{\"1\":{\"1029\":2,\"1479\":2}}],[\"使用context空间加载properties文件\",{\"1\":{\"602\":1}}],[\"使用collections\",{\"1\":{\"187\":1}}],[\"使用c语言编写的\",{\"1\":{\"359\":1}}],[\"使用主机名\",{\"1\":{\"354\":1}}],[\"使用通配符\",{\"1\":{\"354\":1}}],[\"使用rz和sz进行上传和下载\",{\"1\":{\"488\":1}}],[\"使用root用户切换到普通用户不需要输入密码\",{\"1\":{\"461\":1}}],[\"使用root用户操作\",{\"1\":{\"354\":5}}],[\"使用rpm和yum来进行安装\",{\"1\":{\"399\":1}}],[\"使用resultmap定义返回值映射类型\",{\"1\":{\"570\":1,\"613\":1}}],[\"使用response对象\",{\"1\":{\"329\":1}}],[\"使用response对象设置响应数据\",{\"1\":{\"311\":1}}],[\"使用request对象\",{\"1\":{\"310\":1,\"329\":1}}],[\"使用redisson加锁的时候\",{\"1\":{\"132\":1}}],[\"使用的jdk版本是\",{\"1\":{\"352\":1}}],[\"使用yum安装mysql\",{\"1\":{\"346\":1,\"349\":1}}],[\"使用标签来取代jsp页面上的java代码\",{\"1\":{\"323\":1}}],[\"使用xml配置servlet\",{\"0\":{\"303\":1}}],[\"使用maven\",{\"1\":{\"293\":1}}],[\"使用骨架\",{\"1\":{\"292\":1}}],[\"使用时机\",{\"1\":{\"271\":2}}],[\"使用坐标导入jar包\",{\"0\":{\"258\":1}}],[\"使用坐标来定义项目或引入项目中需要的依赖\",{\"1\":{\"256\":1}}],[\"使用步骤\",{\"0\":{\"239\":1,\"772\":1,\"1177\":1}}],[\"使用完\",{\"1\":{\"222\":1}}],[\"使用jstack\",{\"1\":{\"216\":1}}],[\"使用jdk自带的工具\",{\"1\":{\"216\":1}}],[\"使用线程池\",{\"1\":{\"1466\":1}}],[\"使用线程的stop\",{\"1\":{\"208\":1}}],[\"使用线程安全的arraylist和linkedlist\",{\"1\":{\"187\":1}}],[\"使用退出标志\",{\"1\":{\"208\":1}}],[\"使用索引的效率就越高\",{\"1\":{\"149\":1}}],[\"使用开源工具\",{\"1\":{\"141\":1}}],[\"使用监控工具来监测缓存的命中率\",{\"1\":{\"115\":1}}],[\"使用加密或其他安全措施来保护缓存数据\",{\"1\":{\"115\":1}}],[\"使用双写策略\",{\"1\":{\"115\":1}}],[\"使用缓存更新策略\",{\"1\":{\"115\":1}}],[\"使用缓存的时候检查数据是否过期\",{\"1\":{\"115\":1}}],[\"使用热点数据预热\",{\"1\":{\"115\":1}}],[\"使用互斥锁来保护缓存访问\",{\"1\":{\"115\":1}}],[\"使用无界阻塞队列\",{\"1\":{\"112\":1}}],[\"使用腾讯云cos云对象存储保存图片文件\",{\"1\":{\"109\":1}}],[\"使用\",{\"0\":{\"115\":1},\"1\":{\"99\":1,\"100\":2,\"101\":1,\"102\":1,\"103\":1,\"109\":4,\"111\":2,\"114\":1,\"115\":1,\"117\":1,\"120\":2,\"148\":1,\"215\":1,\"258\":1,\"280\":1,\"314\":1,\"315\":2,\"323\":1,\"333\":1,\"435\":1,\"437\":1,\"481\":1,\"533\":1}}],[\"使用nacos作为服务注册中心\",{\"1\":{\"95\":1}}],[\"使出种种手段想要阻挠主角的前进\",{\"1\":{\"25\":1}}],[\"开销小\",{\"1\":{\"1443\":1}}],[\"开机了\",{\"1\":{\"641\":2,\"1046\":2}}],[\"开机自启动\",{\"1\":{\"474\":1}}],[\"开机自启\",{\"1\":{\"346\":1,\"349\":1,\"356\":1,\"358\":1,\"360\":1,\"404\":1}}],[\"开始创建独立线程处理socket管道\",{\"1\":{\"1464\":1}}],[\"开始格式化日期对象成为喜欢的字符串形式\",{\"1\":{\"781\":1,\"1186\":1}}],[\"开始\",{\"1\":{\"738\":1,\"1018\":1,\"1143\":1,\"1468\":1}}],[\"开始唱歌\",{\"1\":{\"629\":1,\"1034\":1}}],[\"开始跳舞\",{\"1\":{\"629\":1,\"1034\":1}}],[\"开始配置\",{\"0\":{\"414\":1}}],[\"开始了他的冒险之旅\",{\"1\":{\"49\":1}}],[\"开放源码的分布式应用程序协调服务\",{\"1\":{\"374\":1}}],[\"开放平台进行注册登录\",{\"1\":{\"104\":1}}],[\"开放平台分为\",{\"1\":{\"97\":1}}],[\"开放平台\",{\"0\":{\"95\":1}}],[\"开源的\",{\"1\":{\"361\":1}}],[\"开源框架\",{\"1\":{\"92\":1}}],[\"开关\",{\"1\":{\"244\":1,\"245\":2}}],[\"开头的就是常见的局域网地址\",{\"1\":{\"1429\":1}}],[\"开头的文件和文件夹会被隐藏\",{\"1\":{\"440\":1}}],[\"开头的符号\",{\"1\":{\"280\":1}}],[\"开头的模糊查询\",{\"1\":{\"150\":1}}],[\"开头的like模糊查询\",{\"1\":{\"150\":1}}],[\"开启定时器任务\",{\"1\":{\"956\":2,\"1361\":2}}],[\"开启一个定时器\",{\"1\":{\"954\":1,\"1359\":1}}],[\"开启context命名空间\",{\"1\":{\"602\":1}}],[\"开启node1\",{\"1\":{\"365\":1}}],[\"开启预编译功能\",{\"1\":{\"234\":1}}],[\"开启事务注解\",{\"1\":{\"570\":1}}],[\"开启事务\",{\"1\":{\"229\":3,\"535\":1}}],[\"开启慢日志查询\",{\"1\":{\"141\":1}}],[\"开启后可以配置aof记录的频率\",{\"1\":{\"128\":1}}],[\"开启属于自己的编程之旅\",{\"1\":{\"8\":1}}],[\"开发socket网络编程入门代码的服务端\",{\"1\":{\"1461\":1}}],[\"开发一个极品飞车的游戏\",{\"1\":{\"878\":1,\"1283\":1}}],[\"开发中一般不会使用\",{\"1\":{\"948\":1,\"1353\":1}}],[\"开发中输出对象变量\",{\"1\":{\"755\":1,\"1160\":1}}],[\"开发中使用最多\",{\"1\":{\"751\":1,\"1156\":1}}],[\"开发中不是我们主动定义匿名内部类\",{\"1\":{\"738\":1,\"1143\":1}}],[\"开发出一个动态代理对象出来\",{\"1\":{\"629\":1,\"1034\":1}}],[\"开发出了各种有趣而实用的java应用程序\",{\"1\":{\"24\":1}}],[\"开发环境\",{\"1\":{\"620\":1}}],[\"开发环境的数据库\",{\"1\":{\"267\":1}}],[\"开发的一个\",{\"1\":{\"351\":1}}],[\"开发简单\",{\"1\":{\"291\":1}}],[\"开发者可以使用该\",{\"1\":{\"119\":1}}],[\"开发\",{\"1\":{\"103\":1}}],[\"开发了客户端\",{\"0\":{\"103\":1},\"1\":{\"95\":1}}],[\"开发工具\",{\"1\":{\"92\":1}}],[\"开拓更广阔的世界\",{\"1\":{\"74\":1}}],[\"拥有量词\",{\"1\":{\"819\":1,\"1224\":1}}],[\"拥有自己的事务协调\",{\"1\":{\"616\":1}}],[\"拥有了更多的知识和技巧后\",{\"1\":{\"24\":1}}],[\"拥有无尽的知识和技能的宝藏等待我去发掘\",{\"1\":{\"1\":1}}],[\"逐渐理解了面向对象编程的本质\",{\"1\":{\"51\":1}}],[\"逐渐成为了java的大师\",{\"1\":{\"49\":1}}],[\"逐渐掌握了图形界面编程的奥秘\",{\"1\":{\"39\":1}}],[\"逐渐掌握了java的基础\",{\"1\":{\"22\":1}}],[\"逐渐熟悉了面向对象编程\",{\"1\":{\"23\":1}}],[\"于是jdk5\",{\"1\":{\"921\":1,\"1326\":1}}],[\"于是关系型数据库都自己实现了jdbc接口又称为驱动\",{\"1\":{\"225\":1}}],[\"于是\",{\"1\":{\"23\":1,\"50\":1,\"55\":1}}],[\"突破技能\",{\"0\":{\"23\":1}}],[\"洞穴却被千钧一发的机关所保护\",{\"1\":{\"21\":1}}],[\"遇到挑战\",{\"0\":{\"21\":1}}],[\"更加灵活\",{\"1\":{\"939\":1,\"1344\":1}}],[\"更简化\",{\"1\":{\"846\":1,\"1251\":1}}],[\"更重要的用途是适合做java的高级框架\",{\"1\":{\"817\":1,\"1222\":1}}],[\"更改student对象的年龄\",{\"1\":{\"808\":1,\"1213\":1}}],[\"更安全\",{\"1\":{\"758\":1,\"1163\":1}}],[\"更多的空间\",{\"1\":{\"187\":1}}],[\"更新余额\",{\"1\":{\"930\":1,\"933\":1,\"936\":1,\"937\":1,\"939\":1,\"1335\":1,\"1338\":1,\"1341\":1,\"1342\":1,\"1344\":1}}],[\"更新\",{\"1\":{\"570\":1}}],[\"更新yum缓存\",{\"1\":{\"362\":1}}],[\"更新密钥\",{\"1\":{\"346\":1,\"349\":1}}],[\"更新个人信息\",{\"1\":{\"109\":1}}],[\"更新和删除数据库中的数据\",{\"1\":{\"56\":1}}],[\"更灵活\",{\"1\":{\"99\":1}}],[\"更广阔的世界正在等待着他\",{\"1\":{\"27\":1}}],[\"更是能力的进化\",{\"1\":{\"81\":1}}],[\"更是解决问题的能力和创新的思维\",{\"1\":{\"47\":1}}],[\"更是成长\",{\"1\":{\"27\":1}}],[\"更是实践的过程\",{\"1\":{\"5\":1}}],[\"更不知道该如何离开\",{\"1\":{\"19\":1}}],[\"愿每个人都能够找到自己的归宿\",{\"1\":{\"18\":1}}],[\"笔者想通过这本书\",{\"1\":{\"18\":1}}],[\"终结点\",{\"1\":{\"978\":1,\"979\":1,\"1383\":1,\"1384\":1}}],[\"终止当前运行的java虚拟机\",{\"1\":{\"769\":1,\"1174\":1}}],[\"终止terminated\",{\"1\":{\"203\":1}}],[\"终端能够接收任何输入\",{\"1\":{\"424\":1}}],[\"终端不再能够接收任何输入\",{\"1\":{\"424\":1}}],[\"终端断开\",{\"1\":{\"422\":1}}],[\"终于\",{\"1\":{\"69\":1,\"76\":1}}],[\"终究会找到归宿\",{\"1\":{\"17\":1}}],[\"终极boss的挑战\",{\"1\":{\"6\":1}}],[\"终极试炼考察的不仅仅是知识\",{\"1\":{\"81\":1}}],[\"终极试炼的场景是一个巨大而复杂的迷宫\",{\"1\":{\"77\":1}}],[\"终极试炼\",{\"0\":{\"26\":1,\"88\":1},\"1\":{\"0\":1,\"26\":1,\"76\":1}}],[\"不创建\",{\"1\":{\"948\":1,\"1353\":1}}],[\"不好\",{\"1\":{\"935\":1,\"1340\":1}}],[\"不适合需要返回线程执行结果的业务场景\",{\"1\":{\"921\":1,\"1326\":1}}],[\"不重复的\",{\"1\":{\"901\":1,\"1306\":1}}],[\"不重复\",{\"0\":{\"839\":1,\"1244\":1},\"1\":{\"839\":4,\"840\":2,\"880\":1,\"881\":5,\"889\":1,\"890\":1,\"891\":1,\"902\":1,\"903\":4,\"904\":1,\"906\":1,\"1244\":4,\"1245\":2,\"1285\":1,\"1286\":5,\"1294\":1,\"1295\":1,\"1296\":1,\"1307\":1,\"1308\":4,\"1309\":1,\"1311\":1}}],[\"不重写equals就是比较地址\",{\"1\":{\"756\":1,\"1161\":1}}],[\"不重写equals会调用object里面的equals\",{\"1\":{\"756\":1,\"1161\":1}}],[\"不比\",{\"1\":{\"831\":1,\"1236\":1}}],[\"不愿意的量词\",{\"1\":{\"819\":1,\"1224\":1}}],[\"不必担心被修改发生牵一发而动全身\",{\"1\":{\"785\":1,\"1190\":1}}],[\"不包含日期的时间\",{\"1\":{\"785\":1,\"1190\":1}}],[\"不包含具体时间的日期\",{\"1\":{\"785\":1,\"1190\":1}}],[\"不包含任何内容\",{\"1\":{\"762\":1,\"1167\":1}}],[\"不包括后面\",{\"1\":{\"743\":1,\"1148\":1}}],[\"不支持基本数据类型\",{\"1\":{\"749\":1,\"788\":1,\"840\":1,\"1154\":1,\"1193\":1,\"1245\":1}}],[\"不支持高效的随机元素访问\",{\"1\":{\"187\":1}}],[\"不换行\",{\"1\":{\"743\":1,\"1148\":1}}],[\"不冲突\",{\"1\":{\"717\":1,\"1122\":1}}],[\"不写\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"不写也存在\",{\"1\":{\"700\":1,\"1105\":1}}],[\"不写默认是10行\",{\"1\":{\"460\":1}}],[\"不让工具类对外产生对象\",{\"1\":{\"679\":1,\"1084\":1}}],[\"不可靠传输的协议\",{\"1\":{\"1443\":1}}],[\"不可变的map集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"不可变的set集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"不可变的list集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"不可变集合\",{\"0\":{\"909\":1,\"1314\":1}}],[\"不可以\",{\"1\":{\"1462\":1}}],[\"不可以被修改的集合\",{\"1\":{\"909\":1,\"1314\":1}}],[\"不可以直接访问实例的成员\",{\"1\":{\"680\":1,\"1085\":1}}],[\"不可以用0或1代替true或false\",{\"1\":{\"649\":1,\"1054\":1}}],[\"不可重复读\",{\"1\":{\"151\":1,\"152\":1}}],[\"不是\",{\"1\":{\"710\":1,\"1115\":1}}],[\"不是一个字节\",{\"1\":{\"649\":1,\"1054\":1}}],[\"不是null值\",{\"1\":{\"521\":1}}],[\"不麻烦别人\",{\"1\":{\"633\":1,\"1038\":1}}],[\"不经常使用的放在另一张表中\",{\"1\":{\"529\":1}}],[\"不满足where条件\",{\"1\":{\"522\":1}}],[\"不配置也没关系\",{\"1\":{\"494\":1}}],[\"不使用线程池的问题\",{\"1\":{\"940\":1,\"1345\":1}}],[\"不使用\",{\"1\":{\"490\":1}}],[\"不使用hbase自带的zookeeper\",{\"1\":{\"389\":1}}],[\"不跟参数则会回到home路径\",{\"1\":{\"442\":1}}],[\"不保存\",{\"1\":{\"437\":1}}],[\"不挂断的运行\",{\"1\":{\"424\":1}}],[\"不挂断\",{\"1\":{\"422\":1}}],[\"不存在返回\",{\"1\":{\"793\":1,\"1198\":1}}],[\"不存在就创建\",{\"1\":{\"375\":1}}],[\"不存在资源竞争问题\",{\"1\":{\"158\":1}}],[\"不然无法启动系统\",{\"1\":{\"371\":1}}],[\"不利于扩展\",{\"1\":{\"915\":1,\"1320\":1}}],[\"不利于团队协作\",{\"1\":{\"321\":1}}],[\"不利于在\",{\"1\":{\"113\":1}}],[\"不需要建立连接\",{\"1\":{\"1443\":1}}],[\"不需要返回的消费型\",{\"1\":{\"1027\":1,\"1477\":1}}],[\"不需要配置空闲时间\",{\"1\":{\"951\":1,\"1356\":1}}],[\"不需要考虑我们所选用的数据库管理系统\",{\"1\":{\"528\":1}}],[\"不需要加虚拟目录\",{\"1\":{\"313\":1}}],[\"不需要再传递sql\",{\"1\":{\"233\":1}}],[\"不知道哪个对应哪个\",{\"1\":{\"272\":1,\"281\":1}}],[\"不知道应该先去哪里探索\",{\"1\":{\"10\":1}}],[\"不灵活\",{\"1\":{\"270\":1}}],[\"不方便\",{\"1\":{\"270\":1}}],[\"不管公有还是私有\",{\"1\":{\"804\":1,\"806\":1,\"1209\":1,\"1211\":1}}],[\"不管该连接中是活动还是空闲\",{\"1\":{\"240\":1}}],[\"不管当前内存空间足够与否\",{\"1\":{\"222\":1}}],[\"不管迷失了多久\",{\"1\":{\"17\":1}}],[\"不具备的功能\",{\"1\":{\"215\":1}}],[\"不推荐\",{\"1\":{\"208\":1}}],[\"不推荐使用\",{\"0\":{\"954\":1,\"1359\":1},\"1\":{\"128\":1}}],[\"不成立\",{\"1\":{\"190\":1}}],[\"不同对象的哈希值是不同的\",{\"1\":{\"887\":1,\"1292\":1}}],[\"不同返回false\",{\"1\":{\"754\":1,\"1159\":1}}],[\"不同方式定义字符串的内存原理\",{\"0\":{\"743\":1,\"1148\":1}}],[\"不同的进程使用不同的内存空间\",{\"1\":{\"197\":1}}],[\"不同的隔离级别快照读是不一样的\",{\"1\":{\"154\":1}}],[\"不同\",{\"1\":{\"153\":1}}],[\"不会进入\",{\"1\":{\"831\":1,\"1236\":1}}],[\"不会弹出提示确认信息\",{\"1\":{\"451\":1}}],[\"不会被清理掉\",{\"1\":{\"222\":1}}],[\"不会互相⼲扰\",{\"1\":{\"151\":1}}],[\"不会创建新的线程来处理请求\",{\"1\":{\"139\":1}}],[\"不要读多\",{\"1\":{\"995\":1,\"1400\":1}}],[\"不要打开\",{\"1\":{\"971\":1,\"1376\":1}}],[\"不要怀疑\",{\"1\":{\"435\":1}}],[\"不要直接在jsp里面写jsp代码\",{\"1\":{\"321\":1}}],[\"不要重复创建\",{\"1\":{\"316\":1}}],[\"不要配置\",{\"1\":{\"302\":1}}],[\"不要使用这个删除\",{\"1\":{\"866\":1,\"1271\":1}}],[\"不要使用\",{\"1\":{\"271\":2}}],[\"不要在索引的字段上进行运算操作\",{\"1\":{\"150\":1}}],[\"不要把主线程的任务放到子线程任务之前\",{\"1\":{\"917\":1,\"1322\":1}}],[\"不要把\",{\"1\":{\"103\":1}}],[\"不能为null\",{\"1\":{\"944\":3,\"1349\":3}}],[\"不能小于0\",{\"1\":{\"944\":2,\"1349\":2}}],[\"不能返回线程执行的结果\",{\"1\":{\"923\":2,\"1328\":2}}],[\"不能在继续继承其他的类\",{\"1\":{\"923\":1,\"1328\":1}}],[\"不能在多个资源使用request共享数据\",{\"1\":{\"313\":1}}],[\"不能出现两个红色的节点相连的情况\",{\"1\":{\"858\":1,\"1263\":1}}],[\"不能直接创建对象\",{\"1\":{\"784\":1,\"1189\":1}}],[\"不能把猫转换成狗\",{\"0\":{\"731\":1,\"1136\":1}}],[\"不能把对象类型转换成不相关类的对象\",{\"1\":{\"650\":1,\"1055\":1}}],[\"不能用abstract修饰变量\",{\"1\":{\"710\":1,\"1115\":1}}],[\"不能对外创建对象\",{\"1\":{\"708\":1,\"766\":1,\"1113\":1,\"1171\":1}}],[\"不能对boolean类型进行类型转换\",{\"1\":{\"650\":1,\"1055\":1}}],[\"不能被继承\",{\"1\":{\"708\":1,\"1113\":1}}],[\"不能被重写\",{\"1\":{\"703\":1,\"1108\":1}}],[\"不能\",{\"1\":{\"695\":1,\"1100\":1}}],[\"不能初始化对象\",{\"1\":{\"688\":1,\"1093\":1}}],[\"不能动\",{\"1\":{\"428\":3}}],[\"不能是连续的简单语句如123\",{\"1\":{\"347\":1,\"350\":2}}],[\"不能继续上抛\",{\"1\":{\"200\":1}}],[\"不能存在中间状态\",{\"1\":{\"174\":1}}],[\"不能使用索引\",{\"1\":{\"150\":1}}],[\"不能解决\",{\"1\":{\"134\":1}}],[\"不能太短\",{\"1\":{\"125\":1}}],[\"不太靠谱\",{\"1\":{\"132\":1}}],[\"不删除任何键\",{\"1\":{\"130\":1}}],[\"不过我们常用t\",{\"1\":{\"870\":1,\"1275\":1}}],[\"不过我们可以通过map的方法\",{\"1\":{\"907\":1,\"1312\":1}}],[\"不过我们可以通过引用类型的转换来调用子类独有的功能\",{\"1\":{\"727\":1,\"1132\":1}}],[\"不过我们可以倒着删除\",{\"1\":{\"866\":1,\"1271\":1}}],[\"不过我们发现还是不方便\",{\"1\":{\"790\":1,\"1195\":1}}],[\"不过调用api判断逼格更高\",{\"1\":{\"759\":1,\"1164\":1}}],[\"不过效率低\",{\"1\":{\"751\":1,\"1156\":1}}],[\"不过不建议省略\",{\"1\":{\"514\":1}}],[\"不过不太推荐这样做\",{\"1\":{\"127\":1}}],[\"不过有等级区分\",{\"1\":{\"486\":1}}],[\"不过和redis设计方向不同\",{\"1\":{\"388\":1}}],[\"不过rabbitmq多用于后端系统\",{\"1\":{\"376\":1}}],[\"不过转换得到的list并不是java\",{\"1\":{\"184\":1}}],[\"不过nacos作为注册中心\",{\"1\":{\"173\":1}}],[\"不过\",{\"1\":{\"158\":1,\"222\":1,\"437\":1}}],[\"不过会阻塞主进程\",{\"1\":{\"128\":1}}],[\"不用修改下面的元素了\",{\"1\":{\"881\":2,\"1286\":2}}],[\"不用背诵\",{\"1\":{\"118\":1}}],[\"不用自己额外编码\",{\"1\":{\"110\":1}}],[\"不仅成功解锁了全部的java知识\",{\"1\":{\"83\":1}}],[\"不仅掌握了java的应用技巧\",{\"1\":{\"64\":1}}],[\"不断的由主线程负责不断的接收客户端的socket管道\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"不断追求更高的java技能\",{\"1\":{\"90\":1}}],[\"不断优化自己的代码和算法\",{\"1\":{\"87\":1}}],[\"不断优化和改进代码\",{\"1\":{\"81\":1}}],[\"不断学习\",{\"1\":{\"75\":1}}],[\"不断学习java的基础知识\",{\"1\":{\"22\":1}}],[\"不断提升自己的技术水平\",{\"1\":{\"74\":1}}],[\"不断提升自己的技能\",{\"1\":{\"67\":1,\"85\":1}}],[\"不断成长\",{\"1\":{\"40\":1}}],[\"不慎掉入将导致程序崩溃\",{\"1\":{\"37\":1}}],[\"不远处\",{\"1\":{\"19\":1}}],[\"成员方法的分类\",{\"0\":{\"677\":1,\"1082\":1}}],[\"成员方法\",{\"0\":{\"696\":1,\"1101\":1},\"1\":{\"320\":1,\"660\":2,\"661\":1,\"663\":1,\"1065\":2,\"1066\":1,\"1068\":1}}],[\"成员变量的名字\",{\"1\":{\"816\":1,\"1221\":1}}],[\"成员变量使用private修饰\",{\"1\":{\"672\":1,\"1077\":1}}],[\"成员变量\",{\"0\":{\"696\":1,\"1101\":1},\"1\":{\"158\":1,\"320\":1,\"660\":2,\"662\":1,\"663\":1,\"703\":1,\"710\":1,\"808\":1,\"1065\":2,\"1067\":1,\"1068\":1,\"1108\":1,\"1115\":1,\"1213\":1}}],[\"成为容量规划的理想选择\",{\"1\":{\"396\":1}}],[\"成为了java的大师\",{\"1\":{\"46\":1}}],[\"成为了java大陆的主人\",{\"1\":{\"17\":1}}],[\"成为更加卓越的java大师\",{\"1\":{\"40\":1}}],[\"成功\",{\"1\":{\"288\":1,\"939\":2,\"1344\":2}}],[\"成功解决了机器人的攻击\",{\"1\":{\"82\":1}}],[\"成功通过了终极试炼\",{\"1\":{\"26\":1}}],[\"成功夺回了java大陆的自由\",{\"1\":{\"17\":1}}],[\"勇敢地迎接每一个难题\",{\"1\":{\"16\":1}}],[\"迎接多态的挑战\",{\"0\":{\"44\":1}}],[\"迎接新挑战\",{\"0\":{\"40\":1}}],[\"迎接新的挑战\",{\"1\":{\"18\":1}}],[\"迎接挑战\",{\"0\":{\"16\":1}}],[\"迎接我的是一个陌生的世界\",{\"1\":{\"1\":1}}],[\"重要\",{\"1\":{\"943\":1,\"1348\":1}}],[\"重点\",{\"0\":{\"722\":1,\"1127\":1,\"1463\":1},\"1\":{\"970\":1,\"1375\":1}}],[\"重点关注\",{\"1\":{\"158\":1}}],[\"重复贴上等等动作\",{\"1\":{\"435\":1}}],[\"重复删除多个数据\",{\"1\":{\"435\":1}}],[\"重做上一个动作\",{\"1\":{\"435\":1}}],[\"重启服务器\",{\"1\":{\"495\":1}}],[\"重启\",{\"1\":{\"404\":1}}],[\"重启虚拟机即可\",{\"1\":{\"371\":1}}],[\"重启网卡\",{\"1\":{\"365\":1}}],[\"重新启动服务\",{\"1\":{\"495\":1}}],[\"重新加载防火墙规则\",{\"1\":{\"356\":1,\"358\":1}}],[\"重新载入防火墙规则使其生效\",{\"1\":{\"354\":1}}],[\"重写call方法\",{\"1\":{\"921\":2,\"1326\":2}}],[\"重写run方法\",{\"1\":{\"914\":1,\"1319\":1}}],[\"重写run\",{\"1\":{\"914\":1,\"918\":1,\"1319\":1,\"1323\":1}}],[\"重写比较规则\",{\"1\":{\"891\":2,\"1296\":2}}],[\"重写hashcode和equals去重复\",{\"1\":{\"888\":1,\"1293\":1}}],[\"重写后的hashcode的哈希值就是一样的\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"重写后的如下\",{\"1\":{\"128\":1}}],[\"重写equals也会重写hashcode\",{\"1\":{\"756\":2,\"1161\":2}}],[\"重写equals是为了让它比较内容是否一样\",{\"1\":{\"743\":1,\"1148\":1}}],[\"重写方法的名称\",{\"1\":{\"699\":1,\"1104\":1}}],[\"重写\",{\"0\":{\"697\":1,\"1102\":1}}],[\"重写doget和dopost方法\",{\"1\":{\"301\":1}}],[\"重定向符\",{\"0\":{\"459\":1}}],[\"重定向标准输出和标准错误到当前目录下的nohup\",{\"1\":{\"424\":2}}],[\"重定向的特点\",{\"1\":{\"313\":1}}],[\"重定向url会改变\",{\"1\":{\"310\":1}}],[\"重定向到其他地方\",{\"1\":{\"288\":1}}],[\"重定向\",{\"1\":{\"288\":1,\"313\":3}}],[\"重入一次对应的value值+1\",{\"1\":{\"133\":1}}],[\"重重挑战\",{\"0\":{\"14\":1}}],[\"重获大陆的希望\",{\"0\":{\"66\":1}}],[\"重获大陆\",{\"0\":{\"7\":1}}],[\"一收\",{\"1\":{\"1449\":1}}],[\"一发\",{\"1\":{\"1449\":1}}],[\"一级文件夹对象\",{\"1\":{\"970\":1,\"1375\":1}}],[\"一级文件夹名称\",{\"1\":{\"970\":1,\"1375\":1}}],[\"一级缓存\",{\"1\":{\"164\":1}}],[\"一行直接解决map集合遍历\",{\"1\":{\"908\":1,\"1313\":1}}],[\"一行经典代码\",{\"1\":{\"903\":2,\"904\":2,\"906\":2,\"907\":1,\"908\":1,\"1308\":2,\"1309\":2,\"1311\":2,\"1312\":1,\"1313\":1}}],[\"一边很短\",{\"1\":{\"855\":1,\"1260\":1}}],[\"一边非常长\",{\"1\":{\"855\":1,\"1260\":1}}],[\"一半上升\",{\"1\":{\"774\":1,\"1179\":1}}],[\"一\",{\"1\":{\"751\":1,\"1156\":1}}],[\"一直送\",{\"1\":{\"743\":1,\"1148\":1}}],[\"一直截取到末尾\",{\"1\":{\"743\":1,\"1148\":1}}],[\"一位\",{\"1\":{\"649\":1,\"1054\":1}}],[\"一位深谙java之道的黑影\",{\"1\":{\"25\":1}}],[\"一共多少条数据\",{\"1\":{\"544\":1}}],[\"一共多少页\",{\"1\":{\"544\":1}}],[\"一对多\",{\"1\":{\"529\":1}}],[\"一对一多用于表的拆分\",{\"1\":{\"529\":1}}],[\"一对一\",{\"1\":{\"529\":1}}],[\"一定要在左下角处看到\",{\"1\":{\"436\":1}}],[\"一切皆文件\",{\"1\":{\"427\":1}}],[\"一切都应为大写\",{\"1\":{\"413\":1}}],[\"一周掌握linux\",{\"0\":{\"425\":1}}],[\"一起进入账户\",{\"1\":{\"931\":1,\"1336\":1}}],[\"一起运行的\",{\"1\":{\"384\":1}}],[\"一起封装\",{\"1\":{\"166\":1,\"167\":1}}],[\"一堆服务器\",{\"1\":{\"384\":1}}],[\"一路回车到底即可\",{\"1\":{\"369\":1}}],[\"一路掌握了java的基础知识\",{\"1\":{\"70\":1}}],[\"一种维护浏览器状态的方法\",{\"1\":{\"327\":1}}],[\"一种动态的网站技术\",{\"1\":{\"317\":1}}],[\"一种资源跳转的方式\",{\"1\":{\"313\":1}}],[\"一种在服务器内部的资源跳转方式\",{\"1\":{\"310\":1}}],[\"一次读取一个字符数组\",{\"0\":{\"1003\":1,\"1408\":1}}],[\"一次读取一个字符\",{\"0\":{\"1002\":1,\"1407\":1}}],[\"一次读取完全部字节\",{\"0\":{\"996\":1,\"1401\":1}}],[\"一次性读取完文件的全部字节\",{\"1\":{\"996\":1,\"1401\":1}}],[\"一次或多次\",{\"1\":{\"819\":3,\"1224\":3}}],[\"一次或根本不一次\",{\"1\":{\"819\":3,\"1224\":3}}],[\"一次编写处处可用\",{\"1\":{\"679\":1,\"1084\":1}}],[\"一次请求\",{\"1\":{\"310\":1}}],[\"一次请求对应一次响应\",{\"1\":{\"286\":1}}],[\"一次让人心潮澎湃的探险之旅\",{\"1\":{\"75\":1}}],[\"一旦加上这个注解\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"一旦修改后其对象本身表示的时间将会产生变化\",{\"1\":{\"784\":1,\"1189\":1}}],[\"一旦发现了只具有弱引用的对象\",{\"1\":{\"222\":1}}],[\"一旦初始化之后中间不可扩容\",{\"1\":{\"217\":1}}],[\"一旦一个共享变量\",{\"1\":{\"212\":1}}],[\"一旦sql执行超过了我们设置的2秒钟就会被记录到日志中\",{\"1\":{\"141\":1}}],[\"一致性\",{\"1\":{\"151\":1,\"174\":2,\"536\":1}}],[\"一致性不高允许出现延迟的场景可以采用另一种方案\",{\"1\":{\"127\":1}}],[\"一致性高的场景下是一种方案\",{\"1\":{\"127\":1}}],[\"一个设备不可以出现两个端口号一样\",{\"1\":{\"1434\":1}}],[\"一个中文以两个字节\",{\"1\":{\"985\":1,\"1390\":1}}],[\"一个字节是8位\",{\"1\":{\"984\":1,\"1389\":1}}],[\"一个形参列表中的可变参数只能有一个\",{\"1\":{\"893\":1,\"1298\":1}}],[\"一个父节点产生一个左节点和右节点\",{\"1\":{\"854\":1,\"1259\":1}}],[\"一个初始的空数组\",{\"1\":{\"831\":1,\"1236\":1}}],[\"一个数字\",{\"1\":{\"819\":1,\"1224\":1}}],[\"一个stringbuilder对象进行拼接\",{\"1\":{\"764\":1,\"1169\":1}}],[\"一个servlet\",{\"1\":{\"302\":1}}],[\"一个接口继承了多个接口\",{\"1\":{\"717\":1,\"1122\":1}}],[\"一个电源线接口\",{\"1\":{\"715\":1,\"1120\":1}}],[\"一个类要么默认继承了object类\",{\"1\":{\"753\":1,\"1158\":1}}],[\"一个类实现了多个接口\",{\"1\":{\"717\":1,\"1122\":1}}],[\"一个类继承了父类\",{\"1\":{\"717\":1,\"1122\":1}}],[\"一个类继承了这个抽象类\",{\"1\":{\"710\":1,\"1115\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"717\":1,\"1122\":1}}],[\"一个类只能继承一个直接父类\",{\"1\":{\"693\":1,\"1098\":1}}],[\"一个类只能有一个父类\",{\"1\":{\"690\":1,\"1095\":1}}],[\"一个java文件中可以定义多个类\",{\"1\":{\"659\":1,\"1064\":1}}],[\"一个操作序列\",{\"1\":{\"535\":1}}],[\"一个订单包含多个商品\",{\"1\":{\"529\":1}}],[\"一个商品对应多个订单\",{\"1\":{\"529\":1}}],[\"一个员工对应一个部门\",{\"1\":{\"529\":1}}],[\"一个部门对应多个员工\",{\"1\":{\"529\":1}}],[\"一个用户\",{\"1\":{\"481\":1}}],[\"一个是在字符串常量池中的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"一个是复原\",{\"1\":{\"435\":1}}],[\"一个是可能是a的普通对象\",{\"1\":{\"164\":1}}],[\"一个机器启动一个\",{\"1\":{\"381\":2}}],[\"一个合格的程序员要有良好的信息收集能力哦\",{\"1\":{\"343\":1}}],[\"一个汉字占三个字节\",{\"1\":{\"309\":2}}],[\"一个线程需要同时获取多把锁\",{\"1\":{\"216\":1}}],[\"一个线程调用lock获取锁之后再次调用lock不会阻塞\",{\"1\":{\"214\":1}}],[\"一个进程在其执行的过程中可以产生多个线程\",{\"1\":{\"197\":1}}],[\"一个更易于构建云原生应用的动态服务发现\",{\"1\":{\"171\":1}}],[\"一个事务获取了一个数据行的排它锁\",{\"1\":{\"154\":1}}],[\"一个帮助大家找到志同道合的伙伴的移动端app\",{\"1\":{\"109\":1}}],[\"一个智者颤颤巍巍地走来\",{\"1\":{\"19\":1}}],[\"一般是定位我们模块中的文件\",{\"1\":{\"965\":1,\"1370\":1}}],[\"一般是通过编译源码方式安装的程序\",{\"1\":{\"428\":1}}],[\"一般拿来执行\",{\"1\":{\"948\":1,\"1353\":1}}],[\"一般用来执行runnable任务\",{\"1\":{\"948\":1,\"1353\":1}}],[\"一般用于在系统中提供快速缓存的能力\",{\"1\":{\"359\":1}}],[\"一般选用不为null的列\",{\"1\":{\"521\":1}}],[\"一般也称之为服务\",{\"1\":{\"474\":1}}],[\"一般也是像作为查询条件where\",{\"1\":{\"149\":1}}],[\"一般模式切换到指令行模式的可用的按钮说明\",{\"0\":{\"437\":1}}],[\"一般模式切换到编辑模式的可用的按钮说明\",{\"0\":{\"436\":1}}],[\"一般模式可用的光标移动\",{\"1\":{\"435\":1}}],[\"一般该目录的名就是用户的账号名称\",{\"1\":{\"428\":1}}],[\"一般由公司团队搭建私有仓库\",{\"1\":{\"250\":1}}],[\"一般为连接oracle\",{\"1\":{\"240\":1}}],[\"一般来说\",{\"1\":{\"220\":2}}],[\"一般条件判断会有像\",{\"1\":{\"168\":1}}],[\"一般自定义的索引都是二级索引\",{\"1\":{\"145\":1}}],[\"一般主键作为聚集索引\",{\"1\":{\"145\":1}}],[\"一般情况下\",{\"1\":{\"112\":1}}],[\"一般会用到模型层的代码\",{\"1\":{\"107\":1}}],[\"一般不包含业务逻辑\",{\"1\":{\"107\":1}}],[\"一本带领读者探索java世界的奇幻书籍\",{\"1\":{\"75\":1}}],[\"一群可爱的小伙伴闯入了他的生活\",{\"1\":{\"60\":1}}],[\"一步步逼近解锁所有大陆的目标\",{\"1\":{\"12\":1}}],[\"一片浩瀚的未知等待着他去探索\",{\"1\":{\"9\":1}}],[\"知识的呼唤\",{\"0\":{\"78\":1}}],[\"知识的升华\",{\"0\":{\"47\":1}}],[\"知识的指引\",{\"0\":{\"12\":1}}],[\"知识的宝藏没有尽头\",{\"1\":{\"40\":1}}],[\"知识的宝藏\",{\"1\":{\"0\":1,\"10\":1,\"21\":1}}],[\"每接收到一个客户端的socket管道\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"每页显示数\",{\"1\":{\"544\":1}}],[\"每页显示的条目数\",{\"1\":{\"523\":1}}],[\"每次读取的字节数不等于\",{\"1\":{\"995\":1,\"1400\":1}}],[\"每次读取一个字节数组\",{\"0\":{\"995\":1,\"1400\":1}}],[\"每次读取一个字节数组返回\",{\"1\":{\"994\":1,\"1399\":1}}],[\"每次读取一个字节返回\",{\"1\":{\"994\":1,\"1399\":1}}],[\"每次读取一个字节\",{\"0\":{\"994\":1,\"1399\":1},\"1\":{\"994\":1,\"1399\":1}}],[\"每次读一滴水\",{\"1\":{\"994\":1,\"1399\":1}}],[\"每次只能一个线程进入\",{\"1\":{\"933\":1,\"937\":1,\"1338\":1,\"1342\":1}}],[\"每次只能一个人进入访问\",{\"1\":{\"932\":1,\"1337\":1}}],[\"每次扩容之后容量都会变为原来的\",{\"1\":{\"831\":1,\"1236\":1}}],[\"每次扩容的时候\",{\"1\":{\"191\":1}}],[\"每次进行运算拼接都会new\",{\"1\":{\"764\":1,\"1169\":1}}],[\"每次创建对象\",{\"1\":{\"682\":1,\"1087\":1}}],[\"每次重试之间的间隔为10秒\",{\"1\":{\"494\":1}}],[\"每次浏览器向服务器请求时候\",{\"1\":{\"327\":1}}],[\"每次servlet被访问\",{\"1\":{\"298\":1}}],[\"每次请求\",{\"1\":{\"286\":1,\"297\":1}}],[\"每次查询都要定义一次别名\",{\"1\":{\"270\":1}}],[\"每次查找都会从根节点出发直到叶子结点\",{\"1\":{\"144\":1}}],[\"每次获取都会创建一个新的\",{\"1\":{\"158\":1,\"159\":1}}],[\"每隔一段时间\",{\"1\":{\"129\":1}}],[\"每秒刷盘\",{\"1\":{\"128\":1}}],[\"每执行一次命令\",{\"1\":{\"128\":1}}],[\"每个数据包的大小限制在64kb内\",{\"1\":{\"1443\":1}}],[\"每个结点最多有两个结点\",{\"1\":{\"854\":1,\"1259\":1}}],[\"每个元素包含两个元素\",{\"1\":{\"899\":1,\"1304\":1}}],[\"每个元素包含两个值\",{\"1\":{\"835\":1,\"1240\":1}}],[\"每个元素结点包含数据值和下一个元素的地址\",{\"1\":{\"853\":1,\"1258\":1}}],[\"每个元素\",{\"1\":{\"835\":1,\"1240\":1}}],[\"每个方法中单独书写\",{\"1\":{\"572\":1}}],[\"每个迁移脚本都会被视为一个独立的迁移单元\",{\"1\":{\"494\":1}}],[\"每个组织\",{\"1\":{\"243\":1}}],[\"每个家庭\",{\"1\":{\"243\":1}}],[\"每个连接最多缓存多少个sql\",{\"1\":{\"240\":1}}],[\"每个线程执行不同的任务\",{\"1\":{\"197\":1}}],[\"每个\",{\"1\":{\"159\":1,\"395\":1}}],[\"每个key通过crc16校验之后对16384取模来决定放入到哪个槽位\",{\"1\":{\"138\":1}}],[\"每个master都可以有多个slave节点\",{\"1\":{\"138\":1}}],[\"每个master保存不同的数据\",{\"1\":{\"138\":1}}],[\"每个请求被标记为属于特定的类别或组\",{\"1\":{\"108\":1}}],[\"每个子项目可以独立通过\",{\"1\":{\"98\":1}}],[\"每个子项目都有自己的\",{\"1\":{\"98\":1}}],[\"每个探险者都有自己擅长的领域\",{\"1\":{\"80\":1}}],[\"每个房间都隐藏着各种难题\",{\"1\":{\"79\":1}}],[\"每个冒险者都能在这个有趣的java世界中找到属于自己的精彩\",{\"1\":{\"48\":1}}],[\"每个人都可以通过学习和实践\",{\"1\":{\"8\":1}}],[\"每一个节点或是红色的\",{\"1\":{\"858\":1,\"1263\":1}}],[\"每一个结点可以是红或黑\",{\"1\":{\"857\":1,\"1262\":1}}],[\"每一个元素之间的分割符\",{\"1\":{\"280\":1}}],[\"每一个目录都像是一道指引\",{\"1\":{\"12\":1}}],[\"每一秒向集群的每一台实例发送ping命令\",{\"1\":{\"136\":1}}],[\"每一关都要求主角将之前学到的知识发挥到极致\",{\"1\":{\"79\":1}}],[\"每一次来自新\",{\"1\":{\"159\":1}}],[\"每一次\",{\"1\":{\"159\":2}}],[\"每一次执行快照读时生成readview\",{\"1\":{\"154\":1}}],[\"每一次巧妙的运用都让他更加接近绝地之地的真正宝藏\",{\"1\":{\"71\":1}}],[\"每一次都让他陷入迷茫和疲惫\",{\"1\":{\"11\":1}}],[\"探索的旅程永无终点\",{\"1\":{\"75\":1}}],[\"探索的艰辛\",{\"0\":{\"11\":1}}],[\"探索java的新应用领域\",{\"1\":{\"63\":1}}],[\"探索新的领域\",{\"0\":{\"63\":1}}],[\"探索未知的世界\",{\"0\":{\"49\":1}}],[\"探索知识的旅程永无止境\",{\"1\":{\"47\":1}}],[\"探索继承的力量\",{\"0\":{\"43\":1}}],[\"探索\",{\"1\":{\"27\":1}}],[\"探寻真相\",{\"0\":{\"20\":1}}],[\"探险者们终于来到了最终目的地\",{\"1\":{\"84\":1}}],[\"探险途中\",{\"1\":{\"52\":1}}],[\"探险旅程结束\",{\"1\":{\"8\":1}}],[\"探险的终点\",{\"0\":{\"75\":1}}],[\"探险的过程不应该只停留在控制台\",{\"1\":{\"57\":1}}],[\"探险的精髓\",{\"0\":{\"5\":1}}],[\"探险的第一步\",{\"0\":{\"2\":1}}],[\"是分配给上网设备的唯一标志\",{\"1\":{\"1428\":1}}],[\"是唯一的标识\",{\"1\":{\"1427\":1}}],[\"是内存程序的数据从内存写出到硬盘文件的过程\",{\"1\":{\"989\":1,\"1394\":1}}],[\"是数据从硬盘文件读入到内存的过程\",{\"1\":{\"989\":1,\"1394\":1}}],[\"是文件夹\",{\"1\":{\"981\":1,\"1386\":1}}],[\"是同步代码块好还是同步方法好\",{\"1\":{\"938\":1,\"1343\":1}}],[\"是runnable的对象\",{\"1\":{\"921\":1,\"1326\":1}}],[\"是root\",{\"1\":{\"347\":1,\"350\":1}}],[\"是不可以直接返回的\",{\"1\":{\"919\":1,\"1324\":1}}],[\"是不同的\",{\"1\":{\"648\":1,\"1053\":1}}],[\"是用来操作集合的工具类\",{\"1\":{\"894\":1,\"1299\":1}}],[\"是集合工具类\",{\"1\":{\"894\":1,\"1299\":1}}],[\"是jdk5中引入的新特性\",{\"1\":{\"868\":1,\"1273\":1}}],[\"是javaweb三大组件\",{\"1\":{\"337\":1}}],[\"是java语言最好的数据库连接池之一\",{\"1\":{\"237\":1}}],[\"是计算机科学中用到的一种数据结构\",{\"1\":{\"857\":1,\"1262\":1}}],[\"是空返回true\",{\"1\":{\"842\":1,\"1247\":1}}],[\"是单列集合的祖宗类\",{\"1\":{\"836\":1,\"1241\":1}}],[\"是放在堆内存中的\",{\"1\":{\"743\":1,\"1148\":1}}],[\"是就返回true\",{\"1\":{\"732\":1,\"1137\":1}}],[\"是没有问题的\",{\"1\":{\"717\":1,\"1122\":1}}],[\"是运行时才可能出错的\",{\"1\":{\"637\":1,\"1042\":1}}],[\"是可以继承父类的私有成员的\",{\"1\":{\"694\":1,\"1099\":1}}],[\"是可执行\",{\"1\":{\"441\":1}}],[\"是可写\",{\"1\":{\"441\":1}}],[\"是可读可执行不可写\",{\"1\":{\"441\":2}}],[\"是可读\",{\"1\":{\"441\":1}}],[\"是可选的选项\",{\"1\":{\"440\":1}}],[\"是普通文件\",{\"1\":{\"441\":1}}],[\"是很常用的指令\",{\"1\":{\"435\":1}}],[\"是非常有帮助的\",{\"1\":{\"435\":1}}],[\"是英文按键\",{\"1\":{\"435\":2}}],[\"是排列在一起的\",{\"1\":{\"435\":1}}],[\"是binary的缩写\",{\"1\":{\"428\":1}}],[\"是配置的key\",{\"1\":{\"413\":1}}],[\"是sectionname\",{\"1\":{\"413\":1}}],[\"是目前世界上除去spark以外\",{\"1\":{\"394\":1}}],[\"是目前世界上使用最多的大数据分布式计算引擎\",{\"1\":{\"391\":1}}],[\"是目前全文搜索引擎的首选\",{\"1\":{\"361\":1}}],[\"是hadoop和hbase的重要组件\",{\"1\":{\"374\":1}}],[\"是由\",{\"1\":{\"351\":1}}],[\"是由于主节点由于自身的网络问题导致主节点和从节点以及sentinel处于不同的网络分区\",{\"1\":{\"137\":1}}],[\"是来完成逻辑判断的\",{\"1\":{\"323\":1}}],[\"是强引用\",{\"1\":{\"222\":1}}],[\"是接口\",{\"1\":{\"215\":1}}],[\"是关键字\",{\"1\":{\"215\":1}}],[\"是个泛型\",{\"1\":{\"200\":1}}],[\"是个逻辑上的\",{\"1\":{\"166\":1}}],[\"是系统运行程序的基本单位\",{\"1\":{\"197\":1}}],[\"是指数据相互之间是以什么方式排列在一起的\",{\"1\":{\"849\":1,\"1254\":1}}],[\"是指在后台运行\",{\"1\":{\"424\":1}}],[\"是指分布式系统在遇到任何网络分区故障时\",{\"1\":{\"174\":1}}],[\"是指系统提供的服务必须一直处于可用的状态\",{\"1\":{\"174\":1}}],[\"是指更新操作成功并返回客户端完成后\",{\"1\":{\"174\":1}}],[\"是指包含可变的成员变量的对象\",{\"1\":{\"158\":1}}],[\"是返回的数据对象\",{\"1\":{\"166\":1}}],[\"是对单例设计模式的应用\",{\"1\":{\"159\":1}}],[\"是对知识的渴望与对探索的热情\",{\"1\":{\"90\":1}}],[\"是线程安全的\",{\"1\":{\"158\":1}}],[\"是有状态的话\",{\"1\":{\"158\":1}}],[\"是自增的\",{\"1\":{\"154\":1}}],[\"是帮助mysql高效获取数据的数据结构\",{\"1\":{\"143\":1}}],[\"是否可以同时接收多个客户端的消息\",{\"0\":{\"1462\":1}}],[\"是否需要取代\",{\"1\":{\"435\":1}}],[\"是否进行预分配内存\",{\"1\":{\"395\":1}}],[\"是否先检查该连接是否有效\",{\"1\":{\"240\":1}}],[\"是否先进入\",{\"1\":{\"10\":1}}],[\"是否将stack\",{\"1\":{\"240\":1}}],[\"是否是右边的类型或者是其子类型\",{\"1\":{\"732\":1,\"1137\":1}}],[\"是否是\",{\"1\":{\"198\":1}}],[\"是否是红黑树\",{\"1\":{\"190\":1}}],[\"是否为0\",{\"1\":{\"191\":1}}],[\"是否为treenode\",{\"1\":{\"190\":1}}],[\"是否支持快速随机访问\",{\"1\":{\"187\":1}}],[\"是否保证线程安全\",{\"1\":{\"187\":1}}],[\"是否配置有自定义的init\",{\"1\":{\"163\":1}}],[\"是否有状态\",{\"1\":{\"158\":1}}],[\"是否线程安全\",{\"1\":{\"158\":1}}],[\"是否开启aof功能\",{\"1\":{\"128\":1}}],[\"是基于内存的数据存储系统\",{\"1\":{\"139\":1}}],[\"是基于\",{\"1\":{\"106\":1}}],[\"是一样的\",{\"1\":{\"649\":1,\"1054\":1}}],[\"是一款分布式内存计算引擎\",{\"1\":{\"394\":1}}],[\"是一款知名的数据库系统\",{\"1\":{\"344\":1}}],[\"是一种saas服务\",{\"1\":{\"408\":1}}],[\"是一种分布式\",{\"1\":{\"388\":1}}],[\"是一种锁机制\",{\"1\":{\"213\":1}}],[\"是一种使用连续的内存空间存储相同类型的数据的线性数据结构\",{\"1\":{\"181\":1}}],[\"是一种用于实现分布式系统通信的协议和技术\",{\"1\":{\"106\":1}}],[\"是一个字符\",{\"1\":{\"648\":1,\"1053\":1}}],[\"是一个企业级分布式开源监控解决方案\",{\"1\":{\"396\":1}}],[\"是一个高性能的http和反向代理web服务器\",{\"1\":{\"355\":1}}],[\"是一个项目管理和构建的工具\",{\"1\":{\"249\":1}}],[\"是一个原子操作\",{\"1\":{\"211\":1}}],[\"是一个基于\",{\"1\":{\"117\":1}}],[\"是一个开源的免费的轻量级的web服务器\",{\"1\":{\"290\":1}}],[\"是一个开源的\",{\"1\":{\"110\":1}}],[\"是一个开源的构建工具\",{\"1\":{\"98\":1}}],[\"是一个用于自动构建和生成可交互接口文档的工具集\",{\"1\":{\"100\":1}}],[\"是\",{\"0\":{\"731\":1,\"1136\":1},\"1\":{\"99\":1,\"100\":1,\"207\":1,\"418\":1,\"422\":1}}],[\"是主角解锁java大陆全部知识的最后一道障碍\",{\"1\":{\"76\":1}}],[\"是我探险旅程中最大的挑战\",{\"1\":{\"6\":1}}],[\"踌躇不决\",{\"1\":{\"10\":1}}],[\"迷宫四处弥漫着浓重的迷雾\",{\"1\":{\"77\":1}}],[\"迷宫中充满了各种java语法的谜题和难题\",{\"1\":{\"30\":1}}],[\"迷茫的选择\",{\"0\":{\"10\":1}}],[\"迷失的起点\",{\"0\":{\"9\":1}}],[\"迷失的路途上仍然充满了重重挑战\",{\"1\":{\"14\":1}}],[\"迷失的路途\",{\"1\":{\"0\":1}}],[\"只包含一个值\",{\"1\":{\"835\":1,\"1240\":1}}],[\"只会寻找当前所在的本机\",{\"1\":{\"1431\":1}}],[\"只会过滤\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"只会删除第一个出现的元素\",{\"1\":{\"750\":1,\"1155\":1}}],[\"只会取代光标所在的那一个字符一次\",{\"1\":{\"436\":1}}],[\"只是锁的范围是整个方法代码块\",{\"1\":{\"938\":1,\"1343\":1}}],[\"只是每个元素又额外的多了一个双链表的机制记录存储的顺序\",{\"1\":{\"889\":1,\"1294\":1}}],[\"只是没有提供索引的方法\",{\"1\":{\"881\":1,\"1286\":1}}],[\"只是能不能直接访问\",{\"1\":{\"694\":1,\"1099\":1}}],[\"只是父类成员空间中的私有方法不能直接访问\",{\"1\":{\"694\":1,\"1099\":1}}],[\"只是不能直接访问\",{\"1\":{\"694\":1,\"1099\":1}}],[\"只读\",{\"1\":{\"437\":1}}],[\"只允许在mysql所在的linux服务器登陆mysql系统\",{\"1\":{\"350\":1}}],[\"只允许一个线程重新生成缓存\",{\"1\":{\"115\":1}}],[\"只执行一次\",{\"1\":{\"298\":1,\"682\":1,\"1087\":1}}],[\"只具有弱引用的对象拥有更短暂的生命周期\",{\"1\":{\"222\":1}}],[\"只命中了name一个索引\",{\"1\":{\"150\":1}}],[\"只截取前面几个字符串来创建索引\",{\"1\":{\"149\":1}}],[\"只查询这个id列表中的数据就可以了\",{\"1\":{\"148\":1}}],[\"只能与一个客户进行通信\",{\"1\":{\"1462\":1}}],[\"只能删除空文件夹或文件\",{\"1\":{\"969\":1,\"1374\":1}}],[\"只能创建一级文件夹\",{\"1\":{\"968\":1,\"1373\":1}}],[\"只能向后查找\",{\"1\":{\"853\":1,\"1258\":1}}],[\"只能向着陌生的方向前行\",{\"1\":{\"9\":1}}],[\"只能那public的\",{\"1\":{\"808\":2,\"810\":1,\"1213\":2,\"1215\":1}}],[\"只能取出public的构造器\",{\"1\":{\"804\":1,\"1209\":1}}],[\"只能获取public修饰的构造器\",{\"1\":{\"804\":1,\"1209\":1}}],[\"只能拿public的\",{\"1\":{\"804\":3,\"810\":1,\"1209\":3,\"1215\":1}}],[\"只能操作整数类型的元素\",{\"1\":{\"749\":1,\"1154\":1}}],[\"只能操作字符串类型的元素\",{\"1\":{\"749\":1,\"1154\":1}}],[\"只能在本类中其他的默认方法或者私有方法访问\",{\"1\":{\"721\":1,\"1126\":1}}],[\"只能访问静态成员\",{\"1\":{\"680\":1,\"1085\":1}}],[\"只能用于对象触发访问\",{\"1\":{\"677\":1,\"1082\":1}}],[\"只能转发到当前服务器内部资源\",{\"1\":{\"310\":1}}],[\"只能有一个线程可以获取\",{\"1\":{\"210\":1}}],[\"只能返回一条数据\",{\"1\":{\"142\":1}}],[\"只需要把链\",{\"1\":{\"853\":1,\"1258\":1}}],[\"只需要配置如下内容即可\",{\"1\":{\"414\":1}}],[\"只需要引入\",{\"1\":{\"110\":1}}],[\"只需要修改配置文件\",{\"1\":{\"96\":1}}],[\"只要两个结果内容一样\",{\"1\":{\"888\":1,\"891\":1,\"896\":1,\"1293\":1,\"1296\":1,\"1301\":1}}],[\"只要知晓服务器的账户和密码\",{\"1\":{\"373\":1}}],[\"只要hash不冲突\",{\"1\":{\"217\":1}}],[\"只要有坚持和勇气\",{\"1\":{\"17\":1}}],[\"只要有耐心和勇气去探索\",{\"1\":{\"4\":1}}],[\"只要保持坚持和信念\",{\"1\":{\"16\":1}}],[\"只有函数的定义\",{\"1\":{\"1030\":1,\"1480\":1}}],[\"只有在运行时s2才能确定时\",{\"1\":{\"743\":1,\"1148\":1}}],[\"只有方法签名\",{\"1\":{\"709\":1,\"1114\":1}}],[\"只有参数\",{\"1\":{\"442\":1}}],[\"只有一个会胜出\",{\"1\":{\"211\":1}}],[\"只有一个客户端能够成功设置键的值\",{\"1\":{\"117\":1}}],[\"只有最左索引生效\",{\"1\":{\"150\":1}}],[\"只有所有获取锁的次数都释放后\",{\"1\":{\"117\":1}}],[\"只有抢到锁的服务器实例才会执行定时任务\",{\"1\":{\"116\":1}}],[\"只有不断学习和进步\",{\"1\":{\"90\":1}}],[\"只有不断学习与变革\",{\"1\":{\"67\":1}}],[\"只有不断提升自己的编程水平\",{\"1\":{\"81\":1}}],[\"只有掌握更广泛和更深入的技术\",{\"1\":{\"54\":1}}],[\"只有解开所有的谜题\",{\"1\":{\"21\":1}}],[\"只有通过掌握全面的java知识\",{\"1\":{\"78\":1}}],[\"只有通过合理运用已学知识和勇气面对\",{\"1\":{\"72\":1}}],[\"只有通过不断学习和练习\",{\"1\":{\"70\":1}}],[\"只有通过学习java的种种知识\",{\"1\":{\"20\":1}}],[\"只有通过这一关\",{\"1\":{\"15\":1}}],[\"只有经历过艰辛才能成长\",{\"1\":{\"11\":1}}],[\"当调用者是一个需要权限才能进入的文件夹时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用者是一个有隐藏文件的文件夹时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用者是一个有内容的文件夹时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用者是一个空文件夹时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用者是一个文件时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用者不存在时\",{\"1\":{\"971\":1,\"1376\":1}}],[\"当调用了toarray以后\",{\"1\":{\"186\":1}}],[\"当等待的线程超过5的时候\",{\"1\":{\"948\":1,\"1353\":1}}],[\"当挂在元素下面的数据过多时\",{\"1\":{\"888\":1,\"1293\":1}}],[\"当删除元素的时候会把后面的元素全部迁移过来\",{\"1\":{\"863\":1,\"1268\":1}}],[\"当插入的时候\",{\"1\":{\"863\":1,\"1268\":1}}],[\"当元素的size等于10\",{\"1\":{\"863\":1,\"1268\":1}}],[\"当时被称为平衡二叉b树\",{\"1\":{\"857\":1,\"1262\":1}}],[\"当时是一个秒杀优惠券的功能\",{\"1\":{\"176\":1}}],[\"当\",{\"1\":{\"831\":2,\"1236\":2}}],[\"当且仅当参数不为null并且是表示与此对象相同的字符序列的string对象时\",{\"1\":{\"758\":1,\"1163\":1}}],[\"当执行命令的时候会根据上面path的信息依次去对应的路径下查找该命令并执行\",{\"1\":{\"484\":1}}],[\"当中察看\",{\"1\":{\"437\":1}}],[\"当中\",{\"1\":{\"437\":1}}],[\"当识别后\",{\"1\":{\"428\":1}}],[\"当系统非法关机后\",{\"1\":{\"428\":1}}],[\"当用户退出\",{\"1\":{\"424\":1}}],[\"当用户只传入一个参数的时候\",{\"1\":{\"272\":1}}],[\"当浏览器发送请求2的时候\",{\"1\":{\"334\":1}}],[\"当浏览器关闭\",{\"1\":{\"331\":2}}],[\"当浏览器请求hello\",{\"1\":{\"319\":1}}],[\"当servlet被销毁时\",{\"1\":{\"298\":1}}],[\"当servlet第一次被访问的时候\",{\"1\":{\"297\":1}}],[\"当需要释放内存或者容器关闭时\",{\"1\":{\"297\":1}}],[\"当需要该key的时候我们在检查他是否过期\",{\"1\":{\"129\":1}}],[\"当只传入brandname时\",{\"1\":{\"272\":1}}],[\"当项目使用坐标引入对应的依赖jar包\",{\"1\":{\"250\":1}}],[\"当程序请求连接\",{\"1\":{\"240\":1}}],[\"当程序从池中get到连接开始算起\",{\"1\":{\"240\":1}}],[\"当druid强制回收连接后\",{\"1\":{\"240\":1}}],[\"当发现程序有未\",{\"1\":{\"240\":1}}],[\"当所有线程都在繁忙\",{\"1\":{\"219\":1}}],[\"当没有空闲核心线程时\",{\"1\":{\"219\":1}}],[\"当多个线程同时使用\",{\"1\":{\"211\":1}}],[\"当链表长度大于为8时\",{\"1\":{\"189\":1}}],[\"当添加到第11个元素的时候\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"当然也允许失败的线程放弃操作\",{\"1\":{\"211\":1}}],[\"当然最快解决大量消息堆积的方法就是添加多个消费者\",{\"1\":{\"179\":1}}],[\"当然在缓存重构之前需要再次查询缓存是否存在数据\",{\"1\":{\"125\":1}}],[\"当集群中存在非临时实例时\",{\"1\":{\"173\":1}}],[\"当集群发送故障转移时\",{\"1\":{\"136\":1}}],[\"当事务回滚时\",{\"1\":{\"153\":1}}],[\"当⼀个事务执⾏期间发⽣故\",{\"1\":{\"151\":1}}],[\"当前主机与选定的一组主机的通信\",{\"1\":{\"1452\":1}}],[\"当前主机与所在网络中的所有主机通信\",{\"1\":{\"1452\":1}}],[\"当前正在执行的线程\",{\"1\":{\"926\":1,\"1331\":1}}],[\"当前线程对象\",{\"1\":{\"924\":1,\"1329\":1}}],[\"当前线程放弃更新\",{\"1\":{\"211\":1}}],[\"当前队伍\",{\"1\":{\"865\":1,\"1270\":1}}],[\"当前集合索引为0\",{\"1\":{\"844\":1,\"1249\":1}}],[\"当前页码值\",{\"1\":{\"544\":1}}],[\"当前页码\",{\"1\":{\"523\":1}}],[\"当前页面有效\",{\"1\":{\"322\":1}}],[\"当前应用有效\",{\"1\":{\"322\":1}}],[\"当前会话有效\",{\"1\":{\"322\":1}}],[\"当前请求有效\",{\"1\":{\"322\":1}}],[\"当前项目的jar包\",{\"1\":{\"258\":1,\"264\":1}}],[\"当前索引占用的大小\",{\"1\":{\"142\":1}}],[\"当前sql实际命中的索引\",{\"1\":{\"142\":1}}],[\"当前sql可能使用到的索引\",{\"1\":{\"142\":1}}],[\"当有很多线程执行的时候\",{\"1\":{\"924\":1,\"1329\":1}}],[\"当有慢查询的时候\",{\"1\":{\"141\":1}}],[\"当有一个key经过3次hash计算后模数组长度得到的3个下标对应的都是1的时候就会直接认为该数据存在\",{\"1\":{\"124\":1}}],[\"当网络恢复的时候\",{\"1\":{\"137\":1}}],[\"当故障恢复后还是以新提升的master位主节点\",{\"1\":{\"136\":1}}],[\"当好内存达到限制时\",{\"1\":{\"130\":1}}],[\"当内存达到限制时\",{\"1\":{\"130\":4}}],[\"当内存打到限制时\",{\"1\":{\"130\":1}}],[\"当redis中内存不够用的时候\",{\"1\":{\"130\":1}}],[\"当redis出现故障重启后\",{\"1\":{\"128\":1}}],[\"当大量的key都过期了\",{\"1\":{\"129\":1}}],[\"当修改的时候不需要操作缓存\",{\"1\":{\"127\":1}}],[\"当修改了数据库中的数据\",{\"1\":{\"127\":1}}],[\"当该key过期了\",{\"1\":{\"125\":1}}],[\"当一个key来了之后经过3次hash计算\",{\"1\":{\"124\":1}}],[\"当请求再次来到的时候\",{\"1\":{\"124\":1}}],[\"当查询数据库中没有数据的时候\",{\"1\":{\"124\":1}}],[\"当客户端执行完锁保护的操作后\",{\"1\":{\"117\":1}}],[\"当客户端请求获取锁时\",{\"1\":{\"117\":1}}],[\"当锁的超时时间到达后\",{\"1\":{\"117\":1}}],[\"当定时任务要执行时\",{\"1\":{\"116\":1}}],[\"当数据库数据发生变化时\",{\"1\":{\"115\":1}}],[\"当线程池无法接受新的任务时\",{\"1\":{\"112\":1}}],[\"当线程池中的线程数量超过核心线程数时\",{\"1\":{\"112\":1}}],[\"当主角来到java大陆的时候\",{\"1\":{\"9\":1}}],[\"当我们调用了add方法将指定的元素添加到elementdata末尾的时候\",{\"1\":{\"831\":1,\"1236\":1}}],[\"当我们写下了如下代码arraylist<integer>\",{\"1\":{\"831\":1,\"1236\":1}}],[\"当我们new了一个子类构造器\",{\"1\":{\"694\":1,\"1099\":1}}],[\"当我们堆内存中的对象\",{\"1\":{\"665\":1,\"1070\":1}}],[\"当我们知道root密码的时候\",{\"1\":{\"462\":1}}],[\"当我们密码输入\",{\"1\":{\"233\":1}}],[\"当我们启动\",{\"1\":{\"197\":1}}],[\"当我们往hashmap中put元素时\",{\"1\":{\"188\":1}}],[\"当我们第一次调用add方法进行添加元素的时候\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"当我们创建一个arraylist对象的时候\",{\"1\":{\"183\":1,\"831\":1,\"1236\":1}}],[\"当我们创建了一个数组比如\",{\"1\":{\"182\":1}}],[\"当我们对一个key进行多次的写操作的时候\",{\"1\":{\"128\":1}}],[\"当我击败终极boss后\",{\"1\":{\"7\":1}}],[\"当我解锁了一门门的知识和技能时\",{\"1\":{\"4\":1}}],[\"领略到学习和实践的乐趣\",{\"1\":{\"8\":1}}],[\"但可以有多个非抽象方法的接口\",{\"1\":{\"1024\":1,\"1474\":1}}],[\"但可以有主观回答\",{\"1\":{\"98\":1}}],[\"但打开火柴的旗帜\",{\"1\":{\"819\":1,\"1224\":1}}],[\"但以\",{\"1\":{\"819\":1,\"1224\":1}}],[\"但引用以下字符\",{\"1\":{\"819\":1,\"1224\":1}}],[\"但不运行\",{\"1\":{\"1026\":1,\"1476\":1}}],[\"但不包含世界上所有国家的文字\",{\"1\":{\"985\":1,\"1390\":1}}],[\"但不超过m次\",{\"1\":{\"819\":3,\"1224\":3}}],[\"但不利于资源的管理和保护\",{\"1\":{\"197\":1}}],[\"但对于最终终止者\",{\"1\":{\"819\":1,\"1224\":1}}],[\"但对java大陆的热爱将永远留存\",{\"1\":{\"8\":1}}],[\"但如果是按下\",{\"1\":{\"435\":1}}],[\"但失败的线程并不会被挂起\",{\"1\":{\"211\":1}}],[\"但线程是一个比进程更小的执行单位\",{\"1\":{\"197\":1}}],[\"但却对多个对象产生影响的公共行为和逻辑\",{\"1\":{\"160\":1}}],[\"但在事务完成时必须保证数据的⼀致性\",{\"1\":{\"151\":1}}],[\"但也可以根据需要设置有界队列\",{\"1\":{\"112\":1}}],[\"但探险的世界从来没有真正的终点\",{\"1\":{\"90\":1}}],[\"但凭借着坚韧的毅力和智慧\",{\"1\":{\"85\":1}}],[\"但他并没有止步于此\",{\"1\":{\"49\":1}}],[\"但他明白\",{\"1\":{\"11\":1}}],[\"但是上一桶水最后一个位置还有一滴水c\",{\"1\":{\"995\":1,\"1400\":1}}],[\"但是中文是三个字节\",{\"1\":{\"994\":1,\"1399\":1}}],[\"但是不能读写文件\",{\"1\":{\"965\":1,\"1370\":1}}],[\"但是不建议长期使用root用户\",{\"1\":{\"462\":1}}],[\"但是代码要高度面向对象\",{\"1\":{\"937\":1,\"938\":1,\"1342\":1,\"1343\":1}}],[\"但是元素不重复\",{\"1\":{\"892\":2,\"1297\":2}}],[\"但是就不检测这个移动过来的元素了\",{\"1\":{\"866\":1,\"1271\":1}}],[\"但是第二个\",{\"1\":{\"831\":1,\"1236\":1}}],[\"但是我们看到运用反射得到在运行阶段的时候list1和list2的类型都是arraylist的\",{\"1\":{\"814\":1,\"1219\":1}}],[\"但是我们大多数都是想要比较内容是否相同\",{\"1\":{\"756\":1,\"1161\":1}}],[\"但是math中的方法都是静态的\",{\"1\":{\"766\":1,\"1171\":1}}],[\"但是吃骨头是狗独有的行为方法\",{\"0\":{\"731\":1,\"1136\":1}}],[\"但是有抽象方法的一定是抽象类\",{\"1\":{\"710\":1,\"1115\":1}}],[\"但是每个子类完成的情况不一样\",{\"1\":{\"709\":1,\"1114\":1}}],[\"但是内容可以改变\",{\"1\":{\"703\":1,\"1108\":1}}],[\"但是支持多层继承\",{\"1\":{\"693\":1,\"1098\":1}}],[\"但是子类不能继承父类的构造器\",{\"1\":{\"693\":1,\"1098\":1}}],[\"但是只能有一个类是用public修饰符\",{\"1\":{\"659\":1,\"1064\":1}}],[\"但是得有一个空格\",{\"1\":{\"517\":1}}],[\"但是依然可以使用标准输入\",{\"1\":{\"424\":1}}],[\"但是要花钱的\",{\"1\":{\"408\":1}}],[\"但是底层的字符编码始终没有改变\",{\"1\":{\"309\":2}}],[\"但是tomcat默认的获取流的数据的编码是iso\",{\"1\":{\"309\":3}}],[\"但是如果要在指定位置\",{\"1\":{\"187\":1}}],[\"但是这个arraylist是arrays类的内部类\",{\"1\":{\"185\":1}}],[\"但是出现跳过某一列\",{\"1\":{\"150\":1}}],[\"但是仅仅返回9000000\",{\"1\":{\"148\":1}}],[\"但是为什么还那么快\",{\"0\":{\"139\":1}}],[\"但是可以使用redisson提供的红锁redlock\",{\"1\":{\"134\":1}}],[\"但是没有人访问他\",{\"1\":{\"129\":1}}],[\"但是aof中还是记录了所有的操作\",{\"1\":{\"128\":1}}],[\"但是实际不存在\",{\"1\":{\"124\":1}}],[\"但是最好实践过\",{\"1\":{\"112\":1}}],[\"但是用户的简介有\",{\"1\":{\"111\":1}}],[\"但是现在他面临着一个关键问题\",{\"1\":{\"59\":1}}],[\"但是\",{\"1\":{\"46\":1,\"616\":1}}],[\"但主角并不气馁\",{\"1\":{\"25\":1}}],[\"但这只是一个新的开始\",{\"1\":{\"18\":1}}],[\"但我用毅力和努力克服了每一个障碍\",{\"1\":{\"3\":1}}],[\"这套编号规则就是字符集\",{\"1\":{\"983\":1,\"1388\":1}}],[\"这句代码实际上创建了0个对象\",{\"1\":{\"743\":1,\"1148\":1}}],[\"这点和c++不一样\",{\"1\":{\"693\":1,\"1098\":1}}],[\"这点和c语言不同\",{\"1\":{\"649\":1,\"1054\":1}}],[\"这不符合逻辑\",{\"1\":{\"691\":1,\"1096\":1}}],[\"这不仅仅是学习java的旅程\",{\"1\":{\"27\":1}}],[\"这会儿编译器的算法是通过二分查找法\",{\"1\":{\"653\":1,\"1058\":1}}],[\"这意味着该方法中的数据库操作将不会受到外部事务的影响\",{\"1\":{\"616\":1}}],[\"这三种模式的作用分别是\",{\"1\":{\"431\":1}}],[\"这时候进行字符串比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"这时候删除了本位置的元素\",{\"1\":{\"751\":1,\"1156\":1}}],[\"这时候我们不能知道传进来的到底是猫是狗\",{\"1\":{\"732\":1,\"1137\":1}}],[\"这时候可能会有人想\",{\"1\":{\"691\":1,\"1096\":1}}],[\"这时候从节点会同步主节点的数据\",{\"1\":{\"137\":1}}],[\"这时就容易发生死锁\",{\"1\":{\"216\":1}}],[\"这也是switch语句执行起来高效的原因\",{\"1\":{\"653\":1,\"1058\":1}}],[\"这也是threadlocal变量名的由来\",{\"1\":{\"221\":1}}],[\"这也是比较推荐的做法\",{\"1\":{\"184\":1}}],[\"这也是三级缓存的关键\",{\"1\":{\"164\":1}}],[\"这也正是终极试炼的真正考验\",{\"1\":{\"77\":1}}],[\"这种运行时动态获取类信息以及动态调用类中的成分的能力称为java语言的反射机制\",{\"1\":{\"798\":1,\"1203\":1}}],[\"这种方法在编译阶段会把常量名改为字面意思\",{\"1\":{\"704\":1,\"1109\":1}}],[\"这种方式还可以\",{\"1\":{\"635\":1,\"1040\":1}}],[\"这种方式并不好\",{\"1\":{\"634\":1,\"1039\":1}}],[\"这种思想就是控制反转\",{\"1\":{\"582\":1}}],[\"这种时候\",{\"1\":{\"422\":1}}],[\"这种情况时间复杂度就是\",{\"1\":{\"187\":1}}],[\"这种情况下\",{\"1\":{\"158\":1}}],[\"这种数据结构就是索引\",{\"1\":{\"143\":1}}],[\"这种单线程模型的优点是可以避免多线程并发访问共享数据时的竞争和死锁问题\",{\"1\":{\"139\":1}}],[\"这种删除规则称之为内存的淘汰策略\",{\"1\":{\"130\":1}}],[\"这种删除规则就称为数据的删除策略\",{\"1\":{\"129\":1}}],[\"这样即可接收该组播消息\",{\"1\":{\"1454\":1}}],[\"这样会严重影响系统的性能\",{\"1\":{\"940\":1,\"1345\":1}}],[\"这样重写的方法都是针对与该类型的操作\",{\"1\":{\"876\":1,\"1281\":1}}],[\"这样只会浪费内存\",{\"1\":{\"679\":1,\"1084\":1}}],[\"这样后面的名称就是这个选项需要的\",{\"1\":{\"490\":1}}],[\"这样用户可以快速响应服务器问题\",{\"1\":{\"396\":1}}],[\"这样在我们不使用flink集群时候不会占用集群资源\",{\"1\":{\"395\":1}}],[\"这样在读的时候其他线程是不可以写的但是可以读\",{\"1\":{\"127\":1}}],[\"这样可读性更高\",{\"1\":{\"282\":1}}],[\"这样可以快速解决大量消息堆积的问题\",{\"1\":{\"179\":1}}],[\"这样可以保证强一致性\",{\"1\":{\"127\":1}}],[\"这样一来\",{\"1\":{\"222\":1}}],[\"这样就解决了安全问题\",{\"1\":{\"931\":1,\"1336\":1}}],[\"这样就可以让所有的动物都被game方法接收\",{\"1\":{\"726\":1,\"1131\":1}}],[\"这样就可以得到一个完整的arraylist对象了\",{\"1\":{\"184\":1}}],[\"这样就可以保证消息的顺序消费\",{\"1\":{\"177\":1}}],[\"这样就可以在这些数据结构上实现高效的查找算法\",{\"1\":{\"143\":1}}],[\"这样就可以解决缓存同时过期的问题\",{\"1\":{\"126\":1}}],[\"这样就会导致客户端还是在老的主节点那里写入数据\",{\"1\":{\"137\":1}}],[\"这样就存在了两个master\",{\"1\":{\"137\":1}}],[\"这样主节点宕机即使没有来得及同步从节点从节点中也是有锁的\",{\"1\":{\"134\":1}}],[\"这样做在大量请求的情况下会极大的影响到读的效率\",{\"1\":{\"127\":1}}],[\"这样的好处是可以极大的减少缓存不一致的情况\",{\"1\":{\"127\":1}}],[\"这样的做法有什么好处\",{\"0\":{\"111\":1}}],[\"这样3个数组的位置就能确定一个key是否存在\",{\"1\":{\"124\":1}}],[\"这将删除锁的标识键\",{\"1\":{\"117\":1}}],[\"这将是他们最后一次为解锁整个大陆而奋斗的机会\",{\"1\":{\"65\":1}}],[\"这场试炼涉及到各种高级java知识和编程挑战\",{\"1\":{\"88\":1}}],[\"这次会话还在\",{\"1\":{\"329\":1}}],[\"这次终极试炼不仅是主角个人成长的历程\",{\"1\":{\"83\":1}}],[\"这次的探险只是一个起点\",{\"1\":{\"74\":1}}],[\"这让主角渐渐明白\",{\"1\":{\"78\":1}}],[\"这就是函数式接口的意义所在\",{\"1\":{\"1030\":1,\"1480\":1}}],[\"这就是并发\",{\"1\":{\"959\":1,\"1364\":1}}],[\"这就是非常经典的bug\",{\"1\":{\"751\":1,\"1156\":1}}],[\"这就是借助了环境变量中的path这个项目值来做的\",{\"1\":{\"484\":1}}],[\"这就是小数点\",{\"1\":{\"435\":1}}],[\"这就是\",{\"1\":{\"75\":1}}],[\"这一路上\",{\"1\":{\"73\":1}}],[\"这一次\",{\"1\":{\"32\":1,\"72\":1}}],[\"这片土地遍布无尽的挑战和难题\",{\"1\":{\"69\":1}}],[\"这只是他们新征程的开端\",{\"1\":{\"67\":1}}],[\"这只是java大陆的一角\",{\"1\":{\"27\":1}}],[\"这启发了主角\",{\"1\":{\"60\":1}}],[\"这里只能放置资源对象\",{\"1\":{\"1001\":1,\"1406\":1}}],[\"这里只是为了说明返回的类型起到了一个模板的作用\",{\"1\":{\"184\":1}}],[\"这里采用它的实现类reentrantlock来构建lock对象\",{\"1\":{\"939\":1,\"1344\":1}}],[\"这里的代码会等待\",{\"1\":{\"921\":1,\"1326\":1}}],[\"这里的有序指的是保证存储和取出的元素顺序一致\",{\"1\":{\"889\":1,\"1294\":1}}],[\"这里转换为object是因为\",{\"1\":{\"842\":1,\"1247\":1}}],[\"这里看到arraylist添加元素的实质就相当于为数组赋值\",{\"1\":{\"831\":1,\"1236\":1}}],[\"这里我指定\",{\"1\":{\"495\":1}}],[\"这里我直接填写表达式为\",{\"1\":{\"160\":1}}],[\"这里就存放了一些文件\",{\"1\":{\"428\":1}}],[\"这里存放的是系统管理员使用的系统管理程序\",{\"1\":{\"428\":1}}],[\"这里起名叫itheima\",{\"1\":{\"405\":1}}],[\"这里配置的是插件\",{\"1\":{\"240\":1}}],[\"这里备份也是在子进程中执行的\",{\"1\":{\"128\":1}}],[\"这里需要保证mq的消息可靠性\",{\"1\":{\"127\":1}}],[\"这里是开启json数据转对象\",{\"1\":{\"566\":1}}],[\"这里是异常的迷雾\",{\"1\":{\"45\":1}}],[\"这里是一个栩栩如生的虚拟世界\",{\"1\":{\"38\":1}}],[\"这里是一个浩瀚的数据结构森林\",{\"1\":{\"34\":1}}],[\"这里被称为\",{\"1\":{\"21\":1}}],[\"这段探索之旅将永远铭刻在他的记忆中\",{\"1\":{\"27\":1}}],[\"这本书是他探险旅程的记录\",{\"1\":{\"75\":1}}],[\"这本\",{\"1\":{\"18\":1}}],[\"这个接口就必须是函数式接口\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"这个string的api非常重要\",{\"1\":{\"995\":1,\"1400\":1}}],[\"这个status代表是否有锁的状态\",{\"1\":{\"213\":1}}],[\"这个buffer是桶中的字节数据\",{\"1\":{\"995\":1,\"1400\":1}}],[\"这个boss拥有着各种高级的技能和知识\",{\"1\":{\"6\":1}}],[\"这个为什么没有在编译时进行优化呢\",{\"1\":{\"743\":1,\"1148\":1}}],[\"这个以后讲述\",{\"1\":{\"738\":1,\"1143\":1}}],[\"这个语法jdk8不支持\",{\"1\":{\"721\":1,\"1126\":1}}],[\"这个类重写该方法即可\",{\"1\":{\"717\":1,\"1122\":1}}],[\"这个类就可以是一个抽象类\",{\"1\":{\"709\":1,\"1114\":1}}],[\"这个表中要作为外键的列\",{\"1\":{\"526\":1}}],[\"这个表达式可以匹配controller包中所有的方法\",{\"1\":{\"160\":1}}],[\"这个档案\",{\"1\":{\"437\":1}}],[\"这个档案内容加到游标所在行后面\",{\"1\":{\"437\":1}}],[\"这个\",{\"1\":{\"435\":3}}],[\"这个字符串\",{\"1\":{\"435\":3}}],[\"这个目录中存放着不断扩充的东西\",{\"1\":{\"428\":1}}],[\"这个目录用来存放一些临时文件的\",{\"1\":{\"428\":1}}],[\"这个目录是一个虚拟目录\",{\"1\":{\"428\":1}}],[\"这个目录一般情况下是空的\",{\"1\":{\"428\":1}}],[\"这个目录存放最经常使用的命令\",{\"1\":{\"428\":1}}],[\"这个抽象实现类又有httpservlet抽象实现类\",{\"1\":{\"299\":1}}],[\"这个例子中\",{\"1\":{\"277\":1}}],[\"这个时候就不需要用多态了\",{\"1\":{\"865\":1,\"1270\":1}}],[\"这个时候就可以传给double类型的参数了\",{\"1\":{\"774\":1,\"1179\":1}}],[\"这个时候就可能会产生内存泄露\",{\"1\":{\"222\":1}}],[\"这个时候23会自动装箱成为integer对象\",{\"1\":{\"840\":1,\"1245\":1}}],[\"这个时候原来的动物对象就被确认确确实实是狗\",{\"0\":{\"731\":1,\"1136\":1}}],[\"这个时候出现了一个问题\",{\"1\":{\"273\":1}}],[\"这个我曾经看过arrays\",{\"1\":{\"185\":1}}],[\"这个我们可以设置误判率\",{\"1\":{\"124\":1}}],[\"这个注解是对三个注解进行了封装\",{\"1\":{\"168\":1}}],[\"这个是有两种情况\",{\"1\":{\"164\":1}}],[\"这个走b的创建的逻辑\",{\"1\":{\"164\":1}}],[\"这个模块被命名为切面\",{\"1\":{\"160\":1}}],[\"这个过程就是回表查询\",{\"1\":{\"146\":1}}],[\"这个过期时间需要根据具体的业务复杂度来设置\",{\"1\":{\"125\":1}}],[\"这个标记可以是请求头中的特定字段\",{\"1\":{\"108\":1}}],[\"这个团队精神不仅让主角获得了宝贵的友情\",{\"1\":{\"80\":1}}],[\"这个关卡被称为\",{\"1\":{\"76\":1}}],[\"这个城市因为其神秘的力量和知识的宝藏而闻名\",{\"1\":{\"28\":1}}],[\"这个故事告诉我们\",{\"1\":{\"17\":1,\"68\":1}}],[\"这个试炼将是他迷失路途中最关键的战斗\",{\"1\":{\"15\":1}}],[\"这些函数式接口用的最多的地方就是方法参数\",{\"1\":{\"1030\":1,\"1480\":1}}],[\"这些nill视为叶节点\",{\"1\":{\"858\":1,\"1263\":1}}],[\"这些选项可以在\",{\"1\":{\"410\":1}}],[\"这些功能使得\",{\"1\":{\"396\":1}}],[\"这些环节的软件安装\",{\"1\":{\"389\":1}}],[\"这些是临时变量\",{\"1\":{\"386\":1}}],[\"这些逗号是在使用条件语句给列赋值时引入的\",{\"1\":{\"277\":1}}],[\"这些步骤很耗时\",{\"1\":{\"234\":1}}],[\"这些都有对应的解决方案\",{\"1\":{\"176\":1}}],[\"这些都是他迷茫的选择\",{\"1\":{\"10\":1}}],[\"这些操作要么同时成功\",{\"1\":{\"151\":1}}],[\"这些数据结构以某种方式引用数据\",{\"1\":{\"143\":1}}],[\"这些并发请求可能会瞬间把数据库压垮\",{\"1\":{\"125\":1}}],[\"这些经验让他们在战斗中更加得心应手\",{\"1\":{\"87\":1}}],[\"这些邪恶势力不仅破坏了大陆的秩序\",{\"1\":{\"84\":1}}],[\"这些成为主角在绝地之地中的宝贵武器\",{\"1\":{\"70\":1}}],[\"这些技能的提升将为他继续探索java大陆打下坚实的基础\",{\"1\":{\"58\":1}}],[\"这些物品代表了不同的类和对象\",{\"1\":{\"33\":1}}],[\"这些挑战让他更加坚定了自己的决心\",{\"1\":{\"14\":1}}],[\"这是赛车游戏\",{\"1\":{\"878\":1,\"1283\":1}}],[\"这是多态的写法\",{\"1\":{\"738\":2,\"1143\":2}}],[\"这是不符合逻辑的\",{\"0\":{\"731\":1,\"1136\":1}}],[\"这是共享的\",{\"1\":{\"695\":1,\"1100\":1}}],[\"这是大写的\",{\"1\":{\"437\":1}}],[\"这是英文字母\",{\"1\":{\"436\":1}}],[\"这是数字\",{\"1\":{\"435\":1}}],[\"这是另一个给主机额外安装软件所安装的目录\",{\"1\":{\"428\":1}}],[\"这是给主机额外安装软件所摆放的目录\",{\"1\":{\"428\":1}}],[\"这是linux2\",{\"1\":{\"428\":1}}],[\"这是他们的故事\",{\"1\":{\"90\":1}}],[\"这是他永恒的使命\",{\"1\":{\"75\":1}}],[\"这是他学习java的起点\",{\"1\":{\"21\":1}}],[\"这是一场全新的冒险\",{\"1\":{\"58\":1}}],[\"这是一个非常重要的目录\",{\"1\":{\"428\":1}}],[\"这是一个充满考验与困难的场所\",{\"1\":{\"26\":1}}],[\"这是一个考验他所有知识和技能的关卡\",{\"1\":{\"15\":1}}],[\"这是一段充满挑战和奇迹的旅程\",{\"1\":{\"7\":1}}],[\"这是开始\",{\"1\":{\"2\":1}}],[\"学会使用lambda表达式简化匿名内部类\",{\"1\":{\"1018\":1,\"1468\":1}}],[\"学会使用字节流完成文件的复制\",{\"1\":{\"998\":1,\"1000\":1,\"1001\":1,\"1403\":1,\"1405\":1,\"1406\":1}}],[\"学会创建file对象\",{\"1\":{\"965\":1,\"969\":1,\"1370\":1,\"1374\":1}}],[\"学会stringbuilder操作字符串\",{\"1\":{\"763\":1,\"1168\":1}}],[\"学会了面向对象编程\",{\"1\":{\"70\":1}}],[\"学会了如何在解决各种实际问题时\",{\"1\":{\"35\":1}}],[\"学会了如何运用各种库和框架来实现复杂的应用程序\",{\"1\":{\"4\":1}}],[\"学会了如何创建和运行简单的程序\",{\"1\":{\"3\":1}}],[\"学生\",{\"1\":{\"875\":1,\"1280\":1}}],[\"学生集合对象\",{\"1\":{\"793\":1,\"1198\":1}}],[\"学生数组对象\",{\"1\":{\"793\":1,\"1198\":1}}],[\"学生只能和学生比较\",{\"1\":{\"756\":1,\"1161\":1}}],[\"学生在游泳\",{\"1\":{\"738\":1,\"1143\":1}}],[\"学生类已经实现类comparable接口\",{\"1\":{\"896\":1,\"1301\":1}}],[\"学生类\",{\"1\":{\"662\":1,\"1067\":1}}],[\"学习思路\",{\"0\":{\"965\":1,\"1370\":1}}],[\"学习知识只是第一步\",{\"1\":{\"68\":1}}],[\"学习更多的知识和技能\",{\"1\":{\"18\":1}}],[\"学习不仅是理论的积累\",{\"1\":{\"5\":1}}],[\"巨大的收获\",{\"0\":{\"4\":1}}],[\"他与\",{\"1\":{\"648\":1,\"1053\":1}}],[\"他终于在这个庞大而复杂的迷宫中找到了通往完整java知识的出口\",{\"1\":{\"83\":1}}],[\"他从中得到了无尽的启发和知识\",{\"1\":{\"75\":1}}],[\"他从无知到卓越\",{\"1\":{\"73\":1}}],[\"他探索了一个充满挑战和惊喜的世界\",{\"1\":{\"73\":1}}],[\"他夺回了java大陆的控制权\",{\"1\":{\"73\":1}}],[\"他需要展现出自己在java编程上的真实实力\",{\"1\":{\"72\":1}}],[\"他需要面对终极试炼\",{\"1\":{\"15\":1}}],[\"他面临着绝地之地的最终试炼\",{\"1\":{\"72\":1}}],[\"他利用面向对象的思想设计出高效的程序结构\",{\"1\":{\"71\":1}}],[\"他解决了一系列难题\",{\"1\":{\"71\":1}}],[\"他了解到java拥有丰富的开发框架和工具\",{\"1\":{\"71\":1}}],[\"他掌握了面向对象编程\",{\"1\":{\"58\":1}}],[\"他掌握了变量\",{\"1\":{\"22\":1}}],[\"他将带着这本\",{\"1\":{\"75\":1}}],[\"他将面临更加艰巨\",{\"1\":{\"58\":1}}],[\"他将继续用它来驱动自己的学习\",{\"1\":{\"18\":1}}],[\"他决定继续深入学习java的高级特性和各种框架\",{\"1\":{\"74\":1}}],[\"他决定学习图形界面开发技术\",{\"1\":{\"57\":1}}],[\"他决定将自己获得的知识和经验传授给更多初学者\",{\"1\":{\"48\":1}}],[\"他深深地明白\",{\"1\":{\"75\":1}}],[\"他深入研究了数据库连接技术\",{\"1\":{\"56\":1}}],[\"他深入研究了输入输出流的概念和使用方法\",{\"1\":{\"53\":1}}],[\"他深知在未知的世界中隐藏着无穷的可能性和挑战\",{\"1\":{\"49\":1}}],[\"他还了解了异常的分类和常见的异常类型\",{\"1\":{\"52\":1}}],[\"他学会了如何连接\",{\"1\":{\"56\":1}}],[\"他学会了如何使用try\",{\"1\":{\"52\":1}}],[\"他学习了如何使用继承和接口实现多态\",{\"1\":{\"44\":1}}],[\"他可以设计出更加美观\",{\"1\":{\"57\":1}}],[\"他可以同时处理多个任务\",{\"1\":{\"55\":1}}],[\"他可以从文件中读取数据\",{\"1\":{\"53\":1}}],[\"他可以灵活地扩展和重用代码\",{\"1\":{\"51\":1}}],[\"他可以在java大陆上尽情探索\",{\"1\":{\"18\":1}}],[\"他发现\",{\"1\":{\"51\":1}}],[\"他发现了一道门\",{\"1\":{\"43\":1}}],[\"他经历了迷失的路途\",{\"1\":{\"49\":1}}],[\"他回忆起之前的探索\",{\"1\":{\"70\":1}}],[\"他回顾了自己的成长\",{\"1\":{\"48\":1}}],[\"他回到了最初的起点\",{\"1\":{\"27\":1}}],[\"他在新的旅程中将会面对更高级的主题\",{\"1\":{\"46\":1}}],[\"他并没有止步于此\",{\"1\":{\"46\":1}}],[\"他获得了java大陆的全部知识\",{\"1\":{\"46\":1}}],[\"他也意识到java编程世界如此广阔\",{\"1\":{\"74\":1}}],[\"他也掌握了异常处理的技巧\",{\"1\":{\"45\":1}}],[\"他也了解到了封装和继承的概念\",{\"1\":{\"42\":1}}],[\"他研读了有关继承的资料\",{\"1\":{\"43\":1}}],[\"他已经成为了一个真正的java世界的冒险家\",{\"1\":{\"47\":1}}],[\"他已经不再是一个无知的新手\",{\"1\":{\"40\":1}}],[\"他已经可以离开这个大陆\",{\"1\":{\"27\":1}}],[\"他们有一个共同的账户\",{\"1\":{\"929\":1,\"1334\":1}}],[\"他们重写的run方法不能返回结果\",{\"1\":{\"921\":1,\"1326\":1}}],[\"他们三者构建对象和api都是通用的\",{\"1\":{\"786\":1,\"1191\":1}}],[\"他们类的实例是不可变对象\",{\"1\":{\"786\":1,\"1191\":1}}],[\"他们分别代表日期\",{\"1\":{\"786\":1,\"1191\":1}}],[\"他们可以使用\",{\"1\":{\"221\":1}}],[\"他们期待着未来的探险\",{\"1\":{\"90\":1}}],[\"他们相信\",{\"1\":{\"90\":1}}],[\"他们以更加强大的姿态开始了新的探险之旅\",{\"1\":{\"89\":1}}],[\"他们不仅拥有了丰富的java知识\",{\"1\":{\"89\":1}}],[\"他们必须面对一场终极试炼\",{\"1\":{\"88\":1}}],[\"他们经历了种种挑战\",{\"1\":{\"87\":1}}],[\"他们一步一步解决难题\",{\"1\":{\"86\":1}}],[\"他们一一击败了敌人\",{\"1\":{\"85\":1}}],[\"他们一起解决了许多之前困扰主角的问题\",{\"1\":{\"61\":1}}],[\"他们一起玩耍\",{\"1\":{\"60\":1}}],[\"他们一起攻克了一个又一个的迷题\",{\"1\":{\"31\":1}}],[\"他们遭遇了强大的敌人\",{\"1\":{\"85\":1}}],[\"他们利用在前面探险过程中学到的java知识\",{\"1\":{\"85\":1}}],[\"他们发现大陆已经被邪恶势力统治\",{\"1\":{\"84\":1}}],[\"他们互相取长补短\",{\"1\":{\"80\":1}}],[\"他们成功解锁整个java大陆\",{\"1\":{\"68\":1}}],[\"他们成功地解锁了整个java大陆\",{\"1\":{\"66\":1}}],[\"他们成功地构建了一个令人惊叹的虚拟世界\",{\"1\":{\"39\":1}}],[\"他们坚信\",{\"1\":{\"67\":1}}],[\"他们决定继续保持学习的姿态\",{\"1\":{\"90\":1}}],[\"他们决定继续探索和学习\",{\"1\":{\"67\":1}}],[\"他们决定进一步提升自己的技能\",{\"1\":{\"87\":1}}],[\"他们决定进行一系列的演练和实践\",{\"1\":{\"62\":1}}],[\"他们决定联手合作\",{\"1\":{\"80\":1}}],[\"他们需要将所学的java知识和技能发挥到极致\",{\"1\":{\"65\":1}}],[\"他们的成长成为了整个大陆的典范\",{\"1\":{\"64\":1}}],[\"他们的支持成为了我坚持下去的动力\",{\"1\":{\"3\":1}}],[\"他们收获了宝贵的经验\",{\"1\":{\"64\":1}}],[\"他们都能够灵活地运用java技术解决各种问题\",{\"1\":{\"63\":1}}],[\"他们开始向更高的挑战迈进\",{\"1\":{\"63\":1}}],[\"他们开始逐渐熟悉如何巧妙地运用java的各种技能解决实际问题\",{\"1\":{\"62\":1}}],[\"他们来到异常的迷宫\",{\"1\":{\"36\":1}}],[\"他们还一起进行了一系列的实践操作\",{\"1\":{\"33\":1}}],[\"他们并没有时间休息\",{\"1\":{\"32\":1}}],[\"他说\",{\"1\":{\"29\":1}}],[\"他会继续学习\",{\"1\":{\"27\":1}}],[\"他明白\",{\"1\":{\"27\":1}}],[\"他心中明白\",{\"1\":{\"27\":1}}],[\"他借助掌握的知识和技巧\",{\"1\":{\"25\":1}}],[\"他遇到了一位对手\",{\"1\":{\"25\":1}}],[\"他遇到了各种困难和挑战\",{\"1\":{\"11\":1}}],[\"他来到了一片星海\",{\"1\":{\"24\":1}}],[\"他来到了一个神秘的洞穴\",{\"1\":{\"21\":1}}],[\"他前往java大陆的一处训练场所\",{\"1\":{\"23\":1}}],[\"他渴望掌握更高级的技能\",{\"1\":{\"23\":1}}],[\"他要完成这个任务\",{\"1\":{\"20\":1}}],[\"他是被选中的孩子\",{\"1\":{\"20\":1}}],[\"他用所学所得创造了属于自己的世界\",{\"1\":{\"17\":1}}],[\"他就能夺回java大陆的自由\",{\"1\":{\"16\":1}}],[\"他相信\",{\"1\":{\"16\":1}}],[\"他以所有学到的知识为武器\",{\"1\":{\"16\":1}}],[\"他才能夺回整个大陆\",{\"1\":{\"15\":1}}],[\"他不知道自己如何来到这里\",{\"1\":{\"19\":1}}],[\"他不知道从何处开始\",{\"1\":{\"9\":1}}],[\"他不断遭遇编程难题\",{\"1\":{\"14\":1}}],[\"他意识到自己已经探索了java大陆的每一个角落\",{\"1\":{\"75\":1}}],[\"他意识到自己还有很长的路要走\",{\"1\":{\"69\":1}}],[\"他意识到解决问题的关键在于团队协作和相互交流\",{\"1\":{\"60\":1}}],[\"他意识到\",{\"1\":{\"13\":1,\"54\":1}}],[\"他的方法参数就是一个predicate\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"他的平衡是通过红黑规则进行实现的\",{\"1\":{\"857\":1,\"1262\":1}}],[\"他的技能提升只是起点\",{\"1\":{\"58\":1}}],[\"他的技能不断提升\",{\"1\":{\"47\":1}}],[\"他的技能也在不知不觉中提升\",{\"1\":{\"13\":1}}],[\"他的传说将在java城中流传下去\",{\"1\":{\"40\":1}}],[\"他的编程能力越来越纯熟\",{\"1\":{\"13\":1}}],[\"他开始学习多线程编程技术\",{\"1\":{\"55\":1}}],[\"他开始了专注于基础技巧的学习\",{\"1\":{\"50\":1}}],[\"他开始了仔细的搜索\",{\"1\":{\"41\":1}}],[\"他开始通过学习不断强化自己的能力\",{\"1\":{\"12\":1}}],[\"他开始感受到了探索的艰辛\",{\"1\":{\"11\":1}}],[\"他必须坚持下去\",{\"1\":{\"11\":1}}],[\"他看着目录上的任务\",{\"1\":{\"10\":1}}],[\"他陷入了茫然的迷失中\",{\"1\":{\"9\":1}}],[\"他拥有着深厚的java知识\",{\"1\":{\"2\":1}}],[\"在哦\",{\"1\":{\"1441\":1}}],[\"在连接中可进行大数据的传输\",{\"1\":{\"1439\":1}}],[\"在连接池中初始化多少个连接\",{\"1\":{\"240\":1}}],[\"在指定的毫秒内连通该ip地址对象的主机\",{\"1\":{\"1433\":1}}],[\"在指定位置添加指定元素\",{\"1\":{\"747\":1,\"1152\":1}}],[\"在上例中我们有使用到list集合里的一个方法removeif\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"在lambda基础上继续简化\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"在list\",{\"1\":{\"909\":1,\"1314\":1}}],[\"在linux中$符号通常用于获取环境变量\",{\"1\":{\"485\":1}}],[\"在linux中\",{\"1\":{\"439\":1}}],[\"在linux中每一个用户都有一个自己的目录\",{\"1\":{\"428\":1}}],[\"在linux世界里\",{\"1\":{\"427\":1}}],[\"在异常处理的时候提供finally块来执行所有清除操作\",{\"1\":{\"1000\":1,\"1405\":1}}],[\"在同一时刻上\",{\"1\":{\"960\":1,\"1365\":1}}],[\"在同一时刻缓存中有大量的key同时过期或者redis宕机\",{\"1\":{\"126\":1}}],[\"在此集合中的指定位置插入指定元素\",{\"1\":{\"861\":1,\"1266\":1}}],[\"在此处使用变量名就是该元素\",{\"1\":{\"845\":1,\"1250\":1}}],[\"在此结构中的最上层是根目录\",{\"1\":{\"427\":1}}],[\"在接着看上面👆🏻的方法\",{\"1\":{\"831\":1,\"1236\":1}}],[\"在接口中新增一个接口的时候\",{\"1\":{\"721\":1,\"1126\":1}}],[\"在接口中定义的默认就是静态常量\",{\"1\":{\"714\":1,\"721\":1,\"1119\":1,\"1126\":1}}],[\"在世界上有很多单身狗\",{\"1\":{\"812\":1,\"1217\":1}}],[\"在精度计算或值比较的场景中可能会导致业务功能逻辑异常\",{\"1\":{\"773\":1,\"1178\":1}}],[\"在开发中直接输出对象\",{\"1\":{\"755\":1,\"1160\":1}}],[\"在判断equals\",{\"1\":{\"888\":1,\"1293\":1}}],[\"在判断如果要删除的时候\",{\"1\":{\"751\":1,\"1156\":1}}],[\"在判断库存充足的情况下\",{\"1\":{\"176\":1}}],[\"在运行时\",{\"1\":{\"798\":3,\"1203\":3}}],[\"在运行时常量池中就只有一个对象\",{\"1\":{\"743\":1,\"1148\":1}}],[\"在运行时提高一些性能\",{\"1\":{\"704\":1,\"1109\":1}}],[\"在运行的时候会出现的异常\",{\"1\":{\"632\":1,\"1037\":1}}],[\"在子类中可以对父类中的方法进行重写\",{\"1\":{\"697\":1,\"1102\":1}}],[\"在子类方法中访问成员\",{\"0\":{\"696\":1,\"1101\":1}}],[\"在堆内存中会产生一个对象\",{\"1\":{\"694\":1,\"1099\":1}}],[\"在堆内存中开辟一块内存用于存储new\",{\"1\":{\"663\":1,\"1068\":1}}],[\"在栈内存中加载执行main方法\",{\"1\":{\"676\":1,\"1081\":1}}],[\"在把容量大的类型转换为容量小的类型时必须使用强制类型转换\",{\"1\":{\"650\":1,\"1055\":1}}],[\"在编译成class文件进入运行阶段的时候\",{\"1\":{\"814\":1,\"1219\":1}}],[\"在编译的时候会出现的异常\",{\"1\":{\"632\":1,\"1037\":1}}],[\"在编辑的数据中\",{\"1\":{\"437\":1}}],[\"在该列表末尾插入指定的元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"在该列表开头插入指定的元素\",{\"1\":{\"865\":1,\"1270\":1}}],[\"在该事务中的所有数据库操作都是由事务协调员管理的\",{\"1\":{\"616\":1}}],[\"在该索引中已经全部能够找到\",{\"1\":{\"147\":1}}],[\"在容器中建立bean与bean之间的依赖关系的整个过程\",{\"1\":{\"583\":1}}],[\"在里面加载spring的配置\",{\"1\":{\"557\":1}}],[\"在中间表中添加外键\",{\"1\":{\"529\":1}}],[\"在多态的形势下右边的对象可以实现解耦合\",{\"1\":{\"726\":1,\"1131\":1}}],[\"在多的一方建立外键关联一的一方主键\",{\"1\":{\"529\":1}}],[\"在多个事务并行操作某一行记录\",{\"1\":{\"154\":1}}],[\"在任意一方建立外键\",{\"1\":{\"529\":1}}],[\"在任意行\",{\"1\":{\"389\":1}}],[\"在environment中配置会覆盖掉application\",{\"1\":{\"494\":1}}],[\"在entrylist中的线程去竞争锁的持有权\",{\"1\":{\"210\":1}}],[\"在app文件夹下编写dockerfile构建服务镜像\",{\"1\":{\"494\":1}}],[\"在aqs内部还有一个属性status\",{\"1\":{\"213\":1}}],[\"在~下创建一个文件夹\",{\"1\":{\"486\":1}}],[\"在系统中创建软连接\",{\"1\":{\"475\":1}}],[\"在目前所在行的第一个非空格符处开始输入\",{\"1\":{\"436\":1}}],[\"在第一个位置\",{\"1\":{\"844\":1,\"1249\":1}}],[\"在第\",{\"1\":{\"435\":1}}],[\"在底层创建一个默认长度为10的数组\",{\"1\":{\"863\":1,\"1268\":1}}],[\"在底层是它是进行了数组的拷贝\",{\"1\":{\"186\":1}}],[\"在底线命令模式中\",{\"1\":{\"434\":1}}],[\"在命令模式下按下\",{\"1\":{\"434\":1}}],[\"在命令模式下按下i就进入了输入模式\",{\"1\":{\"433\":1}}],[\"在文本中移动光标\",{\"1\":{\"433\":1}}],[\"在文件的最后一行添加\",{\"1\":{\"462\":1}}],[\"在文件的开头加入如下环境变量设置\",{\"1\":{\"386\":2}}],[\"在文件开头加入\",{\"1\":{\"386\":1}}],[\"在文件内填入1即可\",{\"1\":{\"375\":1}}],[\"在输入模式中\",{\"1\":{\"433\":1}}],[\"在注销后使用\",{\"1\":{\"422\":1}}],[\"在线注册即可得到一个专属于自己的grafana\",{\"1\":{\"408\":1}}],[\"在线调试\",{\"1\":{\"95\":1}}],[\"在首次打开的时候\",{\"1\":{\"405\":1}}],[\"在分布式情况下\",{\"1\":{\"389\":1}}],[\"在分布式场景下\",{\"1\":{\"116\":1}}],[\"在126行配置\",{\"1\":{\"389\":1}}],[\"在28行配置java\",{\"1\":{\"389\":1}}],[\"在hadoop运行时有用\",{\"1\":{\"386\":1}}],[\"在hashentry存储的数组中存储的元素\",{\"1\":{\"217\":1}}],[\"在启动一个模拟的数据消费者\",{\"1\":{\"378\":1}}],[\"在node3执行\",{\"1\":{\"386\":1}}],[\"在node3操作\",{\"1\":{\"377\":1}}],[\"在node3上操作\",{\"1\":{\"375\":1}}],[\"在node1操作\",{\"1\":{\"377\":4}}],[\"在node1\",{\"1\":{\"375\":2,\"386\":1,\"387\":1}}],[\"在node1执行即可\",{\"1\":{\"386\":2}}],[\"在node1执行\",{\"1\":{\"368\":1,\"378\":1,\"386\":3}}],[\"在node2执行\",{\"1\":{\"386\":1}}],[\"在node2\",{\"1\":{\"386\":1}}],[\"在node2操作\",{\"1\":{\"377\":1}}],[\"在node2上操作\",{\"1\":{\"375\":1}}],[\"在node2和node3上操作\",{\"1\":{\"375\":1}}],[\"在不同的linux服务器之间\",{\"1\":{\"373\":1}}],[\"在完成上述设置后\",{\"1\":{\"372\":1}}],[\"在完成谜题后\",{\"1\":{\"46\":1}}],[\"在每一台服务器执行\",{\"1\":{\"377\":1}}],[\"在每一台机器都执行\",{\"1\":{\"369\":2,\"371\":2}}],[\"在每个segment中都可以挂一个hashentry数组\",{\"1\":{\"217\":1}}],[\"在3台linux的\",{\"1\":{\"366\":1}}],[\"在windows系统中修改hosts文件\",{\"1\":{\"366\":1}}],[\"在当前\",{\"1\":{\"371\":1}}],[\"在当前小节\",{\"1\":{\"363\":1}}],[\"在当前进程下的所有线程可以共享内存空间\",{\"1\":{\"197\":1}}],[\"在前面\",{\"1\":{\"363\":1}}],[\"在前面的章节中\",{\"1\":{\"59\":1}}],[\"在企业内同样是一款应用非常广泛的搜索引擎服务\",{\"1\":{\"361\":1}}],[\"在弹出的页面中输入oracle的账户密码即可下载\",{\"1\":{\"353\":1}}],[\"在页面下方找到\",{\"1\":{\"353\":1}}],[\"在服务器正常关闭后\",{\"1\":{\"335\":1}}],[\"在登入的时候要使用重定向改变url地址为主页面\",{\"1\":{\"310\":1}}],[\"在docker上使用nginx部署前端\",{\"0\":{\"495\":1}}],[\"在doget中写一个先获取请求方式\",{\"1\":{\"308\":1}}],[\"在destroy\",{\"1\":{\"297\":1}}],[\"在内存中只有一份\",{\"1\":{\"695\":1,\"1100\":1}}],[\"在内存释放或服务关闭时销毁servlet\",{\"1\":{\"298\":1}}],[\"在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据\",{\"1\":{\"154\":1}}],[\"在内部会形成一个版本链\",{\"1\":{\"154\":1}}],[\"在pom\",{\"1\":{\"258\":1}}],[\"在idea中把maven主路径和设置文件以及本地仓库更改为我们下载的maven文件\",{\"1\":{\"255\":1}}],[\"在获取preparedstatement对象时\",{\"1\":{\"234\":1}}],[\"在垃圾回收器线程扫描它\",{\"1\":{\"222\":1}}],[\"在垃圾回收的时候\",{\"1\":{\"222\":1}}],[\"在调用\",{\"1\":{\"222\":1}}],[\"在调用该方法之后内部返回了一个arraylist对象\",{\"1\":{\"185\":1}}],[\"在设置核心线程数之前\",{\"1\":{\"220\":1}}],[\"在设置对象属性\",{\"1\":{\"164\":1}}],[\"在jsp页面上引入jstl标签库\",{\"1\":{\"323\":1}}],[\"在jsp中获取数据\",{\"1\":{\"321\":1}}],[\"在jsp中的\",{\"1\":{\"319\":1}}],[\"在jdk1\",{\"1\":{\"217\":1}}],[\"在java\",{\"1\":{\"821\":1,\"1020\":1,\"1226\":1,\"1470\":1}}],[\"在java大陆\",{\"1\":{\"51\":1}}],[\"在java城的街道上\",{\"1\":{\"28\":1}}],[\"在进行操作数据的之前\",{\"1\":{\"217\":1}}],[\"在进一步判断key是否相同\",{\"1\":{\"188\":1}}],[\"在初始化concurrenthashmap\",{\"1\":{\"217\":1}}],[\"在竞争激烈时\",{\"1\":{\"215\":1}}],[\"在没有竞争时\",{\"1\":{\"215\":1}}],[\"在main中\",{\"1\":{\"918\":1,\"920\":1,\"1323\":1,\"1325\":1}}],[\"在mapper接口中定义方法\",{\"1\":{\"266\":1}}],[\"在mysql中操作\",{\"1\":{\"402\":1}}],[\"在mysql中给每个表都设置了隐藏字段\",{\"1\":{\"154\":1}}],[\"在mysql控制台内执行\",{\"1\":{\"347\":1}}],[\"在monitor内部有三个属性\",{\"1\":{\"210\":1}}],[\"在t3线程中调用t2\",{\"1\":{\"205\":1}}],[\"在可执行状态的过程中\",{\"1\":{\"204\":1}}],[\"在红黑树中执行插入操\",{\"1\":{\"190\":1}}],[\"在添加元素或初始化的时候需要调用resize方法进行扩容\",{\"1\":{\"191\":1}}],[\"在添加消费者的时候要注意必须保证主题中的队列数量大于等于消费者否则就会出现某个消费者没有对应的队列\",{\"1\":{\"179\":1}}],[\"在添加事务注解的方法中自己捕获异常并且在捕获的cache中没有抛出异常则会导致\",{\"1\":{\"162\":1}}],[\"在消费者端接收的时候直接保存到数据库或者缓存的去重表中\",{\"1\":{\"178\":1}}],[\"在生产者发送消息的时候\",{\"1\":{\"178\":1}}],[\"在你的项目中有使用到吗\",{\"0\":{\"176\":1}}],[\"在你的项⽬中是怎么使⽤redis的\",{\"0\":{\"123\":1}}],[\"在servlet对象被创建时执行\",{\"1\":{\"298\":1}}],[\"在servlet实例化之后\",{\"1\":{\"297\":1}}],[\"在springboot2\",{\"1\":{\"627\":1}}],[\"在springboot中应该指定\",{\"1\":{\"177\":1}}],[\"在spring\",{\"1\":{\"168\":1}}],[\"在sql查询语句前面加上explain关键字可以对该查询sql进行分析\",{\"1\":{\"142\":1}}],[\"在方法申明上的\",{\"1\":{\"638\":1,\"1043\":1}}],[\"在方法内部直接创建一个异常对象\",{\"1\":{\"638\":1,\"1043\":1}}],[\"在方法内部使用\",{\"1\":{\"187\":1}}],[\"在方法上使用throws抛出异常\",{\"1\":{\"162\":1}}],[\"在方法a中调用方法b如果可以成功加锁\",{\"1\":{\"133\":1}}],[\"在cache中再次抛出异常throw\",{\"1\":{\"162\":1}}],[\"在执行方法完毕之后提交事务\",{\"1\":{\"161\":1}}],[\"在类获取对象的时候\",{\"1\":{\"685\":1,\"1090\":1}}],[\"在类的加载的时候\",{\"1\":{\"682\":1,\"1087\":1}}],[\"在类内会默认存在一个无参构造器\",{\"1\":{\"660\":1,\"1065\":1}}],[\"在类路径下的db\",{\"1\":{\"494\":1}}],[\"在类上是用\",{\"1\":{\"295\":1}}],[\"在类或者是方法上添加\",{\"1\":{\"161\":1}}],[\"在类中定义一个\",{\"1\":{\"158\":1}}],[\"在事务执⾏期间\",{\"1\":{\"151\":1}}],[\"在查询的时候没有对字符串的status加上单引号\",{\"1\":{\"150\":1}}],[\"在查询时候\",{\"1\":{\"148\":1}}],[\"在数据量比较大的时候\",{\"1\":{\"148\":1}}],[\"在数据之外\",{\"1\":{\"143\":1}}],[\"在redis中存储的时候使用hash数据类型\",{\"1\":{\"133\":1}}],[\"在redis中提供了两种持久化方案\",{\"1\":{\"128\":1}}],[\"在redis客户端中使用save可以在主进程中执行备份操作\",{\"1\":{\"128\":1}}],[\"在修改数据之后\",{\"1\":{\"127\":1}}],[\"在修改之前先删除一次缓存\",{\"1\":{\"127\":1}}],[\"在我们进行crud\",{\"1\":{\"744\":1,\"1149\":1}}],[\"在我曾经的一个项目中有主要使用到消息队列的异步的特性\",{\"1\":{\"176\":1}}],[\"在我别的项目中\",{\"1\":{\"127\":1}}],[\"在我的项目中\",{\"1\":{\"124\":1,\"127\":1}}],[\"在我的项⽬中使⽤\",{\"1\":{\"123\":1}}],[\"在我的个人网站上已经发布了80多篇的个人博客\",{\"1\":{\"121\":1}}],[\"在写的时候其他线程不允许读写数据\",{\"1\":{\"127\":1}}],[\"在写操作的前后加上排它锁\",{\"1\":{\"127\":1}}],[\"在读操作的前后加上共享锁\",{\"1\":{\"127\":1}}],[\"在请求来到的时候\",{\"1\":{\"125\":1}}],[\"在请求数据库之前使用redis的setnx设置一个业务前缀\",{\"1\":{\"125\":1}}],[\"在请求层面的流量染色中\",{\"1\":{\"108\":1}}],[\"在一行字当中\",{\"1\":{\"435\":1}}],[\"在一次会话中可以包含多次请求和响应\",{\"1\":{\"327\":1}}],[\"在一开始全都是0\",{\"1\":{\"124\":1}}],[\"在一个空旷的大厅\",{\"1\":{\"82\":1}}],[\"在大数据领域广泛应用\",{\"1\":{\"391\":1,\"394\":1}}],[\"在大学期间我自己独立完成了一些项目\",{\"1\":{\"121\":1}}],[\"在大学期间利用课外时间自学java语言\",{\"1\":{\"121\":1}}],[\"在大会后\",{\"1\":{\"62\":1}}],[\"在用户匹配功能中\",{\"1\":{\"118\":1}}],[\"在时机到达时开启独立的线程来执行任务\",{\"1\":{\"116\":1}}],[\"在解决首页加载过慢的问题中\",{\"0\":{\"116\":1}}],[\"在解谜过程中\",{\"1\":{\"31\":1}}],[\"在实际应用中\",{\"0\":{\"111\":1}}],[\"在实践中\",{\"1\":{\"5\":1}}],[\"在正式运用\",{\"1\":{\"107\":1}}],[\"在项目结构中切换\",{\"1\":{\"721\":1,\"1126\":1}}],[\"在项目运行初始化的时候会自动执行该sql文件具体路径\",{\"1\":{\"494\":1}}],[\"在项目中暂时没有使用到\",{\"1\":{\"171\":1}}],[\"在项目中我使用分布式锁解决缓存击穿问题\",{\"1\":{\"125\":1}}],[\"在项目中\",{\"0\":{\"119\":1}}],[\"在项目中的作用\",{\"0\":{\"96\":1}}],[\"在项目的\",{\"1\":{\"104\":1}}],[\"在本地用\",{\"1\":{\"103\":1}}],[\"在本项目中\",{\"1\":{\"99\":1,\"102\":1,\"108\":1,\"115\":1}}],[\"在\",{\"1\":{\"101\":1,\"103\":2,\"104\":1,\"107\":1,\"116\":1,\"139\":1,\"158\":1,\"197\":1,\"258\":1,\"335\":1,\"347\":1,\"350\":1,\"435\":1,\"436\":1,\"437\":2,\"798\":1,\"1203\":1}}],[\"在自己的项目中引入客户端\",{\"1\":{\"97\":1}}],[\"在这些配置类中所定义的bean会根据条件注解所指定的条件来决定是否需要将其导入到spring容器中\",{\"1\":{\"168\":1}}],[\"在这里\",{\"1\":{\"88\":1}}],[\"在这个去重表中key是唯一索引\",{\"1\":{\"178\":1}}],[\"在这个广袤的java世界里\",{\"1\":{\"75\":1}}],[\"在这个广阔的java世界中\",{\"1\":{\"46\":1}}],[\"在这个探险的二次元世界里\",{\"1\":{\"18\":1}}],[\"在这个大陆上\",{\"1\":{\"8\":1}}],[\"在夺回大陆的过程中\",{\"1\":{\"87\":1}}],[\"在终极试炼的最后一关\",{\"1\":{\"82\":1}}],[\"在终极试炼中\",{\"1\":{\"66\":1}}],[\"在迷宫的深处\",{\"1\":{\"81\":1}}],[\"在迷宫中\",{\"1\":{\"78\":1,\"80\":1}}],[\"在迷失的路途中\",{\"1\":{\"10\":1,\"12\":1}}],[\"在探索的过程中\",{\"1\":{\"56\":1}}],[\"在星光大陆的获得与新挑战环节\",{\"1\":{\"49\":1}}],[\"在知识的宝藏中\",{\"1\":{\"49\":1}}],[\"在古堡的一间房间里\",{\"1\":{\"42\":1}}],[\"在未来的旅途中\",{\"1\":{\"27\":1}}],[\"在洞穴中\",{\"1\":{\"22\":1}}],[\"在学习的过程中\",{\"1\":{\"3\":1}}],[\"在神秘的大陆上\",{\"1\":{\"2\":1}}],[\"我已经与你对接\",{\"1\":{\"1458\":1}}],[\"我打开\",{\"1\":{\"819\":1,\"1224\":1}}],[\"我在游泳\",{\"1\":{\"738\":1,\"1143\":1}}],[\"我在学习的过程中遇到了许多困难\",{\"1\":{\"3\":1}}],[\"我目前光标在第\",{\"1\":{\"435\":1}}],[\"我要连续删除\",{\"1\":{\"435\":1}}],[\"我采用的是给缓存的店铺设置一个短一点过期时间\",{\"1\":{\"127\":1}}],[\"我了解的还有另外一种方式\",{\"1\":{\"127\":1}}],[\"我了解的有两种解决方案\",{\"1\":{\"125\":1}}],[\"我了解了java大陆的基本概念\",{\"1\":{\"3\":1}}],[\"我们的\",{\"1\":{\"1004\":1,\"1008\":1,\"1409\":1,\"1413\":1}}],[\"我们的想法\",{\"1\":{\"308\":1}}],[\"我们怎么区分这些线程\",{\"1\":{\"924\":1,\"1329\":1}}],[\"我们之前发现\",{\"1\":{\"866\":1,\"1271\":1}}],[\"我们想调用linkedlist的独有方法\",{\"1\":{\"865\":1,\"1270\":1}}],[\"我们知道位运算的速度远远快于整除运算\",{\"1\":{\"831\":1,\"1236\":1}}],[\"我们认为在lambda表达式中\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"我们认为s是list中的每一个元素\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"我们认为是什么类就是什么类\",{\"1\":{\"738\":2,\"1143\":2}}],[\"我们一般不会去修改日历中的时间\",{\"1\":{\"784\":1,\"1189\":1}}],[\"我们一起交流学习心得\",{\"1\":{\"3\":1}}],[\"我们最终还是要用double类型去接收结果\",{\"1\":{\"774\":1,\"1179\":1}}],[\"我们完全可以使用\",{\"1\":{\"756\":1,\"1161\":1}}],[\"我们更多希望的是看到对象的内容是什么\",{\"1\":{\"755\":1,\"1160\":1}}],[\"我们让它删除后i\",{\"1\":{\"751\":1,\"1156\":1}}],[\"我们让获取锁成功的去进行缓存重构\",{\"1\":{\"125\":1}}],[\"我们还可以直接把匿名内部类直接作为方法的入参传送给方法\",{\"1\":{\"738\":1,\"1143\":1}}],[\"我们new出来的相当于animal的子类\",{\"1\":{\"738\":2,\"1143\":2}}],[\"我们调用下面的test方法对animal进行类型的判断然后调用独有的方法\",{\"1\":{\"732\":1,\"1137\":1}}],[\"我们不强转成子类类型就只能调用父类中的通用方法\",{\"1\":{\"732\":1,\"1137\":1}}],[\"我们不需要管他\",{\"1\":{\"129\":1}}],[\"我们以后只需要把cat修改为dog\",{\"1\":{\"732\":1,\"1137\":1}}],[\"我们才可以让\",{\"0\":{\"731\":1,\"1136\":1}}],[\"我们才会创建索引\",{\"1\":{\"149\":1}}],[\"我们都可以执行cd\",{\"1\":{\"484\":1}}],[\"我们就得把a对象的animal类型强转成dog类型\",{\"0\":{\"731\":1,\"1136\":1}}],[\"我们就需要对\",{\"1\":{\"730\":1,\"1135\":1}}],[\"我们就可以把猫换成狗对象\",{\"1\":{\"726\":1,\"1131\":1}}],[\"我们就可以使用反引号包裹pwd则会被当做命令执行而不是普通的文字\",{\"1\":{\"458\":1}}],[\"我们就对一些key进行检查\",{\"1\":{\"129\":1}}],[\"我们上面也提过了\",{\"1\":{\"436\":1}}],[\"我们课程使用mysql\",{\"1\":{\"414\":1}}],[\"我们课程选择方式1\",{\"1\":{\"408\":1}}],[\"我们部署grafana可以使用yum来进行部署\",{\"1\":{\"409\":1}}],[\"我们先安装zabbixserver以及在server本机安装agent\",{\"1\":{\"399\":1}}],[\"我们先缓存redis中该id为key缓存一个空字符串\",{\"1\":{\"124\":1}}],[\"我们补充一个命令\",{\"1\":{\"373\":1}}],[\"我们通过finalshell远程连接到linux\",{\"1\":{\"368\":1}}],[\"我们将基于前面构建的hadoop集群\",{\"1\":{\"391\":1,\"394\":1}}],[\"我们将会频繁的在多台服务器之间相互传输数据\",{\"1\":{\"373\":1}}],[\"我们将要学习大数据相关的软件部署\",{\"1\":{\"363\":1}}],[\"我们将来都是开发b\",{\"1\":{\"299\":1}}],[\"我们所学习安装的软件\",{\"1\":{\"363\":1}}],[\"我们手动添加了nginx的yum仓库\",{\"1\":{\"356\":1}}],[\"我们在使用xshell等工具执行linux脚本时\",{\"1\":{\"422\":1}}],[\"我们在servlet中逻辑处理\",{\"1\":{\"321\":1}}],[\"我们在mysql中开启了慢日志查询\",{\"1\":{\"141\":1}}],[\"我们称之为\",{\"1\":{\"273\":1}}],[\"我们原来的sql为\",{\"1\":{\"272\":1}}],[\"我们发现他实现的方式就是遍历集合并对每个集合元素调用predicate\",{\"1\":{\"1028\":1,\"1478\":1}}],[\"我们发现如果入参和后面的方法参数一样的话\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"我们发现最后结果还是有80分以下的元素\",{\"1\":{\"751\":1,\"1156\":1}}],[\"我们发现数据库列名和实体类的名称有的不一样\",{\"1\":{\"270\":1}}],[\"我们发现用户对sql的语句进行了更改\",{\"1\":{\"233\":1}}],[\"我们发现我们的sql变成了\",{\"1\":{\"233\":1}}],[\"我们需要强转为学生\",{\"1\":{\"756\":1,\"1161\":1}}],[\"我们需要引入flyway工具\",{\"1\":{\"494\":1}}],[\"我们需要为普通用户配置sudo认证\",{\"1\":{\"462\":1}}],[\"我们需要完成集群化环境的前置准备\",{\"1\":{\"363\":1}}],[\"我们需要分别的去处理\",{\"1\":{\"300\":1}}],[\"我们需要保证t1\",{\"1\":{\"205\":1}}],[\"我们需要先了解数据在堆内存中的数据结构\",{\"1\":{\"182\":1}}],[\"我们需要手动给热点key的数据中添加一个过期时间\",{\"1\":{\"125\":1}}],[\"我们直接返回通过就ok了\",{\"1\":{\"178\":1}}],[\"我们这里以最常用的两种作用域\",{\"1\":{\"158\":1}}],[\"我们设置的值是2秒钟\",{\"1\":{\"141\":1}}],[\"我们可以把lambda表达式理解为是一段可传递的代码\",{\"1\":{\"1019\":1,\"1469\":1}}],[\"我们可以把它看成一个对象容器\",{\"1\":{\"761\":1,\"1166\":1}}],[\"我们可以用这个\",{\"1\":{\"790\":1,\"1195\":1}}],[\"我们可以直接使用\",{\"1\":{\"742\":1,\"1147\":1}}],[\"我们可以使用方法引用\",{\"1\":{\"823\":1,\"1022\":1,\"1228\":1,\"1472\":1}}],[\"我们可以使用chmod命令\",{\"1\":{\"465\":1}}],[\"我们可以使用vmware提供的克隆功能\",{\"1\":{\"365\":1}}],[\"我们可以通过cd命令更改当前的工作目录\",{\"1\":{\"442\":1}}],[\"我们可以通过key和key\",{\"1\":{\"142\":1}}],[\"我们可以将外部的存储挂载在\",{\"1\":{\"428\":1}}],[\"我们可以简单的在集群内部关闭防火墙\",{\"1\":{\"371\":1}}],[\"我们可以简单起见\",{\"1\":{\"369\":1}}],[\"我们可以给root设置简单密码\",{\"1\":{\"350\":1}}],[\"我们可以得到乱码的字符编码\",{\"1\":{\"309\":2}}],[\"我们可以对生产者进行限流操作\",{\"1\":{\"179\":1}}],[\"我们可以搭建redis集群\",{\"1\":{\"135\":1}}],[\"我们可以执行bgrewriteaof命令来让aof执行重写来减少aof文件的占用磁盘大小\",{\"1\":{\"128\":1}}],[\"我们只需要一个就可以解决问题了\",{\"1\":{\"684\":1,\"1089\":1}}],[\"我们只需要关闭selinux功能\",{\"1\":{\"371\":1}}],[\"我们只需要等待缓存数据过期然后进行缓存重构即可更新缓存数据\",{\"1\":{\"127\":1}}],[\"我们只会在使用key的时候进行检查该key是否过期了\",{\"1\":{\"129\":1}}],[\"我是tcp的客户端\",{\"1\":{\"1458\":1}}],[\"我是一颗快乐的韭菜\",{\"1\":{\"1449\":1}}],[\"我是啥就打印啥\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"我是打印流输出的\",{\"1\":{\"1011\":1,\"1416\":1}}],[\"我是中国人\",{\"1\":{\"997\":1,\"1402\":1}}],[\"我是使用缓存空值的方法来解决缓存穿透的问题\",{\"1\":{\"124\":1}}],[\"我是根据任务的类型以及消耗资源的情况来调整线程池的参数\",{\"1\":{\"112\":1}}],[\"我叫xx\",{\"1\":{\"121\":1}}],[\"我通过编写\",{\"1\":{\"119\":1}}],[\"我通过给不同的缓存设置不同的随机过期时间\",{\"1\":{\"115\":1}}],[\"我的项目中使用aop来记录请求日志\",{\"1\":{\"160\":1}}],[\"我的项目中使用的是redisson第三方依赖中的锁\",{\"1\":{\"132\":1}}],[\"我的项目中\",{\"1\":{\"114\":1}}],[\"我会将核心线程数设置得更大\",{\"1\":{\"112\":1}}],[\"我会将核心线程数设置为和\",{\"1\":{\"112\":1}}],[\"我分别定义不同的线程池\",{\"1\":{\"112\":1}}],[\"我使用到了redis缓存优惠券的库存\",{\"1\":{\"176\":1}}],[\"我使用编辑距离算法来计算用户输入的搜索关键词与已有用户信息的匹配程度\",{\"1\":{\"118\":1}}],[\"我使用\",{\"1\":{\"110\":1,\"112\":1,\"114\":1,\"116\":1}}],[\"我先阅读了\",{\"1\":{\"107\":1}}],[\"我不需要在开发完项目后手动编写一套接口文档\",{\"1\":{\"100\":1,\"120\":1}}],[\"我不断感受到自己在技能提升的过程中的成长和进步\",{\"1\":{\"5\":1}}],[\"我希望无论是初学者还是资深开发者\",{\"1\":{\"8\":1}}],[\"我也渴望将我的经验和知识分享给其他人\",{\"1\":{\"7\":1}}],[\"我现在能够自信地面对java大陆的任何挑战\",{\"1\":{\"7\":1}}],[\"我从中学到了无数的知识和技能\",{\"1\":{\"7\":1}}],[\"我回顾了我的探险旅程\",{\"1\":{\"7\":1}}],[\"我成为了java大陆的一位专家\",{\"1\":{\"7\":1}}],[\"我重新获得了对大陆的掌控权\",{\"1\":{\"7\":1}}],[\"我终于找到了一种独特的策略来战胜这个强大的对手\",{\"1\":{\"6\":1}}],[\"我终于来到了大陆的最后一关\",{\"1\":{\"6\":1}}],[\"我花费了大量的时间和精力来攻克终极boss\",{\"1\":{\"6\":1}}],[\"我学会了巧妙地运用java的各种特性和语法\",{\"1\":{\"5\":1}}],[\"我学会了调试和优化程序\",{\"1\":{\"5\":1}}],[\"我开始享受着编写代码的乐趣\",{\"1\":{\"5\":1}}],[\"我开始动手实践\",{\"1\":{\"5\":1}}],[\"我开始发现知识的宝藏隐藏在大陆的每一个角落\",{\"1\":{\"4\":1}}],[\"我能够自如地应对各种挑战和问题\",{\"1\":{\"4\":1}}],[\"我对java大陆的了解变得更加深入\",{\"1\":{\"4\":1}}],[\"我掌握了java大陆的核心概念和高级特性\",{\"1\":{\"4\":1}}],[\"我感觉整个大陆都在向我展开\",{\"1\":{\"4\":1}}],[\"我结识了一些志同道合的伙伴\",{\"1\":{\"3\":1}}],[\"我投入了全身心的学习\",{\"1\":{\"3\":1}}],[\"我将每个任务定义为独立的\",{\"1\":{\"116\":1}}],[\"我将面对各种知识和技能的挑战\",{\"1\":{\"2\":1}}],[\"我将踏上通向java大陆的旅程\",{\"1\":{\"1\":1}}],[\"我意识到在这个探险的旅程中\",{\"1\":{\"2\":1}}],[\"我第一次真正感受到了学习的魅力和挑战的刺激\",{\"1\":{\"2\":1}}],[\"我进入了一间宽敞的房间\",{\"1\":{\"2\":1}}],[\"我需要完成一项任务来获得学习的资格\",{\"1\":{\"2\":1}}],[\"我随着地图上指示的指引\",{\"1\":{\"2\":1}}],[\"我知道这是一个充满着创意和热情的地方\",{\"1\":{\"1\":1}}],[\"我跨出家门\",{\"1\":{\"1\":1}}],[\"我怀着兴奋与好奇\",{\"1\":{\"1\":1}}],[\"照亮了我的面庞\",{\"1\":{\"1\":1}}],[\"早晨的阳光透过窗户洒进了房间\",{\"1\":{\"1\":1}}],[\"遭遇挑战\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
